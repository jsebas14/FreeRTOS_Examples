
004Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007550  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08007750  08007750  00017750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078e8  080078e8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080078e8  080078e8  000178e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078f0  080078f0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078f0  080078f0  000178f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078f4  080078f4  000178f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080078f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014494  2000001c  08007914  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144b0  08007914  000244b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017766  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003367  00000000  00000000  000377b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  0003ab18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  0003bfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a9a  00000000  00000000  0003d2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017460  00000000  00000000  00066d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104d99  00000000  00000000  0007e1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00182f73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000563c  00000000  00000000  00182fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000001c 	.word	0x2000001c
 800021c:	00000000 	.word	0x00000000
 8000220:	08007738 	.word	0x08007738

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000020 	.word	0x20000020
 800023c:	08007738 	.word	0x08007738

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	20012edc 	.word	0x20012edc

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b974 	b.w	80005d4 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	4604      	mov	r4, r0
 800030c:	468e      	mov	lr, r1
 800030e:	2b00      	cmp	r3, #0
 8000310:	d14d      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000312:	428a      	cmp	r2, r1
 8000314:	4694      	mov	ip, r2
 8000316:	d969      	bls.n	80003ec <__udivmoddi4+0xe8>
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	b152      	cbz	r2, 8000334 <__udivmoddi4+0x30>
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	f1c2 0120 	rsb	r1, r2, #32
 8000326:	fa20 f101 	lsr.w	r1, r0, r1
 800032a:	fa0c fc02 	lsl.w	ip, ip, r2
 800032e:	ea41 0e03 	orr.w	lr, r1, r3
 8000332:	4094      	lsls	r4, r2
 8000334:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000338:	0c21      	lsrs	r1, r4, #16
 800033a:	fbbe f6f8 	udiv	r6, lr, r8
 800033e:	fa1f f78c 	uxth.w	r7, ip
 8000342:	fb08 e316 	mls	r3, r8, r6, lr
 8000346:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034a:	fb06 f107 	mul.w	r1, r6, r7
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 811f 	bcs.w	800059c <__udivmoddi4+0x298>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 811c 	bls.w	800059c <__udivmoddi4+0x298>
 8000364:	3e02      	subs	r6, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 f707 	mul.w	r7, r0, r7
 800037c:	42a7      	cmp	r7, r4
 800037e:	d90a      	bls.n	8000396 <__udivmoddi4+0x92>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 33ff 	add.w	r3, r0, #4294967295
 8000388:	f080 810a 	bcs.w	80005a0 <__udivmoddi4+0x29c>
 800038c:	42a7      	cmp	r7, r4
 800038e:	f240 8107 	bls.w	80005a0 <__udivmoddi4+0x29c>
 8000392:	4464      	add	r4, ip
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039a:	1be4      	subs	r4, r4, r7
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa4>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xc2>
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	f000 80ef 	beq.w	8000596 <__udivmoddi4+0x292>
 80003b8:	2600      	movs	r6, #0
 80003ba:	e9c5 0100 	strd	r0, r1, [r5]
 80003be:	4630      	mov	r0, r6
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f683 	clz	r6, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d14a      	bne.n	8000464 <__udivmoddi4+0x160>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd4>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80f9 	bhi.w	80005ca <__udivmoddi4+0x2c6>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	469e      	mov	lr, r3
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa4>
 80003e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa4>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xec>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 8092 	bne.w	800051e <__udivmoddi4+0x21a>
 80003fa:	eba1 010c 	sub.w	r1, r1, ip
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	2601      	movs	r6, #1
 8000408:	0c20      	lsrs	r0, r4, #16
 800040a:	fbb1 f3f7 	udiv	r3, r1, r7
 800040e:	fb07 1113 	mls	r1, r7, r3, r1
 8000412:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000416:	fb0e f003 	mul.w	r0, lr, r3
 800041a:	4288      	cmp	r0, r1
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x12c>
 800041e:	eb1c 0101 	adds.w	r1, ip, r1
 8000422:	f103 38ff 	add.w	r8, r3, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x12a>
 8000428:	4288      	cmp	r0, r1
 800042a:	f200 80cb 	bhi.w	80005c4 <__udivmoddi4+0x2c0>
 800042e:	4643      	mov	r3, r8
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1110 	mls	r1, r7, r0, r1
 800043c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000440:	fb0e fe00 	mul.w	lr, lr, r0
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x156>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x154>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f200 80bb 	bhi.w	80005ce <__udivmoddi4+0x2ca>
 8000458:	4608      	mov	r0, r1
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000462:	e79c      	b.n	800039e <__udivmoddi4+0x9a>
 8000464:	f1c6 0720 	rsb	r7, r6, #32
 8000468:	40b3      	lsls	r3, r6
 800046a:	fa22 fc07 	lsr.w	ip, r2, r7
 800046e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000472:	fa20 f407 	lsr.w	r4, r0, r7
 8000476:	fa01 f306 	lsl.w	r3, r1, r6
 800047a:	431c      	orrs	r4, r3
 800047c:	40f9      	lsrs	r1, r7
 800047e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000482:	fa00 f306 	lsl.w	r3, r0, r6
 8000486:	fbb1 f8f9 	udiv	r8, r1, r9
 800048a:	0c20      	lsrs	r0, r4, #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fb09 1118 	mls	r1, r9, r8, r1
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	fb08 f00e 	mul.w	r0, r8, lr
 800049c:	4288      	cmp	r0, r1
 800049e:	fa02 f206 	lsl.w	r2, r2, r6
 80004a2:	d90b      	bls.n	80004bc <__udivmoddi4+0x1b8>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004ac:	f080 8088 	bcs.w	80005c0 <__udivmoddi4+0x2bc>
 80004b0:	4288      	cmp	r0, r1
 80004b2:	f240 8085 	bls.w	80005c0 <__udivmoddi4+0x2bc>
 80004b6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1a09      	subs	r1, r1, r0
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c4:	fb09 1110 	mls	r1, r9, r0, r1
 80004c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d0:	458e      	cmp	lr, r1
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x1e2>
 80004d4:	eb1c 0101 	adds.w	r1, ip, r1
 80004d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80004dc:	d26c      	bcs.n	80005b8 <__udivmoddi4+0x2b4>
 80004de:	458e      	cmp	lr, r1
 80004e0:	d96a      	bls.n	80005b8 <__udivmoddi4+0x2b4>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4461      	add	r1, ip
 80004e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ea:	fba0 9402 	umull	r9, r4, r0, r2
 80004ee:	eba1 010e 	sub.w	r1, r1, lr
 80004f2:	42a1      	cmp	r1, r4
 80004f4:	46c8      	mov	r8, r9
 80004f6:	46a6      	mov	lr, r4
 80004f8:	d356      	bcc.n	80005a8 <__udivmoddi4+0x2a4>
 80004fa:	d053      	beq.n	80005a4 <__udivmoddi4+0x2a0>
 80004fc:	b15d      	cbz	r5, 8000516 <__udivmoddi4+0x212>
 80004fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000502:	eb61 010e 	sbc.w	r1, r1, lr
 8000506:	fa01 f707 	lsl.w	r7, r1, r7
 800050a:	fa22 f306 	lsr.w	r3, r2, r6
 800050e:	40f1      	lsrs	r1, r6
 8000510:	431f      	orrs	r7, r3
 8000512:	e9c5 7100 	strd	r7, r1, [r5]
 8000516:	2600      	movs	r6, #0
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	f1c2 0320 	rsb	r3, r2, #32
 8000522:	40d8      	lsrs	r0, r3
 8000524:	fa0c fc02 	lsl.w	ip, ip, r2
 8000528:	fa21 f303 	lsr.w	r3, r1, r3
 800052c:	4091      	lsls	r1, r2
 800052e:	4301      	orrs	r1, r0
 8000530:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	fbb3 f0f7 	udiv	r0, r3, r7
 800053c:	fb07 3610 	mls	r6, r7, r0, r3
 8000540:	0c0b      	lsrs	r3, r1, #16
 8000542:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000546:	fb00 f60e 	mul.w	r6, r0, lr
 800054a:	429e      	cmp	r6, r3
 800054c:	fa04 f402 	lsl.w	r4, r4, r2
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x260>
 8000552:	eb1c 0303 	adds.w	r3, ip, r3
 8000556:	f100 38ff 	add.w	r8, r0, #4294967295
 800055a:	d22f      	bcs.n	80005bc <__udivmoddi4+0x2b8>
 800055c:	429e      	cmp	r6, r3
 800055e:	d92d      	bls.n	80005bc <__udivmoddi4+0x2b8>
 8000560:	3802      	subs	r0, #2
 8000562:	4463      	add	r3, ip
 8000564:	1b9b      	subs	r3, r3, r6
 8000566:	b289      	uxth	r1, r1
 8000568:	fbb3 f6f7 	udiv	r6, r3, r7
 800056c:	fb07 3316 	mls	r3, r7, r6, r3
 8000570:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000574:	fb06 f30e 	mul.w	r3, r6, lr
 8000578:	428b      	cmp	r3, r1
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x28a>
 800057c:	eb1c 0101 	adds.w	r1, ip, r1
 8000580:	f106 38ff 	add.w	r8, r6, #4294967295
 8000584:	d216      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000586:	428b      	cmp	r3, r1
 8000588:	d914      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000594:	e738      	b.n	8000408 <__udivmoddi4+0x104>
 8000596:	462e      	mov	r6, r5
 8000598:	4628      	mov	r0, r5
 800059a:	e705      	b.n	80003a8 <__udivmoddi4+0xa4>
 800059c:	4606      	mov	r6, r0
 800059e:	e6e3      	b.n	8000368 <__udivmoddi4+0x64>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6f8      	b.n	8000396 <__udivmoddi4+0x92>
 80005a4:	454b      	cmp	r3, r9
 80005a6:	d2a9      	bcs.n	80004fc <__udivmoddi4+0x1f8>
 80005a8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b0:	3801      	subs	r0, #1
 80005b2:	e7a3      	b.n	80004fc <__udivmoddi4+0x1f8>
 80005b4:	4646      	mov	r6, r8
 80005b6:	e7ea      	b.n	800058e <__udivmoddi4+0x28a>
 80005b8:	4620      	mov	r0, r4
 80005ba:	e794      	b.n	80004e6 <__udivmoddi4+0x1e2>
 80005bc:	4640      	mov	r0, r8
 80005be:	e7d1      	b.n	8000564 <__udivmoddi4+0x260>
 80005c0:	46d0      	mov	r8, sl
 80005c2:	e77b      	b.n	80004bc <__udivmoddi4+0x1b8>
 80005c4:	3b02      	subs	r3, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	e732      	b.n	8000430 <__udivmoddi4+0x12c>
 80005ca:	4630      	mov	r0, r6
 80005cc:	e709      	b.n	80003e2 <__udivmoddi4+0xde>
 80005ce:	4464      	add	r4, ip
 80005d0:	3802      	subs	r0, #2
 80005d2:	e742      	b.n	800045a <__udivmoddi4+0x156>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08c      	sub	sp, #48	; 0x30
 80005dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	4b7f      	ldr	r3, [pc, #508]	; (80007ec <MX_GPIO_Init+0x214>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a7e      	ldr	r2, [pc, #504]	; (80007ec <MX_GPIO_Init+0x214>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b7c      	ldr	r3, [pc, #496]	; (80007ec <MX_GPIO_Init+0x214>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0304 	and.w	r3, r3, #4
 8000602:	61bb      	str	r3, [r7, #24]
 8000604:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000606:	4b79      	ldr	r3, [pc, #484]	; (80007ec <MX_GPIO_Init+0x214>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a78      	ldr	r2, [pc, #480]	; (80007ec <MX_GPIO_Init+0x214>)
 800060c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b76      	ldr	r3, [pc, #472]	; (80007ec <MX_GPIO_Init+0x214>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b73      	ldr	r3, [pc, #460]	; (80007ec <MX_GPIO_Init+0x214>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a72      	ldr	r2, [pc, #456]	; (80007ec <MX_GPIO_Init+0x214>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b70      	ldr	r3, [pc, #448]	; (80007ec <MX_GPIO_Init+0x214>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	4b6d      	ldr	r3, [pc, #436]	; (80007ec <MX_GPIO_Init+0x214>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a6c      	ldr	r2, [pc, #432]	; (80007ec <MX_GPIO_Init+0x214>)
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b6a      	ldr	r3, [pc, #424]	; (80007ec <MX_GPIO_Init+0x214>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064e:	4b67      	ldr	r3, [pc, #412]	; (80007ec <MX_GPIO_Init+0x214>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a66      	ldr	r2, [pc, #408]	; (80007ec <MX_GPIO_Init+0x214>)
 8000654:	f043 0308 	orr.w	r3, r3, #8
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b64      	ldr	r3, [pc, #400]	; (80007ec <MX_GPIO_Init+0x214>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0308 	and.w	r3, r3, #8
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000666:	4b61      	ldr	r3, [pc, #388]	; (80007ec <MX_GPIO_Init+0x214>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a60      	ldr	r2, [pc, #384]	; (80007ec <MX_GPIO_Init+0x214>)
 800066c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b5e      	ldr	r3, [pc, #376]	; (80007ec <MX_GPIO_Init+0x214>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f244 0181 	movw	r1, #16513	; 0x4081
 8000684:	485a      	ldr	r0, [pc, #360]	; (80007f0 <MX_GPIO_Init+0x218>)
 8000686:	f000 fdbf 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2140      	movs	r1, #64	; 0x40
 800068e:	4859      	ldr	r0, [pc, #356]	; (80007f4 <MX_GPIO_Init+0x21c>)
 8000690:	f000 fdba 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800069a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800069e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4619      	mov	r1, r3
 80006aa:	4853      	ldr	r0, [pc, #332]	; (80007f8 <MX_GPIO_Init+0x220>)
 80006ac:	f000 fc00 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006b0:	2332      	movs	r3, #50	; 0x32
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c0:	230b      	movs	r3, #11
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	484b      	ldr	r0, [pc, #300]	; (80007f8 <MX_GPIO_Init+0x220>)
 80006cc:	f000 fbf0 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006d0:	2386      	movs	r3, #134	; 0x86
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d4:	2302      	movs	r3, #2
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006e0:	230b      	movs	r3, #11
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	4844      	ldr	r0, [pc, #272]	; (80007fc <MX_GPIO_Init+0x224>)
 80006ec:	f000 fbe0 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006f0:	f244 0381 	movw	r3, #16513	; 0x4081
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4619      	mov	r1, r3
 8000708:	4839      	ldr	r0, [pc, #228]	; (80007f0 <MX_GPIO_Init+0x218>)
 800070a:	f000 fbd1 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800070e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000720:	230b      	movs	r3, #11
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4831      	ldr	r0, [pc, #196]	; (80007f0 <MX_GPIO_Init+0x218>)
 800072c:	f000 fbc0 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000730:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	2302      	movs	r3, #2
 8000738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073e:	2303      	movs	r3, #3
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000742:	2307      	movs	r3, #7
 8000744:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	482c      	ldr	r0, [pc, #176]	; (8000800 <MX_GPIO_Init+0x228>)
 800074e:	f000 fbaf 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000752:	2340      	movs	r3, #64	; 0x40
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4822      	ldr	r0, [pc, #136]	; (80007f4 <MX_GPIO_Init+0x21c>)
 800076a:	f000 fba1 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800076e:	2380      	movs	r3, #128	; 0x80
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_GPIO_Init+0x21c>)
 8000782:	f000 fb95 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000786:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000794:	2303      	movs	r3, #3
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000798:	230a      	movs	r3, #10
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4816      	ldr	r0, [pc, #88]	; (80007fc <MX_GPIO_Init+0x224>)
 80007a4:	f000 fb84 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80007a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	480f      	ldr	r0, [pc, #60]	; (80007fc <MX_GPIO_Init+0x224>)
 80007be:	f000 fb77 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d4:	230b      	movs	r3, #11
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_GPIO_Init+0x21c>)
 80007e0:	f000 fb66 	bl	8000eb0 <HAL_GPIO_Init>

}
 80007e4:	bf00      	nop
 80007e6:	3730      	adds	r7, #48	; 0x30
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020400 	.word	0x40020400
 80007f4:	40021800 	.word	0x40021800
 80007f8:	40020800 	.word	0x40020800
 80007fc:	40020000 	.word	0x40020000
 8000800:	40020c00 	.word	0x40020c00

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080a:	f000 fa42 	bl	8000c92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080e:	f000 f86d 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000812:	f7ff fee1 	bl	80005d8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 8000816:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <main+0xc8>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a2c      	ldr	r2, [pc, #176]	; (80008cc <main+0xc8>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000822:	482b      	ldr	r0, [pc, #172]	; (80008d0 <main+0xcc>)
 8000824:	f004 fc5c 	bl	80050e0 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000828:	f004 fa84 	bl	8004d34 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(vLED_Green_handler, "LED_green_task", 200, NULL, 2, &pvled_green_handle);
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	9301      	str	r3, [sp, #4]
 8000832:	2302      	movs	r3, #2
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2300      	movs	r3, #0
 8000838:	22c8      	movs	r2, #200	; 0xc8
 800083a:	4926      	ldr	r1, [pc, #152]	; (80008d4 <main+0xd0>)
 800083c:	4826      	ldr	r0, [pc, #152]	; (80008d8 <main+0xd4>)
 800083e:	f002 fb39 	bl	8002eb4 <xTaskCreate>
 8000842:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d00a      	beq.n	8000860 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800084a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800084e:	f383 8811 	msr	BASEPRI, r3
 8000852:	f3bf 8f6f 	isb	sy
 8000856:	f3bf 8f4f 	dsb	sy
 800085a:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800085c:	bf00      	nop
 800085e:	e7fe      	b.n	800085e <main+0x5a>

  status = xTaskCreate(vLED_Blue_handler, "LED_blue_task", 200, NULL, 2, &pvled_blue_handle);
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	2302      	movs	r3, #2
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2300      	movs	r3, #0
 800086c:	22c8      	movs	r2, #200	; 0xc8
 800086e:	491b      	ldr	r1, [pc, #108]	; (80008dc <main+0xd8>)
 8000870:	481b      	ldr	r0, [pc, #108]	; (80008e0 <main+0xdc>)
 8000872:	f002 fb1f 	bl	8002eb4 <xTaskCreate>
 8000876:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d00a      	beq.n	8000894 <main+0x90>
        __asm volatile
 800087e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000882:	f383 8811 	msr	BASEPRI, r3
 8000886:	f3bf 8f6f 	isb	sy
 800088a:	f3bf 8f4f 	dsb	sy
 800088e:	617b      	str	r3, [r7, #20]
    }
 8000890:	bf00      	nop
 8000892:	e7fe      	b.n	8000892 <main+0x8e>

  status = xTaskCreate(vLED_Red_handler, "LED_red_task", 200, NULL, 2, &pvled_red_handle);
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	9301      	str	r3, [sp, #4]
 8000898:	2302      	movs	r3, #2
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2300      	movs	r3, #0
 800089e:	22c8      	movs	r2, #200	; 0xc8
 80008a0:	4910      	ldr	r1, [pc, #64]	; (80008e4 <main+0xe0>)
 80008a2:	4811      	ldr	r0, [pc, #68]	; (80008e8 <main+0xe4>)
 80008a4:	f002 fb06 	bl	8002eb4 <xTaskCreate>
 80008a8:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d00a      	beq.n	80008c6 <main+0xc2>
        __asm volatile
 80008b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b4:	f383 8811 	msr	BASEPRI, r3
 80008b8:	f3bf 8f6f 	isb	sy
 80008bc:	f3bf 8f4f 	dsb	sy
 80008c0:	613b      	str	r3, [r7, #16]
    }
 80008c2:	bf00      	nop
 80008c4:	e7fe      	b.n	80008c4 <main+0xc0>

  //Start the FreeRTOS scheduler
  vTaskStartScheduler();
 80008c6:	f002 fcdb 	bl	8003280 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <main+0xc6>
 80008cc:	e0001000 	.word	0xe0001000
 80008d0:	0007a120 	.word	0x0007a120
 80008d4:	08007750 	.word	0x08007750
 80008d8:	080009c9 	.word	0x080009c9
 80008dc:	08007760 	.word	0x08007760
 80008e0:	08000a01 	.word	0x08000a01
 80008e4:	08007770 	.word	0x08007770
 80008e8:	08000a39 	.word	0x08000a39

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b094      	sub	sp, #80	; 0x50
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	2234      	movs	r2, #52	; 0x34
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f006 ff14 	bl	8007728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	f107 0308 	add.w	r3, r7, #8
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000910:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <SystemClock_Config+0xd4>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	4a2a      	ldr	r2, [pc, #168]	; (80009c0 <SystemClock_Config+0xd4>)
 8000916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091a:	6413      	str	r3, [r2, #64]	; 0x40
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <SystemClock_Config+0xd4>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000928:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <SystemClock_Config+0xd8>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a25      	ldr	r2, [pc, #148]	; (80009c4 <SystemClock_Config+0xd8>)
 800092e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <SystemClock_Config+0xd8>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000940:	2302      	movs	r3, #2
 8000942:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000944:	2301      	movs	r3, #1
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000948:	2310      	movs	r3, #16
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094c:	2302      	movs	r3, #2
 800094e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000950:	2300      	movs	r3, #0
 8000952:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000954:	2308      	movs	r3, #8
 8000956:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000958:	23d8      	movs	r3, #216	; 0xd8
 800095a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800095c:	2302      	movs	r3, #2
 800095e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000960:	2302      	movs	r3, #2
 8000962:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000964:	2302      	movs	r3, #2
 8000966:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4618      	mov	r0, r3
 800096e:	f000 fccf 	bl	8001310 <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000978:	f000 f88c 	bl	8000a94 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800097c:	f000 fc78 	bl	8001270 <HAL_PWREx_EnableOverDrive>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000986:	f000 f885 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098a:	230f      	movs	r3, #15
 800098c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098e:	2302      	movs	r3, #2
 8000990:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000996:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800099a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800099c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	2107      	movs	r1, #7
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 ff5f 	bl	800186c <HAL_RCC_ClockConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80009b4:	f000 f86e 	bl	8000a94 <Error_Handler>
  }
}
 80009b8:	bf00      	nop
 80009ba:	3750      	adds	r7, #80	; 0x50
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40007000 	.word	0x40007000

080009c8 <vLED_Green_handler>:

/* USER CODE BEGIN 4 */
static void vLED_Green_handler( void * pvParameters )
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 80009d0:	f002 fd66 	bl	80034a0 <xTaskGetTickCount>
 80009d4:	4603      	mov	r3, r0
 80009d6:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009d8:	4807      	ldr	r0, [pc, #28]	; (80009f8 <vLED_Green_handler+0x30>)
 80009da:	f006 fdc5 	bl	8007568 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, GREEN_LED_PIN);
 80009de:	2101      	movs	r1, #1
 80009e0:	4806      	ldr	r0, [pc, #24]	; (80009fc <vLED_Green_handler+0x34>)
 80009e2:	f000 fc2a 	bl	800123a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000));
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009ee:	4618      	mov	r0, r3
 80009f0:	f002 fbc4 	bl	800317c <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009f4:	e7f0      	b.n	80009d8 <vLED_Green_handler+0x10>
 80009f6:	bf00      	nop
 80009f8:	08007780 	.word	0x08007780
 80009fc:	40020400 	.word	0x40020400

08000a00 <vLED_Blue_handler>:
	}
}
static void vLED_Blue_handler( void * pvParameters )
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 8000a08:	f002 fd4a 	bl	80034a0 <xTaskGetTickCount>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000a10:	4807      	ldr	r0, [pc, #28]	; (8000a30 <vLED_Blue_handler+0x30>)
 8000a12:	f006 fda9 	bl	8007568 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, BLUE_LED_PIN);
 8000a16:	2180      	movs	r1, #128	; 0x80
 8000a18:	4806      	ldr	r0, [pc, #24]	; (8000a34 <vLED_Blue_handler+0x34>)
 8000a1a:	f000 fc0e 	bl	800123a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(800));
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 fba8 	bl	800317c <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000a2c:	e7f0      	b.n	8000a10 <vLED_Blue_handler+0x10>
 8000a2e:	bf00      	nop
 8000a30:	08007794 	.word	0x08007794
 8000a34:	40020400 	.word	0x40020400

08000a38 <vLED_Red_handler>:
	}
}
static void vLED_Red_handler( void * pvParameters )
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 8000a40:	f002 fd2e 	bl	80034a0 <xTaskGetTickCount>
 8000a44:	4603      	mov	r3, r0
 8000a46:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a48:	4807      	ldr	r0, [pc, #28]	; (8000a68 <vLED_Red_handler+0x30>)
 8000a4a:	f006 fd8d 	bl	8007568 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, RED_LED_PIN);
 8000a4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a52:	4806      	ldr	r0, [pc, #24]	; (8000a6c <vLED_Red_handler+0x34>)
 8000a54:	f000 fbf1 	bl	800123a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(400));
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000a60:	4618      	mov	r0, r3
 8000a62:	f002 fb8b 	bl	800317c <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a66:	e7ef      	b.n	8000a48 <vLED_Red_handler+0x10>
 8000a68:	080077a8 	.word	0x080077a8
 8000a6c:	40020400 	.word	0x40020400

08000a70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d101      	bne.n	8000a86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a82:	f000 f913 	bl	8000cac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40001000 	.word	0x40001000

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <Error_Handler+0x8>
	...

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_MspInit+0x44>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <HAL_MspInit+0x44>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_MspInit+0x44>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000ad6:	f003 fd77 	bl	80045c8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	; 0x38
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000af8:	4b33      	ldr	r3, [pc, #204]	; (8000bc8 <HAL_InitTick+0xe0>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	4a32      	ldr	r2, [pc, #200]	; (8000bc8 <HAL_InitTick+0xe0>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	6413      	str	r3, [r2, #64]	; 0x40
 8000b04:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <HAL_InitTick+0xe0>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	f003 0310 	and.w	r3, r3, #16
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b10:	f107 0210 	add.w	r2, r7, #16
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 f8b6 	bl	8001c8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b20:	6a3b      	ldr	r3, [r7, #32]
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d103      	bne.n	8000b32 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b2a:	f001 f89b 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 8000b2e:	6378      	str	r0, [r7, #52]	; 0x34
 8000b30:	e004      	b.n	8000b3c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b32:	f001 f897 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 8000b36:	4603      	mov	r3, r0
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b3e:	4a23      	ldr	r2, [pc, #140]	; (8000bcc <HAL_InitTick+0xe4>)
 8000b40:	fba2 2303 	umull	r2, r3, r2, r3
 8000b44:	0c9b      	lsrs	r3, r3, #18
 8000b46:	3b01      	subs	r3, #1
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <HAL_InitTick+0xe8>)
 8000b4c:	4a21      	ldr	r2, [pc, #132]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <HAL_InitTick+0xe8>)
 8000b52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b56:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b58:	4a1d      	ldr	r2, [pc, #116]	; (8000bd0 <HAL_InitTick+0xe8>)
 8000b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b5c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <HAL_InitTick+0xe8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <HAL_InitTick+0xe8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <HAL_InitTick+0xe8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b70:	4817      	ldr	r0, [pc, #92]	; (8000bd0 <HAL_InitTick+0xe8>)
 8000b72:	f001 f8bd 	bl	8001cf0 <HAL_TIM_Base_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d11b      	bne.n	8000bbc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b84:	4812      	ldr	r0, [pc, #72]	; (8000bd0 <HAL_InitTick+0xe8>)
 8000b86:	f001 f915 	bl	8001db4 <HAL_TIM_Base_Start_IT>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d111      	bne.n	8000bbc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b98:	2036      	movs	r0, #54	; 0x36
 8000b9a:	f000 f97b 	bl	8000e94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	d808      	bhi.n	8000bb6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	2036      	movs	r0, #54	; 0x36
 8000baa:	f000 f957 	bl	8000e5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_InitTick+0xf0>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	e002      	b.n	8000bbc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3738      	adds	r7, #56	; 0x38
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	431bde83 	.word	0x431bde83
 8000bd0:	20000038 	.word	0x20000038
 8000bd4:	40001000 	.word	0x40001000
 8000bd8:	20000004 	.word	0x20000004

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <NMI_Handler+0x4>

08000be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <MemManage_Handler+0x4>

08000bee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <TIM6_DAC_IRQHandler+0x10>)
 8000c0e:	f001 f949 	bl	8001ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000038 	.word	0x20000038

08000c1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <SystemInit+0x20>)
 8000c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <SystemInit+0x20>)
 8000c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c44:	f7ff ffea 	bl	8000c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c48:	480c      	ldr	r0, [pc, #48]	; (8000c7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c4a:	490d      	ldr	r1, [pc, #52]	; (8000c80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c60:	4c0a      	ldr	r4, [pc, #40]	; (8000c8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f006 fd19 	bl	80076a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c72:	f7ff fdc7 	bl	8000804 <main>
  bx  lr    
 8000c76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c78:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c80:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c84:	080078f8 	.word	0x080078f8
  ldr r2, =_sbss
 8000c88:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c8c:	200144b0 	.word	0x200144b0

08000c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC_IRQHandler>

08000c92 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c96:	2003      	movs	r0, #3
 8000c98:	f000 f8d5 	bl	8000e46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9c:	200f      	movs	r0, #15
 8000c9e:	f7ff ff23 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca2:	f7ff fefd 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca6:	2300      	movs	r3, #0
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	bd80      	pop	{r7, pc}

08000cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x20>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000084 	.word	0x20000084

08000cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <HAL_GetTick+0x14>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000084 	.word	0x20000084

08000cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <__NVIC_SetPriorityGrouping+0x40>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	4313      	orrs	r3, r2
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <__NVIC_SetPriorityGrouping+0x40>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00
 8000d30:	05fa0000 	.word	0x05fa0000

08000d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <__NVIC_GetPriorityGrouping+0x18>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	f003 0307 	and.w	r3, r3, #7
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	db0b      	blt.n	8000d7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	f003 021f 	and.w	r2, r3, #31
 8000d68:	4907      	ldr	r1, [pc, #28]	; (8000d88 <__NVIC_EnableIRQ+0x38>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	095b      	lsrs	r3, r3, #5
 8000d70:	2001      	movs	r0, #1
 8000d72:	fa00 f202 	lsl.w	r2, r0, r2
 8000d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000e100 	.word	0xe000e100

08000d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db0a      	blt.n	8000db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	490c      	ldr	r1, [pc, #48]	; (8000dd8 <__NVIC_SetPriority+0x4c>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	440b      	add	r3, r1
 8000db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db4:	e00a      	b.n	8000dcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4908      	ldr	r1, [pc, #32]	; (8000ddc <__NVIC_SetPriority+0x50>)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	3b04      	subs	r3, #4
 8000dc4:	0112      	lsls	r2, r2, #4
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	440b      	add	r3, r1
 8000dca:	761a      	strb	r2, [r3, #24]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000e100 	.word	0xe000e100
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f1c3 0307 	rsb	r3, r3, #7
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	bf28      	it	cs
 8000dfe:	2304      	movcs	r3, #4
 8000e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3304      	adds	r3, #4
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d902      	bls.n	8000e10 <NVIC_EncodePriority+0x30>
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3b03      	subs	r3, #3
 8000e0e:	e000      	b.n	8000e12 <NVIC_EncodePriority+0x32>
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	401a      	ands	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43d9      	mvns	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	4313      	orrs	r3, r2
         );
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3724      	adds	r7, #36	; 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ff4c 	bl	8000cec <__NVIC_SetPriorityGrouping>
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
 8000e68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e6e:	f7ff ff61 	bl	8000d34 <__NVIC_GetPriorityGrouping>
 8000e72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	68b9      	ldr	r1, [r7, #8]
 8000e78:	6978      	ldr	r0, [r7, #20]
 8000e7a:	f7ff ffb1 	bl	8000de0 <NVIC_EncodePriority>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e84:	4611      	mov	r1, r2
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ff80 	bl	8000d8c <__NVIC_SetPriority>
}
 8000e8c:	bf00      	nop
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ff54 	bl	8000d50 <__NVIC_EnableIRQ>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
 8000ece:	e175      	b.n	80011bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	f040 8164 	bne.w	80011b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d005      	beq.n	8000f06 <HAL_GPIO_Init+0x56>
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d130      	bne.n	8000f68 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	68da      	ldr	r2, [r3, #12]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	091b      	lsrs	r3, r3, #4
 8000f52:	f003 0201 	and.w	r2, r3, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d017      	beq.n	8000fa4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d123      	bne.n	8000ff8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	08da      	lsrs	r2, r3, #3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3208      	adds	r2, #8
 8000fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	f003 0307 	and.w	r3, r3, #7
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	691a      	ldr	r2, [r3, #16]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	08da      	lsrs	r2, r3, #3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	69b9      	ldr	r1, [r7, #24]
 8000ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0203 	and.w	r2, r3, #3
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 80be 	beq.w	80011b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	4b66      	ldr	r3, [pc, #408]	; (80011d4 <HAL_GPIO_Init+0x324>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	4a65      	ldr	r2, [pc, #404]	; (80011d4 <HAL_GPIO_Init+0x324>)
 8001040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001044:	6453      	str	r3, [r2, #68]	; 0x44
 8001046:	4b63      	ldr	r3, [pc, #396]	; (80011d4 <HAL_GPIO_Init+0x324>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001052:	4a61      	ldr	r2, [pc, #388]	; (80011d8 <HAL_GPIO_Init+0x328>)
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	3302      	adds	r3, #2
 800105a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	220f      	movs	r2, #15
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a58      	ldr	r2, [pc, #352]	; (80011dc <HAL_GPIO_Init+0x32c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d037      	beq.n	80010ee <HAL_GPIO_Init+0x23e>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a57      	ldr	r2, [pc, #348]	; (80011e0 <HAL_GPIO_Init+0x330>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d031      	beq.n	80010ea <HAL_GPIO_Init+0x23a>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a56      	ldr	r2, [pc, #344]	; (80011e4 <HAL_GPIO_Init+0x334>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d02b      	beq.n	80010e6 <HAL_GPIO_Init+0x236>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a55      	ldr	r2, [pc, #340]	; (80011e8 <HAL_GPIO_Init+0x338>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d025      	beq.n	80010e2 <HAL_GPIO_Init+0x232>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a54      	ldr	r2, [pc, #336]	; (80011ec <HAL_GPIO_Init+0x33c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d01f      	beq.n	80010de <HAL_GPIO_Init+0x22e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a53      	ldr	r2, [pc, #332]	; (80011f0 <HAL_GPIO_Init+0x340>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d019      	beq.n	80010da <HAL_GPIO_Init+0x22a>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a52      	ldr	r2, [pc, #328]	; (80011f4 <HAL_GPIO_Init+0x344>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0x226>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a51      	ldr	r2, [pc, #324]	; (80011f8 <HAL_GPIO_Init+0x348>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00d      	beq.n	80010d2 <HAL_GPIO_Init+0x222>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a50      	ldr	r2, [pc, #320]	; (80011fc <HAL_GPIO_Init+0x34c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d007      	beq.n	80010ce <HAL_GPIO_Init+0x21e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4f      	ldr	r2, [pc, #316]	; (8001200 <HAL_GPIO_Init+0x350>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_GPIO_Init+0x21a>
 80010c6:	2309      	movs	r3, #9
 80010c8:	e012      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010ca:	230a      	movs	r3, #10
 80010cc:	e010      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010ce:	2308      	movs	r3, #8
 80010d0:	e00e      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010d2:	2307      	movs	r3, #7
 80010d4:	e00c      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010d6:	2306      	movs	r3, #6
 80010d8:	e00a      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010da:	2305      	movs	r3, #5
 80010dc:	e008      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010de:	2304      	movs	r3, #4
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010e2:	2303      	movs	r3, #3
 80010e4:	e004      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010e6:	2302      	movs	r3, #2
 80010e8:	e002      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <HAL_GPIO_Init+0x240>
 80010ee:	2300      	movs	r3, #0
 80010f0:	69fa      	ldr	r2, [r7, #28]
 80010f2:	f002 0203 	and.w	r2, r2, #3
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	4093      	lsls	r3, r2
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001100:	4935      	ldr	r1, [pc, #212]	; (80011d8 <HAL_GPIO_Init+0x328>)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3302      	adds	r3, #2
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110e:	4b3d      	ldr	r3, [pc, #244]	; (8001204 <HAL_GPIO_Init+0x354>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001132:	4a34      	ldr	r2, [pc, #208]	; (8001204 <HAL_GPIO_Init+0x354>)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001138:	4b32      	ldr	r3, [pc, #200]	; (8001204 <HAL_GPIO_Init+0x354>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800115c:	4a29      	ldr	r2, [pc, #164]	; (8001204 <HAL_GPIO_Init+0x354>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001162:	4b28      	ldr	r3, [pc, #160]	; (8001204 <HAL_GPIO_Init+0x354>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001186:	4a1f      	ldr	r2, [pc, #124]	; (8001204 <HAL_GPIO_Init+0x354>)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_GPIO_Init+0x354>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b0:	4a14      	ldr	r2, [pc, #80]	; (8001204 <HAL_GPIO_Init+0x354>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3301      	adds	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	2b0f      	cmp	r3, #15
 80011c0:	f67f ae86 	bls.w	8000ed0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40013800 	.word	0x40013800
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40020400 	.word	0x40020400
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020c00 	.word	0x40020c00
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40021400 	.word	0x40021400
 80011f4:	40021800 	.word	0x40021800
 80011f8:	40021c00 	.word	0x40021c00
 80011fc:	40022000 	.word	0x40022000
 8001200:	40022400 	.word	0x40022400
 8001204:	40013c00 	.word	0x40013c00

08001208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
 8001214:	4613      	mov	r3, r2
 8001216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001218:	787b      	ldrb	r3, [r7, #1]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001224:	e003      	b.n	800122e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001226:	887b      	ldrh	r3, [r7, #2]
 8001228:	041a      	lsls	r2, r3, #16
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	619a      	str	r2, [r3, #24]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800123a:	b480      	push	{r7}
 800123c:	b085      	sub	sp, #20
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	460b      	mov	r3, r1
 8001244:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800124c:	887a      	ldrh	r2, [r7, #2]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4013      	ands	r3, r2
 8001252:	041a      	lsls	r2, r3, #16
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	43d9      	mvns	r1, r3
 8001258:	887b      	ldrh	r3, [r7, #2]
 800125a:	400b      	ands	r3, r1
 800125c:	431a      	orrs	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
}
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	4b23      	ldr	r3, [pc, #140]	; (8001308 <HAL_PWREx_EnableOverDrive+0x98>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	4a22      	ldr	r2, [pc, #136]	; (8001308 <HAL_PWREx_EnableOverDrive+0x98>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	6413      	str	r3, [r2, #64]	; 0x40
 8001286:	4b20      	ldr	r3, [pc, #128]	; (8001308 <HAL_PWREx_EnableOverDrive+0x98>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001292:	4b1e      	ldr	r3, [pc, #120]	; (800130c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a1d      	ldr	r2, [pc, #116]	; (800130c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800129e:	f7ff fd19 	bl	8000cd4 <HAL_GetTick>
 80012a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012a4:	e009      	b.n	80012ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012a6:	f7ff fd15 	bl	8000cd4 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012b4:	d901      	bls.n	80012ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e022      	b.n	8001300 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <HAL_PWREx_EnableOverDrive+0x9c>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c6:	d1ee      	bne.n	80012a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <HAL_PWREx_EnableOverDrive+0x9c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0f      	ldr	r2, [pc, #60]	; (800130c <HAL_PWREx_EnableOverDrive+0x9c>)
 80012ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d4:	f7ff fcfe 	bl	8000cd4 <HAL_GetTick>
 80012d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012da:	e009      	b.n	80012f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012dc:	f7ff fcfa 	bl	8000cd4 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012ea:	d901      	bls.n	80012f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e007      	b.n	8001300 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_PWREx_EnableOverDrive+0x9c>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012fc:	d1ee      	bne.n	80012dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40007000 	.word	0x40007000

08001310 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e29b      	b.n	800185e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 8087 	beq.w	8001442 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001334:	4b96      	ldr	r3, [pc, #600]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 030c 	and.w	r3, r3, #12
 800133c:	2b04      	cmp	r3, #4
 800133e:	d00c      	beq.n	800135a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001340:	4b93      	ldr	r3, [pc, #588]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 030c 	and.w	r3, r3, #12
 8001348:	2b08      	cmp	r3, #8
 800134a:	d112      	bne.n	8001372 <HAL_RCC_OscConfig+0x62>
 800134c:	4b90      	ldr	r3, [pc, #576]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001354:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001358:	d10b      	bne.n	8001372 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135a:	4b8d      	ldr	r3, [pc, #564]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d06c      	beq.n	8001440 <HAL_RCC_OscConfig+0x130>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d168      	bne.n	8001440 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e275      	b.n	800185e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800137a:	d106      	bne.n	800138a <HAL_RCC_OscConfig+0x7a>
 800137c:	4b84      	ldr	r3, [pc, #528]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a83      	ldr	r2, [pc, #524]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 8001382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	e02e      	b.n	80013e8 <HAL_RCC_OscConfig+0xd8>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d10c      	bne.n	80013ac <HAL_RCC_OscConfig+0x9c>
 8001392:	4b7f      	ldr	r3, [pc, #508]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a7e      	ldr	r2, [pc, #504]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 8001398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	4b7c      	ldr	r3, [pc, #496]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a7b      	ldr	r2, [pc, #492]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 80013a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	e01d      	b.n	80013e8 <HAL_RCC_OscConfig+0xd8>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b4:	d10c      	bne.n	80013d0 <HAL_RCC_OscConfig+0xc0>
 80013b6:	4b76      	ldr	r3, [pc, #472]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a75      	ldr	r2, [pc, #468]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 80013bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	4b73      	ldr	r3, [pc, #460]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a72      	ldr	r2, [pc, #456]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 80013c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e00b      	b.n	80013e8 <HAL_RCC_OscConfig+0xd8>
 80013d0:	4b6f      	ldr	r3, [pc, #444]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a6e      	ldr	r2, [pc, #440]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 80013d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b6c      	ldr	r3, [pc, #432]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a6b      	ldr	r2, [pc, #428]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 80013e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d013      	beq.n	8001418 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff fc70 	bl	8000cd4 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f8:	f7ff fc6c 	bl	8000cd4 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b64      	cmp	r3, #100	; 0x64
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e229      	b.n	800185e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140a:	4b61      	ldr	r3, [pc, #388]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0f0      	beq.n	80013f8 <HAL_RCC_OscConfig+0xe8>
 8001416:	e014      	b.n	8001442 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001418:	f7ff fc5c 	bl	8000cd4 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001420:	f7ff fc58 	bl	8000cd4 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b64      	cmp	r3, #100	; 0x64
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e215      	b.n	800185e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001432:	4b57      	ldr	r3, [pc, #348]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x110>
 800143e:	e000      	b.n	8001442 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d069      	beq.n	8001522 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800144e:	4b50      	ldr	r3, [pc, #320]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00b      	beq.n	8001472 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800145a:	4b4d      	ldr	r3, [pc, #308]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
 8001462:	2b08      	cmp	r3, #8
 8001464:	d11c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x190>
 8001466:	4b4a      	ldr	r3, [pc, #296]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d116      	bne.n	80014a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001472:	4b47      	ldr	r3, [pc, #284]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <HAL_RCC_OscConfig+0x17a>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d001      	beq.n	800148a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e1e9      	b.n	800185e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148a:	4b41      	ldr	r3, [pc, #260]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	493d      	ldr	r1, [pc, #244]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149e:	e040      	b.n	8001522 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d023      	beq.n	80014f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a8:	4b39      	ldr	r3, [pc, #228]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a38      	ldr	r2, [pc, #224]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b4:	f7ff fc0e 	bl	8000cd4 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014bc:	f7ff fc0a 	bl	8000cd4 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e1c7      	b.n	800185e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ce:	4b30      	ldr	r3, [pc, #192]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014da:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4929      	ldr	r1, [pc, #164]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
 80014ee:	e018      	b.n	8001522 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f0:	4b27      	ldr	r3, [pc, #156]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a26      	ldr	r2, [pc, #152]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 80014f6:	f023 0301 	bic.w	r3, r3, #1
 80014fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fc:	f7ff fbea 	bl	8000cd4 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001504:	f7ff fbe6 	bl	8000cd4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e1a3      	b.n	800185e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001516:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	2b00      	cmp	r3, #0
 800152c:	d038      	beq.n	80015a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d019      	beq.n	800156a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 8001538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800153a:	4a15      	ldr	r2, [pc, #84]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001542:	f7ff fbc7 	bl	8000cd4 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800154a:	f7ff fbc3 	bl	8000cd4 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e180      	b.n	800185e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 800155e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x23a>
 8001568:	e01a      	b.n	80015a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 800156c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800156e:	4a08      	ldr	r2, [pc, #32]	; (8001590 <HAL_RCC_OscConfig+0x280>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001576:	f7ff fbad 	bl	8000cd4 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157c:	e00a      	b.n	8001594 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157e:	f7ff fba9 	bl	8000cd4 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d903      	bls.n	8001594 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e166      	b.n	800185e <HAL_RCC_OscConfig+0x54e>
 8001590:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001594:	4b92      	ldr	r3, [pc, #584]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 8001596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1ee      	bne.n	800157e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 80a4 	beq.w	80016f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ae:	4b8c      	ldr	r3, [pc, #560]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10d      	bne.n	80015d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4b89      	ldr	r3, [pc, #548]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a88      	ldr	r2, [pc, #544]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b86      	ldr	r3, [pc, #536]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015d2:	2301      	movs	r3, #1
 80015d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d6:	4b83      	ldr	r3, [pc, #524]	; (80017e4 <HAL_RCC_OscConfig+0x4d4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d118      	bne.n	8001614 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80015e2:	4b80      	ldr	r3, [pc, #512]	; (80017e4 <HAL_RCC_OscConfig+0x4d4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a7f      	ldr	r2, [pc, #508]	; (80017e4 <HAL_RCC_OscConfig+0x4d4>)
 80015e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ee:	f7ff fb71 	bl	8000cd4 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f6:	f7ff fb6d 	bl	8000cd4 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b64      	cmp	r3, #100	; 0x64
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e12a      	b.n	800185e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001608:	4b76      	ldr	r3, [pc, #472]	; (80017e4 <HAL_RCC_OscConfig+0x4d4>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d106      	bne.n	800162a <HAL_RCC_OscConfig+0x31a>
 800161c:	4b70      	ldr	r3, [pc, #448]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	4a6f      	ldr	r2, [pc, #444]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6713      	str	r3, [r2, #112]	; 0x70
 8001628:	e02d      	b.n	8001686 <HAL_RCC_OscConfig+0x376>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x33c>
 8001632:	4b6b      	ldr	r3, [pc, #428]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001636:	4a6a      	ldr	r2, [pc, #424]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 8001638:	f023 0301 	bic.w	r3, r3, #1
 800163c:	6713      	str	r3, [r2, #112]	; 0x70
 800163e:	4b68      	ldr	r3, [pc, #416]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	4a67      	ldr	r2, [pc, #412]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 8001644:	f023 0304 	bic.w	r3, r3, #4
 8001648:	6713      	str	r3, [r2, #112]	; 0x70
 800164a:	e01c      	b.n	8001686 <HAL_RCC_OscConfig+0x376>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b05      	cmp	r3, #5
 8001652:	d10c      	bne.n	800166e <HAL_RCC_OscConfig+0x35e>
 8001654:	4b62      	ldr	r3, [pc, #392]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 8001656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001658:	4a61      	ldr	r2, [pc, #388]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	6713      	str	r3, [r2, #112]	; 0x70
 8001660:	4b5f      	ldr	r3, [pc, #380]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 8001662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001664:	4a5e      	ldr	r2, [pc, #376]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6713      	str	r3, [r2, #112]	; 0x70
 800166c:	e00b      	b.n	8001686 <HAL_RCC_OscConfig+0x376>
 800166e:	4b5c      	ldr	r3, [pc, #368]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 8001670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001672:	4a5b      	ldr	r2, [pc, #364]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 8001674:	f023 0301 	bic.w	r3, r3, #1
 8001678:	6713      	str	r3, [r2, #112]	; 0x70
 800167a:	4b59      	ldr	r3, [pc, #356]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167e:	4a58      	ldr	r2, [pc, #352]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 8001680:	f023 0304 	bic.w	r3, r3, #4
 8001684:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d015      	beq.n	80016ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168e:	f7ff fb21 	bl	8000cd4 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7ff fb1d 	bl	8000cd4 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e0d8      	b.n	800185e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ac:	4b4c      	ldr	r3, [pc, #304]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 80016ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0ee      	beq.n	8001696 <HAL_RCC_OscConfig+0x386>
 80016b8:	e014      	b.n	80016e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ba:	f7ff fb0b 	bl	8000cd4 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff fb07 	bl	8000cd4 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e0c2      	b.n	800185e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d8:	4b41      	ldr	r3, [pc, #260]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1ee      	bne.n	80016c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016e4:	7dfb      	ldrb	r3, [r7, #23]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d105      	bne.n	80016f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ea:	4b3d      	ldr	r3, [pc, #244]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a3c      	ldr	r2, [pc, #240]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 80016f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 80ae 	beq.w	800185c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001700:	4b37      	ldr	r3, [pc, #220]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	2b08      	cmp	r3, #8
 800170a:	d06d      	beq.n	80017e8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d14b      	bne.n	80017ac <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001714:	4b32      	ldr	r3, [pc, #200]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a31      	ldr	r2, [pc, #196]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 800171a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800171e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff fad8 	bl	8000cd4 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001728:	f7ff fad4 	bl	8000cd4 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e091      	b.n	800185e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173a:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69da      	ldr	r2, [r3, #28]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	019b      	lsls	r3, r3, #6
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	085b      	lsrs	r3, r3, #1
 800175e:	3b01      	subs	r3, #1
 8001760:	041b      	lsls	r3, r3, #16
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001768:	061b      	lsls	r3, r3, #24
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	071b      	lsls	r3, r3, #28
 8001772:	491b      	ldr	r1, [pc, #108]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001778:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a18      	ldr	r2, [pc, #96]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 800177e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff faa6 	bl	8000cd4 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff faa2 	bl	8000cd4 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e05f      	b.n	800185e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x47c>
 80017aa:	e057      	b.n	800185c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 80017b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff fa8c 	bl	8000cd4 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c0:	f7ff fa88 	bl	8000cd4 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e045      	b.n	800185e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d2:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <HAL_RCC_OscConfig+0x4d0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x4b0>
 80017de:	e03d      	b.n	800185c <HAL_RCC_OscConfig+0x54c>
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80017e8:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <HAL_RCC_OscConfig+0x558>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d030      	beq.n	8001858 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d129      	bne.n	8001858 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180e:	429a      	cmp	r2, r3
 8001810:	d122      	bne.n	8001858 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001818:	4013      	ands	r3, r2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800181e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001820:	4293      	cmp	r3, r2
 8001822:	d119      	bne.n	8001858 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	085b      	lsrs	r3, r3, #1
 8001830:	3b01      	subs	r3, #1
 8001832:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001834:	429a      	cmp	r2, r3
 8001836:	d10f      	bne.n	8001858 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001842:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001844:	429a      	cmp	r2, r3
 8001846:	d107      	bne.n	8001858 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001854:	429a      	cmp	r2, r3
 8001856:	d001      	beq.n	800185c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800

0800186c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0d0      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001884:	4b6a      	ldr	r3, [pc, #424]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 030f 	and.w	r3, r3, #15
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d910      	bls.n	80018b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b67      	ldr	r3, [pc, #412]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 020f 	bic.w	r2, r3, #15
 800189a:	4965      	ldr	r1, [pc, #404]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a2:	4b63      	ldr	r3, [pc, #396]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0b8      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d020      	beq.n	8001902 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018cc:	4b59      	ldr	r3, [pc, #356]	; (8001a34 <HAL_RCC_ClockConfig+0x1c8>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	4a58      	ldr	r2, [pc, #352]	; (8001a34 <HAL_RCC_ClockConfig+0x1c8>)
 80018d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e4:	4b53      	ldr	r3, [pc, #332]	; (8001a34 <HAL_RCC_ClockConfig+0x1c8>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	4a52      	ldr	r2, [pc, #328]	; (8001a34 <HAL_RCC_ClockConfig+0x1c8>)
 80018ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f0:	4b50      	ldr	r3, [pc, #320]	; (8001a34 <HAL_RCC_ClockConfig+0x1c8>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	494d      	ldr	r1, [pc, #308]	; (8001a34 <HAL_RCC_ClockConfig+0x1c8>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d040      	beq.n	8001990 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d107      	bne.n	8001926 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	4b47      	ldr	r3, [pc, #284]	; (8001a34 <HAL_RCC_ClockConfig+0x1c8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d115      	bne.n	800194e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e07f      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d107      	bne.n	800193e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192e:	4b41      	ldr	r3, [pc, #260]	; (8001a34 <HAL_RCC_ClockConfig+0x1c8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e073      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193e:	4b3d      	ldr	r3, [pc, #244]	; (8001a34 <HAL_RCC_ClockConfig+0x1c8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e06b      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800194e:	4b39      	ldr	r3, [pc, #228]	; (8001a34 <HAL_RCC_ClockConfig+0x1c8>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f023 0203 	bic.w	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4936      	ldr	r1, [pc, #216]	; (8001a34 <HAL_RCC_ClockConfig+0x1c8>)
 800195c:	4313      	orrs	r3, r2
 800195e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001960:	f7ff f9b8 	bl	8000cd4 <HAL_GetTick>
 8001964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	e00a      	b.n	800197e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001968:	f7ff f9b4 	bl	8000cd4 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f241 3288 	movw	r2, #5000	; 0x1388
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e053      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197e:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <HAL_RCC_ClockConfig+0x1c8>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 020c 	and.w	r2, r3, #12
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	429a      	cmp	r2, r3
 800198e:	d1eb      	bne.n	8001968 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001990:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 030f 	and.w	r3, r3, #15
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d210      	bcs.n	80019c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 020f 	bic.w	r2, r3, #15
 80019a6:	4922      	ldr	r1, [pc, #136]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e032      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_RCC_ClockConfig+0x1c8>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	4916      	ldr	r1, [pc, #88]	; (8001a34 <HAL_RCC_ClockConfig+0x1c8>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d009      	beq.n	80019fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_RCC_ClockConfig+0x1c8>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	490e      	ldr	r1, [pc, #56]	; (8001a34 <HAL_RCC_ClockConfig+0x1c8>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019fe:	f000 f821 	bl	8001a44 <HAL_RCC_GetSysClockFreq>
 8001a02:	4602      	mov	r2, r0
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_RCC_ClockConfig+0x1c8>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	091b      	lsrs	r3, r3, #4
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	490a      	ldr	r1, [pc, #40]	; (8001a38 <HAL_RCC_ClockConfig+0x1cc>)
 8001a10:	5ccb      	ldrb	r3, [r1, r3]
 8001a12:	fa22 f303 	lsr.w	r3, r2, r3
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <HAL_RCC_ClockConfig+0x1d0>)
 8001a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_RCC_ClockConfig+0x1d4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff f862 	bl	8000ae8 <HAL_InitTick>

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023c00 	.word	0x40023c00
 8001a34:	40023800 	.word	0x40023800
 8001a38:	08007894 	.word	0x08007894
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	20000004 	.word	0x20000004

08001a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a48:	b094      	sub	sp, #80	; 0x50
 8001a4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a50:	2300      	movs	r3, #0
 8001a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a54:	2300      	movs	r3, #0
 8001a56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a5c:	4b79      	ldr	r3, [pc, #484]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d00d      	beq.n	8001a84 <HAL_RCC_GetSysClockFreq+0x40>
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	f200 80e1 	bhi.w	8001c30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0x34>
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d003      	beq.n	8001a7e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a76:	e0db      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a78:	4b73      	ldr	r3, [pc, #460]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a7c:	e0db      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a7e:	4b72      	ldr	r3, [pc, #456]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a82:	e0d8      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a84:	4b6f      	ldr	r3, [pc, #444]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a8c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a8e:	4b6d      	ldr	r3, [pc, #436]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d063      	beq.n	8001b62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9a:	4b6a      	ldr	r3, [pc, #424]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	099b      	lsrs	r3, r3, #6
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001aa4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aac:	633b      	str	r3, [r7, #48]	; 0x30
 8001aae:	2300      	movs	r3, #0
 8001ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ab2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ab6:	4622      	mov	r2, r4
 8001ab8:	462b      	mov	r3, r5
 8001aba:	f04f 0000 	mov.w	r0, #0
 8001abe:	f04f 0100 	mov.w	r1, #0
 8001ac2:	0159      	lsls	r1, r3, #5
 8001ac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac8:	0150      	lsls	r0, r2, #5
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4621      	mov	r1, r4
 8001ad0:	1a51      	subs	r1, r2, r1
 8001ad2:	6139      	str	r1, [r7, #16]
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	eb63 0301 	sbc.w	r3, r3, r1
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ae8:	4659      	mov	r1, fp
 8001aea:	018b      	lsls	r3, r1, #6
 8001aec:	4651      	mov	r1, sl
 8001aee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001af2:	4651      	mov	r1, sl
 8001af4:	018a      	lsls	r2, r1, #6
 8001af6:	4651      	mov	r1, sl
 8001af8:	ebb2 0801 	subs.w	r8, r2, r1
 8001afc:	4659      	mov	r1, fp
 8001afe:	eb63 0901 	sbc.w	r9, r3, r1
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b16:	4690      	mov	r8, r2
 8001b18:	4699      	mov	r9, r3
 8001b1a:	4623      	mov	r3, r4
 8001b1c:	eb18 0303 	adds.w	r3, r8, r3
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	462b      	mov	r3, r5
 8001b24:	eb49 0303 	adc.w	r3, r9, r3
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b36:	4629      	mov	r1, r5
 8001b38:	028b      	lsls	r3, r1, #10
 8001b3a:	4621      	mov	r1, r4
 8001b3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b40:	4621      	mov	r1, r4
 8001b42:	028a      	lsls	r2, r1, #10
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b54:	f7fe fbbe 	bl	80002d4 <__aeabi_uldivmod>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b60:	e058      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b62:	4b38      	ldr	r3, [pc, #224]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	099b      	lsrs	r3, r3, #6
 8001b68:	2200      	movs	r2, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b72:	623b      	str	r3, [r7, #32]
 8001b74:	2300      	movs	r3, #0
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
 8001b78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b7c:	4642      	mov	r2, r8
 8001b7e:	464b      	mov	r3, r9
 8001b80:	f04f 0000 	mov.w	r0, #0
 8001b84:	f04f 0100 	mov.w	r1, #0
 8001b88:	0159      	lsls	r1, r3, #5
 8001b8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b8e:	0150      	lsls	r0, r2, #5
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4641      	mov	r1, r8
 8001b96:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b9a:	4649      	mov	r1, r9
 8001b9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bb4:	ebb2 040a 	subs.w	r4, r2, sl
 8001bb8:	eb63 050b 	sbc.w	r5, r3, fp
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	00eb      	lsls	r3, r5, #3
 8001bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bca:	00e2      	lsls	r2, r4, #3
 8001bcc:	4614      	mov	r4, r2
 8001bce:	461d      	mov	r5, r3
 8001bd0:	4643      	mov	r3, r8
 8001bd2:	18e3      	adds	r3, r4, r3
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	464b      	mov	r3, r9
 8001bd8:	eb45 0303 	adc.w	r3, r5, r3
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bea:	4629      	mov	r1, r5
 8001bec:	028b      	lsls	r3, r1, #10
 8001bee:	4621      	mov	r1, r4
 8001bf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bf4:	4621      	mov	r1, r4
 8001bf6:	028a      	lsls	r2, r1, #10
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bfe:	2200      	movs	r2, #0
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	61fa      	str	r2, [r7, #28]
 8001c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c08:	f7fe fb64 	bl	80002d4 <__aeabi_uldivmod>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4613      	mov	r3, r2
 8001c12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	0c1b      	lsrs	r3, r3, #16
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	3301      	adds	r3, #1
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001c24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c2e:	e002      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3750      	adds	r7, #80	; 0x50
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800
 8001c48:	00f42400 	.word	0x00f42400

08001c4c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000000 	.word	0x20000000

08001c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c68:	f7ff fff0 	bl	8001c4c <HAL_RCC_GetHCLKFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	0a9b      	lsrs	r3, r3, #10
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	4903      	ldr	r1, [pc, #12]	; (8001c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40023800 	.word	0x40023800
 8001c88:	080078a4 	.word	0x080078a4

08001c8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	220f      	movs	r2, #15
 8001c9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 0203 	and.w	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	08db      	lsrs	r3, r3, #3
 8001cc6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <HAL_RCC_GetClockConfig+0x60>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 020f 	and.w	r2, r3, #15
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	601a      	str	r2, [r3, #0]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40023c00 	.word	0x40023c00

08001cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e049      	b.n	8001d96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f841 	bl	8001d9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4610      	mov	r0, r2
 8001d30:	f000 f9e8 	bl	8002104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d001      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e054      	b.n	8001e76 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a26      	ldr	r2, [pc, #152]	; (8001e84 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d022      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df6:	d01d      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a22      	ldr	r2, [pc, #136]	; (8001e88 <HAL_TIM_Base_Start_IT+0xd4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d018      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a21      	ldr	r2, [pc, #132]	; (8001e8c <HAL_TIM_Base_Start_IT+0xd8>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d013      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1f      	ldr	r2, [pc, #124]	; (8001e90 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00e      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1e      	ldr	r2, [pc, #120]	; (8001e94 <HAL_TIM_Base_Start_IT+0xe0>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d009      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a1c      	ldr	r2, [pc, #112]	; (8001e98 <HAL_TIM_Base_Start_IT+0xe4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d004      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a1b      	ldr	r2, [pc, #108]	; (8001e9c <HAL_TIM_Base_Start_IT+0xe8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d115      	bne.n	8001e60 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <HAL_TIM_Base_Start_IT+0xec>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d015      	beq.n	8001e72 <HAL_TIM_Base_Start_IT+0xbe>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e4c:	d011      	beq.n	8001e72 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f042 0201 	orr.w	r2, r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e5e:	e008      	b.n	8001e72 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e000      	b.n	8001e74 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40010000 	.word	0x40010000
 8001e88:	40000400 	.word	0x40000400
 8001e8c:	40000800 	.word	0x40000800
 8001e90:	40000c00 	.word	0x40000c00
 8001e94:	40010400 	.word	0x40010400
 8001e98:	40014000 	.word	0x40014000
 8001e9c:	40001800 	.word	0x40001800
 8001ea0:	00010007 	.word	0x00010007

08001ea4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d020      	beq.n	8001f08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d01b      	beq.n	8001f08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0202 	mvn.w	r2, #2
 8001ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f8e9 	bl	80020c6 <HAL_TIM_IC_CaptureCallback>
 8001ef4:	e005      	b.n	8001f02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8db 	bl	80020b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f8ec 	bl	80020da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d020      	beq.n	8001f54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d01b      	beq.n	8001f54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0204 	mvn.w	r2, #4
 8001f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f8c3 	bl	80020c6 <HAL_TIM_IC_CaptureCallback>
 8001f40:	e005      	b.n	8001f4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8b5 	bl	80020b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f8c6 	bl	80020da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d020      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d01b      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0208 	mvn.w	r2, #8
 8001f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2204      	movs	r2, #4
 8001f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f89d 	bl	80020c6 <HAL_TIM_IC_CaptureCallback>
 8001f8c:	e005      	b.n	8001f9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f88f 	bl	80020b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f8a0 	bl	80020da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d020      	beq.n	8001fec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d01b      	beq.n	8001fec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0210 	mvn.w	r2, #16
 8001fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f877 	bl	80020c6 <HAL_TIM_IC_CaptureCallback>
 8001fd8:	e005      	b.n	8001fe6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f869 	bl	80020b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f87a 	bl	80020da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00c      	beq.n	8002010 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d007      	beq.n	8002010 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0201 	mvn.w	r2, #1
 8002008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fd30 	bl	8000a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002016:	2b00      	cmp	r3, #0
 8002018:	d104      	bne.n	8002024 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00c      	beq.n	800203e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202a:	2b00      	cmp	r3, #0
 800202c:	d007      	beq.n	800203e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8002036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f919 	bl	8002270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00c      	beq.n	8002062 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204e:	2b00      	cmp	r3, #0
 8002050:	d007      	beq.n	8002062 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800205a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f911 	bl	8002284 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00c      	beq.n	8002086 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800207e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f834 	bl	80020ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00c      	beq.n	80020aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b00      	cmp	r3, #0
 8002098:	d007      	beq.n	80020aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f06f 0220 	mvn.w	r2, #32
 80020a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f8d9 	bl	800225c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a46      	ldr	r2, [pc, #280]	; (8002230 <TIM_Base_SetConfig+0x12c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d013      	beq.n	8002144 <TIM_Base_SetConfig+0x40>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002122:	d00f      	beq.n	8002144 <TIM_Base_SetConfig+0x40>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a43      	ldr	r2, [pc, #268]	; (8002234 <TIM_Base_SetConfig+0x130>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d00b      	beq.n	8002144 <TIM_Base_SetConfig+0x40>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a42      	ldr	r2, [pc, #264]	; (8002238 <TIM_Base_SetConfig+0x134>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d007      	beq.n	8002144 <TIM_Base_SetConfig+0x40>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a41      	ldr	r2, [pc, #260]	; (800223c <TIM_Base_SetConfig+0x138>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d003      	beq.n	8002144 <TIM_Base_SetConfig+0x40>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a40      	ldr	r2, [pc, #256]	; (8002240 <TIM_Base_SetConfig+0x13c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d108      	bne.n	8002156 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800214a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a35      	ldr	r2, [pc, #212]	; (8002230 <TIM_Base_SetConfig+0x12c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d02b      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002164:	d027      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a32      	ldr	r2, [pc, #200]	; (8002234 <TIM_Base_SetConfig+0x130>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d023      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a31      	ldr	r2, [pc, #196]	; (8002238 <TIM_Base_SetConfig+0x134>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d01f      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a30      	ldr	r2, [pc, #192]	; (800223c <TIM_Base_SetConfig+0x138>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01b      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a2f      	ldr	r2, [pc, #188]	; (8002240 <TIM_Base_SetConfig+0x13c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d017      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a2e      	ldr	r2, [pc, #184]	; (8002244 <TIM_Base_SetConfig+0x140>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a2d      	ldr	r2, [pc, #180]	; (8002248 <TIM_Base_SetConfig+0x144>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00f      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a2c      	ldr	r2, [pc, #176]	; (800224c <TIM_Base_SetConfig+0x148>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00b      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a2b      	ldr	r2, [pc, #172]	; (8002250 <TIM_Base_SetConfig+0x14c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d007      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a2a      	ldr	r2, [pc, #168]	; (8002254 <TIM_Base_SetConfig+0x150>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d003      	beq.n	80021b6 <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a29      	ldr	r2, [pc, #164]	; (8002258 <TIM_Base_SetConfig+0x154>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d108      	bne.n	80021c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a10      	ldr	r2, [pc, #64]	; (8002230 <TIM_Base_SetConfig+0x12c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d003      	beq.n	80021fc <TIM_Base_SetConfig+0xf8>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a12      	ldr	r2, [pc, #72]	; (8002240 <TIM_Base_SetConfig+0x13c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d103      	bne.n	8002204 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	691a      	ldr	r2, [r3, #16]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b01      	cmp	r3, #1
 8002214:	d105      	bne.n	8002222 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f023 0201 	bic.w	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	611a      	str	r2, [r3, #16]
  }
}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40010000 	.word	0x40010000
 8002234:	40000400 	.word	0x40000400
 8002238:	40000800 	.word	0x40000800
 800223c:	40000c00 	.word	0x40000c00
 8002240:	40010400 	.word	0x40010400
 8002244:	40014000 	.word	0x40014000
 8002248:	40014400 	.word	0x40014400
 800224c:	40014800 	.word	0x40014800
 8002250:	40001800 	.word	0x40001800
 8002254:	40001c00 	.word	0x40001c00
 8002258:	40002000 	.word	0x40002000

0800225c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f103 0208 	add.w	r2, r3, #8
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295
 80022b0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f103 0208 	add.w	r2, r3, #8
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f103 0208 	add.w	r2, r3, #8
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022f2:	b480      	push	{r7}
 80022f4:	b085      	sub	sp, #20
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	601a      	str	r2, [r3, #0]
}
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800233a:	b480      	push	{r7}
 800233c:	b085      	sub	sp, #20
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d103      	bne.n	800235a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	e00c      	b.n	8002374 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3308      	adds	r3, #8
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	e002      	b.n	8002368 <vListInsert+0x2e>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	429a      	cmp	r2, r3
 8002372:	d2f6      	bcs.n	8002362 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	601a      	str	r2, [r3, #0]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6892      	ldr	r2, [r2, #8]
 80023c2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6852      	ldr	r2, [r2, #4]
 80023cc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d103      	bne.n	80023e0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	1e5a      	subs	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <xQueueGenericReset+0x2a>
        __asm volatile
 8002414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002418:	f383 8811 	msr	BASEPRI, r3
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	f3bf 8f4f 	dsb	sy
 8002424:	60bb      	str	r3, [r7, #8]
    }
 8002426:	bf00      	nop
 8002428:	e7fe      	b.n	8002428 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800242a:	f002 f94b 	bl	80046c4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002436:	68f9      	ldr	r1, [r7, #12]
 8002438:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800243a:	fb01 f303 	mul.w	r3, r1, r3
 800243e:	441a      	add	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245a:	3b01      	subs	r3, #1
 800245c:	68f9      	ldr	r1, [r7, #12]
 800245e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	441a      	add	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	22ff      	movs	r2, #255	; 0xff
 800246e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	22ff      	movs	r2, #255	; 0xff
 8002476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d114      	bne.n	80024aa <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d01a      	beq.n	80024be <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3310      	adds	r3, #16
 800248c:	4618      	mov	r0, r3
 800248e:	f001 f9a1 	bl	80037d4 <xTaskRemoveFromEventList>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d012      	beq.n	80024be <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <xQueueGenericReset+0xcc>)
 800249a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	f3bf 8f6f 	isb	sy
 80024a8:	e009      	b.n	80024be <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3310      	adds	r3, #16
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fef2 	bl	8002298 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	3324      	adds	r3, #36	; 0x24
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff feed 	bl	8002298 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80024be:	f002 f931 	bl	8004724 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80024c2:	2301      	movs	r3, #1
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	e000ed04 	.word	0xe000ed04

080024d0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08c      	sub	sp, #48	; 0x30
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	4613      	mov	r3, r2
 80024dc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10a      	bne.n	80024fa <xQueueGenericCreate+0x2a>
        __asm volatile
 80024e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e8:	f383 8811 	msr	BASEPRI, r3
 80024ec:	f3bf 8f6f 	isb	sy
 80024f0:	f3bf 8f4f 	dsb	sy
 80024f4:	61bb      	str	r3, [r7, #24]
    }
 80024f6:	bf00      	nop
 80024f8:	e7fe      	b.n	80024f8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	fb02 f303 	mul.w	r3, r2, r3
 8002502:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d006      	beq.n	8002518 <xQueueGenericCreate+0x48>
 800250a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	429a      	cmp	r2, r3
 8002516:	d101      	bne.n	800251c <xQueueGenericCreate+0x4c>
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <xQueueGenericCreate+0x4e>
 800251c:	2300      	movs	r3, #0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10a      	bne.n	8002538 <xQueueGenericCreate+0x68>
        __asm volatile
 8002522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002526:	f383 8811 	msr	BASEPRI, r3
 800252a:	f3bf 8f6f 	isb	sy
 800252e:	f3bf 8f4f 	dsb	sy
 8002532:	617b      	str	r3, [r7, #20]
    }
 8002534:	bf00      	nop
 8002536:	e7fe      	b.n	8002536 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800253e:	d90a      	bls.n	8002556 <xQueueGenericCreate+0x86>
        __asm volatile
 8002540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002544:	f383 8811 	msr	BASEPRI, r3
 8002548:	f3bf 8f6f 	isb	sy
 800254c:	f3bf 8f4f 	dsb	sy
 8002550:	613b      	str	r3, [r7, #16]
    }
 8002552:	bf00      	nop
 8002554:	e7fe      	b.n	8002554 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	3350      	adds	r3, #80	; 0x50
 800255a:	4618      	mov	r0, r3
 800255c:	f002 f9de 	bl	800491c <pvPortMalloc>
 8002560:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00d      	beq.n	8002584 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	3350      	adds	r3, #80	; 0x50
 8002570:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002572:	79fa      	ldrb	r2, [r7, #7]
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	4613      	mov	r3, r2
 800257a:	69fa      	ldr	r2, [r7, #28]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 f805 	bl	800258e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002584:	6a3b      	ldr	r3, [r7, #32]
    }
 8002586:	4618      	mov	r0, r3
 8002588:	3728      	adds	r7, #40	; 0x28
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b084      	sub	sp, #16
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d103      	bne.n	80025aa <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	e002      	b.n	80025b0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025bc:	2101      	movs	r1, #1
 80025be:	69b8      	ldr	r0, [r7, #24]
 80025c0:	f7ff ff1e 	bl	8002400 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	78fa      	ldrb	r2, [r7, #3]
 80025c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80025cc:	78fb      	ldrb	r3, [r7, #3]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	68f9      	ldr	r1, [r7, #12]
 80025d2:	2073      	movs	r0, #115	; 0x73
 80025d4:	f004 f944 	bl	8006860 <SEGGER_SYSVIEW_RecordU32x3>
}
 80025d8:	bf00      	nop
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b090      	sub	sp, #64	; 0x40
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80025ee:	2300      	movs	r3, #0
 80025f0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80025f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10a      	bne.n	8002612 <xQueueGenericSend+0x32>
        __asm volatile
 80025fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002600:	f383 8811 	msr	BASEPRI, r3
 8002604:	f3bf 8f6f 	isb	sy
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800260e:	bf00      	nop
 8002610:	e7fe      	b.n	8002610 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d103      	bne.n	8002620 <xQueueGenericSend+0x40>
 8002618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <xQueueGenericSend+0x44>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <xQueueGenericSend+0x46>
 8002624:	2300      	movs	r3, #0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10a      	bne.n	8002640 <xQueueGenericSend+0x60>
        __asm volatile
 800262a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262e:	f383 8811 	msr	BASEPRI, r3
 8002632:	f3bf 8f6f 	isb	sy
 8002636:	f3bf 8f4f 	dsb	sy
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800263c:	bf00      	nop
 800263e:	e7fe      	b.n	800263e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b02      	cmp	r3, #2
 8002644:	d103      	bne.n	800264e <xQueueGenericSend+0x6e>
 8002646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <xQueueGenericSend+0x72>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <xQueueGenericSend+0x74>
 8002652:	2300      	movs	r3, #0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10a      	bne.n	800266e <xQueueGenericSend+0x8e>
        __asm volatile
 8002658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265c:	f383 8811 	msr	BASEPRI, r3
 8002660:	f3bf 8f6f 	isb	sy
 8002664:	f3bf 8f4f 	dsb	sy
 8002668:	623b      	str	r3, [r7, #32]
    }
 800266a:	bf00      	nop
 800266c:	e7fe      	b.n	800266c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800266e:	f001 fa51 	bl	8003b14 <xTaskGetSchedulerState>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d102      	bne.n	800267e <xQueueGenericSend+0x9e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <xQueueGenericSend+0xa2>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <xQueueGenericSend+0xa4>
 8002682:	2300      	movs	r3, #0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10a      	bne.n	800269e <xQueueGenericSend+0xbe>
        __asm volatile
 8002688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268c:	f383 8811 	msr	BASEPRI, r3
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	61fb      	str	r3, [r7, #28]
    }
 800269a:	bf00      	nop
 800269c:	e7fe      	b.n	800269c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800269e:	f002 f811 	bl	80046c4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d302      	bcc.n	80026b4 <xQueueGenericSend+0xd4>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d136      	bne.n	8002722 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80026b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b6:	4618      	mov	r0, r3
 80026b8:	f004 fe60 	bl	800737c <SEGGER_SYSVIEW_ShrinkId>
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	460b      	mov	r3, r1
 80026c6:	4601      	mov	r1, r0
 80026c8:	205a      	movs	r0, #90	; 0x5a
 80026ca:	f004 f93f 	bl	800694c <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026d4:	f000 fa78 	bl	8002bc8 <prvCopyDataToQueue>
 80026d8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d010      	beq.n	8002704 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e4:	3324      	adds	r3, #36	; 0x24
 80026e6:	4618      	mov	r0, r3
 80026e8:	f001 f874 	bl	80037d4 <xTaskRemoveFromEventList>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d013      	beq.n	800271a <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80026f2:	4b4d      	ldr	r3, [pc, #308]	; (8002828 <xQueueGenericSend+0x248>)
 80026f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	f3bf 8f6f 	isb	sy
 8002702:	e00a      	b.n	800271a <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800270a:	4b47      	ldr	r3, [pc, #284]	; (8002828 <xQueueGenericSend+0x248>)
 800270c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	f3bf 8f4f 	dsb	sy
 8002716:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800271a:	f002 f803 	bl	8004724 <vPortExitCritical>
                return pdPASS;
 800271e:	2301      	movs	r3, #1
 8002720:	e07d      	b.n	800281e <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d110      	bne.n	800274a <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002728:	f001 fffc 	bl	8004724 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800272c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272e:	4618      	mov	r0, r3
 8002730:	f004 fe24 	bl	800737c <SEGGER_SYSVIEW_ShrinkId>
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	460b      	mov	r3, r1
 800273e:	4601      	mov	r1, r0
 8002740:	205a      	movs	r0, #90	; 0x5a
 8002742:	f004 f903 	bl	800694c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002746:	2300      	movs	r3, #0
 8002748:	e069      	b.n	800281e <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800274a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274c:	2b00      	cmp	r3, #0
 800274e:	d106      	bne.n	800275e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4618      	mov	r0, r3
 8002756:	f001 f8a3 	bl	80038a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800275a:	2301      	movs	r3, #1
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800275e:	f001 ffe1 	bl	8004724 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002762:	f000 fdef 	bl	8003344 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002766:	f001 ffad 	bl	80046c4 <vPortEnterCritical>
 800276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002770:	b25b      	sxtb	r3, r3
 8002772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002776:	d103      	bne.n	8002780 <xQueueGenericSend+0x1a0>
 8002778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002782:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002786:	b25b      	sxtb	r3, r3
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278c:	d103      	bne.n	8002796 <xQueueGenericSend+0x1b6>
 800278e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002796:	f001 ffc5 	bl	8004724 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800279a:	1d3a      	adds	r2, r7, #4
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f001 f892 	bl	80038cc <xTaskCheckForTimeOut>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d124      	bne.n	80027f8 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027b0:	f000 fb02 	bl	8002db8 <prvIsQueueFull>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d018      	beq.n	80027ec <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027bc:	3310      	adds	r3, #16
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 ffb4 	bl	8003730 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80027c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ca:	f000 fa8d 	bl	8002ce8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80027ce:	f000 fdc7 	bl	8003360 <xTaskResumeAll>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f47f af62 	bne.w	800269e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <xQueueGenericSend+0x248>)
 80027dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	f3bf 8f4f 	dsb	sy
 80027e6:	f3bf 8f6f 	isb	sy
 80027ea:	e758      	b.n	800269e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80027ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ee:	f000 fa7b 	bl	8002ce8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80027f2:	f000 fdb5 	bl	8003360 <xTaskResumeAll>
 80027f6:	e752      	b.n	800269e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80027f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027fa:	f000 fa75 	bl	8002ce8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80027fe:	f000 fdaf 	bl	8003360 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002804:	4618      	mov	r0, r3
 8002806:	f004 fdb9 	bl	800737c <SEGGER_SYSVIEW_ShrinkId>
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	460b      	mov	r3, r1
 8002814:	4601      	mov	r1, r0
 8002816:	205a      	movs	r0, #90	; 0x5a
 8002818:	f004 f898 	bl	800694c <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800281c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800281e:	4618      	mov	r0, r3
 8002820:	3738      	adds	r7, #56	; 0x38
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	e000ed04 	.word	0xe000ed04

0800282c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b090      	sub	sp, #64	; 0x40
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800283e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10a      	bne.n	800285a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002848:	f383 8811 	msr	BASEPRI, r3
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	f3bf 8f4f 	dsb	sy
 8002854:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002856:	bf00      	nop
 8002858:	e7fe      	b.n	8002858 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d103      	bne.n	8002868 <xQueueGenericSendFromISR+0x3c>
 8002860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <xQueueGenericSendFromISR+0x40>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <xQueueGenericSendFromISR+0x42>
 800286c:	2300      	movs	r3, #0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10a      	bne.n	8002888 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002876:	f383 8811 	msr	BASEPRI, r3
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002884:	bf00      	nop
 8002886:	e7fe      	b.n	8002886 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d103      	bne.n	8002896 <xQueueGenericSendFromISR+0x6a>
 800288e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <xQueueGenericSendFromISR+0x6e>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <xQueueGenericSendFromISR+0x70>
 800289a:	2300      	movs	r3, #0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10a      	bne.n	80028b6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80028a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	623b      	str	r3, [r7, #32]
    }
 80028b2:	bf00      	nop
 80028b4:	e7fe      	b.n	80028b4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028b6:	f001 fff1 	bl	800489c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80028ba:	f3ef 8211 	mrs	r2, BASEPRI
 80028be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c2:	f383 8811 	msr	BASEPRI, r3
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	61fa      	str	r2, [r7, #28]
 80028d0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80028d2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80028d4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028de:	429a      	cmp	r2, r3
 80028e0:	d302      	bcc.n	80028e8 <xQueueGenericSendFromISR+0xbc>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d148      	bne.n	800297a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80028e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80028f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fa:	4618      	mov	r0, r3
 80028fc:	f004 fd3e 	bl	800737c <SEGGER_SYSVIEW_ShrinkId>
 8002900:	4601      	mov	r1, r0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	461a      	mov	r2, r3
 8002906:	2060      	movs	r0, #96	; 0x60
 8002908:	f003 ff50 	bl	80067ac <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002912:	f000 f959 	bl	8002bc8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002916:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800291a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291e:	d112      	bne.n	8002946 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	2b00      	cmp	r3, #0
 8002926:	d025      	beq.n	8002974 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292a:	3324      	adds	r3, #36	; 0x24
 800292c:	4618      	mov	r0, r3
 800292e:	f000 ff51 	bl	80037d4 <xTaskRemoveFromEventList>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d01d      	beq.n	8002974 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d01a      	beq.n	8002974 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	e016      	b.n	8002974 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002946:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800294a:	2b7f      	cmp	r3, #127	; 0x7f
 800294c:	d10a      	bne.n	8002964 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800294e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002952:	f383 8811 	msr	BASEPRI, r3
 8002956:	f3bf 8f6f 	isb	sy
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	617b      	str	r3, [r7, #20]
    }
 8002960:	bf00      	nop
 8002962:	e7fe      	b.n	8002962 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002964:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002968:	3301      	adds	r3, #1
 800296a:	b2db      	uxtb	r3, r3
 800296c:	b25a      	sxtb	r2, r3
 800296e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002974:	2301      	movs	r3, #1
 8002976:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002978:	e00b      	b.n	8002992 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800297a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297c:	4618      	mov	r0, r3
 800297e:	f004 fcfd 	bl	800737c <SEGGER_SYSVIEW_ShrinkId>
 8002982:	4601      	mov	r1, r0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	461a      	mov	r2, r3
 8002988:	2060      	movs	r0, #96	; 0x60
 800298a:	f003 ff0f 	bl	80067ac <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800298e:	2300      	movs	r3, #0
 8002990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002994:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800299c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800299e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3740      	adds	r7, #64	; 0x40
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b08f      	sub	sp, #60	; 0x3c
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80029bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10a      	bne.n	80029d8 <xQueueReceive+0x30>
        __asm volatile
 80029c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c6:	f383 8811 	msr	BASEPRI, r3
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	623b      	str	r3, [r7, #32]
    }
 80029d4:	bf00      	nop
 80029d6:	e7fe      	b.n	80029d6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d103      	bne.n	80029e6 <xQueueReceive+0x3e>
 80029de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <xQueueReceive+0x42>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <xQueueReceive+0x44>
 80029ea:	2300      	movs	r3, #0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <xQueueReceive+0x5e>
        __asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	61fb      	str	r3, [r7, #28]
    }
 8002a02:	bf00      	nop
 8002a04:	e7fe      	b.n	8002a04 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a06:	f001 f885 	bl	8003b14 <xTaskGetSchedulerState>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d102      	bne.n	8002a16 <xQueueReceive+0x6e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <xQueueReceive+0x72>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <xQueueReceive+0x74>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <xQueueReceive+0x8e>
        __asm volatile
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	61bb      	str	r3, [r7, #24]
    }
 8002a32:	bf00      	nop
 8002a34:	e7fe      	b.n	8002a34 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a36:	f001 fe45 	bl	80046c4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d02f      	beq.n	8002aa6 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a46:	68b9      	ldr	r1, [r7, #8]
 8002a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a4a:	f000 f927 	bl	8002c9c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a50:	4618      	mov	r0, r3
 8002a52:	f004 fc93 	bl	800737c <SEGGER_SYSVIEW_ShrinkId>
 8002a56:	4604      	mov	r4, r0
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f004 fc8f 	bl	800737c <SEGGER_SYSVIEW_ShrinkId>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2101      	movs	r1, #1
 8002a64:	9100      	str	r1, [sp, #0]
 8002a66:	4621      	mov	r1, r4
 8002a68:	205c      	movs	r0, #92	; 0x5c
 8002a6a:	f003 ff6f 	bl	800694c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	1e5a      	subs	r2, r3, #1
 8002a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a74:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00f      	beq.n	8002a9e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	3310      	adds	r3, #16
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fea6 	bl	80037d4 <xTaskRemoveFromEventList>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d007      	beq.n	8002a9e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002a8e:	4b4d      	ldr	r3, [pc, #308]	; (8002bc4 <xQueueReceive+0x21c>)
 8002a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002a9e:	f001 fe41 	bl	8004724 <vPortExitCritical>
                return pdPASS;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e08a      	b.n	8002bbc <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d113      	bne.n	8002ad4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002aac:	f001 fe3a 	bl	8004724 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f004 fc62 	bl	800737c <SEGGER_SYSVIEW_ShrinkId>
 8002ab8:	4604      	mov	r4, r0
 8002aba:	2000      	movs	r0, #0
 8002abc:	f004 fc5e 	bl	800737c <SEGGER_SYSVIEW_ShrinkId>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	9100      	str	r1, [sp, #0]
 8002ac8:	4621      	mov	r1, r4
 8002aca:	205c      	movs	r0, #92	; 0x5c
 8002acc:	f003 ff3e 	bl	800694c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e073      	b.n	8002bbc <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ada:	f107 0310 	add.w	r3, r7, #16
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 fede 	bl	80038a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ae8:	f001 fe1c 	bl	8004724 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002aec:	f000 fc2a 	bl	8003344 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002af0:	f001 fde8 	bl	80046c4 <vPortEnterCritical>
 8002af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002afa:	b25b      	sxtb	r3, r3
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	d103      	bne.n	8002b0a <xQueueReceive+0x162>
 8002b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b10:	b25b      	sxtb	r3, r3
 8002b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b16:	d103      	bne.n	8002b20 <xQueueReceive+0x178>
 8002b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b20:	f001 fe00 	bl	8004724 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b24:	1d3a      	adds	r2, r7, #4
 8002b26:	f107 0310 	add.w	r3, r7, #16
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fecd 	bl	80038cc <xTaskCheckForTimeOut>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d124      	bne.n	8002b82 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b3a:	f000 f927 	bl	8002d8c <prvIsQueueEmpty>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d018      	beq.n	8002b76 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	3324      	adds	r3, #36	; 0x24
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fdef 	bl	8003730 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b54:	f000 f8c8 	bl	8002ce8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b58:	f000 fc02 	bl	8003360 <xTaskResumeAll>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f47f af69 	bne.w	8002a36 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002b64:	4b17      	ldr	r3, [pc, #92]	; (8002bc4 <xQueueReceive+0x21c>)
 8002b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	e75f      	b.n	8002a36 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b78:	f000 f8b6 	bl	8002ce8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b7c:	f000 fbf0 	bl	8003360 <xTaskResumeAll>
 8002b80:	e759      	b.n	8002a36 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b84:	f000 f8b0 	bl	8002ce8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b88:	f000 fbea 	bl	8003360 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b8e:	f000 f8fd 	bl	8002d8c <prvIsQueueEmpty>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f43f af4e 	beq.w	8002a36 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f004 fbed 	bl	800737c <SEGGER_SYSVIEW_ShrinkId>
 8002ba2:	4604      	mov	r4, r0
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f004 fbe9 	bl	800737c <SEGGER_SYSVIEW_ShrinkId>
 8002baa:	4602      	mov	r2, r0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2101      	movs	r1, #1
 8002bb0:	9100      	str	r1, [sp, #0]
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	205c      	movs	r0, #92	; 0x5c
 8002bb6:	f003 fec9 	bl	800694c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002bba:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3734      	adds	r7, #52	; 0x34
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd90      	pop	{r4, r7, pc}
 8002bc4:	e000ed04 	.word	0xe000ed04

08002bc8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10d      	bne.n	8002c02 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d14d      	bne.n	8002c8a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 ffac 	bl	8003b50 <xTaskPriorityDisinherit>
 8002bf8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	e043      	b.n	8002c8a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d119      	bne.n	8002c3c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6858      	ldr	r0, [r3, #4]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	461a      	mov	r2, r3
 8002c12:	68b9      	ldr	r1, [r7, #8]
 8002c14:	f004 fd7a 	bl	800770c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	441a      	add	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d32b      	bcc.n	8002c8a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	e026      	b.n	8002c8a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	68d8      	ldr	r0, [r3, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	461a      	mov	r2, r3
 8002c46:	68b9      	ldr	r1, [r7, #8]
 8002c48:	f004 fd60 	bl	800770c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	425b      	negs	r3, r3
 8002c56:	441a      	add	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d207      	bcs.n	8002c78 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	425b      	negs	r3, r3
 8002c72:	441a      	add	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d105      	bne.n	8002c8a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002c92:	697b      	ldr	r3, [r7, #20]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d018      	beq.n	8002ce0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	441a      	add	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d303      	bcc.n	8002cd0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68d9      	ldr	r1, [r3, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	461a      	mov	r2, r3
 8002cda:	6838      	ldr	r0, [r7, #0]
 8002cdc:	f004 fd16 	bl	800770c <memcpy>
    }
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002cf0:	f001 fce8 	bl	80046c4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cfa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cfc:	e011      	b.n	8002d22 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d012      	beq.n	8002d2c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3324      	adds	r3, #36	; 0x24
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fd62 	bl	80037d4 <xTaskRemoveFromEventList>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002d16:	f000 fe3f 	bl	8003998 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	dce9      	bgt.n	8002cfe <prvUnlockQueue+0x16>
 8002d2a:	e000      	b.n	8002d2e <prvUnlockQueue+0x46>
                        break;
 8002d2c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	22ff      	movs	r2, #255	; 0xff
 8002d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002d36:	f001 fcf5 	bl	8004724 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d3a:	f001 fcc3 	bl	80046c4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d44:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d46:	e011      	b.n	8002d6c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d012      	beq.n	8002d76 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3310      	adds	r3, #16
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 fd3d 	bl	80037d4 <xTaskRemoveFromEventList>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002d60:	f000 fe1a 	bl	8003998 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d64:	7bbb      	ldrb	r3, [r7, #14]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	dce9      	bgt.n	8002d48 <prvUnlockQueue+0x60>
 8002d74:	e000      	b.n	8002d78 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002d76:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	22ff      	movs	r2, #255	; 0xff
 8002d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002d80:	f001 fcd0 	bl	8004724 <vPortExitCritical>
}
 8002d84:	bf00      	nop
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d94:	f001 fc96 	bl	80046c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d102      	bne.n	8002da6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002da0:	2301      	movs	r3, #1
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	e001      	b.n	8002daa <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002daa:	f001 fcbb 	bl	8004724 <vPortExitCritical>

    return xReturn;
 8002dae:	68fb      	ldr	r3, [r7, #12]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002dc0:	f001 fc80 	bl	80046c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d102      	bne.n	8002dd6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	e001      	b.n	8002dda <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002dda:	f001 fca3 	bl	8004724 <vPortExitCritical>

    return xReturn;
 8002dde:	68fb      	ldr	r3, [r7, #12]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	e01e      	b.n	8002e36 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002df8:	4a13      	ldr	r2, [pc, #76]	; (8002e48 <vQueueAddToRegistry+0x60>)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d115      	bne.n	8002e30 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e04:	4910      	ldr	r1, [pc, #64]	; (8002e48 <vQueueAddToRegistry+0x60>)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002e0e:	4a0e      	ldr	r2, [pc, #56]	; (8002e48 <vQueueAddToRegistry+0x60>)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f004 faad 	bl	800737c <SEGGER_SYSVIEW_ShrinkId>
 8002e22:	4601      	mov	r1, r0
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	2071      	movs	r0, #113	; 0x71
 8002e2a:	f003 fcbf 	bl	80067ac <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002e2e:	e006      	b.n	8002e3e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	3301      	adds	r3, #1
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b07      	cmp	r3, #7
 8002e3a:	d9dd      	bls.n	8002df8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000088 	.word	0x20000088

08002e4c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002e5c:	f001 fc32 	bl	80046c4 <vPortEnterCritical>
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e66:	b25b      	sxtb	r3, r3
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6c:	d103      	bne.n	8002e76 <vQueueWaitForMessageRestricted+0x2a>
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e7c:	b25b      	sxtb	r3, r3
 8002e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e82:	d103      	bne.n	8002e8c <vQueueWaitForMessageRestricted+0x40>
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e8c:	f001 fc4a 	bl	8004724 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d106      	bne.n	8002ea6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	3324      	adds	r3, #36	; 0x24
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	68b9      	ldr	r1, [r7, #8]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fc69 	bl	8003778 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002ea6:	6978      	ldr	r0, [r7, #20]
 8002ea8:	f7ff ff1e 	bl	8002ce8 <prvUnlockQueue>
    }
 8002eac:	bf00      	nop
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08c      	sub	sp, #48	; 0x30
 8002eb8:	af04      	add	r7, sp, #16
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f001 fd27 	bl	800491c <pvPortMalloc>
 8002ece:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00e      	beq.n	8002ef4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ed6:	2058      	movs	r0, #88	; 0x58
 8002ed8:	f001 fd20 	bl	800491c <pvPortMalloc>
 8002edc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	631a      	str	r2, [r3, #48]	; 0x30
 8002eea:	e005      	b.n	8002ef8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002eec:	6978      	ldr	r0, [r7, #20]
 8002eee:	f001 fdf5 	bl	8004adc <vPortFree>
 8002ef2:	e001      	b.n	8002ef8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d013      	beq.n	8002f26 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002efe:	88fa      	ldrh	r2, [r7, #6]
 8002f00:	2300      	movs	r3, #0
 8002f02:	9303      	str	r3, [sp, #12]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0a:	9301      	str	r3, [sp, #4]
 8002f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68b9      	ldr	r1, [r7, #8]
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f80e 	bl	8002f36 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002f1a:	69f8      	ldr	r0, [r7, #28]
 8002f1c:	f000 f8a2 	bl	8003064 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002f20:	2301      	movs	r3, #1
 8002f22:	61bb      	str	r3, [r7, #24]
 8002f24:	e002      	b.n	8002f2c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f26:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002f2c:	69bb      	ldr	r3, [r7, #24]
    }
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3720      	adds	r7, #32
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b088      	sub	sp, #32
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	21a5      	movs	r1, #165	; 0xa5
 8002f50:	f004 fbea 	bl	8007728 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002f5e:	440b      	add	r3, r1
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	f023 0307 	bic.w	r3, r3, #7
 8002f6c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	617b      	str	r3, [r7, #20]
    }
 8002f8a:	bf00      	nop
 8002f8c:	e7fe      	b.n	8002f8c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01f      	beq.n	8002fd4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f94:	2300      	movs	r3, #0
 8002f96:	61fb      	str	r3, [r7, #28]
 8002f98:	e012      	b.n	8002fc0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	7819      	ldrb	r1, [r3, #0]
 8002fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3334      	adds	r3, #52	; 0x34
 8002faa:	460a      	mov	r2, r1
 8002fac:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d006      	beq.n	8002fc8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	61fb      	str	r3, [r7, #28]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	2b09      	cmp	r3, #9
 8002fc4:	d9e9      	bls.n	8002f9a <prvInitialiseNewTask+0x64>
 8002fc6:	e000      	b.n	8002fca <prvInitialiseNewTask+0x94>
            {
                break;
 8002fc8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002fd2:	e003      	b.n	8002fdc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d901      	bls.n	8002fe6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002fe2:	2304      	movs	r3, #4
 8002fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fea:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ff0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff f96b 	bl	80022d8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	3318      	adds	r3, #24
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff f966 	bl	80022d8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003010:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003014:	f1c3 0205 	rsb	r2, r3, #5
 8003018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003020:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	3350      	adds	r3, #80	; 0x50
 8003026:	2204      	movs	r2, #4
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f004 fb7c 	bl	8007728 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003032:	3354      	adds	r3, #84	; 0x54
 8003034:	2201      	movs	r2, #1
 8003036:	2100      	movs	r1, #0
 8003038:	4618      	mov	r0, r3
 800303a:	f004 fb75 	bl	8007728 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	68f9      	ldr	r1, [r7, #12]
 8003042:	69b8      	ldr	r0, [r7, #24]
 8003044:	f001 f98e 	bl	8004364 <pxPortInitialiseStack>
 8003048:	4602      	mov	r2, r0
 800304a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003058:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800305a:	bf00      	nop
 800305c:	3720      	adds	r7, #32
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003064:	b5b0      	push	{r4, r5, r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af02      	add	r7, sp, #8
 800306a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800306c:	f001 fb2a 	bl	80046c4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003070:	4b3b      	ldr	r3, [pc, #236]	; (8003160 <prvAddNewTaskToReadyList+0xfc>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3301      	adds	r3, #1
 8003076:	4a3a      	ldr	r2, [pc, #232]	; (8003160 <prvAddNewTaskToReadyList+0xfc>)
 8003078:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800307a:	4b3a      	ldr	r3, [pc, #232]	; (8003164 <prvAddNewTaskToReadyList+0x100>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d109      	bne.n	8003096 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003082:	4a38      	ldr	r2, [pc, #224]	; (8003164 <prvAddNewTaskToReadyList+0x100>)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003088:	4b35      	ldr	r3, [pc, #212]	; (8003160 <prvAddNewTaskToReadyList+0xfc>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d110      	bne.n	80030b2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003090:	f000 fca6 	bl	80039e0 <prvInitialiseTaskLists>
 8003094:	e00d      	b.n	80030b2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003096:	4b34      	ldr	r3, [pc, #208]	; (8003168 <prvAddNewTaskToReadyList+0x104>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d109      	bne.n	80030b2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800309e:	4b31      	ldr	r3, [pc, #196]	; (8003164 <prvAddNewTaskToReadyList+0x100>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d802      	bhi.n	80030b2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80030ac:	4a2d      	ldr	r2, [pc, #180]	; (8003164 <prvAddNewTaskToReadyList+0x100>)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80030b2:	4b2e      	ldr	r3, [pc, #184]	; (800316c <prvAddNewTaskToReadyList+0x108>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3301      	adds	r3, #1
 80030b8:	4a2c      	ldr	r2, [pc, #176]	; (800316c <prvAddNewTaskToReadyList+0x108>)
 80030ba:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030bc:	4b2b      	ldr	r3, [pc, #172]	; (800316c <prvAddNewTaskToReadyList+0x108>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d016      	beq.n	80030f8 <prvAddNewTaskToReadyList+0x94>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f004 f82f 	bl	8007130 <SEGGER_SYSVIEW_OnTaskCreate>
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	461d      	mov	r5, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	461c      	mov	r4, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	1ae3      	subs	r3, r4, r3
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	462b      	mov	r3, r5
 80030f4:	f001 fec0 	bl	8004e78 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f004 f89c 	bl	8007238 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	2201      	movs	r2, #1
 8003106:	409a      	lsls	r2, r3
 8003108:	4b19      	ldr	r3, [pc, #100]	; (8003170 <prvAddNewTaskToReadyList+0x10c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4313      	orrs	r3, r2
 800310e:	4a18      	ldr	r2, [pc, #96]	; (8003170 <prvAddNewTaskToReadyList+0x10c>)
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4a15      	ldr	r2, [pc, #84]	; (8003174 <prvAddNewTaskToReadyList+0x110>)
 8003120:	441a      	add	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3304      	adds	r3, #4
 8003126:	4619      	mov	r1, r3
 8003128:	4610      	mov	r0, r2
 800312a:	f7ff f8e2 	bl	80022f2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800312e:	f001 faf9 	bl	8004724 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003132:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <prvAddNewTaskToReadyList+0x104>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00e      	beq.n	8003158 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <prvAddNewTaskToReadyList+0x100>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	429a      	cmp	r2, r3
 8003146:	d207      	bcs.n	8003158 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <prvAddNewTaskToReadyList+0x114>)
 800314a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003158:	bf00      	nop
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bdb0      	pop	{r4, r5, r7, pc}
 8003160:	200001a0 	.word	0x200001a0
 8003164:	200000c8 	.word	0x200000c8
 8003168:	200001ac 	.word	0x200001ac
 800316c:	200001bc 	.word	0x200001bc
 8003170:	200001a8 	.word	0x200001a8
 8003174:	200000cc 	.word	0x200000cc
 8003178:	e000ed04 	.word	0xe000ed04

0800317c <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 800317c:	b580      	push	{r7, lr}
 800317e:	b08a      	sub	sp, #40	; 0x28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003186:	2300      	movs	r3, #0
 8003188:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10a      	bne.n	80031a6 <xTaskDelayUntil+0x2a>
        __asm volatile
 8003190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	617b      	str	r3, [r7, #20]
    }
 80031a2:	bf00      	nop
 80031a4:	e7fe      	b.n	80031a4 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10a      	bne.n	80031c2 <xTaskDelayUntil+0x46>
        __asm volatile
 80031ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	613b      	str	r3, [r7, #16]
    }
 80031be:	bf00      	nop
 80031c0:	e7fe      	b.n	80031c0 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 80031c2:	4b2c      	ldr	r3, [pc, #176]	; (8003274 <xTaskDelayUntil+0xf8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <xTaskDelayUntil+0x64>
        __asm volatile
 80031ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	60fb      	str	r3, [r7, #12]
    }
 80031dc:	bf00      	nop
 80031de:	e7fe      	b.n	80031de <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 80031e0:	f000 f8b0 	bl	8003344 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80031e4:	4b24      	ldr	r3, [pc, #144]	; (8003278 <xTaskDelayUntil+0xfc>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	4413      	add	r3, r2
 80031f2:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6a3a      	ldr	r2, [r7, #32]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d20b      	bcs.n	8003216 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69fa      	ldr	r2, [r7, #28]
 8003204:	429a      	cmp	r2, r3
 8003206:	d211      	bcs.n	800322c <xTaskDelayUntil+0xb0>
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	429a      	cmp	r2, r3
 800320e:	d90d      	bls.n	800322c <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8003210:	2301      	movs	r3, #1
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
 8003214:	e00a      	b.n	800322c <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	429a      	cmp	r2, r3
 800321e:	d303      	bcc.n	8003228 <xTaskDelayUntil+0xac>
 8003220:	69fa      	ldr	r2, [r7, #28]
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	429a      	cmp	r2, r3
 8003226:	d901      	bls.n	800322c <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8003228:	2301      	movs	r3, #1
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69fa      	ldr	r2, [r7, #28]
 8003230:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	2b00      	cmp	r3, #0
 8003236:	d009      	beq.n	800324c <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8003238:	2024      	movs	r0, #36	; 0x24
 800323a:	f003 fa5d 	bl	80066f8 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2100      	movs	r1, #0
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fd02 	bl	8003c50 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800324c:	f000 f888 	bl	8003360 <xTaskResumeAll>
 8003250:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d107      	bne.n	8003268 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8003258:	4b08      	ldr	r3, [pc, #32]	; (800327c <xTaskDelayUntil+0x100>)
 800325a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	f3bf 8f4f 	dsb	sy
 8003264:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800326a:	4618      	mov	r0, r3
 800326c:	3728      	adds	r7, #40	; 0x28
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	200001c8 	.word	0x200001c8
 8003278:	200001a4 	.word	0x200001a4
 800327c:	e000ed04 	.word	0xe000ed04

08003280 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003286:	4b27      	ldr	r3, [pc, #156]	; (8003324 <vTaskStartScheduler+0xa4>)
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	2300      	movs	r3, #0
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	2300      	movs	r3, #0
 8003290:	2282      	movs	r2, #130	; 0x82
 8003292:	4925      	ldr	r1, [pc, #148]	; (8003328 <vTaskStartScheduler+0xa8>)
 8003294:	4825      	ldr	r0, [pc, #148]	; (800332c <vTaskStartScheduler+0xac>)
 8003296:	f7ff fe0d 	bl	8002eb4 <xTaskCreate>
 800329a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d102      	bne.n	80032a8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80032a2:	f000 fd4d 	bl	8003d40 <xTimerCreateTimerTask>
 80032a6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d124      	bne.n	80032f8 <vTaskStartScheduler+0x78>
        __asm volatile
 80032ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b2:	f383 8811 	msr	BASEPRI, r3
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	60bb      	str	r3, [r7, #8]
    }
 80032c0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80032c2:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <vTaskStartScheduler+0xb0>)
 80032c4:	f04f 32ff 	mov.w	r2, #4294967295
 80032c8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80032ca:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <vTaskStartScheduler+0xb4>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032d0:	4b19      	ldr	r3, [pc, #100]	; (8003338 <vTaskStartScheduler+0xb8>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80032d6:	4b19      	ldr	r3, [pc, #100]	; (800333c <vTaskStartScheduler+0xbc>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	4b12      	ldr	r3, [pc, #72]	; (8003324 <vTaskStartScheduler+0xa4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d102      	bne.n	80032e8 <vTaskStartScheduler+0x68>
 80032e2:	f003 ff09 	bl	80070f8 <SEGGER_SYSVIEW_OnIdle>
 80032e6:	e004      	b.n	80032f2 <vTaskStartScheduler+0x72>
 80032e8:	4b14      	ldr	r3, [pc, #80]	; (800333c <vTaskStartScheduler+0xbc>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f003 ff61 	bl	80071b4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80032f2:	f001 f8c7 	bl	8004484 <xPortStartScheduler>
 80032f6:	e00e      	b.n	8003316 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fe:	d10a      	bne.n	8003316 <vTaskStartScheduler+0x96>
        __asm volatile
 8003300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	607b      	str	r3, [r7, #4]
    }
 8003312:	bf00      	nop
 8003314:	e7fe      	b.n	8003314 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003316:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <vTaskStartScheduler+0xc0>)
 8003318:	681b      	ldr	r3, [r3, #0]
}
 800331a:	bf00      	nop
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	200001c4 	.word	0x200001c4
 8003328:	080077bc 	.word	0x080077bc
 800332c:	080039b1 	.word	0x080039b1
 8003330:	200001c0 	.word	0x200001c0
 8003334:	200001ac 	.word	0x200001ac
 8003338:	200001a4 	.word	0x200001a4
 800333c:	200000c8 	.word	0x200000c8
 8003340:	2000000c 	.word	0x2000000c

08003344 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <vTaskSuspendAll+0x18>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3301      	adds	r3, #1
 800334e:	4a03      	ldr	r2, [pc, #12]	; (800335c <vTaskSuspendAll+0x18>)
 8003350:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003352:	bf00      	nop
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	200001c8 	.word	0x200001c8

08003360 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800336a:	2300      	movs	r3, #0
 800336c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800336e:	4b43      	ldr	r3, [pc, #268]	; (800347c <xTaskResumeAll+0x11c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10a      	bne.n	800338c <xTaskResumeAll+0x2c>
        __asm volatile
 8003376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337a:	f383 8811 	msr	BASEPRI, r3
 800337e:	f3bf 8f6f 	isb	sy
 8003382:	f3bf 8f4f 	dsb	sy
 8003386:	603b      	str	r3, [r7, #0]
    }
 8003388:	bf00      	nop
 800338a:	e7fe      	b.n	800338a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800338c:	f001 f99a 	bl	80046c4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003390:	4b3a      	ldr	r3, [pc, #232]	; (800347c <xTaskResumeAll+0x11c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3b01      	subs	r3, #1
 8003396:	4a39      	ldr	r2, [pc, #228]	; (800347c <xTaskResumeAll+0x11c>)
 8003398:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800339a:	4b38      	ldr	r3, [pc, #224]	; (800347c <xTaskResumeAll+0x11c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d165      	bne.n	800346e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033a2:	4b37      	ldr	r3, [pc, #220]	; (8003480 <xTaskResumeAll+0x120>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d061      	beq.n	800346e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033aa:	e032      	b.n	8003412 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033ac:	4b35      	ldr	r3, [pc, #212]	; (8003484 <xTaskResumeAll+0x124>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3318      	adds	r3, #24
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe fff7 	bl	80023ac <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3304      	adds	r3, #4
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fff2 	bl	80023ac <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f003 ff34 	bl	8007238 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	2201      	movs	r2, #1
 80033d6:	409a      	lsls	r2, r3
 80033d8:	4b2b      	ldr	r3, [pc, #172]	; (8003488 <xTaskResumeAll+0x128>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4313      	orrs	r3, r2
 80033de:	4a2a      	ldr	r2, [pc, #168]	; (8003488 <xTaskResumeAll+0x128>)
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4a27      	ldr	r2, [pc, #156]	; (800348c <xTaskResumeAll+0x12c>)
 80033f0:	441a      	add	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	3304      	adds	r3, #4
 80033f6:	4619      	mov	r1, r3
 80033f8:	4610      	mov	r0, r2
 80033fa:	f7fe ff7a 	bl	80022f2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003402:	4b23      	ldr	r3, [pc, #140]	; (8003490 <xTaskResumeAll+0x130>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	429a      	cmp	r2, r3
 800340a:	d302      	bcc.n	8003412 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800340c:	4b21      	ldr	r3, [pc, #132]	; (8003494 <xTaskResumeAll+0x134>)
 800340e:	2201      	movs	r2, #1
 8003410:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003412:	4b1c      	ldr	r3, [pc, #112]	; (8003484 <xTaskResumeAll+0x124>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1c8      	bne.n	80033ac <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003420:	f000 fb5c 	bl	8003adc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003424:	4b1c      	ldr	r3, [pc, #112]	; (8003498 <xTaskResumeAll+0x138>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d010      	beq.n	8003452 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003430:	f000 f858 	bl	80034e4 <xTaskIncrementTick>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800343a:	4b16      	ldr	r3, [pc, #88]	; (8003494 <xTaskResumeAll+0x134>)
 800343c:	2201      	movs	r2, #1
 800343e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3b01      	subs	r3, #1
 8003444:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f1      	bne.n	8003430 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800344c:	4b12      	ldr	r3, [pc, #72]	; (8003498 <xTaskResumeAll+0x138>)
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <xTaskResumeAll+0x134>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d009      	beq.n	800346e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800345a:	2301      	movs	r3, #1
 800345c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800345e:	4b0f      	ldr	r3, [pc, #60]	; (800349c <xTaskResumeAll+0x13c>)
 8003460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800346e:	f001 f959 	bl	8004724 <vPortExitCritical>

    return xAlreadyYielded;
 8003472:	68bb      	ldr	r3, [r7, #8]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	200001c8 	.word	0x200001c8
 8003480:	200001a0 	.word	0x200001a0
 8003484:	20000160 	.word	0x20000160
 8003488:	200001a8 	.word	0x200001a8
 800348c:	200000cc 	.word	0x200000cc
 8003490:	200000c8 	.word	0x200000c8
 8003494:	200001b4 	.word	0x200001b4
 8003498:	200001b0 	.word	0x200001b0
 800349c:	e000ed04 	.word	0xe000ed04

080034a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80034a6:	4b05      	ldr	r3, [pc, #20]	; (80034bc <xTaskGetTickCount+0x1c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80034ac:	687b      	ldr	r3, [r7, #4]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	200001a4 	.word	0x200001a4

080034c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034c6:	f001 f9e9 	bl	800489c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80034ca:	2300      	movs	r3, #0
 80034cc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80034ce:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <xTaskGetTickCountFromISR+0x20>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80034d4:	683b      	ldr	r3, [r7, #0]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	200001a4 	.word	0x200001a4

080034e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ee:	4b50      	ldr	r3, [pc, #320]	; (8003630 <xTaskIncrementTick+0x14c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f040 8092 	bne.w	800361c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80034f8:	4b4e      	ldr	r3, [pc, #312]	; (8003634 <xTaskIncrementTick+0x150>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	3301      	adds	r3, #1
 80034fe:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003500:	4a4c      	ldr	r2, [pc, #304]	; (8003634 <xTaskIncrementTick+0x150>)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d120      	bne.n	800354e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800350c:	4b4a      	ldr	r3, [pc, #296]	; (8003638 <xTaskIncrementTick+0x154>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <xTaskIncrementTick+0x48>
        __asm volatile
 8003516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351a:	f383 8811 	msr	BASEPRI, r3
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	603b      	str	r3, [r7, #0]
    }
 8003528:	bf00      	nop
 800352a:	e7fe      	b.n	800352a <xTaskIncrementTick+0x46>
 800352c:	4b42      	ldr	r3, [pc, #264]	; (8003638 <xTaskIncrementTick+0x154>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	4b42      	ldr	r3, [pc, #264]	; (800363c <xTaskIncrementTick+0x158>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a40      	ldr	r2, [pc, #256]	; (8003638 <xTaskIncrementTick+0x154>)
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	4a40      	ldr	r2, [pc, #256]	; (800363c <xTaskIncrementTick+0x158>)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	4b3f      	ldr	r3, [pc, #252]	; (8003640 <xTaskIncrementTick+0x15c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3301      	adds	r3, #1
 8003546:	4a3e      	ldr	r2, [pc, #248]	; (8003640 <xTaskIncrementTick+0x15c>)
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	f000 fac7 	bl	8003adc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800354e:	4b3d      	ldr	r3, [pc, #244]	; (8003644 <xTaskIncrementTick+0x160>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	429a      	cmp	r2, r3
 8003556:	d34c      	bcc.n	80035f2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003558:	4b37      	ldr	r3, [pc, #220]	; (8003638 <xTaskIncrementTick+0x154>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d104      	bne.n	800356c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003562:	4b38      	ldr	r3, [pc, #224]	; (8003644 <xTaskIncrementTick+0x160>)
 8003564:	f04f 32ff 	mov.w	r2, #4294967295
 8003568:	601a      	str	r2, [r3, #0]
                    break;
 800356a:	e042      	b.n	80035f2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800356c:	4b32      	ldr	r3, [pc, #200]	; (8003638 <xTaskIncrementTick+0x154>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	429a      	cmp	r2, r3
 8003582:	d203      	bcs.n	800358c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003584:	4a2f      	ldr	r2, [pc, #188]	; (8003644 <xTaskIncrementTick+0x160>)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800358a:	e032      	b.n	80035f2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	3304      	adds	r3, #4
 8003590:	4618      	mov	r0, r3
 8003592:	f7fe ff0b 	bl	80023ac <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359a:	2b00      	cmp	r3, #0
 800359c:	d004      	beq.n	80035a8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	3318      	adds	r3, #24
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe ff02 	bl	80023ac <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f003 fe44 	bl	8007238 <SEGGER_SYSVIEW_OnTaskStartReady>
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	2201      	movs	r2, #1
 80035b6:	409a      	lsls	r2, r3
 80035b8:	4b23      	ldr	r3, [pc, #140]	; (8003648 <xTaskIncrementTick+0x164>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4313      	orrs	r3, r2
 80035be:	4a22      	ldr	r2, [pc, #136]	; (8003648 <xTaskIncrementTick+0x164>)
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4a1f      	ldr	r2, [pc, #124]	; (800364c <xTaskIncrementTick+0x168>)
 80035d0:	441a      	add	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	3304      	adds	r3, #4
 80035d6:	4619      	mov	r1, r3
 80035d8:	4610      	mov	r0, r2
 80035da:	f7fe fe8a 	bl	80022f2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e2:	4b1b      	ldr	r3, [pc, #108]	; (8003650 <xTaskIncrementTick+0x16c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d3b5      	bcc.n	8003558 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80035ec:	2301      	movs	r3, #1
 80035ee:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035f0:	e7b2      	b.n	8003558 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035f2:	4b17      	ldr	r3, [pc, #92]	; (8003650 <xTaskIncrementTick+0x16c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f8:	4914      	ldr	r1, [pc, #80]	; (800364c <xTaskIncrementTick+0x168>)
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d901      	bls.n	800360e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800360a:	2301      	movs	r3, #1
 800360c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800360e:	4b11      	ldr	r3, [pc, #68]	; (8003654 <xTaskIncrementTick+0x170>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d007      	beq.n	8003626 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003616:	2301      	movs	r3, #1
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	e004      	b.n	8003626 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800361c:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <xTaskIncrementTick+0x174>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	4a0d      	ldr	r2, [pc, #52]	; (8003658 <xTaskIncrementTick+0x174>)
 8003624:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003626:	697b      	ldr	r3, [r7, #20]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	200001c8 	.word	0x200001c8
 8003634:	200001a4 	.word	0x200001a4
 8003638:	20000158 	.word	0x20000158
 800363c:	2000015c 	.word	0x2000015c
 8003640:	200001b8 	.word	0x200001b8
 8003644:	200001c0 	.word	0x200001c0
 8003648:	200001a8 	.word	0x200001a8
 800364c:	200000cc 	.word	0x200000cc
 8003650:	200000c8 	.word	0x200000c8
 8003654:	200001b4 	.word	0x200001b4
 8003658:	200001b0 	.word	0x200001b0

0800365c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003662:	4b2d      	ldr	r3, [pc, #180]	; (8003718 <vTaskSwitchContext+0xbc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800366a:	4b2c      	ldr	r3, [pc, #176]	; (800371c <vTaskSwitchContext+0xc0>)
 800366c:	2201      	movs	r2, #1
 800366e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003670:	e04d      	b.n	800370e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003672:	4b2a      	ldr	r3, [pc, #168]	; (800371c <vTaskSwitchContext+0xc0>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003678:	4b29      	ldr	r3, [pc, #164]	; (8003720 <vTaskSwitchContext+0xc4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	fab3 f383 	clz	r3, r3
 8003684:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003686:	7afb      	ldrb	r3, [r7, #11]
 8003688:	f1c3 031f 	rsb	r3, r3, #31
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	4925      	ldr	r1, [pc, #148]	; (8003724 <vTaskSwitchContext+0xc8>)
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4613      	mov	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10a      	bne.n	80036b8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80036a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	607b      	str	r3, [r7, #4]
    }
 80036b4:	bf00      	nop
 80036b6:	e7fe      	b.n	80036b6 <vTaskSwitchContext+0x5a>
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4a18      	ldr	r2, [pc, #96]	; (8003724 <vTaskSwitchContext+0xc8>)
 80036c4:	4413      	add	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	3308      	adds	r3, #8
 80036da:	429a      	cmp	r2, r3
 80036dc:	d104      	bne.n	80036e8 <vTaskSwitchContext+0x8c>
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	605a      	str	r2, [r3, #4]
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	4a0e      	ldr	r2, [pc, #56]	; (8003728 <vTaskSwitchContext+0xcc>)
 80036f0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80036f2:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <vTaskSwitchContext+0xcc>)
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	4b0d      	ldr	r3, [pc, #52]	; (800372c <vTaskSwitchContext+0xd0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d102      	bne.n	8003704 <vTaskSwitchContext+0xa8>
 80036fe:	f003 fcfb 	bl	80070f8 <SEGGER_SYSVIEW_OnIdle>
}
 8003702:	e004      	b.n	800370e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003704:	4b08      	ldr	r3, [pc, #32]	; (8003728 <vTaskSwitchContext+0xcc>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f003 fd53 	bl	80071b4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800370e:	bf00      	nop
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	200001c8 	.word	0x200001c8
 800371c:	200001b4 	.word	0x200001b4
 8003720:	200001a8 	.word	0x200001a8
 8003724:	200000cc 	.word	0x200000cc
 8003728:	200000c8 	.word	0x200000c8
 800372c:	200001c4 	.word	0x200001c4

08003730 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	60fb      	str	r3, [r7, #12]
    }
 8003752:	bf00      	nop
 8003754:	e7fe      	b.n	8003754 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <vTaskPlaceOnEventList+0x44>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3318      	adds	r3, #24
 800375c:	4619      	mov	r1, r3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fe fdeb 	bl	800233a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003764:	2101      	movs	r1, #1
 8003766:	6838      	ldr	r0, [r7, #0]
 8003768:	f000 fa72 	bl	8003c50 <prvAddCurrentTaskToDelayedList>
}
 800376c:	bf00      	nop
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	200000c8 	.word	0x200000c8

08003778 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10a      	bne.n	80037a0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800378a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	617b      	str	r3, [r7, #20]
    }
 800379c:	bf00      	nop
 800379e:	e7fe      	b.n	800379e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <vTaskPlaceOnEventListRestricted+0x58>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3318      	adds	r3, #24
 80037a6:	4619      	mov	r1, r3
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f7fe fda2 	bl	80022f2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80037b4:	f04f 33ff 	mov.w	r3, #4294967295
 80037b8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80037ba:	2024      	movs	r0, #36	; 0x24
 80037bc:	f002 ff9c 	bl	80066f8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	68b8      	ldr	r0, [r7, #8]
 80037c4:	f000 fa44 	bl	8003c50 <prvAddCurrentTaskToDelayedList>
    }
 80037c8:	bf00      	nop
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	200000c8 	.word	0x200000c8

080037d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10a      	bne.n	8003800 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80037ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ee:	f383 8811 	msr	BASEPRI, r3
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	60fb      	str	r3, [r7, #12]
    }
 80037fc:	bf00      	nop
 80037fe:	e7fe      	b.n	80037fe <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	3318      	adds	r3, #24
 8003804:	4618      	mov	r0, r3
 8003806:	f7fe fdd1 	bl	80023ac <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800380a:	4b1f      	ldr	r3, [pc, #124]	; (8003888 <xTaskRemoveFromEventList+0xb4>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d120      	bne.n	8003854 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	3304      	adds	r3, #4
 8003816:	4618      	mov	r0, r3
 8003818:	f7fe fdc8 	bl	80023ac <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4618      	mov	r0, r3
 8003820:	f003 fd0a 	bl	8007238 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	2201      	movs	r2, #1
 800382a:	409a      	lsls	r2, r3
 800382c:	4b17      	ldr	r3, [pc, #92]	; (800388c <xTaskRemoveFromEventList+0xb8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4313      	orrs	r3, r2
 8003832:	4a16      	ldr	r2, [pc, #88]	; (800388c <xTaskRemoveFromEventList+0xb8>)
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4a13      	ldr	r2, [pc, #76]	; (8003890 <xTaskRemoveFromEventList+0xbc>)
 8003844:	441a      	add	r2, r3
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	3304      	adds	r3, #4
 800384a:	4619      	mov	r1, r3
 800384c:	4610      	mov	r0, r2
 800384e:	f7fe fd50 	bl	80022f2 <vListInsertEnd>
 8003852:	e005      	b.n	8003860 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	3318      	adds	r3, #24
 8003858:	4619      	mov	r1, r3
 800385a:	480e      	ldr	r0, [pc, #56]	; (8003894 <xTaskRemoveFromEventList+0xc0>)
 800385c:	f7fe fd49 	bl	80022f2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003864:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <xTaskRemoveFromEventList+0xc4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386a:	429a      	cmp	r2, r3
 800386c:	d905      	bls.n	800387a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800386e:	2301      	movs	r3, #1
 8003870:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003872:	4b0a      	ldr	r3, [pc, #40]	; (800389c <xTaskRemoveFromEventList+0xc8>)
 8003874:	2201      	movs	r2, #1
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	e001      	b.n	800387e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800387e:	697b      	ldr	r3, [r7, #20]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	200001c8 	.word	0x200001c8
 800388c:	200001a8 	.word	0x200001a8
 8003890:	200000cc 	.word	0x200000cc
 8003894:	20000160 	.word	0x20000160
 8003898:	200000c8 	.word	0x200000c8
 800389c:	200001b4 	.word	0x200001b4

080038a0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038a8:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <vTaskInternalSetTimeOutState+0x24>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <vTaskInternalSetTimeOutState+0x28>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	605a      	str	r2, [r3, #4]
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	200001b8 	.word	0x200001b8
 80038c8:	200001a4 	.word	0x200001a4

080038cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10a      	bne.n	80038f2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	613b      	str	r3, [r7, #16]
    }
 80038ee:	bf00      	nop
 80038f0:	e7fe      	b.n	80038f0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10a      	bne.n	800390e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80038f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	60fb      	str	r3, [r7, #12]
    }
 800390a:	bf00      	nop
 800390c:	e7fe      	b.n	800390c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800390e:	f000 fed9 	bl	80046c4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003912:	4b1f      	ldr	r3, [pc, #124]	; (8003990 <xTaskCheckForTimeOut+0xc4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392a:	d102      	bne.n	8003932 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800392c:	2300      	movs	r3, #0
 800392e:	61fb      	str	r3, [r7, #28]
 8003930:	e026      	b.n	8003980 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	4b17      	ldr	r3, [pc, #92]	; (8003994 <xTaskCheckForTimeOut+0xc8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d00a      	beq.n	8003954 <xTaskCheckForTimeOut+0x88>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	429a      	cmp	r2, r3
 8003946:	d305      	bcc.n	8003954 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003948:	2301      	movs	r3, #1
 800394a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	e015      	b.n	8003980 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	429a      	cmp	r2, r3
 800395c:	d20b      	bcs.n	8003976 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	1ad2      	subs	r2, r2, r3
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ff98 	bl	80038a0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
 8003974:	e004      	b.n	8003980 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800397c:	2301      	movs	r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003980:	f000 fed0 	bl	8004724 <vPortExitCritical>

    return xReturn;
 8003984:	69fb      	ldr	r3, [r7, #28]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3720      	adds	r7, #32
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	200001a4 	.word	0x200001a4
 8003994:	200001b8 	.word	0x200001b8

08003998 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800399c:	4b03      	ldr	r3, [pc, #12]	; (80039ac <vTaskMissedYield+0x14>)
 800399e:	2201      	movs	r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
}
 80039a2:	bf00      	nop
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	200001b4 	.word	0x200001b4

080039b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80039b8:	f000 f852 	bl	8003a60 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <prvIdleTask+0x28>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d9f9      	bls.n	80039b8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <prvIdleTask+0x2c>)
 80039c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80039d4:	e7f0      	b.n	80039b8 <prvIdleTask+0x8>
 80039d6:	bf00      	nop
 80039d8:	200000cc 	.word	0x200000cc
 80039dc:	e000ed04 	.word	0xe000ed04

080039e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039e6:	2300      	movs	r3, #0
 80039e8:	607b      	str	r3, [r7, #4]
 80039ea:	e00c      	b.n	8003a06 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4a12      	ldr	r2, [pc, #72]	; (8003a40 <prvInitialiseTaskLists+0x60>)
 80039f8:	4413      	add	r3, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe fc4c 	bl	8002298 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3301      	adds	r3, #1
 8003a04:	607b      	str	r3, [r7, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d9ef      	bls.n	80039ec <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003a0c:	480d      	ldr	r0, [pc, #52]	; (8003a44 <prvInitialiseTaskLists+0x64>)
 8003a0e:	f7fe fc43 	bl	8002298 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a12:	480d      	ldr	r0, [pc, #52]	; (8003a48 <prvInitialiseTaskLists+0x68>)
 8003a14:	f7fe fc40 	bl	8002298 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003a18:	480c      	ldr	r0, [pc, #48]	; (8003a4c <prvInitialiseTaskLists+0x6c>)
 8003a1a:	f7fe fc3d 	bl	8002298 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003a1e:	480c      	ldr	r0, [pc, #48]	; (8003a50 <prvInitialiseTaskLists+0x70>)
 8003a20:	f7fe fc3a 	bl	8002298 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003a24:	480b      	ldr	r0, [pc, #44]	; (8003a54 <prvInitialiseTaskLists+0x74>)
 8003a26:	f7fe fc37 	bl	8002298 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <prvInitialiseTaskLists+0x78>)
 8003a2c:	4a05      	ldr	r2, [pc, #20]	; (8003a44 <prvInitialiseTaskLists+0x64>)
 8003a2e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <prvInitialiseTaskLists+0x7c>)
 8003a32:	4a05      	ldr	r2, [pc, #20]	; (8003a48 <prvInitialiseTaskLists+0x68>)
 8003a34:	601a      	str	r2, [r3, #0]
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	200000cc 	.word	0x200000cc
 8003a44:	20000130 	.word	0x20000130
 8003a48:	20000144 	.word	0x20000144
 8003a4c:	20000160 	.word	0x20000160
 8003a50:	20000174 	.word	0x20000174
 8003a54:	2000018c 	.word	0x2000018c
 8003a58:	20000158 	.word	0x20000158
 8003a5c:	2000015c 	.word	0x2000015c

08003a60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a66:	e019      	b.n	8003a9c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003a68:	f000 fe2c 	bl	80046c4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a6c:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <prvCheckTasksWaitingTermination+0x50>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3304      	adds	r3, #4
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fe fc97 	bl	80023ac <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003a7e:	4b0d      	ldr	r3, [pc, #52]	; (8003ab4 <prvCheckTasksWaitingTermination+0x54>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	4a0b      	ldr	r2, [pc, #44]	; (8003ab4 <prvCheckTasksWaitingTermination+0x54>)
 8003a86:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <prvCheckTasksWaitingTermination+0x58>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <prvCheckTasksWaitingTermination+0x58>)
 8003a90:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003a92:	f000 fe47 	bl	8004724 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f810 	bl	8003abc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a9c:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <prvCheckTasksWaitingTermination+0x58>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1e1      	bne.n	8003a68 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20000174 	.word	0x20000174
 8003ab4:	200001a0 	.word	0x200001a0
 8003ab8:	20000188 	.word	0x20000188

08003abc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 f807 	bl	8004adc <vPortFree>
                vPortFree( pxTCB );
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f001 f804 	bl	8004adc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ae0:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <prvResetNextTaskUnblockTime+0x30>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d104      	bne.n	8003af4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003aea:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <prvResetNextTaskUnblockTime+0x34>)
 8003aec:	f04f 32ff 	mov.w	r2, #4294967295
 8003af0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003af2:	e005      	b.n	8003b00 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <prvResetNextTaskUnblockTime+0x30>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a04      	ldr	r2, [pc, #16]	; (8003b10 <prvResetNextTaskUnblockTime+0x34>)
 8003afe:	6013      	str	r3, [r2, #0]
}
 8003b00:	bf00      	nop
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	20000158 	.word	0x20000158
 8003b10:	200001c0 	.word	0x200001c0

08003b14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003b1a:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <xTaskGetSchedulerState+0x34>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d102      	bne.n	8003b28 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b22:	2301      	movs	r3, #1
 8003b24:	607b      	str	r3, [r7, #4]
 8003b26:	e008      	b.n	8003b3a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b28:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <xTaskGetSchedulerState+0x38>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d102      	bne.n	8003b36 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003b30:	2302      	movs	r3, #2
 8003b32:	607b      	str	r3, [r7, #4]
 8003b34:	e001      	b.n	8003b3a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003b36:	2300      	movs	r3, #0
 8003b38:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003b3a:	687b      	ldr	r3, [r7, #4]
    }
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	200001ac 	.word	0x200001ac
 8003b4c:	200001c8 	.word	0x200001c8

08003b50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d068      	beq.n	8003c38 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003b66:	4b37      	ldr	r3, [pc, #220]	; (8003c44 <xTaskPriorityDisinherit+0xf4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d00a      	beq.n	8003b86 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	60fb      	str	r3, [r7, #12]
    }
 8003b82:	bf00      	nop
 8003b84:	e7fe      	b.n	8003b84 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10a      	bne.n	8003ba4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	60bb      	str	r3, [r7, #8]
    }
 8003ba0:	bf00      	nop
 8003ba2:	e7fe      	b.n	8003ba2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba8:	1e5a      	subs	r2, r3, #1
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d03e      	beq.n	8003c38 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d13a      	bne.n	8003c38 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe fbf0 	bl	80023ac <uxListRemove>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10a      	bne.n	8003be8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43da      	mvns	r2, r3
 8003bde:	4b1a      	ldr	r3, [pc, #104]	; (8003c48 <xTaskPriorityDisinherit+0xf8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4013      	ands	r3, r2
 8003be4:	4a18      	ldr	r2, [pc, #96]	; (8003c48 <xTaskPriorityDisinherit+0xf8>)
 8003be6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4619      	mov	r1, r3
 8003bec:	204a      	movs	r0, #74	; 0x4a
 8003bee:	f002 fda1 	bl	8006734 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	f1c3 0205 	rsb	r2, r3, #5
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <xTaskPriorityDisinherit+0xf8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	4a0c      	ldr	r2, [pc, #48]	; (8003c48 <xTaskPriorityDisinherit+0xf8>)
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4a09      	ldr	r2, [pc, #36]	; (8003c4c <xTaskPriorityDisinherit+0xfc>)
 8003c26:	441a      	add	r2, r3
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4610      	mov	r0, r2
 8003c30:	f7fe fb5f 	bl	80022f2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003c34:	2301      	movs	r3, #1
 8003c36:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c38:	697b      	ldr	r3, [r7, #20]
    }
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	200000c8 	.word	0x200000c8
 8003c48:	200001a8 	.word	0x200001a8
 8003c4c:	200000cc 	.word	0x200000cc

08003c50 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003c5a:	4b32      	ldr	r3, [pc, #200]	; (8003d24 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c60:	4b31      	ldr	r3, [pc, #196]	; (8003d28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3304      	adds	r3, #4
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe fba0 	bl	80023ac <uxListRemove>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10b      	bne.n	8003c8a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003c72:	4b2d      	ldr	r3, [pc, #180]	; (8003d28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	2201      	movs	r2, #1
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43da      	mvns	r2, r3
 8003c80:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4013      	ands	r3, r2
 8003c86:	4a29      	ldr	r2, [pc, #164]	; (8003d2c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003c88:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c90:	d110      	bne.n	8003cb4 <prvAddCurrentTaskToDelayedList+0x64>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00d      	beq.n	8003cb4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003c98:	4b23      	ldr	r3, [pc, #140]	; (8003d28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	211b      	movs	r1, #27
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f003 fb0c 	bl	80072bc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ca4:	4b20      	ldr	r3, [pc, #128]	; (8003d28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	4619      	mov	r1, r3
 8003cac:	4820      	ldr	r0, [pc, #128]	; (8003d30 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003cae:	f7fe fb20 	bl	80022f2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003cb2:	e032      	b.n	8003d1a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4413      	add	r3, r2
 8003cba:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cbc:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d20f      	bcs.n	8003cec <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003ccc:	4b16      	ldr	r3, [pc, #88]	; (8003d28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2104      	movs	r1, #4
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f003 faf2 	bl	80072bc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cd8:	4b16      	ldr	r3, [pc, #88]	; (8003d34 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	f7fe fb28 	bl	800233a <vListInsert>
}
 8003cea:	e016      	b.n	8003d1a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003cec:	4b0e      	ldr	r3, [pc, #56]	; (8003d28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2104      	movs	r1, #4
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f003 fae2 	bl	80072bc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f7fe fb18 	bl	800233a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <prvAddCurrentTaskToDelayedList+0xec>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d202      	bcs.n	8003d1a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003d14:	4a09      	ldr	r2, [pc, #36]	; (8003d3c <prvAddCurrentTaskToDelayedList+0xec>)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	6013      	str	r3, [r2, #0]
}
 8003d1a:	bf00      	nop
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	200001a4 	.word	0x200001a4
 8003d28:	200000c8 	.word	0x200000c8
 8003d2c:	200001a8 	.word	0x200001a8
 8003d30:	2000018c 	.word	0x2000018c
 8003d34:	2000015c 	.word	0x2000015c
 8003d38:	20000158 	.word	0x20000158
 8003d3c:	200001c0 	.word	0x200001c0

08003d40 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003d4a:	f000 fad5 	bl	80042f8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003d4e:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <xTimerCreateTimerTask+0x54>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00b      	beq.n	8003d6e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003d56:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <xTimerCreateTimerTask+0x58>)
 8003d58:	9301      	str	r3, [sp, #4]
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d64:	490d      	ldr	r1, [pc, #52]	; (8003d9c <xTimerCreateTimerTask+0x5c>)
 8003d66:	480e      	ldr	r0, [pc, #56]	; (8003da0 <xTimerCreateTimerTask+0x60>)
 8003d68:	f7ff f8a4 	bl	8002eb4 <xTaskCreate>
 8003d6c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10a      	bne.n	8003d8a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	603b      	str	r3, [r7, #0]
    }
 8003d86:	bf00      	nop
 8003d88:	e7fe      	b.n	8003d88 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003d8a:	687b      	ldr	r3, [r7, #4]
    }
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	200001fc 	.word	0x200001fc
 8003d98:	20000200 	.word	0x20000200
 8003d9c:	080077c4 	.word	0x080077c4
 8003da0:	08003ed9 	.word	0x08003ed9

08003da4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08a      	sub	sp, #40	; 0x28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10a      	bne.n	8003dd2 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc0:	f383 8811 	msr	BASEPRI, r3
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	623b      	str	r3, [r7, #32]
    }
 8003dce:	bf00      	nop
 8003dd0:	e7fe      	b.n	8003dd0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003dd2:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <xTimerGenericCommand+0x98>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d02a      	beq.n	8003e30 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b05      	cmp	r3, #5
 8003dea:	dc18      	bgt.n	8003e1e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003dec:	f7ff fe92 	bl	8003b14 <xTaskGetSchedulerState>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d109      	bne.n	8003e0a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003df6:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <xTimerGenericCommand+0x98>)
 8003df8:	6818      	ldr	r0, [r3, #0]
 8003dfa:	f107 0114 	add.w	r1, r7, #20
 8003dfe:	2300      	movs	r3, #0
 8003e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e02:	f7fe fbed 	bl	80025e0 <xQueueGenericSend>
 8003e06:	6278      	str	r0, [r7, #36]	; 0x24
 8003e08:	e012      	b.n	8003e30 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003e0a:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <xTimerGenericCommand+0x98>)
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	f107 0114 	add.w	r1, r7, #20
 8003e12:	2300      	movs	r3, #0
 8003e14:	2200      	movs	r2, #0
 8003e16:	f7fe fbe3 	bl	80025e0 <xQueueGenericSend>
 8003e1a:	6278      	str	r0, [r7, #36]	; 0x24
 8003e1c:	e008      	b.n	8003e30 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e1e:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <xTimerGenericCommand+0x98>)
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	f107 0114 	add.w	r1, r7, #20
 8003e26:	2300      	movs	r3, #0
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	f7fe fcff 	bl	800282c <xQueueGenericSendFromISR>
 8003e2e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003e32:	4618      	mov	r0, r3
 8003e34:	3728      	adds	r7, #40	; 0x28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	200001fc 	.word	0x200001fc

08003e40 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e4a:	4b22      	ldr	r3, [pc, #136]	; (8003ed4 <prvProcessExpiredTimer+0x94>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	3304      	adds	r3, #4
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fe faa7 	bl	80023ac <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d022      	beq.n	8003eb2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	699a      	ldr	r2, [r3, #24]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	18d1      	adds	r1, r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	6978      	ldr	r0, [r7, #20]
 8003e7a:	f000 f8d1 	bl	8004020 <prvInsertTimerInActiveList>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01f      	beq.n	8003ec4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e84:	2300      	movs	r3, #0
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	6978      	ldr	r0, [r7, #20]
 8003e90:	f7ff ff88 	bl	8003da4 <xTimerGenericCommand>
 8003e94:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d113      	bne.n	8003ec4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	60fb      	str	r3, [r7, #12]
    }
 8003eae:	bf00      	nop
 8003eb0:	e7fe      	b.n	8003eb0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	6978      	ldr	r0, [r7, #20]
 8003eca:	4798      	blx	r3
    }
 8003ecc:	bf00      	nop
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	200001f4 	.word	0x200001f4

08003ed8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ee0:	f107 0308 	add.w	r3, r7, #8
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 f857 	bl	8003f98 <prvGetNextExpireTime>
 8003eea:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 f803 	bl	8003efc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003ef6:	f000 f8d5 	bl	80040a4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003efa:	e7f1      	b.n	8003ee0 <prvTimerTask+0x8>

08003efc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003f06:	f7ff fa1d 	bl	8003344 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f0a:	f107 0308 	add.w	r3, r7, #8
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 f866 	bl	8003fe0 <prvSampleTimeNow>
 8003f14:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d130      	bne.n	8003f7e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10a      	bne.n	8003f38 <prvProcessTimerOrBlockTask+0x3c>
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d806      	bhi.n	8003f38 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003f2a:	f7ff fa19 	bl	8003360 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f2e:	68f9      	ldr	r1, [r7, #12]
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff ff85 	bl	8003e40 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003f36:	e024      	b.n	8003f82 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d008      	beq.n	8003f50 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f3e:	4b13      	ldr	r3, [pc, #76]	; (8003f8c <prvProcessTimerOrBlockTask+0x90>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <prvProcessTimerOrBlockTask+0x50>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e000      	b.n	8003f4e <prvProcessTimerOrBlockTask+0x52>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f50:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <prvProcessTimerOrBlockTask+0x94>)
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	f7fe ff75 	bl	8002e4c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003f62:	f7ff f9fd 	bl	8003360 <xTaskResumeAll>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10a      	bne.n	8003f82 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003f6c:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <prvProcessTimerOrBlockTask+0x98>)
 8003f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	f3bf 8f6f 	isb	sy
    }
 8003f7c:	e001      	b.n	8003f82 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003f7e:	f7ff f9ef 	bl	8003360 <xTaskResumeAll>
    }
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	200001f8 	.word	0x200001f8
 8003f90:	200001fc 	.word	0x200001fc
 8003f94:	e000ed04 	.word	0xe000ed04

08003f98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003fa0:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <prvGetNextExpireTime+0x44>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <prvGetNextExpireTime+0x16>
 8003faa:	2201      	movs	r2, #1
 8003fac:	e000      	b.n	8003fb0 <prvGetNextExpireTime+0x18>
 8003fae:	2200      	movs	r2, #0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d105      	bne.n	8003fc8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fbc:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <prvGetNextExpireTime+0x44>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	e001      	b.n	8003fcc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
    }
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	200001f4 	.word	0x200001f4

08003fe0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003fe8:	f7ff fa5a 	bl	80034a0 <xTaskGetTickCount>
 8003fec:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003fee:	4b0b      	ldr	r3, [pc, #44]	; (800401c <prvSampleTimeNow+0x3c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d205      	bcs.n	8004004 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003ff8:	f000 f91a 	bl	8004230 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e002      	b.n	800400a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800400a:	4a04      	ldr	r2, [pc, #16]	; (800401c <prvSampleTimeNow+0x3c>)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004010:	68fb      	ldr	r3, [r7, #12]
    }
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000204 	.word	0x20000204

08004020 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	429a      	cmp	r2, r3
 8004044:	d812      	bhi.n	800406c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	1ad2      	subs	r2, r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	429a      	cmp	r2, r3
 8004052:	d302      	bcc.n	800405a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004054:	2301      	movs	r3, #1
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	e01b      	b.n	8004092 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800405a:	4b10      	ldr	r3, [pc, #64]	; (800409c <prvInsertTimerInActiveList+0x7c>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3304      	adds	r3, #4
 8004062:	4619      	mov	r1, r3
 8004064:	4610      	mov	r0, r2
 8004066:	f7fe f968 	bl	800233a <vListInsert>
 800406a:	e012      	b.n	8004092 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	429a      	cmp	r2, r3
 8004072:	d206      	bcs.n	8004082 <prvInsertTimerInActiveList+0x62>
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d302      	bcc.n	8004082 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800407c:	2301      	movs	r3, #1
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	e007      	b.n	8004092 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004082:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <prvInsertTimerInActiveList+0x80>)
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3304      	adds	r3, #4
 800408a:	4619      	mov	r1, r3
 800408c:	4610      	mov	r0, r2
 800408e:	f7fe f954 	bl	800233a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004092:	697b      	ldr	r3, [r7, #20]
    }
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	200001f8 	.word	0x200001f8
 80040a0:	200001f4 	.word	0x200001f4

080040a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08c      	sub	sp, #48	; 0x30
 80040a8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040aa:	e0ae      	b.n	800420a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f2c0 80aa 	blt.w	8004208 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d004      	beq.n	80040ca <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	3304      	adds	r3, #4
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fe f971 	bl	80023ac <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040ca:	1d3b      	adds	r3, r7, #4
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff ff87 	bl	8003fe0 <prvSampleTimeNow>
 80040d2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2b09      	cmp	r3, #9
 80040d8:	f200 8097 	bhi.w	800420a <prvProcessReceivedCommands+0x166>
 80040dc:	a201      	add	r2, pc, #4	; (adr r2, 80040e4 <prvProcessReceivedCommands+0x40>)
 80040de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e2:	bf00      	nop
 80040e4:	0800410d 	.word	0x0800410d
 80040e8:	0800410d 	.word	0x0800410d
 80040ec:	0800410d 	.word	0x0800410d
 80040f0:	08004181 	.word	0x08004181
 80040f4:	08004195 	.word	0x08004195
 80040f8:	080041df 	.word	0x080041df
 80040fc:	0800410d 	.word	0x0800410d
 8004100:	0800410d 	.word	0x0800410d
 8004104:	08004181 	.word	0x08004181
 8004108:	08004195 	.word	0x08004195
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	b2da      	uxtb	r2, r3
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	18d1      	adds	r1, r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a3a      	ldr	r2, [r7, #32]
 800412a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800412c:	f7ff ff78 	bl	8004020 <prvInsertTimerInActiveList>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d069      	beq.n	800420a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800413c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d05e      	beq.n	800420a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	441a      	add	r2, r3
 8004154:	2300      	movs	r3, #0
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	2300      	movs	r3, #0
 800415a:	2100      	movs	r1, #0
 800415c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800415e:	f7ff fe21 	bl	8003da4 <xTimerGenericCommand>
 8004162:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d14f      	bne.n	800420a <prvProcessReceivedCommands+0x166>
        __asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	61bb      	str	r3, [r7, #24]
    }
 800417c:	bf00      	nop
 800417e:	e7fe      	b.n	800417e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004186:	f023 0301 	bic.w	r3, r3, #1
 800418a:	b2da      	uxtb	r2, r3
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004192:	e03a      	b.n	800420a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800419a:	f043 0301 	orr.w	r3, r3, #1
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10a      	bne.n	80041ca <prvProcessReceivedCommands+0x126>
        __asm volatile
 80041b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	617b      	str	r3, [r7, #20]
    }
 80041c6:	bf00      	nop
 80041c8:	e7fe      	b.n	80041c8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	18d1      	adds	r1, r2, r3
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	6a3a      	ldr	r2, [r7, #32]
 80041d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041d8:	f7ff ff22 	bl	8004020 <prvInsertTimerInActiveList>
                        break;
 80041dc:	e015      	b.n	800420a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d103      	bne.n	80041f4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80041ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041ee:	f000 fc75 	bl	8004adc <vPortFree>
 80041f2:	e00a      	b.n	800420a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041fa:	f023 0301 	bic.w	r3, r3, #1
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004206:	e000      	b.n	800420a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004208:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800420a:	4b08      	ldr	r3, [pc, #32]	; (800422c <prvProcessReceivedCommands+0x188>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f107 0108 	add.w	r1, r7, #8
 8004212:	2200      	movs	r2, #0
 8004214:	4618      	mov	r0, r3
 8004216:	f7fe fbc7 	bl	80029a8 <xQueueReceive>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	f47f af45 	bne.w	80040ac <prvProcessReceivedCommands+0x8>
        }
    }
 8004222:	bf00      	nop
 8004224:	bf00      	nop
 8004226:	3728      	adds	r7, #40	; 0x28
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	200001fc 	.word	0x200001fc

08004230 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004236:	e048      	b.n	80042ca <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004238:	4b2d      	ldr	r3, [pc, #180]	; (80042f0 <prvSwitchTimerLists+0xc0>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004242:	4b2b      	ldr	r3, [pc, #172]	; (80042f0 <prvSwitchTimerLists+0xc0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3304      	adds	r3, #4
 8004250:	4618      	mov	r0, r3
 8004252:	f7fe f8ab 	bl	80023ac <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d02e      	beq.n	80042ca <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4413      	add	r3, r2
 8004274:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	429a      	cmp	r2, r3
 800427c:	d90e      	bls.n	800429c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800428a:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <prvSwitchTimerLists+0xc0>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	3304      	adds	r3, #4
 8004292:	4619      	mov	r1, r3
 8004294:	4610      	mov	r0, r2
 8004296:	f7fe f850 	bl	800233a <vListInsert>
 800429a:	e016      	b.n	80042ca <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800429c:	2300      	movs	r3, #0
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	2300      	movs	r3, #0
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	2100      	movs	r1, #0
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f7ff fd7c 	bl	8003da4 <xTimerGenericCommand>
 80042ac:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10a      	bne.n	80042ca <prvSwitchTimerLists+0x9a>
        __asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	603b      	str	r3, [r7, #0]
    }
 80042c6:	bf00      	nop
 80042c8:	e7fe      	b.n	80042c8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <prvSwitchTimerLists+0xc0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1b1      	bne.n	8004238 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80042d4:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <prvSwitchTimerLists+0xc0>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <prvSwitchTimerLists+0xc4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a04      	ldr	r2, [pc, #16]	; (80042f0 <prvSwitchTimerLists+0xc0>)
 80042e0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80042e2:	4a04      	ldr	r2, [pc, #16]	; (80042f4 <prvSwitchTimerLists+0xc4>)
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	6013      	str	r3, [r2, #0]
    }
 80042e8:	bf00      	nop
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	200001f4 	.word	0x200001f4
 80042f4:	200001f8 	.word	0x200001f8

080042f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80042fc:	f000 f9e2 	bl	80046c4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004300:	4b12      	ldr	r3, [pc, #72]	; (800434c <prvCheckForValidListAndQueue+0x54>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d11d      	bne.n	8004344 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004308:	4811      	ldr	r0, [pc, #68]	; (8004350 <prvCheckForValidListAndQueue+0x58>)
 800430a:	f7fd ffc5 	bl	8002298 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800430e:	4811      	ldr	r0, [pc, #68]	; (8004354 <prvCheckForValidListAndQueue+0x5c>)
 8004310:	f7fd ffc2 	bl	8002298 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004314:	4b10      	ldr	r3, [pc, #64]	; (8004358 <prvCheckForValidListAndQueue+0x60>)
 8004316:	4a0e      	ldr	r2, [pc, #56]	; (8004350 <prvCheckForValidListAndQueue+0x58>)
 8004318:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800431a:	4b10      	ldr	r3, [pc, #64]	; (800435c <prvCheckForValidListAndQueue+0x64>)
 800431c:	4a0d      	ldr	r2, [pc, #52]	; (8004354 <prvCheckForValidListAndQueue+0x5c>)
 800431e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004320:	2200      	movs	r2, #0
 8004322:	210c      	movs	r1, #12
 8004324:	200a      	movs	r0, #10
 8004326:	f7fe f8d3 	bl	80024d0 <xQueueGenericCreate>
 800432a:	4603      	mov	r3, r0
 800432c:	4a07      	ldr	r2, [pc, #28]	; (800434c <prvCheckForValidListAndQueue+0x54>)
 800432e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004330:	4b06      	ldr	r3, [pc, #24]	; (800434c <prvCheckForValidListAndQueue+0x54>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004338:	4b04      	ldr	r3, [pc, #16]	; (800434c <prvCheckForValidListAndQueue+0x54>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4908      	ldr	r1, [pc, #32]	; (8004360 <prvCheckForValidListAndQueue+0x68>)
 800433e:	4618      	mov	r0, r3
 8004340:	f7fe fd52 	bl	8002de8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004344:	f000 f9ee 	bl	8004724 <vPortExitCritical>
    }
 8004348:	bf00      	nop
 800434a:	bd80      	pop	{r7, pc}
 800434c:	200001fc 	.word	0x200001fc
 8004350:	200001cc 	.word	0x200001cc
 8004354:	200001e0 	.word	0x200001e0
 8004358:	200001f4 	.word	0x200001f4
 800435c:	200001f8 	.word	0x200001f8
 8004360:	080077cc 	.word	0x080077cc

08004364 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3b04      	subs	r3, #4
 8004374:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800437c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3b04      	subs	r3, #4
 8004382:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f023 0201 	bic.w	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3b04      	subs	r3, #4
 8004392:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004394:	4a0c      	ldr	r2, [pc, #48]	; (80043c8 <pxPortInitialiseStack+0x64>)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	3b14      	subs	r3, #20
 800439e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3b04      	subs	r3, #4
 80043aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f06f 0202 	mvn.w	r2, #2
 80043b2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	3b20      	subs	r3, #32
 80043b8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80043ba:	68fb      	ldr	r3, [r7, #12]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	080043cd 	.word	0x080043cd

080043cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80043d6:	4b12      	ldr	r3, [pc, #72]	; (8004420 <prvTaskExitError+0x54>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043de:	d00a      	beq.n	80043f6 <prvTaskExitError+0x2a>
        __asm volatile
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	60fb      	str	r3, [r7, #12]
    }
 80043f2:	bf00      	nop
 80043f4:	e7fe      	b.n	80043f4 <prvTaskExitError+0x28>
        __asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	60bb      	str	r3, [r7, #8]
    }
 8004408:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800440a:	bf00      	nop
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0fc      	beq.n	800440c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004412:	bf00      	nop
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	20000010 	.word	0x20000010
	...

08004430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004430:	4b07      	ldr	r3, [pc, #28]	; (8004450 <pxCurrentTCBConst2>)
 8004432:	6819      	ldr	r1, [r3, #0]
 8004434:	6808      	ldr	r0, [r1, #0]
 8004436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443a:	f380 8809 	msr	PSP, r0
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f380 8811 	msr	BASEPRI, r0
 800444a:	4770      	bx	lr
 800444c:	f3af 8000 	nop.w

08004450 <pxCurrentTCBConst2>:
 8004450:	200000c8 	.word	0x200000c8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004454:	bf00      	nop
 8004456:	bf00      	nop

08004458 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004458:	4808      	ldr	r0, [pc, #32]	; (800447c <prvPortStartFirstTask+0x24>)
 800445a:	6800      	ldr	r0, [r0, #0]
 800445c:	6800      	ldr	r0, [r0, #0]
 800445e:	f380 8808 	msr	MSP, r0
 8004462:	f04f 0000 	mov.w	r0, #0
 8004466:	f380 8814 	msr	CONTROL, r0
 800446a:	b662      	cpsie	i
 800446c:	b661      	cpsie	f
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	df00      	svc	0
 8004478:	bf00      	nop
 800447a:	0000      	.short	0x0000
 800447c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004480:	bf00      	nop
 8004482:	bf00      	nop

08004484 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800448a:	4b46      	ldr	r3, [pc, #280]	; (80045a4 <xPortStartScheduler+0x120>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a46      	ldr	r2, [pc, #280]	; (80045a8 <xPortStartScheduler+0x124>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d10a      	bne.n	80044aa <xPortStartScheduler+0x26>
        __asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	613b      	str	r3, [r7, #16]
    }
 80044a6:	bf00      	nop
 80044a8:	e7fe      	b.n	80044a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044aa:	4b3e      	ldr	r3, [pc, #248]	; (80045a4 <xPortStartScheduler+0x120>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a3f      	ldr	r2, [pc, #252]	; (80045ac <xPortStartScheduler+0x128>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d10a      	bne.n	80044ca <xPortStartScheduler+0x46>
        __asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	60fb      	str	r3, [r7, #12]
    }
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044ca:	4b39      	ldr	r3, [pc, #228]	; (80045b0 <xPortStartScheduler+0x12c>)
 80044cc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	22ff      	movs	r2, #255	; 0xff
 80044da:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	4b31      	ldr	r3, [pc, #196]	; (80045b4 <xPortStartScheduler+0x130>)
 80044f0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044f2:	4b31      	ldr	r3, [pc, #196]	; (80045b8 <xPortStartScheduler+0x134>)
 80044f4:	2207      	movs	r2, #7
 80044f6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044f8:	e009      	b.n	800450e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80044fa:	4b2f      	ldr	r3, [pc, #188]	; (80045b8 <xPortStartScheduler+0x134>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3b01      	subs	r3, #1
 8004500:	4a2d      	ldr	r2, [pc, #180]	; (80045b8 <xPortStartScheduler+0x134>)
 8004502:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	b2db      	uxtb	r3, r3
 800450c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800450e:	78fb      	ldrb	r3, [r7, #3]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004516:	2b80      	cmp	r3, #128	; 0x80
 8004518:	d0ef      	beq.n	80044fa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800451a:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <xPortStartScheduler+0x134>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f1c3 0307 	rsb	r3, r3, #7
 8004522:	2b04      	cmp	r3, #4
 8004524:	d00a      	beq.n	800453c <xPortStartScheduler+0xb8>
        __asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	60bb      	str	r3, [r7, #8]
    }
 8004538:	bf00      	nop
 800453a:	e7fe      	b.n	800453a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800453c:	4b1e      	ldr	r3, [pc, #120]	; (80045b8 <xPortStartScheduler+0x134>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	021b      	lsls	r3, r3, #8
 8004542:	4a1d      	ldr	r2, [pc, #116]	; (80045b8 <xPortStartScheduler+0x134>)
 8004544:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004546:	4b1c      	ldr	r3, [pc, #112]	; (80045b8 <xPortStartScheduler+0x134>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800454e:	4a1a      	ldr	r2, [pc, #104]	; (80045b8 <xPortStartScheduler+0x134>)
 8004550:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800455a:	4b18      	ldr	r3, [pc, #96]	; (80045bc <xPortStartScheduler+0x138>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a17      	ldr	r2, [pc, #92]	; (80045bc <xPortStartScheduler+0x138>)
 8004560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004564:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004566:	4b15      	ldr	r3, [pc, #84]	; (80045bc <xPortStartScheduler+0x138>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a14      	ldr	r2, [pc, #80]	; (80045bc <xPortStartScheduler+0x138>)
 800456c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004570:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004572:	f000 f963 	bl	800483c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004576:	4b12      	ldr	r3, [pc, #72]	; (80045c0 <xPortStartScheduler+0x13c>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800457c:	f000 f982 	bl	8004884 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004580:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <xPortStartScheduler+0x140>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a0f      	ldr	r2, [pc, #60]	; (80045c4 <xPortStartScheduler+0x140>)
 8004586:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800458a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800458c:	f7ff ff64 	bl	8004458 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004590:	f7ff f864 	bl	800365c <vTaskSwitchContext>
    prvTaskExitError();
 8004594:	f7ff ff1a 	bl	80043cc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	e000ed00 	.word	0xe000ed00
 80045a8:	410fc271 	.word	0x410fc271
 80045ac:	410fc270 	.word	0x410fc270
 80045b0:	e000e400 	.word	0xe000e400
 80045b4:	20000208 	.word	0x20000208
 80045b8:	2000020c 	.word	0x2000020c
 80045bc:	e000ed20 	.word	0xe000ed20
 80045c0:	20000010 	.word	0x20000010
 80045c4:	e000ef34 	.word	0xe000ef34

080045c8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045ce:	4b37      	ldr	r3, [pc, #220]	; (80046ac <vInitPrioGroupValue+0xe4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a37      	ldr	r2, [pc, #220]	; (80046b0 <vInitPrioGroupValue+0xe8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d10a      	bne.n	80045ee <vInitPrioGroupValue+0x26>
        __asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	613b      	str	r3, [r7, #16]
    }
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045ee:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <vInitPrioGroupValue+0xe4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a30      	ldr	r2, [pc, #192]	; (80046b4 <vInitPrioGroupValue+0xec>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d10a      	bne.n	800460e <vInitPrioGroupValue+0x46>
        __asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	60fb      	str	r3, [r7, #12]
    }
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800460e:	4b2a      	ldr	r3, [pc, #168]	; (80046b8 <vInitPrioGroupValue+0xf0>)
 8004610:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	22ff      	movs	r2, #255	; 0xff
 800461e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004630:	b2da      	uxtb	r2, r3
 8004632:	4b22      	ldr	r3, [pc, #136]	; (80046bc <vInitPrioGroupValue+0xf4>)
 8004634:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004636:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004638:	2207      	movs	r2, #7
 800463a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800463c:	e009      	b.n	8004652 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800463e:	4b20      	ldr	r3, [pc, #128]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3b01      	subs	r3, #1
 8004644:	4a1e      	ldr	r2, [pc, #120]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004646:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	b2db      	uxtb	r3, r3
 8004650:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004652:	78fb      	ldrb	r3, [r7, #3]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465a:	2b80      	cmp	r3, #128	; 0x80
 800465c:	d0ef      	beq.n	800463e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800465e:	4b18      	ldr	r3, [pc, #96]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f1c3 0307 	rsb	r3, r3, #7
 8004666:	2b04      	cmp	r3, #4
 8004668:	d00a      	beq.n	8004680 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	60bb      	str	r3, [r7, #8]
    }
 800467c:	bf00      	nop
 800467e:	e7fe      	b.n	800467e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004680:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	4a0e      	ldr	r2, [pc, #56]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004688:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800468a:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004692:	4a0b      	ldr	r2, [pc, #44]	; (80046c0 <vInitPrioGroupValue+0xf8>)
 8004694:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800469e:	bf00      	nop
 80046a0:	371c      	adds	r7, #28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	e000ed00 	.word	0xe000ed00
 80046b0:	410fc271 	.word	0x410fc271
 80046b4:	410fc270 	.word	0x410fc270
 80046b8:	e000e400 	.word	0xe000e400
 80046bc:	20000208 	.word	0x20000208
 80046c0:	2000020c 	.word	0x2000020c

080046c4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
        __asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	607b      	str	r3, [r7, #4]
    }
 80046dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80046de:	4b0f      	ldr	r3, [pc, #60]	; (800471c <vPortEnterCritical+0x58>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3301      	adds	r3, #1
 80046e4:	4a0d      	ldr	r2, [pc, #52]	; (800471c <vPortEnterCritical+0x58>)
 80046e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <vPortEnterCritical+0x58>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d10f      	bne.n	8004710 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <vPortEnterCritical+0x5c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <vPortEnterCritical+0x4c>
        __asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	603b      	str	r3, [r7, #0]
    }
 800470c:	bf00      	nop
 800470e:	e7fe      	b.n	800470e <vPortEnterCritical+0x4a>
    }
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	20000010 	.word	0x20000010
 8004720:	e000ed04 	.word	0xe000ed04

08004724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800472a:	4b12      	ldr	r3, [pc, #72]	; (8004774 <vPortExitCritical+0x50>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10a      	bne.n	8004748 <vPortExitCritical+0x24>
        __asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	607b      	str	r3, [r7, #4]
    }
 8004744:	bf00      	nop
 8004746:	e7fe      	b.n	8004746 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004748:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <vPortExitCritical+0x50>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3b01      	subs	r3, #1
 800474e:	4a09      	ldr	r2, [pc, #36]	; (8004774 <vPortExitCritical+0x50>)
 8004750:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004752:	4b08      	ldr	r3, [pc, #32]	; (8004774 <vPortExitCritical+0x50>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d105      	bne.n	8004766 <vPortExitCritical+0x42>
 800475a:	2300      	movs	r3, #0
 800475c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	f383 8811 	msr	BASEPRI, r3
    }
 8004764:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	20000010 	.word	0x20000010
	...

08004780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004780:	f3ef 8009 	mrs	r0, PSP
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	4b15      	ldr	r3, [pc, #84]	; (80047e0 <pxCurrentTCBConst>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	f01e 0f10 	tst.w	lr, #16
 8004790:	bf08      	it	eq
 8004792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479a:	6010      	str	r0, [r2, #0]
 800479c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047a4:	f380 8811 	msr	BASEPRI, r0
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f7fe ff54 	bl	800365c <vTaskSwitchContext>
 80047b4:	f04f 0000 	mov.w	r0, #0
 80047b8:	f380 8811 	msr	BASEPRI, r0
 80047bc:	bc09      	pop	{r0, r3}
 80047be:	6819      	ldr	r1, [r3, #0]
 80047c0:	6808      	ldr	r0, [r1, #0]
 80047c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c6:	f01e 0f10 	tst.w	lr, #16
 80047ca:	bf08      	it	eq
 80047cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047d0:	f380 8809 	msr	PSP, r0
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	f3af 8000 	nop.w

080047e0 <pxCurrentTCBConst>:
 80047e0:	200000c8 	.word	0x200000c8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop

080047e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
        __asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	607b      	str	r3, [r7, #4]
    }
 8004800:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004802:	f002 fbff 	bl	8007004 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004806:	f7fe fe6d 	bl	80034e4 <xTaskIncrementTick>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d006      	beq.n	800481e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004810:	f002 fc56 	bl	80070c0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004814:	4b08      	ldr	r3, [pc, #32]	; (8004838 <SysTick_Handler+0x50>)
 8004816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	e001      	b.n	8004822 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800481e:	f002 fc33 	bl	8007088 <SEGGER_SYSVIEW_RecordExitISR>
 8004822:	2300      	movs	r3, #0
 8004824:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	f383 8811 	msr	BASEPRI, r3
    }
 800482c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	e000ed04 	.word	0xe000ed04

0800483c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <vPortSetupTimerInterrupt+0x34>)
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <vPortSetupTimerInterrupt+0x38>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800484c:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <vPortSetupTimerInterrupt+0x3c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a0a      	ldr	r2, [pc, #40]	; (800487c <vPortSetupTimerInterrupt+0x40>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	099b      	lsrs	r3, r3, #6
 8004858:	4a09      	ldr	r2, [pc, #36]	; (8004880 <vPortSetupTimerInterrupt+0x44>)
 800485a:	3b01      	subs	r3, #1
 800485c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800485e:	4b04      	ldr	r3, [pc, #16]	; (8004870 <vPortSetupTimerInterrupt+0x34>)
 8004860:	2207      	movs	r2, #7
 8004862:	601a      	str	r2, [r3, #0]
}
 8004864:	bf00      	nop
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	e000e010 	.word	0xe000e010
 8004874:	e000e018 	.word	0xe000e018
 8004878:	20000000 	.word	0x20000000
 800487c:	10624dd3 	.word	0x10624dd3
 8004880:	e000e014 	.word	0xe000e014

08004884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004894 <vPortEnableVFP+0x10>
 8004888:	6801      	ldr	r1, [r0, #0]
 800488a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800488e:	6001      	str	r1, [r0, #0]
 8004890:	4770      	bx	lr
 8004892:	0000      	.short	0x0000
 8004894:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004898:	bf00      	nop
 800489a:	bf00      	nop

0800489c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80048a2:	f3ef 8305 	mrs	r3, IPSR
 80048a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b0f      	cmp	r3, #15
 80048ac:	d914      	bls.n	80048d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048ae:	4a17      	ldr	r2, [pc, #92]	; (800490c <vPortValidateInterruptPriority+0x70>)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048b8:	4b15      	ldr	r3, [pc, #84]	; (8004910 <vPortValidateInterruptPriority+0x74>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	7afa      	ldrb	r2, [r7, #11]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d20a      	bcs.n	80048d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	607b      	str	r3, [r7, #4]
    }
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048d8:	4b0e      	ldr	r3, [pc, #56]	; (8004914 <vPortValidateInterruptPriority+0x78>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048e0:	4b0d      	ldr	r3, [pc, #52]	; (8004918 <vPortValidateInterruptPriority+0x7c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d90a      	bls.n	80048fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	603b      	str	r3, [r7, #0]
    }
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <vPortValidateInterruptPriority+0x60>
    }
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	e000e3f0 	.word	0xe000e3f0
 8004910:	20000208 	.word	0x20000208
 8004914:	e000ed0c 	.word	0xe000ed0c
 8004918:	2000020c 	.word	0x2000020c

0800491c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08a      	sub	sp, #40	; 0x28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004924:	2300      	movs	r3, #0
 8004926:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004928:	f7fe fd0c 	bl	8003344 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800492c:	4b65      	ldr	r3, [pc, #404]	; (8004ac4 <pvPortMalloc+0x1a8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004934:	f000 f934 	bl	8004ba0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004938:	4b63      	ldr	r3, [pc, #396]	; (8004ac8 <pvPortMalloc+0x1ac>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4013      	ands	r3, r2
 8004940:	2b00      	cmp	r3, #0
 8004942:	f040 80a7 	bne.w	8004a94 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d02d      	beq.n	80049a8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800494c:	2208      	movs	r2, #8
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	429a      	cmp	r2, r3
 8004956:	d227      	bcs.n	80049a8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004958:	2208      	movs	r2, #8
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4413      	add	r3, r2
 800495e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	2b00      	cmp	r3, #0
 8004968:	d021      	beq.n	80049ae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f023 0307 	bic.w	r3, r3, #7
 8004970:	3308      	adds	r3, #8
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	429a      	cmp	r2, r3
 8004976:	d214      	bcs.n	80049a2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f023 0307 	bic.w	r3, r3, #7
 800497e:	3308      	adds	r3, #8
 8004980:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	2b00      	cmp	r3, #0
 800498a:	d010      	beq.n	80049ae <pvPortMalloc+0x92>
        __asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	617b      	str	r3, [r7, #20]
    }
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049a6:	e002      	b.n	80049ae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	607b      	str	r3, [r7, #4]
 80049ac:	e000      	b.n	80049b0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049ae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d06e      	beq.n	8004a94 <pvPortMalloc+0x178>
 80049b6:	4b45      	ldr	r3, [pc, #276]	; (8004acc <pvPortMalloc+0x1b0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d869      	bhi.n	8004a94 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80049c0:	4b43      	ldr	r3, [pc, #268]	; (8004ad0 <pvPortMalloc+0x1b4>)
 80049c2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80049c4:	4b42      	ldr	r3, [pc, #264]	; (8004ad0 <pvPortMalloc+0x1b4>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049ca:	e004      	b.n	80049d6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d903      	bls.n	80049e8 <pvPortMalloc+0xcc>
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f1      	bne.n	80049cc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80049e8:	4b36      	ldr	r3, [pc, #216]	; (8004ac4 <pvPortMalloc+0x1a8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d050      	beq.n	8004a94 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2208      	movs	r2, #8
 80049f8:	4413      	add	r3, r2
 80049fa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	1ad2      	subs	r2, r2, r3
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d91f      	bls.n	8004a54 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4413      	add	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <pvPortMalloc+0x120>
        __asm volatile
 8004a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	613b      	str	r3, [r7, #16]
    }
 8004a38:	bf00      	nop
 8004a3a:	e7fe      	b.n	8004a3a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	1ad2      	subs	r2, r2, r3
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a4e:	69b8      	ldr	r0, [r7, #24]
 8004a50:	f000 f908 	bl	8004c64 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a54:	4b1d      	ldr	r3, [pc, #116]	; (8004acc <pvPortMalloc+0x1b0>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	4a1b      	ldr	r2, [pc, #108]	; (8004acc <pvPortMalloc+0x1b0>)
 8004a60:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a62:	4b1a      	ldr	r3, [pc, #104]	; (8004acc <pvPortMalloc+0x1b0>)
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <pvPortMalloc+0x1b8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d203      	bcs.n	8004a76 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a6e:	4b17      	ldr	r3, [pc, #92]	; (8004acc <pvPortMalloc+0x1b0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a18      	ldr	r2, [pc, #96]	; (8004ad4 <pvPortMalloc+0x1b8>)
 8004a74:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <pvPortMalloc+0x1ac>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004a8a:	4b13      	ldr	r3, [pc, #76]	; (8004ad8 <pvPortMalloc+0x1bc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	4a11      	ldr	r2, [pc, #68]	; (8004ad8 <pvPortMalloc+0x1bc>)
 8004a92:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004a94:	f7fe fc64 	bl	8003360 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <pvPortMalloc+0x19c>
        __asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	60fb      	str	r3, [r7, #12]
    }
 8004ab4:	bf00      	nop
 8004ab6:	e7fe      	b.n	8004ab6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004ab8:	69fb      	ldr	r3, [r7, #28]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3728      	adds	r7, #40	; 0x28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20012e18 	.word	0x20012e18
 8004ac8:	20012e2c 	.word	0x20012e2c
 8004acc:	20012e1c 	.word	0x20012e1c
 8004ad0:	20012e10 	.word	0x20012e10
 8004ad4:	20012e20 	.word	0x20012e20
 8004ad8:	20012e24 	.word	0x20012e24

08004adc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d04d      	beq.n	8004b8a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004aee:	2308      	movs	r3, #8
 8004af0:	425b      	negs	r3, r3
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4413      	add	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	4b24      	ldr	r3, [pc, #144]	; (8004b94 <vPortFree+0xb8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <vPortFree+0x44>
        __asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	60fb      	str	r3, [r7, #12]
    }
 8004b1c:	bf00      	nop
 8004b1e:	e7fe      	b.n	8004b1e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <vPortFree+0x62>
        __asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	60bb      	str	r3, [r7, #8]
    }
 8004b3a:	bf00      	nop
 8004b3c:	e7fe      	b.n	8004b3c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <vPortFree+0xb8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01e      	beq.n	8004b8a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d11a      	bne.n	8004b8a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	4b0e      	ldr	r3, [pc, #56]	; (8004b94 <vPortFree+0xb8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	401a      	ands	r2, r3
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004b64:	f7fe fbee 	bl	8003344 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <vPortFree+0xbc>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4413      	add	r3, r2
 8004b72:	4a09      	ldr	r2, [pc, #36]	; (8004b98 <vPortFree+0xbc>)
 8004b74:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b76:	6938      	ldr	r0, [r7, #16]
 8004b78:	f000 f874 	bl	8004c64 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004b7c:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <vPortFree+0xc0>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3301      	adds	r3, #1
 8004b82:	4a06      	ldr	r2, [pc, #24]	; (8004b9c <vPortFree+0xc0>)
 8004b84:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004b86:	f7fe fbeb 	bl	8003360 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004b8a:	bf00      	nop
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20012e2c 	.word	0x20012e2c
 8004b98:	20012e1c 	.word	0x20012e1c
 8004b9c:	20012e28 	.word	0x20012e28

08004ba0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ba6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004baa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004bac:	4b27      	ldr	r3, [pc, #156]	; (8004c4c <prvHeapInit+0xac>)
 8004bae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00c      	beq.n	8004bd4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3307      	adds	r3, #7
 8004bbe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0307 	bic.w	r3, r3, #7
 8004bc6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	4a1f      	ldr	r2, [pc, #124]	; (8004c4c <prvHeapInit+0xac>)
 8004bd0:	4413      	add	r3, r2
 8004bd2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bd8:	4a1d      	ldr	r2, [pc, #116]	; (8004c50 <prvHeapInit+0xb0>)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004bde:	4b1c      	ldr	r3, [pc, #112]	; (8004c50 <prvHeapInit+0xb0>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	4413      	add	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004bec:	2208      	movs	r2, #8
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0307 	bic.w	r3, r3, #7
 8004bfa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4a15      	ldr	r2, [pc, #84]	; (8004c54 <prvHeapInit+0xb4>)
 8004c00:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004c02:	4b14      	ldr	r3, [pc, #80]	; (8004c54 <prvHeapInit+0xb4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2200      	movs	r2, #0
 8004c08:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004c0a:	4b12      	ldr	r3, [pc, #72]	; (8004c54 <prvHeapInit+0xb4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	1ad2      	subs	r2, r2, r3
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c20:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <prvHeapInit+0xb4>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4a0a      	ldr	r2, [pc, #40]	; (8004c58 <prvHeapInit+0xb8>)
 8004c2e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a09      	ldr	r2, [pc, #36]	; (8004c5c <prvHeapInit+0xbc>)
 8004c36:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c38:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <prvHeapInit+0xc0>)
 8004c3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c3e:	601a      	str	r2, [r3, #0]
}
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	20000210 	.word	0x20000210
 8004c50:	20012e10 	.word	0x20012e10
 8004c54:	20012e18 	.word	0x20012e18
 8004c58:	20012e20 	.word	0x20012e20
 8004c5c:	20012e1c 	.word	0x20012e1c
 8004c60:	20012e2c 	.word	0x20012e2c

08004c64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c6c:	4b28      	ldr	r3, [pc, #160]	; (8004d10 <prvInsertBlockIntoFreeList+0xac>)
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	e002      	b.n	8004c78 <prvInsertBlockIntoFreeList+0x14>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d8f7      	bhi.n	8004c72 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d108      	bne.n	8004ca6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	441a      	add	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	441a      	add	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d118      	bne.n	8004cec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4b15      	ldr	r3, [pc, #84]	; (8004d14 <prvInsertBlockIntoFreeList+0xb0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d00d      	beq.n	8004ce2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	441a      	add	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	e008      	b.n	8004cf4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ce2:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <prvInsertBlockIntoFreeList+0xb0>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	e003      	b.n	8004cf4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d002      	beq.n	8004d02 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20012e10 	.word	0x20012e10
 8004d14:	20012e18 	.word	0x20012e18

08004d18 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004d1c:	4803      	ldr	r0, [pc, #12]	; (8004d2c <_cbSendSystemDesc+0x14>)
 8004d1e:	f002 f91b 	bl	8006f58 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004d22:	4803      	ldr	r0, [pc, #12]	; (8004d30 <_cbSendSystemDesc+0x18>)
 8004d24:	f002 f918 	bl	8006f58 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004d28:	bf00      	nop
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	080077d4 	.word	0x080077d4
 8004d30:	08007810 	.word	0x08007810

08004d34 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d3a:	6818      	ldr	r0, [r3, #0]
 8004d3c:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d3e:	6819      	ldr	r1, [r3, #0]
 8004d40:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <SEGGER_SYSVIEW_Conf+0x24>)
 8004d42:	4a06      	ldr	r2, [pc, #24]	; (8004d5c <SEGGER_SYSVIEW_Conf+0x28>)
 8004d44:	f001 fc84 	bl	8006650 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004d48:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004d4c:	f001 fcc4 	bl	80066d8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004d50:	bf00      	nop
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20000000 	.word	0x20000000
 8004d58:	08004d19 	.word	0x08004d19
 8004d5c:	080078ac 	.word	0x080078ac

08004d60 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004d66:	2300      	movs	r3, #0
 8004d68:	607b      	str	r3, [r7, #4]
 8004d6a:	e033      	b.n	8004dd4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004d6c:	491e      	ldr	r1, [pc, #120]	; (8004de8 <_cbSendTaskList+0x88>)
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	491a      	ldr	r1, [pc, #104]	; (8004de8 <_cbSendTaskList+0x88>)
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	4613      	mov	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	440b      	add	r3, r1
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	6819      	ldr	r1, [r3, #0]
 8004d8e:	4c16      	ldr	r4, [pc, #88]	; (8004de8 <_cbSendTaskList+0x88>)
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4423      	add	r3, r4
 8004d9c:	3308      	adds	r3, #8
 8004d9e:	681c      	ldr	r4, [r3, #0]
 8004da0:	4d11      	ldr	r5, [pc, #68]	; (8004de8 <_cbSendTaskList+0x88>)
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	442b      	add	r3, r5
 8004dae:	330c      	adds	r3, #12
 8004db0:	681d      	ldr	r5, [r3, #0]
 8004db2:	4e0d      	ldr	r6, [pc, #52]	; (8004de8 <_cbSendTaskList+0x88>)
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	4613      	mov	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4433      	add	r3, r6
 8004dc0:	3310      	adds	r3, #16
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	462b      	mov	r3, r5
 8004dc8:	4622      	mov	r2, r4
 8004dca:	f000 f8bd 	bl	8004f48 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	607b      	str	r3, [r7, #4]
 8004dd4:	4b05      	ldr	r3, [pc, #20]	; (8004dec <_cbSendTaskList+0x8c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d3c6      	bcc.n	8004d6c <_cbSendTaskList+0xc>
  }
}
 8004dde:	bf00      	nop
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004de8:	20012e30 	.word	0x20012e30
 8004dec:	20012ed0 	.word	0x20012ed0

08004df0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004df8:	f7fe fb62 	bl	80034c0 <xTaskGetTickCountFromISR>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2200      	movs	r2, #0
 8004e00:	469a      	mov	sl, r3
 8004e02:	4693      	mov	fp, r2
 8004e04:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004e08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	f04f 0a00 	mov.w	sl, #0
 8004e14:	f04f 0b00 	mov.w	fp, #0
 8004e18:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004e1c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004e20:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004e24:	4652      	mov	r2, sl
 8004e26:	465b      	mov	r3, fp
 8004e28:	1a14      	subs	r4, r2, r0
 8004e2a:	eb63 0501 	sbc.w	r5, r3, r1
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	00ab      	lsls	r3, r5, #2
 8004e38:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004e3c:	00a2      	lsls	r2, r4, #2
 8004e3e:	4614      	mov	r4, r2
 8004e40:	461d      	mov	r5, r3
 8004e42:	eb14 0800 	adds.w	r8, r4, r0
 8004e46:	eb45 0901 	adc.w	r9, r5, r1
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e5e:	4690      	mov	r8, r2
 8004e60:	4699      	mov	r9, r3
 8004e62:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004e66:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004e78 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
 8004e84:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004e86:	2205      	movs	r2, #5
 8004e88:	492b      	ldr	r1, [pc, #172]	; (8004f38 <SYSVIEW_AddTask+0xc0>)
 8004e8a:	68b8      	ldr	r0, [r7, #8]
 8004e8c:	f002 fc2e 	bl	80076ec <memcmp>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d04b      	beq.n	8004f2e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004e96:	4b29      	ldr	r3, [pc, #164]	; (8004f3c <SYSVIEW_AddTask+0xc4>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b07      	cmp	r3, #7
 8004e9c:	d903      	bls.n	8004ea6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004e9e:	4828      	ldr	r0, [pc, #160]	; (8004f40 <SYSVIEW_AddTask+0xc8>)
 8004ea0:	f002 fb76 	bl	8007590 <SEGGER_SYSVIEW_Warn>
    return;
 8004ea4:	e044      	b.n	8004f30 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004ea6:	4b25      	ldr	r3, [pc, #148]	; (8004f3c <SYSVIEW_AddTask+0xc4>)
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4926      	ldr	r1, [pc, #152]	; (8004f44 <SYSVIEW_AddTask+0xcc>)
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004eba:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <SYSVIEW_AddTask+0xc4>)
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4921      	ldr	r1, [pc, #132]	; (8004f44 <SYSVIEW_AddTask+0xcc>)
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	3304      	adds	r3, #4
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004ed0:	4b1a      	ldr	r3, [pc, #104]	; (8004f3c <SYSVIEW_AddTask+0xc4>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	491b      	ldr	r1, [pc, #108]	; (8004f44 <SYSVIEW_AddTask+0xcc>)
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004ee6:	4b15      	ldr	r3, [pc, #84]	; (8004f3c <SYSVIEW_AddTask+0xc4>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4916      	ldr	r1, [pc, #88]	; (8004f44 <SYSVIEW_AddTask+0xcc>)
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004efc:	4b0f      	ldr	r3, [pc, #60]	; (8004f3c <SYSVIEW_AddTask+0xc4>)
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	4910      	ldr	r1, [pc, #64]	; (8004f44 <SYSVIEW_AddTask+0xcc>)
 8004f02:	4613      	mov	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	3310      	adds	r3, #16
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004f12:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <SYSVIEW_AddTask+0xc4>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3301      	adds	r3, #1
 8004f18:	4a08      	ldr	r2, [pc, #32]	; (8004f3c <SYSVIEW_AddTask+0xc4>)
 8004f1a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 f80e 	bl	8004f48 <SYSVIEW_SendTaskInfo>
 8004f2c:	e000      	b.n	8004f30 <SYSVIEW_AddTask+0xb8>
    return;
 8004f2e:	bf00      	nop

}
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	08007820 	.word	0x08007820
 8004f3c:	20012ed0 	.word	0x20012ed0
 8004f40:	08007828 	.word	0x08007828
 8004f44:	20012e30 	.word	0x20012e30

08004f48 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08a      	sub	sp, #40	; 0x28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004f56:	f107 0310 	add.w	r3, r7, #16
 8004f5a:	2218      	movs	r2, #24
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f002 fbe2 	bl	8007728 <memset>
  TaskInfo.TaskID     = TaskID;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f76:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004f78:	f107 0310 	add.w	r3, r7, #16
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f001 fef3 	bl	8006d68 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004f82:	bf00      	nop
 8004f84:	3728      	adds	r7, #40	; 0x28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <__NVIC_EnableIRQ>:
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	4603      	mov	r3, r0
 8004f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	db0b      	blt.n	8004fb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	f003 021f 	and.w	r2, r3, #31
 8004fa4:	4907      	ldr	r1, [pc, #28]	; (8004fc4 <__NVIC_EnableIRQ+0x38>)
 8004fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	2001      	movs	r0, #1
 8004fae:	fa00 f202 	lsl.w	r2, r0, r2
 8004fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	e000e100 	.word	0xe000e100

08004fc8 <__NVIC_SetPriority>:
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	6039      	str	r1, [r7, #0]
 8004fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	db0a      	blt.n	8004ff2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	490c      	ldr	r1, [pc, #48]	; (8005014 <__NVIC_SetPriority+0x4c>)
 8004fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe6:	0112      	lsls	r2, r2, #4
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	440b      	add	r3, r1
 8004fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ff0:	e00a      	b.n	8005008 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	4908      	ldr	r1, [pc, #32]	; (8005018 <__NVIC_SetPriority+0x50>)
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	3b04      	subs	r3, #4
 8005000:	0112      	lsls	r2, r2, #4
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	440b      	add	r3, r1
 8005006:	761a      	strb	r2, [r3, #24]
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	e000e100 	.word	0xe000e100
 8005018:	e000ed00 	.word	0xe000ed00

0800501c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8005022:	f002 fb11 	bl	8007648 <SEGGER_SYSVIEW_IsStarted>
 8005026:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800502e:	f001 fd1f 	bl	8006a70 <SEGGER_SYSVIEW_Start>
  }
}
 8005032:	bf00      	nop
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	4603      	mov	r3, r0
 8005044:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005046:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <_cbOnUARTRx+0x3c>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b03      	cmp	r3, #3
 800504c:	d806      	bhi.n	800505c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800504e:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <_cbOnUARTRx+0x3c>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	b2da      	uxtb	r2, r3
 8005056:	4b08      	ldr	r3, [pc, #32]	; (8005078 <_cbOnUARTRx+0x3c>)
 8005058:	701a      	strb	r2, [r3, #0]
    goto Done;
 800505a:	e009      	b.n	8005070 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800505c:	f7ff ffde 	bl	800501c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005060:	4b05      	ldr	r3, [pc, #20]	; (8005078 <_cbOnUARTRx+0x3c>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	4618      	mov	r0, r3
 8005066:	1dfb      	adds	r3, r7, #7
 8005068:	2201      	movs	r2, #1
 800506a:	4619      	mov	r1, r3
 800506c:	f000 fb9e 	bl	80057ac <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005070:	bf00      	nop
}
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20000014 	.word	0x20000014

0800507c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005084:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <_cbOnUARTTx+0x5c>)
 8005086:	785b      	ldrb	r3, [r3, #1]
 8005088:	2b03      	cmp	r3, #3
 800508a:	d80f      	bhi.n	80050ac <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800508c:	4b12      	ldr	r3, [pc, #72]	; (80050d8 <_cbOnUARTTx+0x5c>)
 800508e:	785b      	ldrb	r3, [r3, #1]
 8005090:	461a      	mov	r2, r3
 8005092:	4b12      	ldr	r3, [pc, #72]	; (80050dc <_cbOnUARTTx+0x60>)
 8005094:	5c9a      	ldrb	r2, [r3, r2]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800509a:	4b0f      	ldr	r3, [pc, #60]	; (80050d8 <_cbOnUARTTx+0x5c>)
 800509c:	785b      	ldrb	r3, [r3, #1]
 800509e:	3301      	adds	r3, #1
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	4b0d      	ldr	r3, [pc, #52]	; (80050d8 <_cbOnUARTTx+0x5c>)
 80050a4:	705a      	strb	r2, [r3, #1]
    r = 1;
 80050a6:	2301      	movs	r3, #1
 80050a8:	60fb      	str	r3, [r7, #12]
    goto Done;
 80050aa:	e00f      	b.n	80050cc <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80050ac:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <_cbOnUARTTx+0x5c>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fa1d 	bl	80054f4 <SEGGER_RTT_ReadUpBufferNoLock>
 80050ba:	4603      	mov	r3, r0
 80050bc:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	da02      	bge.n	80050ca <_cbOnUARTTx+0x4e>
    r = 0;
 80050c4:	2300      	movs	r3, #0
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	e000      	b.n	80050cc <_cbOnUARTTx+0x50>
  }
Done:
 80050ca:	bf00      	nop
  return r;
 80050cc:	68fb      	ldr	r3, [r7, #12]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000014 	.word	0x20000014
 80050dc:	080078b4 	.word	0x080078b4

080050e0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80050e8:	4a04      	ldr	r2, [pc, #16]	; (80050fc <SEGGER_UART_init+0x1c>)
 80050ea:	4905      	ldr	r1, [pc, #20]	; (8005100 <SEGGER_UART_init+0x20>)
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f865 	bl	80051bc <HIF_UART_Init>
}
 80050f2:	bf00      	nop
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	0800503d 	.word	0x0800503d
 8005100:	0800507d 	.word	0x0800507d

08005104 <USART3_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART3_IRQHandler(void);
void USART3_IRQHandler(void) {
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800510a:	4b1e      	ldr	r3, [pc, #120]	; (8005184 <USART3_IRQHandler+0x80>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f003 0320 	and.w	r3, r3, #32
 8005116:	2b00      	cmp	r3, #0
 8005118:	d011      	beq.n	800513e <USART3_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 800511a:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <USART3_IRQHandler+0x84>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	b2db      	uxtb	r3, r3
 8005120:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f003 030b 	and.w	r3, r3, #11
 8005128:	2b00      	cmp	r3, #0
 800512a:	d108      	bne.n	800513e <USART3_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800512c:	4b17      	ldr	r3, [pc, #92]	; (800518c <USART3_IRQHandler+0x88>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d004      	beq.n	800513e <USART3_IRQHandler+0x3a>
        _cbOnRx(v);
 8005134:	4b15      	ldr	r3, [pc, #84]	; (800518c <USART3_IRQHandler+0x88>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	79fa      	ldrb	r2, [r7, #7]
 800513a:	4610      	mov	r0, r2
 800513c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01a      	beq.n	800517e <USART3_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005148:	4b11      	ldr	r3, [pc, #68]	; (8005190 <USART3_IRQHandler+0x8c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d015      	beq.n	800517c <USART3_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005150:	4b0f      	ldr	r3, [pc, #60]	; (8005190 <USART3_IRQHandler+0x8c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	1dfa      	adds	r2, r7, #7
 8005156:	4610      	mov	r0, r2
 8005158:	4798      	blx	r3
 800515a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <USART3_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005162:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <USART3_IRQHandler+0x90>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a0b      	ldr	r2, [pc, #44]	; (8005194 <USART3_IRQHandler+0x90>)
 8005168:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	e006      	b.n	800517e <USART3_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005170:	4b04      	ldr	r3, [pc, #16]	; (8005184 <USART3_IRQHandler+0x80>)
 8005172:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 8005174:	79fa      	ldrb	r2, [r7, #7]
 8005176:	4b08      	ldr	r3, [pc, #32]	; (8005198 <USART3_IRQHandler+0x94>)
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	e000      	b.n	800517e <USART3_IRQHandler+0x7a>
      return;
 800517c:	bf00      	nop
    }
  }
}
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	4000481c 	.word	0x4000481c
 8005188:	40004824 	.word	0x40004824
 800518c:	20012ed4 	.word	0x20012ed4
 8005190:	20012ed8 	.word	0x20012ed8
 8005194:	40004800 	.word	0x40004800
 8005198:	40004828 	.word	0x40004828

0800519c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80051a0:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a04      	ldr	r2, [pc, #16]	; (80051b8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80051a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051aa:	6013      	str	r3, [r2, #0]
}
 80051ac:	bf00      	nop
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40004800 	.word	0x40004800

080051bc <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  // Habilitar reloj de USART3 y puerto D
  RCC_APB1ENR |= (1 << 18);       // Habilitar reloj USART3 (APB1)
 80051c8:	4b2e      	ldr	r3, [pc, #184]	; (8005284 <HIF_UART_Init+0xc8>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a2d      	ldr	r2, [pc, #180]	; (8005284 <HIF_UART_Init+0xc8>)
 80051ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051d2:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 << 3);        // Habilitar reloj GPIO D
 80051d4:	4b2c      	ldr	r3, [pc, #176]	; (8005288 <HIF_UART_Init+0xcc>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a2b      	ldr	r2, [pc, #172]	; (8005288 <HIF_UART_Init+0xcc>)
 80051da:	f043 0308 	orr.w	r3, r3, #8
 80051de:	6013      	str	r3, [r2, #0]

  // Configurar los pines PD8 y PD9 para función alternativa AF7 (USART3)
  v  = GPIO_AFRH;
 80051e0:	4b2a      	ldr	r3, [pc, #168]	; (800528c <HIF_UART_Init+0xd0>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (15UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051ec:	613b      	str	r3, [r7, #16]
  v |=  ((7UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (7UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051f4:	613b      	str	r3, [r7, #16]
  GPIO_AFRH = v;
 80051f6:	4a25      	ldr	r2, [pc, #148]	; (800528c <HIF_UART_Init+0xd0>)
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	6013      	str	r3, [r2, #0]

  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80051fc:	4b24      	ldr	r3, [pc, #144]	; (8005290 <HIF_UART_Init+0xd4>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005208:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8005210:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8005212:	4a1f      	ldr	r2, [pc, #124]	; (8005290 <HIF_UART_Init+0xd4>)
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	6013      	str	r3, [r2, #0]

  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800521e:	4a1d      	ldr	r2, [pc, #116]	; (8005294 <HIF_UART_Init+0xd8>)
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	fbb2 f3f3 	udiv	r3, r2, r3
 8005226:	3301      	adds	r3, #1
 8005228:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	085b      	lsrs	r3, r3, #1
 800522e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005236:	d302      	bcc.n	800523e <HIF_UART_Init+0x82>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005238:	f640 73ff 	movw	r3, #4095	; 0xfff
 800523c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d004      	beq.n	800524e <HIF_UART_Init+0x92>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	4a13      	ldr	r2, [pc, #76]	; (8005298 <HIF_UART_Init+0xdc>)
 800524a:	b29b      	uxth	r3, r3
 800524c:	6013      	str	r3, [r2, #0]
  }

  //
  // Initialize USART
  //
  USART_CR1 = 0
 800524e:	4b13      	ldr	r3, [pc, #76]	; (800529c <HIF_UART_Init+0xe0>)
 8005250:	f248 022d 	movw	r2, #32813	; 0x802d
 8005254:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005256:	4b12      	ldr	r3, [pc, #72]	; (80052a0 <HIF_UART_Init+0xe4>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800525c:	4b11      	ldr	r3, [pc, #68]	; (80052a4 <HIF_UART_Init+0xe8>)
 800525e:	2280      	movs	r2, #128	; 0x80
 8005260:	601a      	str	r2, [r3, #0]
            ;

  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8005262:	4a11      	ldr	r2, [pc, #68]	; (80052a8 <HIF_UART_Init+0xec>)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005268:	4a10      	ldr	r2, [pc, #64]	; (80052ac <HIF_UART_Init+0xf0>)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800526e:	2106      	movs	r1, #6
 8005270:	2027      	movs	r0, #39	; 0x27
 8005272:	f7ff fea9 	bl	8004fc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005276:	2027      	movs	r0, #39	; 0x27
 8005278:	f7ff fe88 	bl	8004f8c <__NVIC_EnableIRQ>
}
 800527c:	bf00      	nop
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40023840 	.word	0x40023840
 8005288:	40023830 	.word	0x40023830
 800528c:	40020c24 	.word	0x40020c24
 8005290:	40020c00 	.word	0x40020c00
 8005294:	066ff300 	.word	0x066ff300
 8005298:	4000480c 	.word	0x4000480c
 800529c:	40004800 	.word	0x40004800
 80052a0:	40004804 	.word	0x40004804
 80052a4:	40004808 	.word	0x40004808
 80052a8:	20012ed4 	.word	0x20012ed4
 80052ac:	20012ed8 	.word	0x20012ed8

080052b0 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80052b6:	4b26      	ldr	r3, [pc, #152]	; (8005350 <_DoInit+0xa0>)
 80052b8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80052ba:	22a8      	movs	r2, #168	; 0xa8
 80052bc:	2100      	movs	r1, #0
 80052be:	6838      	ldr	r0, [r7, #0]
 80052c0:	f002 fa32 	bl	8007728 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2203      	movs	r2, #3
 80052c8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2203      	movs	r2, #3
 80052ce:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	4a20      	ldr	r2, [pc, #128]	; (8005354 <_DoInit+0xa4>)
 80052d4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	4a1f      	ldr	r2, [pc, #124]	; (8005358 <_DoInit+0xa8>)
 80052da:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052e2:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2200      	movs	r2, #0
 80052e8:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2200      	movs	r2, #0
 80052ee:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2200      	movs	r2, #0
 80052f4:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	4a16      	ldr	r2, [pc, #88]	; (8005354 <_DoInit+0xa4>)
 80052fa:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	4a17      	ldr	r2, [pc, #92]	; (800535c <_DoInit+0xac>)
 8005300:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2210      	movs	r2, #16
 8005306:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2200      	movs	r2, #0
 800530c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2200      	movs	r2, #0
 8005312:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2200      	movs	r2, #0
 8005318:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800531a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800531e:	2300      	movs	r3, #0
 8005320:	607b      	str	r3, [r7, #4]
 8005322:	e00c      	b.n	800533e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f1c3 030f 	rsb	r3, r3, #15
 800532a:	4a0d      	ldr	r2, [pc, #52]	; (8005360 <_DoInit+0xb0>)
 800532c:	5cd1      	ldrb	r1, [r2, r3]
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4413      	add	r3, r2
 8005334:	460a      	mov	r2, r1
 8005336:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3301      	adds	r3, #1
 800533c:	607b      	str	r3, [r7, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b0f      	cmp	r3, #15
 8005342:	d9ef      	bls.n	8005324 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005344:	f3bf 8f5f 	dmb	sy
}
 8005348:	bf00      	nop
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	20012edc 	.word	0x20012edc
 8005354:	08007878 	.word	0x08007878
 8005358:	20012f84 	.word	0x20012f84
 800535c:	20013384 	.word	0x20013384
 8005360:	080078b8 	.word	0x080078b8

08005364 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005364:	b580      	push	{r7, lr}
 8005366:	b08a      	sub	sp, #40	; 0x28
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005370:	2300      	movs	r3, #0
 8005372:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	429a      	cmp	r2, r3
 8005386:	d905      	bls.n	8005394 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	3b01      	subs	r3, #1
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
 8005392:	e007      	b.n	80053a4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	69b9      	ldr	r1, [r7, #24]
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	1acb      	subs	r3, r1, r3
 800539e:	4413      	add	r3, r2
 80053a0:	3b01      	subs	r3, #1
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ae:	4293      	cmp	r3, r2
 80053b0:	bf28      	it	cs
 80053b2:	4613      	movcs	r3, r2
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80053b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4293      	cmp	r3, r2
 80053bc:	bf28      	it	cs
 80053be:	4613      	movcs	r3, r2
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	4413      	add	r3, r2
 80053ca:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80053cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ce:	68b9      	ldr	r1, [r7, #8]
 80053d0:	6978      	ldr	r0, [r7, #20]
 80053d2:	f002 f99b 	bl	800770c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80053d6:	6a3a      	ldr	r2, [r7, #32]
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	4413      	add	r3, r2
 80053dc:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	4413      	add	r3, r2
 80053e4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80053ee:	69fa      	ldr	r2, [r7, #28]
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	4413      	add	r3, r2
 80053f4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d101      	bne.n	8005404 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005400:	2300      	movs	r3, #0
 8005402:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005404:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	69fa      	ldr	r2, [r7, #28]
 800540c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1b2      	bne.n	800537a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005414:	6a3b      	ldr	r3, [r7, #32]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3728      	adds	r7, #40	; 0x28
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800541e:	b580      	push	{r7, lr}
 8005420:	b088      	sub	sp, #32
 8005422:	af00      	add	r7, sp, #0
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	429a      	cmp	r2, r3
 8005440:	d911      	bls.n	8005466 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	4413      	add	r3, r2
 800544a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	68b9      	ldr	r1, [r7, #8]
 8005450:	6938      	ldr	r0, [r7, #16]
 8005452:	f002 f95b 	bl	800770c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005456:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	441a      	add	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005464:	e01f      	b.n	80054a6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	4413      	add	r3, r2
 8005472:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	68b9      	ldr	r1, [r7, #8]
 8005478:	6938      	ldr	r0, [r7, #16]
 800547a:	f002 f947 	bl	800770c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	4413      	add	r3, r2
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	4619      	mov	r1, r3
 8005496:	6938      	ldr	r0, [r7, #16]
 8005498:	f002 f938 	bl	800770c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800549c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	60da      	str	r2, [r3, #12]
}
 80054a6:	bf00      	nop
 80054a8:	3720      	adds	r7, #32
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80054ae:	b480      	push	{r7}
 80054b0:	b087      	sub	sp, #28
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d808      	bhi.n	80054dc <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	1ad2      	subs	r2, r2, r3
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	4413      	add	r3, r2
 80054d6:	3b01      	subs	r3, #1
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	e004      	b.n	80054e6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	3b01      	subs	r3, #1
 80054e4:	617b      	str	r3, [r7, #20]
  }
  return r;
 80054e6:	697b      	ldr	r3, [r7, #20]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	371c      	adds	r7, #28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08c      	sub	sp, #48	; 0x30
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005500:	4b3e      	ldr	r3, [pc, #248]	; (80055fc <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005502:	623b      	str	r3, [r7, #32]
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b53      	cmp	r3, #83	; 0x53
 800550c:	d001      	beq.n	8005512 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800550e:	f7ff fecf 	bl	80052b0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	4613      	mov	r3, r2
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	4413      	add	r3, r2
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	4a37      	ldr	r2, [pc, #220]	; (80055fc <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005520:	4413      	add	r3, r2
 8005522:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005534:	2300      	movs	r3, #0
 8005536:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	429a      	cmp	r2, r3
 800553e:	d92b      	bls.n	8005598 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4293      	cmp	r3, r2
 8005550:	bf28      	it	cs
 8005552:	4613      	movcs	r3, r2
 8005554:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	4413      	add	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	6939      	ldr	r1, [r7, #16]
 8005564:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005566:	f002 f8d1 	bl	800770c <memcpy>
    NumBytesRead += NumBytesRem;
 800556a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	4413      	add	r3, r2
 8005570:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	4413      	add	r3, r2
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	4413      	add	r3, r2
 8005588:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005590:	429a      	cmp	r2, r3
 8005592:	d101      	bne.n	8005598 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005594:	2300      	movs	r3, #0
 8005596:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4293      	cmp	r3, r2
 80055a6:	bf28      	it	cs
 80055a8:	4613      	movcs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d019      	beq.n	80055e6 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	4413      	add	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	6939      	ldr	r1, [r7, #16]
 80055c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055c2:	f002 f8a3 	bl	800770c <memcpy>
    NumBytesRead += NumBytesRem;
 80055c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	4413      	add	r3, r2
 80055cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80055ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	4413      	add	r3, r2
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80055de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	4413      	add	r3, r2
 80055e4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80055e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055f0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80055f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3730      	adds	r7, #48	; 0x30
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	20012edc 	.word	0x20012edc

08005600 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005600:	b580      	push	{r7, lr}
 8005602:	b08c      	sub	sp, #48	; 0x30
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800560c:	4b3e      	ldr	r3, [pc, #248]	; (8005708 <SEGGER_RTT_ReadNoLock+0x108>)
 800560e:	623b      	str	r3, [r7, #32]
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b53      	cmp	r3, #83	; 0x53
 8005618:	d001      	beq.n	800561e <SEGGER_RTT_ReadNoLock+0x1e>
 800561a:	f7ff fe49 	bl	80052b0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4613      	mov	r3, r2
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	4413      	add	r3, r2
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	3360      	adds	r3, #96	; 0x60
 800562a:	4a37      	ldr	r2, [pc, #220]	; (8005708 <SEGGER_RTT_ReadNoLock+0x108>)
 800562c:	4413      	add	r3, r2
 800562e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005640:	2300      	movs	r3, #0
 8005642:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	429a      	cmp	r2, r3
 800564a:	d92b      	bls.n	80056a4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4293      	cmp	r3, r2
 800565c:	bf28      	it	cs
 800565e:	4613      	movcs	r3, r2
 8005660:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005668:	4413      	add	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	6939      	ldr	r1, [r7, #16]
 8005670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005672:	f002 f84b 	bl	800770c <memcpy>
    NumBytesRead += NumBytesRem;
 8005676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	4413      	add	r3, r2
 800567c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800567e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	4413      	add	r3, r2
 8005684:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800568e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	4413      	add	r3, r2
 8005694:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800569c:	429a      	cmp	r2, r3
 800569e:	d101      	bne.n	80056a4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80056a0:	2300      	movs	r3, #0
 80056a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4293      	cmp	r3, r2
 80056b2:	bf28      	it	cs
 80056b4:	4613      	movcs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d019      	beq.n	80056f2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	4413      	add	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	6939      	ldr	r1, [r7, #16]
 80056cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056ce:	f002 f81d 	bl	800770c <memcpy>
    NumBytesRead += NumBytesRem;
 80056d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	4413      	add	r3, r2
 80056d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80056da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	4413      	add	r3, r2
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80056ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	4413      	add	r3, r2
 80056f0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80056f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056fc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80056fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005700:	4618      	mov	r0, r3
 8005702:	3730      	adds	r7, #48	; 0x30
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	20012edc 	.word	0x20012edc

0800570c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800570c:	b580      	push	{r7, lr}
 800570e:	b088      	sub	sp, #32
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4613      	mov	r3, r2
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	4413      	add	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	3360      	adds	r3, #96	; 0x60
 8005728:	4a1f      	ldr	r2, [pc, #124]	; (80057a8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800572a:	4413      	add	r3, r2
 800572c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	2b02      	cmp	r3, #2
 8005734:	d029      	beq.n	800578a <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005736:	2b02      	cmp	r3, #2
 8005738:	d82e      	bhi.n	8005798 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800573e:	2b01      	cmp	r3, #1
 8005740:	d013      	beq.n	800576a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005742:	e029      	b.n	8005798 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005744:	6978      	ldr	r0, [r7, #20]
 8005746:	f7ff feb2 	bl	80054ae <_GetAvailWriteSpace>
 800574a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	429a      	cmp	r2, r3
 8005752:	d202      	bcs.n	800575a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005754:	2300      	movs	r3, #0
 8005756:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005758:	e021      	b.n	800579e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	69b9      	ldr	r1, [r7, #24]
 8005762:	6978      	ldr	r0, [r7, #20]
 8005764:	f7ff fe5b 	bl	800541e <_WriteNoCheck>
    break;
 8005768:	e019      	b.n	800579e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800576a:	6978      	ldr	r0, [r7, #20]
 800576c:	f7ff fe9f 	bl	80054ae <_GetAvailWriteSpace>
 8005770:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	4293      	cmp	r3, r2
 8005778:	bf28      	it	cs
 800577a:	4613      	movcs	r3, r2
 800577c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800577e:	69fa      	ldr	r2, [r7, #28]
 8005780:	69b9      	ldr	r1, [r7, #24]
 8005782:	6978      	ldr	r0, [r7, #20]
 8005784:	f7ff fe4b 	bl	800541e <_WriteNoCheck>
    break;
 8005788:	e009      	b.n	800579e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	69b9      	ldr	r1, [r7, #24]
 800578e:	6978      	ldr	r0, [r7, #20]
 8005790:	f7ff fde8 	bl	8005364 <_WriteBlocking>
 8005794:	61f8      	str	r0, [r7, #28]
    break;
 8005796:	e002      	b.n	800579e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005798:	2300      	movs	r3, #0
 800579a:	61fb      	str	r3, [r7, #28]
    break;
 800579c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800579e:	69fb      	ldr	r3, [r7, #28]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3720      	adds	r7, #32
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	20012edc 	.word	0x20012edc

080057ac <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80057b8:	4b0e      	ldr	r3, [pc, #56]	; (80057f4 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80057ba:	61fb      	str	r3, [r7, #28]
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b53      	cmp	r3, #83	; 0x53
 80057c4:	d001      	beq.n	80057ca <SEGGER_RTT_WriteDownBuffer+0x1e>
 80057c6:	f7ff fd73 	bl	80052b0 <_DoInit>
  SEGGER_RTT_LOCK();
 80057ca:	f3ef 8311 	mrs	r3, BASEPRI
 80057ce:	f04f 0120 	mov.w	r1, #32
 80057d2:	f381 8811 	msr	BASEPRI, r1
 80057d6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	68b9      	ldr	r1, [r7, #8]
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f7ff ff95 	bl	800570c <SEGGER_RTT_WriteDownBufferNoLock>
 80057e2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80057ea:	697b      	ldr	r3, [r7, #20]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3720      	adds	r7, #32
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	20012edc 	.word	0x20012edc

080057f8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005806:	4b3d      	ldr	r3, [pc, #244]	; (80058fc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005808:	61bb      	str	r3, [r7, #24]
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b53      	cmp	r3, #83	; 0x53
 8005812:	d001      	beq.n	8005818 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005814:	f7ff fd4c 	bl	80052b0 <_DoInit>
  SEGGER_RTT_LOCK();
 8005818:	f3ef 8311 	mrs	r3, BASEPRI
 800581c:	f04f 0120 	mov.w	r1, #32
 8005820:	f381 8811 	msr	BASEPRI, r1
 8005824:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005826:	4b35      	ldr	r3, [pc, #212]	; (80058fc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005828:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800582a:	2300      	movs	r3, #0
 800582c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800582e:	6939      	ldr	r1, [r7, #16]
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	4613      	mov	r3, r2
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	4413      	add	r3, r2
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	440b      	add	r3, r1
 800583e:	3304      	adds	r3, #4
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d008      	beq.n	8005858 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	3301      	adds	r3, #1
 800584a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	69fa      	ldr	r2, [r7, #28]
 8005852:	429a      	cmp	r2, r3
 8005854:	dbeb      	blt.n	800582e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005856:	e000      	b.n	800585a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005858:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	69fa      	ldr	r2, [r7, #28]
 8005860:	429a      	cmp	r2, r3
 8005862:	da3f      	bge.n	80058e4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005864:	6939      	ldr	r1, [r7, #16]
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	4613      	mov	r3, r2
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	4413      	add	r3, r2
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	440b      	add	r3, r1
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005878:	6939      	ldr	r1, [r7, #16]
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	4613      	mov	r3, r2
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	4413      	add	r3, r2
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	440b      	add	r3, r1
 8005888:	3304      	adds	r3, #4
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800588e:	6939      	ldr	r1, [r7, #16]
 8005890:	69fa      	ldr	r2, [r7, #28]
 8005892:	4613      	mov	r3, r2
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	4413      	add	r3, r2
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	440b      	add	r3, r1
 800589c:	3320      	adds	r3, #32
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80058a2:	6939      	ldr	r1, [r7, #16]
 80058a4:	69fa      	ldr	r2, [r7, #28]
 80058a6:	4613      	mov	r3, r2
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	4413      	add	r3, r2
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	440b      	add	r3, r1
 80058b0:	3328      	adds	r3, #40	; 0x28
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80058b6:	6939      	ldr	r1, [r7, #16]
 80058b8:	69fa      	ldr	r2, [r7, #28]
 80058ba:	4613      	mov	r3, r2
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	4413      	add	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	440b      	add	r3, r1
 80058c4:	3324      	adds	r3, #36	; 0x24
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80058ca:	6939      	ldr	r1, [r7, #16]
 80058cc:	69fa      	ldr	r2, [r7, #28]
 80058ce:	4613      	mov	r3, r2
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	4413      	add	r3, r2
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	440b      	add	r3, r1
 80058d8:	332c      	adds	r3, #44	; 0x2c
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80058de:	f3bf 8f5f 	dmb	sy
 80058e2:	e002      	b.n	80058ea <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80058e4:	f04f 33ff 	mov.w	r3, #4294967295
 80058e8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80058f0:	69fb      	ldr	r3, [r7, #28]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3720      	adds	r7, #32
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20012edc 	.word	0x20012edc

08005900 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	; 0x28
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800590e:	4b21      	ldr	r3, [pc, #132]	; (8005994 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005910:	623b      	str	r3, [r7, #32]
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b53      	cmp	r3, #83	; 0x53
 800591a:	d001      	beq.n	8005920 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800591c:	f7ff fcc8 	bl	80052b0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005920:	4b1c      	ldr	r3, [pc, #112]	; (8005994 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005922:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d82c      	bhi.n	8005984 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800592a:	f3ef 8311 	mrs	r3, BASEPRI
 800592e:	f04f 0120 	mov.w	r1, #32
 8005932:	f381 8811 	msr	BASEPRI, r1
 8005936:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4613      	mov	r3, r2
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	4413      	add	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	3360      	adds	r3, #96	; 0x60
 8005944:	69fa      	ldr	r2, [r7, #28]
 8005946:	4413      	add	r3, r2
 8005948:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00e      	beq.n	800596e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2200      	movs	r2, #0
 8005966:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	2200      	movs	r2, #0
 800596c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005972:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005974:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800597e:	2300      	movs	r3, #0
 8005980:	627b      	str	r3, [r7, #36]	; 0x24
 8005982:	e002      	b.n	800598a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005984:	f04f 33ff 	mov.w	r3, #4294967295
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800598c:	4618      	mov	r0, r3
 800598e:	3728      	adds	r7, #40	; 0x28
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20012edc 	.word	0x20012edc

08005998 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d105      	bne.n	80059b6 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	60fa      	str	r2, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	701a      	strb	r2, [r3, #0]
 80059b4:	e022      	b.n	80059fc <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	60fa      	str	r2, [r7, #12]
 80059c0:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b80      	cmp	r3, #128	; 0x80
 80059c6:	d90a      	bls.n	80059de <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80059c8:	2380      	movs	r3, #128	; 0x80
 80059ca:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 80059cc:	e007      	b.n	80059de <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	1c53      	adds	r3, r2, #1
 80059d2:	60bb      	str	r3, [r7, #8]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	1c59      	adds	r1, r3, #1
 80059d8:	60f9      	str	r1, [r7, #12]
 80059da:	7812      	ldrb	r2, [r2, #0]
 80059dc:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	1e5a      	subs	r2, r3, #1
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <_EncodeStr+0x58>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1ee      	bne.n	80059ce <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 80059fc:	68fb      	ldr	r3, [r7, #12]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3307      	adds	r3, #7
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
	...

08005a24 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005a2a:	4b35      	ldr	r3, [pc, #212]	; (8005b00 <_HandleIncomingPacket+0xdc>)
 8005a2c:	7e1b      	ldrb	r3, [r3, #24]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	1cfb      	adds	r3, r7, #3
 8005a32:	2201      	movs	r2, #1
 8005a34:	4619      	mov	r1, r3
 8005a36:	f7ff fde3 	bl	8005600 <SEGGER_RTT_ReadNoLock>
 8005a3a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d052      	beq.n	8005ae8 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8005a42:	78fb      	ldrb	r3, [r7, #3]
 8005a44:	2b80      	cmp	r3, #128	; 0x80
 8005a46:	d031      	beq.n	8005aac <_HandleIncomingPacket+0x88>
 8005a48:	2b80      	cmp	r3, #128	; 0x80
 8005a4a:	dc40      	bgt.n	8005ace <_HandleIncomingPacket+0xaa>
 8005a4c:	2b07      	cmp	r3, #7
 8005a4e:	dc15      	bgt.n	8005a7c <_HandleIncomingPacket+0x58>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	dd3c      	ble.n	8005ace <_HandleIncomingPacket+0xaa>
 8005a54:	3b01      	subs	r3, #1
 8005a56:	2b06      	cmp	r3, #6
 8005a58:	d839      	bhi.n	8005ace <_HandleIncomingPacket+0xaa>
 8005a5a:	a201      	add	r2, pc, #4	; (adr r2, 8005a60 <_HandleIncomingPacket+0x3c>)
 8005a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a60:	08005a83 	.word	0x08005a83
 8005a64:	08005a89 	.word	0x08005a89
 8005a68:	08005a8f 	.word	0x08005a8f
 8005a6c:	08005a95 	.word	0x08005a95
 8005a70:	08005a9b 	.word	0x08005a9b
 8005a74:	08005aa1 	.word	0x08005aa1
 8005a78:	08005aa7 	.word	0x08005aa7
 8005a7c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a7e:	d035      	beq.n	8005aec <_HandleIncomingPacket+0xc8>
 8005a80:	e025      	b.n	8005ace <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005a82:	f000 fff5 	bl	8006a70 <SEGGER_SYSVIEW_Start>
      break;
 8005a86:	e036      	b.n	8005af6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005a88:	f001 f8ae 	bl	8006be8 <SEGGER_SYSVIEW_Stop>
      break;
 8005a8c:	e033      	b.n	8005af6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005a8e:	f001 fa87 	bl	8006fa0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005a92:	e030      	b.n	8005af6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005a94:	f001 fa4c 	bl	8006f30 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005a98:	e02d      	b.n	8005af6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005a9a:	f001 f8cb 	bl	8006c34 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005a9e:	e02a      	b.n	8005af6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005aa0:	f001 fd24 	bl	80074ec <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005aa4:	e027      	b.n	8005af6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005aa6:	f001 fd03 	bl	80074b0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005aaa:	e024      	b.n	8005af6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005aac:	4b14      	ldr	r3, [pc, #80]	; (8005b00 <_HandleIncomingPacket+0xdc>)
 8005aae:	7e1b      	ldrb	r3, [r3, #24]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	1cfb      	adds	r3, r7, #3
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	f7ff fda2 	bl	8005600 <SEGGER_RTT_ReadNoLock>
 8005abc:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d015      	beq.n	8005af0 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f001 fc68 	bl	800739c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005acc:	e010      	b.n	8005af0 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	b25b      	sxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	da0e      	bge.n	8005af4 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005ad6:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <_HandleIncomingPacket+0xdc>)
 8005ad8:	7e1b      	ldrb	r3, [r3, #24]
 8005ada:	4618      	mov	r0, r3
 8005adc:	1cfb      	adds	r3, r7, #3
 8005ade:	2201      	movs	r2, #1
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	f7ff fd8d 	bl	8005600 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005ae6:	e005      	b.n	8005af4 <_HandleIncomingPacket+0xd0>
    }
  }
 8005ae8:	bf00      	nop
 8005aea:	e004      	b.n	8005af6 <_HandleIncomingPacket+0xd2>
      break;
 8005aec:	bf00      	nop
 8005aee:	e002      	b.n	8005af6 <_HandleIncomingPacket+0xd2>
      break;
 8005af0:	bf00      	nop
 8005af2:	e000      	b.n	8005af6 <_HandleIncomingPacket+0xd2>
      break;
 8005af4:	bf00      	nop
}
 8005af6:	bf00      	nop
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	2001439c 	.word	0x2001439c

08005b04 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08c      	sub	sp, #48	; 0x30
 8005b08:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005b0e:	1d3b      	adds	r3, r7, #4
 8005b10:	3301      	adds	r3, #1
 8005b12:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b18:	4b32      	ldr	r3, [pc, #200]	; (8005be4 <_TrySendOverflowPacket+0xe0>)
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b1e:	e00b      	b.n	8005b38 <_TrySendOverflowPacket+0x34>
 8005b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b26:	1c59      	adds	r1, r3, #1
 8005b28:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	701a      	strb	r2, [r3, #0]
 8005b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b34:	09db      	lsrs	r3, r3, #7
 8005b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b3c:	d8f0      	bhi.n	8005b20 <_TrySendOverflowPacket+0x1c>
 8005b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b40:	1c5a      	adds	r2, r3, #1
 8005b42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	701a      	strb	r2, [r3, #0]
 8005b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005b4e:	4b26      	ldr	r3, [pc, #152]	; (8005be8 <_TrySendOverflowPacket+0xe4>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8005b54:	4b23      	ldr	r3, [pc, #140]	; (8005be4 <_TrySendOverflowPacket+0xe0>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	623b      	str	r3, [r7, #32]
 8005b66:	e00b      	b.n	8005b80 <_TrySendOverflowPacket+0x7c>
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	1c59      	adds	r1, r3, #1
 8005b70:	6279      	str	r1, [r7, #36]	; 0x24
 8005b72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b76:	b2d2      	uxtb	r2, r2
 8005b78:	701a      	strb	r2, [r3, #0]
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	09db      	lsrs	r3, r3, #7
 8005b7e:	623b      	str	r3, [r7, #32]
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	2b7f      	cmp	r3, #127	; 0x7f
 8005b84:	d8f0      	bhi.n	8005b68 <_TrySendOverflowPacket+0x64>
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	627a      	str	r2, [r7, #36]	; 0x24
 8005b8c:	6a3a      	ldr	r2, [r7, #32]
 8005b8e:	b2d2      	uxtb	r2, r2
 8005b90:	701a      	strb	r2, [r3, #0]
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005b96:	4b13      	ldr	r3, [pc, #76]	; (8005be4 <_TrySendOverflowPacket+0xe0>)
 8005b98:	785b      	ldrb	r3, [r3, #1]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	1d3b      	adds	r3, r7, #4
 8005b9e:	69fa      	ldr	r2, [r7, #28]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	1d3b      	adds	r3, r7, #4
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	f7fa fb4a 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005bac:	4603      	mov	r3, r0
 8005bae:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005bb0:	f7ff faf4 	bl	800519c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d009      	beq.n	8005bce <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005bba:	4a0a      	ldr	r2, [pc, #40]	; (8005be4 <_TrySendOverflowPacket+0xe0>)
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005bc0:	4b08      	ldr	r3, [pc, #32]	; (8005be4 <_TrySendOverflowPacket+0xe0>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	4b06      	ldr	r3, [pc, #24]	; (8005be4 <_TrySendOverflowPacket+0xe0>)
 8005bca:	701a      	strb	r2, [r3, #0]
 8005bcc:	e004      	b.n	8005bd8 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005bce:	4b05      	ldr	r3, [pc, #20]	; (8005be4 <_TrySendOverflowPacket+0xe0>)
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	4a03      	ldr	r2, [pc, #12]	; (8005be4 <_TrySendOverflowPacket+0xe0>)
 8005bd6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005bd8:	693b      	ldr	r3, [r7, #16]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3730      	adds	r7, #48	; 0x30
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	2001439c 	.word	0x2001439c
 8005be8:	e0001004 	.word	0xe0001004

08005bec <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08a      	sub	sp, #40	; 0x28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005bf8:	4b96      	ldr	r3, [pc, #600]	; (8005e54 <_SendPacket+0x268>)
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d010      	beq.n	8005c22 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005c00:	4b94      	ldr	r3, [pc, #592]	; (8005e54 <_SendPacket+0x268>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 8130 	beq.w	8005e6a <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005c0a:	4b92      	ldr	r3, [pc, #584]	; (8005e54 <_SendPacket+0x268>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d109      	bne.n	8005c26 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005c12:	f7ff ff77 	bl	8005b04 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005c16:	4b8f      	ldr	r3, [pc, #572]	; (8005e54 <_SendPacket+0x268>)
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	f040 8127 	bne.w	8005e6e <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005c20:	e001      	b.n	8005c26 <_SendPacket+0x3a>
    goto Send;
 8005c22:	bf00      	nop
 8005c24:	e000      	b.n	8005c28 <_SendPacket+0x3c>
Send:
 8005c26:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b1f      	cmp	r3, #31
 8005c2c:	d809      	bhi.n	8005c42 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005c2e:	4b89      	ldr	r3, [pc, #548]	; (8005e54 <_SendPacket+0x268>)
 8005c30:	69da      	ldr	r2, [r3, #28]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	fa22 f303 	lsr.w	r3, r2, r3
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f040 8118 	bne.w	8005e72 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b17      	cmp	r3, #23
 8005c46:	d807      	bhi.n	8005c58 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	701a      	strb	r2, [r3, #0]
 8005c56:	e0c4      	b.n	8005de2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	2b7f      	cmp	r3, #127	; 0x7f
 8005c64:	d912      	bls.n	8005c8c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	09da      	lsrs	r2, r3, #7
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	3a01      	subs	r2, #1
 8005c7e:	60fa      	str	r2, [r7, #12]
 8005c80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	701a      	strb	r2, [r3, #0]
 8005c8a:	e006      	b.n	8005c9a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b7e      	cmp	r3, #126	; 0x7e
 8005c9e:	d807      	bhi.n	8005cb0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	60fb      	str	r3, [r7, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	e098      	b.n	8005de2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cb6:	d212      	bcs.n	8005cde <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	09da      	lsrs	r2, r3, #7
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	3a01      	subs	r2, #1
 8005cd0:	60fa      	str	r2, [r7, #12]
 8005cd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	701a      	strb	r2, [r3, #0]
 8005cdc:	e081      	b.n	8005de2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ce4:	d21d      	bcs.n	8005d22 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	0b9a      	lsrs	r2, r3, #14
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	09db      	lsrs	r3, r3, #7
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	3a01      	subs	r2, #1
 8005d00:	60fa      	str	r2, [r7, #12]
 8005d02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	3a01      	subs	r2, #1
 8005d14:	60fa      	str	r2, [r7, #12]
 8005d16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	701a      	strb	r2, [r3, #0]
 8005d20:	e05f      	b.n	8005de2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d28:	d228      	bcs.n	8005d7c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	0d5a      	lsrs	r2, r3, #21
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	3b01      	subs	r3, #1
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	0b9b      	lsrs	r3, r3, #14
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	3a01      	subs	r2, #1
 8005d44:	60fa      	str	r2, [r7, #12]
 8005d46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	09db      	lsrs	r3, r3, #7
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	3a01      	subs	r2, #1
 8005d5a:	60fa      	str	r2, [r7, #12]
 8005d5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	3a01      	subs	r2, #1
 8005d6e:	60fa      	str	r2, [r7, #12]
 8005d70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	701a      	strb	r2, [r3, #0]
 8005d7a:	e032      	b.n	8005de2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	0f1a      	lsrs	r2, r3, #28
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	0d5b      	lsrs	r3, r3, #21
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	3a01      	subs	r2, #1
 8005d96:	60fa      	str	r2, [r7, #12]
 8005d98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	0b9b      	lsrs	r3, r3, #14
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	3a01      	subs	r2, #1
 8005dac:	60fa      	str	r2, [r7, #12]
 8005dae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	09db      	lsrs	r3, r3, #7
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	3a01      	subs	r2, #1
 8005dc2:	60fa      	str	r2, [r7, #12]
 8005dc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	3a01      	subs	r2, #1
 8005dd6:	60fa      	str	r2, [r7, #12]
 8005dd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005de2:	4b1d      	ldr	r3, [pc, #116]	; (8005e58 <_SendPacket+0x26c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005de8:	4b1a      	ldr	r3, [pc, #104]	; (8005e54 <_SendPacket+0x268>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	627b      	str	r3, [r7, #36]	; 0x24
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	623b      	str	r3, [r7, #32]
 8005dfa:	e00b      	b.n	8005e14 <_SendPacket+0x228>
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	1c59      	adds	r1, r3, #1
 8005e04:	6279      	str	r1, [r7, #36]	; 0x24
 8005e06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	09db      	lsrs	r3, r3, #7
 8005e12:	623b      	str	r3, [r7, #32]
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	2b7f      	cmp	r3, #127	; 0x7f
 8005e18:	d8f0      	bhi.n	8005dfc <_SendPacket+0x210>
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	627a      	str	r2, [r7, #36]	; 0x24
 8005e20:	6a3a      	ldr	r2, [r7, #32]
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005e2a:	4b0a      	ldr	r3, [pc, #40]	; (8005e54 <_SendPacket+0x268>)
 8005e2c:	785b      	ldrb	r3, [r3, #1]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	461a      	mov	r2, r3
 8005e38:	68f9      	ldr	r1, [r7, #12]
 8005e3a:	f7fa fa01 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005e3e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005e40:	f7ff f9ac 	bl	800519c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d008      	beq.n	8005e5c <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005e4a:	4a02      	ldr	r2, [pc, #8]	; (8005e54 <_SendPacket+0x268>)
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	60d3      	str	r3, [r2, #12]
 8005e50:	e010      	b.n	8005e74 <_SendPacket+0x288>
 8005e52:	bf00      	nop
 8005e54:	2001439c 	.word	0x2001439c
 8005e58:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005e5c:	4b19      	ldr	r3, [pc, #100]	; (8005ec4 <_SendPacket+0x2d8>)
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	3301      	adds	r3, #1
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	4b17      	ldr	r3, [pc, #92]	; (8005ec4 <_SendPacket+0x2d8>)
 8005e66:	701a      	strb	r2, [r3, #0]
 8005e68:	e004      	b.n	8005e74 <_SendPacket+0x288>
    goto SendDone;
 8005e6a:	bf00      	nop
 8005e6c:	e002      	b.n	8005e74 <_SendPacket+0x288>
      goto SendDone;
 8005e6e:	bf00      	nop
 8005e70:	e000      	b.n	8005e74 <_SendPacket+0x288>
      goto SendDone;
 8005e72:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005e74:	4b13      	ldr	r3, [pc, #76]	; (8005ec4 <_SendPacket+0x2d8>)
 8005e76:	7e1b      	ldrb	r3, [r3, #24]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	4a13      	ldr	r2, [pc, #76]	; (8005ec8 <_SendPacket+0x2dc>)
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	440b      	add	r3, r1
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	4413      	add	r3, r2
 8005e86:	336c      	adds	r3, #108	; 0x6c
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	4b0e      	ldr	r3, [pc, #56]	; (8005ec4 <_SendPacket+0x2d8>)
 8005e8c:	7e1b      	ldrb	r3, [r3, #24]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	490d      	ldr	r1, [pc, #52]	; (8005ec8 <_SendPacket+0x2dc>)
 8005e92:	4603      	mov	r3, r0
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	4403      	add	r3, r0
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	440b      	add	r3, r1
 8005e9c:	3370      	adds	r3, #112	; 0x70
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d00b      	beq.n	8005ebc <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005ea4:	4b07      	ldr	r3, [pc, #28]	; (8005ec4 <_SendPacket+0x2d8>)
 8005ea6:	789b      	ldrb	r3, [r3, #2]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d107      	bne.n	8005ebc <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005eac:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <_SendPacket+0x2d8>)
 8005eae:	2201      	movs	r2, #1
 8005eb0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005eb2:	f7ff fdb7 	bl	8005a24 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005eb6:	4b03      	ldr	r3, [pc, #12]	; (8005ec4 <_SendPacket+0x2d8>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005ebc:	bf00      	nop
 8005ebe:	3728      	adds	r7, #40	; 0x28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	2001439c 	.word	0x2001439c
 8005ec8:	20012edc 	.word	0x20012edc

08005ecc <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08a      	sub	sp, #40	; 0x28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	2b80      	cmp	r3, #128	; 0x80
 8005ee4:	d80a      	bhi.n	8005efc <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	1c59      	adds	r1, r3, #1
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	6051      	str	r1, [r2, #4]
 8005ef0:	78fa      	ldrb	r2, [r7, #3]
 8005ef2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	2b80      	cmp	r3, #128	; 0x80
 8005f02:	d15a      	bne.n	8005fba <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691a      	ldr	r2, [r3, #16]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	b2d2      	uxtb	r2, r2
 8005f0e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	623b      	str	r3, [r7, #32]
 8005f24:	e00b      	b.n	8005f3e <_StoreChar+0x72>
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	1c59      	adds	r1, r3, #1
 8005f2e:	6279      	str	r1, [r7, #36]	; 0x24
 8005f30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f34:	b2d2      	uxtb	r2, r2
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	09db      	lsrs	r3, r3, #7
 8005f3c:	623b      	str	r3, [r7, #32]
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	2b7f      	cmp	r3, #127	; 0x7f
 8005f42:	d8f0      	bhi.n	8005f26 <_StoreChar+0x5a>
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	627a      	str	r2, [r7, #36]	; 0x24
 8005f4a:	6a3a      	ldr	r2, [r7, #32]
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	701a      	strb	r2, [r3, #0]
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	61fb      	str	r3, [r7, #28]
 8005f58:	2300      	movs	r3, #0
 8005f5a:	61bb      	str	r3, [r7, #24]
 8005f5c:	e00b      	b.n	8005f76 <_StoreChar+0xaa>
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	1c59      	adds	r1, r3, #1
 8005f66:	61f9      	str	r1, [r7, #28]
 8005f68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f6c:	b2d2      	uxtb	r2, r2
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	09db      	lsrs	r3, r3, #7
 8005f74:	61bb      	str	r3, [r7, #24]
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	2b7f      	cmp	r3, #127	; 0x7f
 8005f7a:	d8f0      	bhi.n	8005f5e <_StoreChar+0x92>
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	1c5a      	adds	r2, r3, #1
 8005f80:	61fa      	str	r2, [r7, #28]
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	701a      	strb	r2, [r3, #0]
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	221a      	movs	r2, #26
 8005f92:	6939      	ldr	r1, [r7, #16]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff fe29 	bl	8005bec <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff fd33 	bl	8005a0a <_PreparePacket>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	611a      	str	r2, [r3, #16]
  }
}
 8005fba:	bf00      	nop
 8005fbc:	3728      	adds	r7, #40	; 0x28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08a      	sub	sp, #40	; 0x28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005fde:	e007      	b.n	8005ff0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005fe0:	6a3a      	ldr	r2, [r7, #32]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe8:	623b      	str	r3, [r7, #32]
    Width++;
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	3301      	adds	r3, #1
 8005fee:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005ff0:	6a3a      	ldr	r2, [r7, #32]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d2f3      	bcs.n	8005fe0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d901      	bls.n	8006004 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b00      	cmp	r3, #0
 800600c:	d11f      	bne.n	800604e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	2b00      	cmp	r3, #0
 8006012:	d01c      	beq.n	800604e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d005      	beq.n	800602a <_PrintUnsigned+0x66>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d102      	bne.n	800602a <_PrintUnsigned+0x66>
        c = '0';
 8006024:	2330      	movs	r3, #48	; 0x30
 8006026:	76fb      	strb	r3, [r7, #27]
 8006028:	e001      	b.n	800602e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800602a:	2320      	movs	r3, #32
 800602c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800602e:	e007      	b.n	8006040 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	3b01      	subs	r3, #1
 8006034:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8006036:	7efb      	ldrb	r3, [r7, #27]
 8006038:	4619      	mov	r1, r3
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f7ff ff46 	bl	8005ecc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <_PrintUnsigned+0x8a>
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	429a      	cmp	r2, r3
 800604c:	d3f0      	bcc.n	8006030 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d903      	bls.n	800605c <_PrintUnsigned+0x98>
      NumDigits--;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	3b01      	subs	r3, #1
 8006058:	603b      	str	r3, [r7, #0]
 800605a:	e009      	b.n	8006070 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	fbb2 f3f3 	udiv	r3, r2, r3
 8006064:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	429a      	cmp	r2, r3
 800606c:	d200      	bcs.n	8006070 <_PrintUnsigned+0xac>
        break;
 800606e:	e005      	b.n	800607c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	fb02 f303 	mul.w	r3, r2, r3
 8006078:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800607a:	e7e8      	b.n	800604e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	fbb2 f3f3 	udiv	r3, r2, r3
 8006084:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608a:	fb02 f303 	mul.w	r3, r2, r3
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8006094:	4a15      	ldr	r2, [pc, #84]	; (80060ec <_PrintUnsigned+0x128>)
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	4413      	add	r3, r2
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	4619      	mov	r1, r3
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f7ff ff14 	bl	8005ecc <_StoreChar>
    Digit /= Base;
 80060a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ac:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1e3      	bne.n	800607c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80060b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d011      	beq.n	80060e2 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00e      	beq.n	80060e2 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060c4:	e006      	b.n	80060d4 <_PrintUnsigned+0x110>
        FieldWidth--;
 80060c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c8:	3b01      	subs	r3, #1
 80060ca:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80060cc:	2120      	movs	r1, #32
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f7ff fefc 	bl	8005ecc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <_PrintUnsigned+0x11e>
 80060da:	69fa      	ldr	r2, [r7, #28]
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	429a      	cmp	r2, r3
 80060e0:	d3f1      	bcc.n	80060c6 <_PrintUnsigned+0x102>
      }
    }
  }
}
 80060e2:	bf00      	nop
 80060e4:	3728      	adds	r7, #40	; 0x28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	080078d8 	.word	0x080078d8

080060f0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	bfb8      	it	lt
 8006104:	425b      	neglt	r3, r3
 8006106:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006108:	2301      	movs	r3, #1
 800610a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800610c:	e007      	b.n	800611e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	fb92 f3f3 	sdiv	r3, r2, r3
 8006116:	613b      	str	r3, [r7, #16]
    Width++;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	3301      	adds	r3, #1
 800611c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	429a      	cmp	r2, r3
 8006124:	daf3      	bge.n	800610e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	429a      	cmp	r2, r3
 800612c:	d901      	bls.n	8006132 <_PrintInt+0x42>
    Width = NumDigits;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00a      	beq.n	800614e <_PrintInt+0x5e>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	db04      	blt.n	8006148 <_PrintInt+0x58>
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <_PrintInt+0x5e>
    FieldWidth--;
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	3b01      	subs	r3, #1
 800614c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <_PrintInt+0x6e>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d016      	beq.n	800618c <_PrintInt+0x9c>
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b00      	cmp	r3, #0
 8006166:	d111      	bne.n	800618c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00e      	beq.n	800618c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800616e:	e006      	b.n	800617e <_PrintInt+0x8e>
        FieldWidth--;
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	3b01      	subs	r3, #1
 8006174:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006176:	2120      	movs	r1, #32
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f7ff fea7 	bl	8005ecc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <_PrintInt+0x9c>
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	429a      	cmp	r2, r3
 800618a:	d3f1      	bcc.n	8006170 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2b00      	cmp	r3, #0
 8006190:	da07      	bge.n	80061a2 <_PrintInt+0xb2>
    v = -v;
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	425b      	negs	r3, r3
 8006196:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006198:	212d      	movs	r1, #45	; 0x2d
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7ff fe96 	bl	8005ecc <_StoreChar>
 80061a0:	e008      	b.n	80061b4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	f003 0304 	and.w	r3, r3, #4
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80061ac:	212b      	movs	r1, #43	; 0x2b
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f7ff fe8c 	bl	8005ecc <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d019      	beq.n	80061f2 <_PrintInt+0x102>
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d114      	bne.n	80061f2 <_PrintInt+0x102>
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d111      	bne.n	80061f2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00e      	beq.n	80061f2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061d4:	e006      	b.n	80061e4 <_PrintInt+0xf4>
        FieldWidth--;
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	3b01      	subs	r3, #1
 80061da:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80061dc:	2130      	movs	r1, #48	; 0x30
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f7ff fe74 	bl	8005ecc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <_PrintInt+0x102>
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d3f1      	bcc.n	80061d6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80061f2:	68b9      	ldr	r1, [r7, #8]
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	9301      	str	r3, [sp, #4]
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f7ff fedf 	bl	8005fc4 <_PrintUnsigned>
}
 8006206:	bf00      	nop
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006210:	b580      	push	{r7, lr}
 8006212:	b098      	sub	sp, #96	; 0x60
 8006214:	af02      	add	r7, sp, #8
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800621c:	f3ef 8311 	mrs	r3, BASEPRI
 8006220:	f04f 0120 	mov.w	r1, #32
 8006224:	f381 8811 	msr	BASEPRI, r1
 8006228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800622a:	48b7      	ldr	r0, [pc, #732]	; (8006508 <_VPrintTarget+0x2f8>)
 800622c:	f7ff fbed 	bl	8005a0a <_PreparePacket>
 8006230:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8006232:	4bb5      	ldr	r3, [pc, #724]	; (8006508 <_VPrintTarget+0x2f8>)
 8006234:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8006236:	2300      	movs	r3, #0
 8006238:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800623a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623c:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	3301      	adds	r3, #1
 8006242:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	3301      	adds	r3, #1
 8006254:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006256:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800625a:	2b00      	cmp	r3, #0
 800625c:	f000 81a8 	beq.w	80065b0 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8006260:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006264:	2b25      	cmp	r3, #37	; 0x25
 8006266:	f040 8195 	bne.w	8006594 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800626a:	2300      	movs	r3, #0
 800626c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800626e:	2301      	movs	r3, #1
 8006270:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800627a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800627e:	3b23      	subs	r3, #35	; 0x23
 8006280:	2b0d      	cmp	r3, #13
 8006282:	d83f      	bhi.n	8006304 <_VPrintTarget+0xf4>
 8006284:	a201      	add	r2, pc, #4	; (adr r2, 800628c <_VPrintTarget+0x7c>)
 8006286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628a:	bf00      	nop
 800628c:	080062f5 	.word	0x080062f5
 8006290:	08006305 	.word	0x08006305
 8006294:	08006305 	.word	0x08006305
 8006298:	08006305 	.word	0x08006305
 800629c:	08006305 	.word	0x08006305
 80062a0:	08006305 	.word	0x08006305
 80062a4:	08006305 	.word	0x08006305
 80062a8:	08006305 	.word	0x08006305
 80062ac:	080062e5 	.word	0x080062e5
 80062b0:	08006305 	.word	0x08006305
 80062b4:	080062c5 	.word	0x080062c5
 80062b8:	08006305 	.word	0x08006305
 80062bc:	08006305 	.word	0x08006305
 80062c0:	080062d5 	.word	0x080062d5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80062c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062c6:	f043 0301 	orr.w	r3, r3, #1
 80062ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3301      	adds	r3, #1
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	e01a      	b.n	800630a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80062d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062d6:	f043 0302 	orr.w	r3, r3, #2
 80062da:	64bb      	str	r3, [r7, #72]	; 0x48
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3301      	adds	r3, #1
 80062e0:	60fb      	str	r3, [r7, #12]
 80062e2:	e012      	b.n	800630a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80062e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062e6:	f043 0304 	orr.w	r3, r3, #4
 80062ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3301      	adds	r3, #1
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	e00a      	b.n	800630a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80062f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062f6:	f043 0308 	orr.w	r3, r3, #8
 80062fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	3301      	adds	r3, #1
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	e002      	b.n	800630a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006304:	2300      	movs	r3, #0
 8006306:	653b      	str	r3, [r7, #80]	; 0x50
 8006308:	bf00      	nop
        }
      } while (v);
 800630a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1b0      	bne.n	8006272 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006310:	2300      	movs	r3, #0
 8006312:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 800631c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006320:	2b2f      	cmp	r3, #47	; 0x2f
 8006322:	d912      	bls.n	800634a <_VPrintTarget+0x13a>
 8006324:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006328:	2b39      	cmp	r3, #57	; 0x39
 800632a:	d80e      	bhi.n	800634a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3301      	adds	r3, #1
 8006330:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006332:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006334:	4613      	mov	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	461a      	mov	r2, r3
 800633e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006342:	4413      	add	r3, r2
 8006344:	3b30      	subs	r3, #48	; 0x30
 8006346:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8006348:	e7e4      	b.n	8006314 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800634a:	2300      	movs	r3, #0
 800634c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8006356:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800635a:	2b2e      	cmp	r3, #46	; 0x2e
 800635c:	d11d      	bne.n	800639a <_VPrintTarget+0x18a>
        sFormat++;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3301      	adds	r3, #1
 8006362:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 800636c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006370:	2b2f      	cmp	r3, #47	; 0x2f
 8006372:	d912      	bls.n	800639a <_VPrintTarget+0x18a>
 8006374:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006378:	2b39      	cmp	r3, #57	; 0x39
 800637a:	d80e      	bhi.n	800639a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3301      	adds	r3, #1
 8006380:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006382:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006384:	4613      	mov	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	461a      	mov	r2, r3
 800638e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006392:	4413      	add	r3, r2
 8006394:	3b30      	subs	r3, #48	; 0x30
 8006396:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8006398:	e7e4      	b.n	8006364 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80063a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063a6:	2b6c      	cmp	r3, #108	; 0x6c
 80063a8:	d003      	beq.n	80063b2 <_VPrintTarget+0x1a2>
 80063aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063ae:	2b68      	cmp	r3, #104	; 0x68
 80063b0:	d107      	bne.n	80063c2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3301      	adds	r3, #1
 80063be:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80063c0:	e7ef      	b.n	80063a2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80063c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063c6:	2b25      	cmp	r3, #37	; 0x25
 80063c8:	f000 80d8 	beq.w	800657c <_VPrintTarget+0x36c>
 80063cc:	2b25      	cmp	r3, #37	; 0x25
 80063ce:	f2c0 80dc 	blt.w	800658a <_VPrintTarget+0x37a>
 80063d2:	2b78      	cmp	r3, #120	; 0x78
 80063d4:	f300 80d9 	bgt.w	800658a <_VPrintTarget+0x37a>
 80063d8:	2b58      	cmp	r3, #88	; 0x58
 80063da:	f2c0 80d6 	blt.w	800658a <_VPrintTarget+0x37a>
 80063de:	3b58      	subs	r3, #88	; 0x58
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	f200 80d2 	bhi.w	800658a <_VPrintTarget+0x37a>
 80063e6:	a201      	add	r2, pc, #4	; (adr r2, 80063ec <_VPrintTarget+0x1dc>)
 80063e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ec:	080064e3 	.word	0x080064e3
 80063f0:	0800658b 	.word	0x0800658b
 80063f4:	0800658b 	.word	0x0800658b
 80063f8:	0800658b 	.word	0x0800658b
 80063fc:	0800658b 	.word	0x0800658b
 8006400:	0800658b 	.word	0x0800658b
 8006404:	0800658b 	.word	0x0800658b
 8006408:	0800658b 	.word	0x0800658b
 800640c:	0800658b 	.word	0x0800658b
 8006410:	0800658b 	.word	0x0800658b
 8006414:	0800658b 	.word	0x0800658b
 8006418:	08006471 	.word	0x08006471
 800641c:	08006497 	.word	0x08006497
 8006420:	0800658b 	.word	0x0800658b
 8006424:	0800658b 	.word	0x0800658b
 8006428:	0800658b 	.word	0x0800658b
 800642c:	0800658b 	.word	0x0800658b
 8006430:	0800658b 	.word	0x0800658b
 8006434:	0800658b 	.word	0x0800658b
 8006438:	0800658b 	.word	0x0800658b
 800643c:	0800658b 	.word	0x0800658b
 8006440:	0800658b 	.word	0x0800658b
 8006444:	0800658b 	.word	0x0800658b
 8006448:	0800658b 	.word	0x0800658b
 800644c:	08006557 	.word	0x08006557
 8006450:	0800658b 	.word	0x0800658b
 8006454:	0800658b 	.word	0x0800658b
 8006458:	0800650d 	.word	0x0800650d
 800645c:	0800658b 	.word	0x0800658b
 8006460:	080064bd 	.word	0x080064bd
 8006464:	0800658b 	.word	0x0800658b
 8006468:	0800658b 	.word	0x0800658b
 800646c:	080064e3 	.word	0x080064e3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	1d19      	adds	r1, r3, #4
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	6011      	str	r1, [r2, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800647e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8006484:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006488:	f107 0310 	add.w	r3, r7, #16
 800648c:	4611      	mov	r1, r2
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff fd1c 	bl	8005ecc <_StoreChar>
        break;
 8006494:	e07a      	b.n	800658c <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	1d19      	adds	r1, r3, #4
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	6011      	str	r1, [r2, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80064a4:	f107 0010 	add.w	r0, r7, #16
 80064a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b2:	220a      	movs	r2, #10
 80064b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064b6:	f7ff fe1b 	bl	80060f0 <_PrintInt>
        break;
 80064ba:	e067      	b.n	800658c <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	1d19      	adds	r1, r3, #4
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6011      	str	r1, [r2, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80064ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064cc:	f107 0010 	add.w	r0, r7, #16
 80064d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064d2:	9301      	str	r3, [sp, #4]
 80064d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064da:	220a      	movs	r2, #10
 80064dc:	f7ff fd72 	bl	8005fc4 <_PrintUnsigned>
        break;
 80064e0:	e054      	b.n	800658c <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	1d19      	adds	r1, r3, #4
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	6011      	str	r1, [r2, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80064f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064f2:	f107 0010 	add.w	r0, r7, #16
 80064f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064f8:	9301      	str	r3, [sp, #4]
 80064fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006500:	2210      	movs	r2, #16
 8006502:	f7ff fd5f 	bl	8005fc4 <_PrintUnsigned>
        break;
 8006506:	e041      	b.n	800658c <_VPrintTarget+0x37c>
 8006508:	200143cc 	.word	0x200143cc
      case 's':
        s = va_arg(*pParamList, const char*);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	1d19      	adds	r1, r3, #4
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	6011      	str	r1, [r2, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 800651a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <_VPrintTarget+0x314>
          s = "(null)";
 8006520:	4b4a      	ldr	r3, [pc, #296]	; (800664c <_VPrintTarget+0x43c>)
 8006522:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8006524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 800652c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800652e:	3301      	adds	r3, #1
 8006530:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8006532:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00b      	beq.n	8006552 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 800653a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800653e:	f107 0310 	add.w	r3, r7, #16
 8006542:	4611      	mov	r1, r2
 8006544:	4618      	mov	r0, r3
 8006546:	f7ff fcc1 	bl	8005ecc <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	2b7f      	cmp	r3, #127	; 0x7f
 800654e:	d9e9      	bls.n	8006524 <_VPrintTarget+0x314>
        break;
 8006550:	e01c      	b.n	800658c <_VPrintTarget+0x37c>
            break;
 8006552:	bf00      	nop
        break;
 8006554:	e01a      	b.n	800658c <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	1d19      	adds	r1, r3, #4
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6011      	str	r1, [r2, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006564:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006566:	f107 0010 	add.w	r0, r7, #16
 800656a:	2300      	movs	r3, #0
 800656c:	9301      	str	r3, [sp, #4]
 800656e:	2308      	movs	r3, #8
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	2308      	movs	r3, #8
 8006574:	2210      	movs	r2, #16
 8006576:	f7ff fd25 	bl	8005fc4 <_PrintUnsigned>
        break;
 800657a:	e007      	b.n	800658c <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800657c:	f107 0310 	add.w	r3, r7, #16
 8006580:	2125      	movs	r1, #37	; 0x25
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff fca2 	bl	8005ecc <_StoreChar>
        break;
 8006588:	e000      	b.n	800658c <_VPrintTarget+0x37c>
      default:
        break;
 800658a:	bf00      	nop
      }
      sFormat++;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	3301      	adds	r3, #1
 8006590:	60fb      	str	r3, [r7, #12]
 8006592:	e007      	b.n	80065a4 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8006594:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006598:	f107 0310 	add.w	r3, r7, #16
 800659c:	4611      	mov	r1, r2
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff fc94 	bl	8005ecc <_StoreChar>
    }
  } while (*sFormat);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f47f ae4d 	bne.w	8006248 <_VPrintTarget+0x38>
 80065ae:	e000      	b.n	80065b2 <_VPrintTarget+0x3a2>
      break;
 80065b0:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d041      	beq.n	800663c <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80065b8:	6a3a      	ldr	r2, [r7, #32]
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	b2d2      	uxtb	r2, r2
 80065be:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80065c8:	e00b      	b.n	80065e2 <_VPrintTarget+0x3d2>
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d0:	1c59      	adds	r1, r3, #1
 80065d2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80065d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065d8:	b2d2      	uxtb	r2, r2
 80065da:	701a      	strb	r2, [r3, #0]
 80065dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065de:	09db      	lsrs	r3, r3, #7
 80065e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	2b7f      	cmp	r3, #127	; 0x7f
 80065e6:	d8f0      	bhi.n	80065ca <_VPrintTarget+0x3ba>
 80065e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065f0:	b2d2      	uxtb	r2, r2
 80065f2:	701a      	strb	r2, [r3, #0]
 80065f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f6:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	637b      	str	r3, [r7, #52]	; 0x34
 80065fc:	2300      	movs	r3, #0
 80065fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006600:	e00b      	b.n	800661a <_VPrintTarget+0x40a>
 8006602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006604:	b2da      	uxtb	r2, r3
 8006606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006608:	1c59      	adds	r1, r3, #1
 800660a:	6379      	str	r1, [r7, #52]	; 0x34
 800660c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006610:	b2d2      	uxtb	r2, r2
 8006612:	701a      	strb	r2, [r3, #0]
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	09db      	lsrs	r3, r3, #7
 8006618:	633b      	str	r3, [r7, #48]	; 0x30
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	2b7f      	cmp	r3, #127	; 0x7f
 800661e:	d8f0      	bhi.n	8006602 <_VPrintTarget+0x3f2>
 8006620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	637a      	str	r2, [r7, #52]	; 0x34
 8006626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006628:	b2d2      	uxtb	r2, r2
 800662a:	701a      	strb	r2, [r3, #0]
 800662c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662e:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	6979      	ldr	r1, [r7, #20]
 8006634:	221a      	movs	r2, #26
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff fad8 	bl	8005bec <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006642:	bf00      	nop
 8006644:	3758      	adds	r7, #88	; 0x58
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	08007884 	.word	0x08007884

08006650 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af02      	add	r7, sp, #8
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800665e:	2300      	movs	r3, #0
 8006660:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006664:	4917      	ldr	r1, [pc, #92]	; (80066c4 <SEGGER_SYSVIEW_Init+0x74>)
 8006666:	4818      	ldr	r0, [pc, #96]	; (80066c8 <SEGGER_SYSVIEW_Init+0x78>)
 8006668:	f7ff f8c6 	bl	80057f8 <SEGGER_RTT_AllocUpBuffer>
 800666c:	4603      	mov	r3, r0
 800666e:	b2da      	uxtb	r2, r3
 8006670:	4b16      	ldr	r3, [pc, #88]	; (80066cc <SEGGER_SYSVIEW_Init+0x7c>)
 8006672:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006674:	4b15      	ldr	r3, [pc, #84]	; (80066cc <SEGGER_SYSVIEW_Init+0x7c>)
 8006676:	785a      	ldrb	r2, [r3, #1]
 8006678:	4b14      	ldr	r3, [pc, #80]	; (80066cc <SEGGER_SYSVIEW_Init+0x7c>)
 800667a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800667c:	4b13      	ldr	r3, [pc, #76]	; (80066cc <SEGGER_SYSVIEW_Init+0x7c>)
 800667e:	7e1b      	ldrb	r3, [r3, #24]
 8006680:	4618      	mov	r0, r3
 8006682:	2300      	movs	r3, #0
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	2308      	movs	r3, #8
 8006688:	4a11      	ldr	r2, [pc, #68]	; (80066d0 <SEGGER_SYSVIEW_Init+0x80>)
 800668a:	490f      	ldr	r1, [pc, #60]	; (80066c8 <SEGGER_SYSVIEW_Init+0x78>)
 800668c:	f7ff f938 	bl	8005900 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006690:	4b0e      	ldr	r3, [pc, #56]	; (80066cc <SEGGER_SYSVIEW_Init+0x7c>)
 8006692:	2200      	movs	r2, #0
 8006694:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006696:	4b0f      	ldr	r3, [pc, #60]	; (80066d4 <SEGGER_SYSVIEW_Init+0x84>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a0c      	ldr	r2, [pc, #48]	; (80066cc <SEGGER_SYSVIEW_Init+0x7c>)
 800669c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800669e:	4a0b      	ldr	r2, [pc, #44]	; (80066cc <SEGGER_SYSVIEW_Init+0x7c>)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80066a4:	4a09      	ldr	r2, [pc, #36]	; (80066cc <SEGGER_SYSVIEW_Init+0x7c>)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80066aa:	4a08      	ldr	r2, [pc, #32]	; (80066cc <SEGGER_SYSVIEW_Init+0x7c>)
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80066b0:	4a06      	ldr	r2, [pc, #24]	; (80066cc <SEGGER_SYSVIEW_Init+0x7c>)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80066b6:	4b05      	ldr	r3, [pc, #20]	; (80066cc <SEGGER_SYSVIEW_Init+0x7c>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80066bc:	bf00      	nop
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	20013394 	.word	0x20013394
 80066c8:	0800788c 	.word	0x0800788c
 80066cc:	2001439c 	.word	0x2001439c
 80066d0:	20014394 	.word	0x20014394
 80066d4:	e0001004 	.word	0xe0001004

080066d8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80066e0:	4a04      	ldr	r2, [pc, #16]	; (80066f4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6113      	str	r3, [r2, #16]
}
 80066e6:	bf00      	nop
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	2001439c 	.word	0x2001439c

080066f8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006700:	f3ef 8311 	mrs	r3, BASEPRI
 8006704:	f04f 0120 	mov.w	r1, #32
 8006708:	f381 8811 	msr	BASEPRI, r1
 800670c:	60fb      	str	r3, [r7, #12]
 800670e:	4808      	ldr	r0, [pc, #32]	; (8006730 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006710:	f7ff f97b 	bl	8005a0a <_PreparePacket>
 8006714:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	68b9      	ldr	r1, [r7, #8]
 800671a:	68b8      	ldr	r0, [r7, #8]
 800671c:	f7ff fa66 	bl	8005bec <_SendPacket>
  RECORD_END();
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f383 8811 	msr	BASEPRI, r3
}
 8006726:	bf00      	nop
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	200143cc 	.word	0x200143cc

08006734 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006734:	b580      	push	{r7, lr}
 8006736:	b088      	sub	sp, #32
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800673e:	f3ef 8311 	mrs	r3, BASEPRI
 8006742:	f04f 0120 	mov.w	r1, #32
 8006746:	f381 8811 	msr	BASEPRI, r1
 800674a:	617b      	str	r3, [r7, #20]
 800674c:	4816      	ldr	r0, [pc, #88]	; (80067a8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800674e:	f7ff f95c 	bl	8005a0a <_PreparePacket>
 8006752:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	61fb      	str	r3, [r7, #28]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	61bb      	str	r3, [r7, #24]
 8006760:	e00b      	b.n	800677a <SEGGER_SYSVIEW_RecordU32+0x46>
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	b2da      	uxtb	r2, r3
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	1c59      	adds	r1, r3, #1
 800676a:	61f9      	str	r1, [r7, #28]
 800676c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	701a      	strb	r2, [r3, #0]
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	09db      	lsrs	r3, r3, #7
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	2b7f      	cmp	r3, #127	; 0x7f
 800677e:	d8f0      	bhi.n	8006762 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	61fa      	str	r2, [r7, #28]
 8006786:	69ba      	ldr	r2, [r7, #24]
 8006788:	b2d2      	uxtb	r2, r2
 800678a:	701a      	strb	r2, [r3, #0]
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	68f9      	ldr	r1, [r7, #12]
 8006794:	6938      	ldr	r0, [r7, #16]
 8006796:	f7ff fa29 	bl	8005bec <_SendPacket>
  RECORD_END();
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f383 8811 	msr	BASEPRI, r3
}
 80067a0:	bf00      	nop
 80067a2:	3720      	adds	r7, #32
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	200143cc 	.word	0x200143cc

080067ac <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b08c      	sub	sp, #48	; 0x30
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80067b8:	f3ef 8311 	mrs	r3, BASEPRI
 80067bc:	f04f 0120 	mov.w	r1, #32
 80067c0:	f381 8811 	msr	BASEPRI, r1
 80067c4:	61fb      	str	r3, [r7, #28]
 80067c6:	4825      	ldr	r0, [pc, #148]	; (800685c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80067c8:	f7ff f91f 	bl	8005a0a <_PreparePacket>
 80067cc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80067da:	e00b      	b.n	80067f4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80067dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e2:	1c59      	adds	r1, r3, #1
 80067e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80067e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f0:	09db      	lsrs	r3, r3, #7
 80067f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	2b7f      	cmp	r3, #127	; 0x7f
 80067f8:	d8f0      	bhi.n	80067dc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80067fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006802:	b2d2      	uxtb	r2, r2
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006808:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	627b      	str	r3, [r7, #36]	; 0x24
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	623b      	str	r3, [r7, #32]
 8006812:	e00b      	b.n	800682c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	b2da      	uxtb	r2, r3
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	1c59      	adds	r1, r3, #1
 800681c:	6279      	str	r1, [r7, #36]	; 0x24
 800681e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	701a      	strb	r2, [r3, #0]
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	09db      	lsrs	r3, r3, #7
 800682a:	623b      	str	r3, [r7, #32]
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	2b7f      	cmp	r3, #127	; 0x7f
 8006830:	d8f0      	bhi.n	8006814 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	627a      	str	r2, [r7, #36]	; 0x24
 8006838:	6a3a      	ldr	r2, [r7, #32]
 800683a:	b2d2      	uxtb	r2, r2
 800683c:	701a      	strb	r2, [r3, #0]
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	6979      	ldr	r1, [r7, #20]
 8006846:	69b8      	ldr	r0, [r7, #24]
 8006848:	f7ff f9d0 	bl	8005bec <_SendPacket>
  RECORD_END();
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	f383 8811 	msr	BASEPRI, r3
}
 8006852:	bf00      	nop
 8006854:	3730      	adds	r7, #48	; 0x30
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	200143cc 	.word	0x200143cc

08006860 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006860:	b580      	push	{r7, lr}
 8006862:	b08e      	sub	sp, #56	; 0x38
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
 800686c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800686e:	f3ef 8311 	mrs	r3, BASEPRI
 8006872:	f04f 0120 	mov.w	r1, #32
 8006876:	f381 8811 	msr	BASEPRI, r1
 800687a:	61fb      	str	r3, [r7, #28]
 800687c:	4832      	ldr	r0, [pc, #200]	; (8006948 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800687e:	f7ff f8c4 	bl	8005a0a <_PreparePacket>
 8006882:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	637b      	str	r3, [r7, #52]	; 0x34
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	633b      	str	r3, [r7, #48]	; 0x30
 8006890:	e00b      	b.n	80068aa <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	b2da      	uxtb	r2, r3
 8006896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006898:	1c59      	adds	r1, r3, #1
 800689a:	6379      	str	r1, [r7, #52]	; 0x34
 800689c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068a0:	b2d2      	uxtb	r2, r2
 80068a2:	701a      	strb	r2, [r3, #0]
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	09db      	lsrs	r3, r3, #7
 80068a8:	633b      	str	r3, [r7, #48]	; 0x30
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	2b7f      	cmp	r3, #127	; 0x7f
 80068ae:	d8f0      	bhi.n	8006892 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80068b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b2:	1c5a      	adds	r2, r3, #1
 80068b4:	637a      	str	r2, [r7, #52]	; 0x34
 80068b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068b8:	b2d2      	uxtb	r2, r2
 80068ba:	701a      	strb	r2, [r3, #0]
 80068bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80068c8:	e00b      	b.n	80068e2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80068ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d0:	1c59      	adds	r1, r3, #1
 80068d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068d8:	b2d2      	uxtb	r2, r2
 80068da:	701a      	strb	r2, [r3, #0]
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	09db      	lsrs	r3, r3, #7
 80068e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	2b7f      	cmp	r3, #127	; 0x7f
 80068e6:	d8f0      	bhi.n	80068ca <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	701a      	strb	r2, [r3, #0]
 80068f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	627b      	str	r3, [r7, #36]	; 0x24
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	623b      	str	r3, [r7, #32]
 8006900:	e00b      	b.n	800691a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	b2da      	uxtb	r2, r3
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	1c59      	adds	r1, r3, #1
 800690a:	6279      	str	r1, [r7, #36]	; 0x24
 800690c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006910:	b2d2      	uxtb	r2, r2
 8006912:	701a      	strb	r2, [r3, #0]
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	09db      	lsrs	r3, r3, #7
 8006918:	623b      	str	r3, [r7, #32]
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	2b7f      	cmp	r3, #127	; 0x7f
 800691e:	d8f0      	bhi.n	8006902 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	627a      	str	r2, [r7, #36]	; 0x24
 8006926:	6a3a      	ldr	r2, [r7, #32]
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	6979      	ldr	r1, [r7, #20]
 8006934:	69b8      	ldr	r0, [r7, #24]
 8006936:	f7ff f959 	bl	8005bec <_SendPacket>
  RECORD_END();
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	f383 8811 	msr	BASEPRI, r3
}
 8006940:	bf00      	nop
 8006942:	3738      	adds	r7, #56	; 0x38
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	200143cc 	.word	0x200143cc

0800694c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800694c:	b580      	push	{r7, lr}
 800694e:	b090      	sub	sp, #64	; 0x40
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
 8006958:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800695a:	f3ef 8311 	mrs	r3, BASEPRI
 800695e:	f04f 0120 	mov.w	r1, #32
 8006962:	f381 8811 	msr	BASEPRI, r1
 8006966:	61fb      	str	r3, [r7, #28]
 8006968:	4840      	ldr	r0, [pc, #256]	; (8006a6c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800696a:	f7ff f84e 	bl	8005a0a <_PreparePacket>
 800696e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	63bb      	str	r3, [r7, #56]	; 0x38
 800697c:	e00b      	b.n	8006996 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800697e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006980:	b2da      	uxtb	r2, r3
 8006982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006984:	1c59      	adds	r1, r3, #1
 8006986:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006988:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	701a      	strb	r2, [r3, #0]
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	09db      	lsrs	r3, r3, #7
 8006994:	63bb      	str	r3, [r7, #56]	; 0x38
 8006996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006998:	2b7f      	cmp	r3, #127	; 0x7f
 800699a:	d8f0      	bhi.n	800697e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800699c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80069a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069a4:	b2d2      	uxtb	r2, r2
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	637b      	str	r3, [r7, #52]	; 0x34
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	633b      	str	r3, [r7, #48]	; 0x30
 80069b4:	e00b      	b.n	80069ce <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80069b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069bc:	1c59      	adds	r1, r3, #1
 80069be:	6379      	str	r1, [r7, #52]	; 0x34
 80069c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069c4:	b2d2      	uxtb	r2, r2
 80069c6:	701a      	strb	r2, [r3, #0]
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	09db      	lsrs	r3, r3, #7
 80069cc:	633b      	str	r3, [r7, #48]	; 0x30
 80069ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d0:	2b7f      	cmp	r3, #127	; 0x7f
 80069d2:	d8f0      	bhi.n	80069b6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80069d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	637a      	str	r2, [r7, #52]	; 0x34
 80069da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069dc:	b2d2      	uxtb	r2, r2
 80069de:	701a      	strb	r2, [r3, #0]
 80069e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ec:	e00b      	b.n	8006a06 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f4:	1c59      	adds	r1, r3, #1
 80069f6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80069f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069fc:	b2d2      	uxtb	r2, r2
 80069fe:	701a      	strb	r2, [r3, #0]
 8006a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a02:	09db      	lsrs	r3, r3, #7
 8006a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a08:	2b7f      	cmp	r3, #127	; 0x7f
 8006a0a:	d8f0      	bhi.n	80069ee <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a14:	b2d2      	uxtb	r2, r2
 8006a16:	701a      	strb	r2, [r3, #0]
 8006a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a22:	623b      	str	r3, [r7, #32]
 8006a24:	e00b      	b.n	8006a3e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	1c59      	adds	r1, r3, #1
 8006a2e:	6279      	str	r1, [r7, #36]	; 0x24
 8006a30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a34:	b2d2      	uxtb	r2, r2
 8006a36:	701a      	strb	r2, [r3, #0]
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	09db      	lsrs	r3, r3, #7
 8006a3c:	623b      	str	r3, [r7, #32]
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	2b7f      	cmp	r3, #127	; 0x7f
 8006a42:	d8f0      	bhi.n	8006a26 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	627a      	str	r2, [r7, #36]	; 0x24
 8006a4a:	6a3a      	ldr	r2, [r7, #32]
 8006a4c:	b2d2      	uxtb	r2, r2
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	6979      	ldr	r1, [r7, #20]
 8006a58:	69b8      	ldr	r0, [r7, #24]
 8006a5a:	f7ff f8c7 	bl	8005bec <_SendPacket>
  RECORD_END();
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	f383 8811 	msr	BASEPRI, r3
}
 8006a64:	bf00      	nop
 8006a66:	3740      	adds	r7, #64	; 0x40
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	200143cc 	.word	0x200143cc

08006a70 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08c      	sub	sp, #48	; 0x30
 8006a74:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006a76:	4b59      	ldr	r3, [pc, #356]	; (8006bdc <SEGGER_SYSVIEW_Start+0x16c>)
 8006a78:	2201      	movs	r2, #1
 8006a7a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006a7c:	f3ef 8311 	mrs	r3, BASEPRI
 8006a80:	f04f 0120 	mov.w	r1, #32
 8006a84:	f381 8811 	msr	BASEPRI, r1
 8006a88:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006a8a:	4b54      	ldr	r3, [pc, #336]	; (8006bdc <SEGGER_SYSVIEW_Start+0x16c>)
 8006a8c:	785b      	ldrb	r3, [r3, #1]
 8006a8e:	220a      	movs	r2, #10
 8006a90:	4953      	ldr	r1, [pc, #332]	; (8006be0 <SEGGER_SYSVIEW_Start+0x170>)
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7f9 fbd4 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006a9e:	f7fe fb7d 	bl	800519c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006aa2:	200a      	movs	r0, #10
 8006aa4:	f7ff fe28 	bl	80066f8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006aa8:	f3ef 8311 	mrs	r3, BASEPRI
 8006aac:	f04f 0120 	mov.w	r1, #32
 8006ab0:	f381 8811 	msr	BASEPRI, r1
 8006ab4:	60bb      	str	r3, [r7, #8]
 8006ab6:	484b      	ldr	r0, [pc, #300]	; (8006be4 <SEGGER_SYSVIEW_Start+0x174>)
 8006ab8:	f7fe ffa7 	bl	8005a0a <_PreparePacket>
 8006abc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ac6:	4b45      	ldr	r3, [pc, #276]	; (8006bdc <SEGGER_SYSVIEW_Start+0x16c>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8006acc:	e00b      	b.n	8006ae6 <SEGGER_SYSVIEW_Start+0x76>
 8006ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad4:	1c59      	adds	r1, r3, #1
 8006ad6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006ad8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006adc:	b2d2      	uxtb	r2, r2
 8006ade:	701a      	strb	r2, [r3, #0]
 8006ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae2:	09db      	lsrs	r3, r3, #7
 8006ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	2b7f      	cmp	r3, #127	; 0x7f
 8006aea:	d8f0      	bhi.n	8006ace <SEGGER_SYSVIEW_Start+0x5e>
 8006aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aee:	1c5a      	adds	r2, r3, #1
 8006af0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	701a      	strb	r2, [r3, #0]
 8006af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	627b      	str	r3, [r7, #36]	; 0x24
 8006b00:	4b36      	ldr	r3, [pc, #216]	; (8006bdc <SEGGER_SYSVIEW_Start+0x16c>)
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	623b      	str	r3, [r7, #32]
 8006b06:	e00b      	b.n	8006b20 <SEGGER_SYSVIEW_Start+0xb0>
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	1c59      	adds	r1, r3, #1
 8006b10:	6279      	str	r1, [r7, #36]	; 0x24
 8006b12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	701a      	strb	r2, [r3, #0]
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	09db      	lsrs	r3, r3, #7
 8006b1e:	623b      	str	r3, [r7, #32]
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	2b7f      	cmp	r3, #127	; 0x7f
 8006b24:	d8f0      	bhi.n	8006b08 <SEGGER_SYSVIEW_Start+0x98>
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	627a      	str	r2, [r7, #36]	; 0x24
 8006b2c:	6a3a      	ldr	r2, [r7, #32]
 8006b2e:	b2d2      	uxtb	r2, r2
 8006b30:	701a      	strb	r2, [r3, #0]
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	61fb      	str	r3, [r7, #28]
 8006b3a:	4b28      	ldr	r3, [pc, #160]	; (8006bdc <SEGGER_SYSVIEW_Start+0x16c>)
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	61bb      	str	r3, [r7, #24]
 8006b40:	e00b      	b.n	8006b5a <SEGGER_SYSVIEW_Start+0xea>
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	1c59      	adds	r1, r3, #1
 8006b4a:	61f9      	str	r1, [r7, #28]
 8006b4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b50:	b2d2      	uxtb	r2, r2
 8006b52:	701a      	strb	r2, [r3, #0]
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	09db      	lsrs	r3, r3, #7
 8006b58:	61bb      	str	r3, [r7, #24]
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b5e:	d8f0      	bhi.n	8006b42 <SEGGER_SYSVIEW_Start+0xd2>
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	1c5a      	adds	r2, r3, #1
 8006b64:	61fa      	str	r2, [r7, #28]
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	b2d2      	uxtb	r2, r2
 8006b6a:	701a      	strb	r2, [r3, #0]
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	2300      	movs	r3, #0
 8006b76:	613b      	str	r3, [r7, #16]
 8006b78:	e00b      	b.n	8006b92 <SEGGER_SYSVIEW_Start+0x122>
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	1c59      	adds	r1, r3, #1
 8006b82:	6179      	str	r1, [r7, #20]
 8006b84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b88:	b2d2      	uxtb	r2, r2
 8006b8a:	701a      	strb	r2, [r3, #0]
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	09db      	lsrs	r3, r3, #7
 8006b90:	613b      	str	r3, [r7, #16]
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	2b7f      	cmp	r3, #127	; 0x7f
 8006b96:	d8f0      	bhi.n	8006b7a <SEGGER_SYSVIEW_Start+0x10a>
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	1c5a      	adds	r2, r3, #1
 8006b9c:	617a      	str	r2, [r7, #20]
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	b2d2      	uxtb	r2, r2
 8006ba2:	701a      	strb	r2, [r3, #0]
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006ba8:	2218      	movs	r2, #24
 8006baa:	6839      	ldr	r1, [r7, #0]
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f7ff f81d 	bl	8005bec <_SendPacket>
      RECORD_END();
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006bb8:	4b08      	ldr	r3, [pc, #32]	; (8006bdc <SEGGER_SYSVIEW_Start+0x16c>)
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d002      	beq.n	8006bc6 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006bc0:	4b06      	ldr	r3, [pc, #24]	; (8006bdc <SEGGER_SYSVIEW_Start+0x16c>)
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006bc6:	f000 f9eb 	bl	8006fa0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006bca:	f000 f9b1 	bl	8006f30 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006bce:	f000 fc8d 	bl	80074ec <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006bd2:	bf00      	nop
 8006bd4:	3730      	adds	r7, #48	; 0x30
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	2001439c 	.word	0x2001439c
 8006be0:	080078cc 	.word	0x080078cc
 8006be4:	200143cc 	.word	0x200143cc

08006be8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006bee:	f3ef 8311 	mrs	r3, BASEPRI
 8006bf2:	f04f 0120 	mov.w	r1, #32
 8006bf6:	f381 8811 	msr	BASEPRI, r1
 8006bfa:	607b      	str	r3, [r7, #4]
 8006bfc:	480b      	ldr	r0, [pc, #44]	; (8006c2c <SEGGER_SYSVIEW_Stop+0x44>)
 8006bfe:	f7fe ff04 	bl	8005a0a <_PreparePacket>
 8006c02:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006c04:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <SEGGER_SYSVIEW_Stop+0x48>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d007      	beq.n	8006c1c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006c0c:	220b      	movs	r2, #11
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6838      	ldr	r0, [r7, #0]
 8006c12:	f7fe ffeb 	bl	8005bec <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006c16:	4b06      	ldr	r3, [pc, #24]	; (8006c30 <SEGGER_SYSVIEW_Stop+0x48>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f383 8811 	msr	BASEPRI, r3
}
 8006c22:	bf00      	nop
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	200143cc 	.word	0x200143cc
 8006c30:	2001439c 	.word	0x2001439c

08006c34 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08c      	sub	sp, #48	; 0x30
 8006c38:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c3a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c3e:	f04f 0120 	mov.w	r1, #32
 8006c42:	f381 8811 	msr	BASEPRI, r1
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	4845      	ldr	r0, [pc, #276]	; (8006d60 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006c4a:	f7fe fede 	bl	8005a0a <_PreparePacket>
 8006c4e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c58:	4b42      	ldr	r3, [pc, #264]	; (8006d64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c5e:	e00b      	b.n	8006c78 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c66:	1c59      	adds	r1, r3, #1
 8006c68:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c6e:	b2d2      	uxtb	r2, r2
 8006c70:	701a      	strb	r2, [r3, #0]
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c74:	09db      	lsrs	r3, r3, #7
 8006c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c7c:	d8f0      	bhi.n	8006c60 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c80:	1c5a      	adds	r2, r3, #1
 8006c82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c86:	b2d2      	uxtb	r2, r2
 8006c88:	701a      	strb	r2, [r3, #0]
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24
 8006c92:	4b34      	ldr	r3, [pc, #208]	; (8006d64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	623b      	str	r3, [r7, #32]
 8006c98:	e00b      	b.n	8006cb2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	1c59      	adds	r1, r3, #1
 8006ca2:	6279      	str	r1, [r7, #36]	; 0x24
 8006ca4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	701a      	strb	r2, [r3, #0]
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	09db      	lsrs	r3, r3, #7
 8006cb0:	623b      	str	r3, [r7, #32]
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	2b7f      	cmp	r3, #127	; 0x7f
 8006cb6:	d8f0      	bhi.n	8006c9a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	1c5a      	adds	r2, r3, #1
 8006cbc:	627a      	str	r2, [r7, #36]	; 0x24
 8006cbe:	6a3a      	ldr	r2, [r7, #32]
 8006cc0:	b2d2      	uxtb	r2, r2
 8006cc2:	701a      	strb	r2, [r3, #0]
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	61fb      	str	r3, [r7, #28]
 8006ccc:	4b25      	ldr	r3, [pc, #148]	; (8006d64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	61bb      	str	r3, [r7, #24]
 8006cd2:	e00b      	b.n	8006cec <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	1c59      	adds	r1, r3, #1
 8006cdc:	61f9      	str	r1, [r7, #28]
 8006cde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	701a      	strb	r2, [r3, #0]
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	09db      	lsrs	r3, r3, #7
 8006cea:	61bb      	str	r3, [r7, #24]
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	2b7f      	cmp	r3, #127	; 0x7f
 8006cf0:	d8f0      	bhi.n	8006cd4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	61fa      	str	r2, [r7, #28]
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	b2d2      	uxtb	r2, r2
 8006cfc:	701a      	strb	r2, [r3, #0]
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	617b      	str	r3, [r7, #20]
 8006d06:	2300      	movs	r3, #0
 8006d08:	613b      	str	r3, [r7, #16]
 8006d0a:	e00b      	b.n	8006d24 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	1c59      	adds	r1, r3, #1
 8006d14:	6179      	str	r1, [r7, #20]
 8006d16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d1a:	b2d2      	uxtb	r2, r2
 8006d1c:	701a      	strb	r2, [r3, #0]
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	09db      	lsrs	r3, r3, #7
 8006d22:	613b      	str	r3, [r7, #16]
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	2b7f      	cmp	r3, #127	; 0x7f
 8006d28:	d8f0      	bhi.n	8006d0c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	1c5a      	adds	r2, r3, #1
 8006d2e:	617a      	str	r2, [r7, #20]
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	b2d2      	uxtb	r2, r2
 8006d34:	701a      	strb	r2, [r3, #0]
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006d3a:	2218      	movs	r2, #24
 8006d3c:	6879      	ldr	r1, [r7, #4]
 8006d3e:	68b8      	ldr	r0, [r7, #8]
 8006d40:	f7fe ff54 	bl	8005bec <_SendPacket>
  RECORD_END();
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006d4a:	4b06      	ldr	r3, [pc, #24]	; (8006d64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006d52:	4b04      	ldr	r3, [pc, #16]	; (8006d64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d56:	4798      	blx	r3
  }
}
 8006d58:	bf00      	nop
 8006d5a:	3730      	adds	r7, #48	; 0x30
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	200143cc 	.word	0x200143cc
 8006d64:	2001439c 	.word	0x2001439c

08006d68 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b092      	sub	sp, #72	; 0x48
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006d70:	f3ef 8311 	mrs	r3, BASEPRI
 8006d74:	f04f 0120 	mov.w	r1, #32
 8006d78:	f381 8811 	msr	BASEPRI, r1
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	486a      	ldr	r0, [pc, #424]	; (8006f28 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006d80:	f7fe fe43 	bl	8005a0a <_PreparePacket>
 8006d84:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	4b66      	ldr	r3, [pc, #408]	; (8006f2c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	643b      	str	r3, [r7, #64]	; 0x40
 8006d9a:	e00b      	b.n	8006db4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006da2:	1c59      	adds	r1, r3, #1
 8006da4:	6479      	str	r1, [r7, #68]	; 0x44
 8006da6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	701a      	strb	r2, [r3, #0]
 8006dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006db0:	09db      	lsrs	r3, r3, #7
 8006db2:	643b      	str	r3, [r7, #64]	; 0x40
 8006db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006db6:	2b7f      	cmp	r3, #127	; 0x7f
 8006db8:	d8f0      	bhi.n	8006d9c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	647a      	str	r2, [r7, #68]	; 0x44
 8006dc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dc8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dd4:	e00b      	b.n	8006dee <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ddc:	1c59      	adds	r1, r3, #1
 8006dde:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006de0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006de4:	b2d2      	uxtb	r2, r2
 8006de6:	701a      	strb	r2, [r3, #0]
 8006de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dea:	09db      	lsrs	r3, r3, #7
 8006dec:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df0:	2b7f      	cmp	r3, #127	; 0x7f
 8006df2:	d8f0      	bhi.n	8006dd6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006dfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dfc:	b2d2      	uxtb	r2, r2
 8006dfe:	701a      	strb	r2, [r3, #0]
 8006e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e02:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f7fe fdc3 	bl	8005998 <_EncodeStr>
 8006e12:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006e14:	2209      	movs	r2, #9
 8006e16:	68f9      	ldr	r1, [r7, #12]
 8006e18:	6938      	ldr	r0, [r7, #16]
 8006e1a:	f7fe fee7 	bl	8005bec <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	637b      	str	r3, [r7, #52]	; 0x34
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	4b40      	ldr	r3, [pc, #256]	; (8006f2c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	633b      	str	r3, [r7, #48]	; 0x30
 8006e32:	e00b      	b.n	8006e4c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3a:	1c59      	adds	r1, r3, #1
 8006e3c:	6379      	str	r1, [r7, #52]	; 0x34
 8006e3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e42:	b2d2      	uxtb	r2, r2
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e48:	09db      	lsrs	r3, r3, #7
 8006e4a:	633b      	str	r3, [r7, #48]	; 0x30
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e50:	d8f0      	bhi.n	8006e34 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	637a      	str	r2, [r7, #52]	; 0x34
 8006e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	701a      	strb	r2, [r3, #0]
 8006e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e6c:	e00b      	b.n	8006e86 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e74:	1c59      	adds	r1, r3, #1
 8006e76:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006e78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e7c:	b2d2      	uxtb	r2, r2
 8006e7e:	701a      	strb	r2, [r3, #0]
 8006e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e82:	09db      	lsrs	r3, r3, #7
 8006e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e88:	2b7f      	cmp	r3, #127	; 0x7f
 8006e8a:	d8f0      	bhi.n	8006e6e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8e:	1c5a      	adds	r2, r3, #1
 8006e90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e94:	b2d2      	uxtb	r2, r2
 8006e96:	701a      	strb	r2, [r3, #0]
 8006e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	623b      	str	r3, [r7, #32]
 8006ea6:	e00b      	b.n	8006ec0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	1c59      	adds	r1, r3, #1
 8006eb0:	6279      	str	r1, [r7, #36]	; 0x24
 8006eb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eb6:	b2d2      	uxtb	r2, r2
 8006eb8:	701a      	strb	r2, [r3, #0]
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	09db      	lsrs	r3, r3, #7
 8006ebe:	623b      	str	r3, [r7, #32]
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ec4:	d8f0      	bhi.n	8006ea8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	627a      	str	r2, [r7, #36]	; 0x24
 8006ecc:	6a3a      	ldr	r2, [r7, #32]
 8006ece:	b2d2      	uxtb	r2, r2
 8006ed0:	701a      	strb	r2, [r3, #0]
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	61fb      	str	r3, [r7, #28]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	61bb      	str	r3, [r7, #24]
 8006ee0:	e00b      	b.n	8006efa <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	1c59      	adds	r1, r3, #1
 8006eea:	61f9      	str	r1, [r7, #28]
 8006eec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ef0:	b2d2      	uxtb	r2, r2
 8006ef2:	701a      	strb	r2, [r3, #0]
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	09db      	lsrs	r3, r3, #7
 8006ef8:	61bb      	str	r3, [r7, #24]
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2b7f      	cmp	r3, #127	; 0x7f
 8006efe:	d8f0      	bhi.n	8006ee2 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	61fa      	str	r2, [r7, #28]
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	b2d2      	uxtb	r2, r2
 8006f0a:	701a      	strb	r2, [r3, #0]
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006f10:	2215      	movs	r2, #21
 8006f12:	68f9      	ldr	r1, [r7, #12]
 8006f14:	6938      	ldr	r0, [r7, #16]
 8006f16:	f7fe fe69 	bl	8005bec <_SendPacket>
  RECORD_END();
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f383 8811 	msr	BASEPRI, r3
}
 8006f20:	bf00      	nop
 8006f22:	3748      	adds	r7, #72	; 0x48
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	200143cc 	.word	0x200143cc
 8006f2c:	2001439c 	.word	0x2001439c

08006f30 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006f34:	4b07      	ldr	r3, [pc, #28]	; (8006f54 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d008      	beq.n	8006f4e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006f3c:	4b05      	ldr	r3, [pc, #20]	; (8006f54 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006f46:	4b03      	ldr	r3, [pc, #12]	; (8006f54 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	4798      	blx	r3
  }
}
 8006f4e:	bf00      	nop
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	2001439c 	.word	0x2001439c

08006f58 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f60:	f3ef 8311 	mrs	r3, BASEPRI
 8006f64:	f04f 0120 	mov.w	r1, #32
 8006f68:	f381 8811 	msr	BASEPRI, r1
 8006f6c:	617b      	str	r3, [r7, #20]
 8006f6e:	480b      	ldr	r0, [pc, #44]	; (8006f9c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006f70:	f7fe fd4b 	bl	8005a0a <_PreparePacket>
 8006f74:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f76:	2280      	movs	r2, #128	; 0x80
 8006f78:	6879      	ldr	r1, [r7, #4]
 8006f7a:	6938      	ldr	r0, [r7, #16]
 8006f7c:	f7fe fd0c 	bl	8005998 <_EncodeStr>
 8006f80:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006f82:	220e      	movs	r2, #14
 8006f84:	68f9      	ldr	r1, [r7, #12]
 8006f86:	6938      	ldr	r0, [r7, #16]
 8006f88:	f7fe fe30 	bl	8005bec <_SendPacket>
  RECORD_END();
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f383 8811 	msr	BASEPRI, r3
}
 8006f92:	bf00      	nop
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	200143cc 	.word	0x200143cc

08006fa0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006fa0:	b590      	push	{r4, r7, lr}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006fa6:	4b15      	ldr	r3, [pc, #84]	; (8006ffc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d01a      	beq.n	8006fe4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006fae:	4b13      	ldr	r3, [pc, #76]	; (8006ffc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d015      	beq.n	8006fe4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006fb8:	4b10      	ldr	r3, [pc, #64]	; (8006ffc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006fba:	6a1b      	ldr	r3, [r3, #32]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4798      	blx	r3
 8006fc0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006fc4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006fc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fca:	f04f 0200 	mov.w	r2, #0
 8006fce:	f04f 0300 	mov.w	r3, #0
 8006fd2:	000a      	movs	r2, r1
 8006fd4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	461a      	mov	r2, r3
 8006fda:	4621      	mov	r1, r4
 8006fdc:	200d      	movs	r0, #13
 8006fde:	f7ff fbe5 	bl	80067ac <SEGGER_SYSVIEW_RecordU32x2>
 8006fe2:	e006      	b.n	8006ff2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006fe4:	4b06      	ldr	r3, [pc, #24]	; (8007000 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4619      	mov	r1, r3
 8006fea:	200c      	movs	r0, #12
 8006fec:	f7ff fba2 	bl	8006734 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006ff0:	bf00      	nop
 8006ff2:	bf00      	nop
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd90      	pop	{r4, r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	2001439c 	.word	0x2001439c
 8007000:	e0001004 	.word	0xe0001004

08007004 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800700a:	f3ef 8311 	mrs	r3, BASEPRI
 800700e:	f04f 0120 	mov.w	r1, #32
 8007012:	f381 8811 	msr	BASEPRI, r1
 8007016:	60fb      	str	r3, [r7, #12]
 8007018:	4819      	ldr	r0, [pc, #100]	; (8007080 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800701a:	f7fe fcf6 	bl	8005a0a <_PreparePacket>
 800701e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007024:	4b17      	ldr	r3, [pc, #92]	; (8007084 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800702c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	617b      	str	r3, [r7, #20]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	613b      	str	r3, [r7, #16]
 8007036:	e00b      	b.n	8007050 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	b2da      	uxtb	r2, r3
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	1c59      	adds	r1, r3, #1
 8007040:	6179      	str	r1, [r7, #20]
 8007042:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007046:	b2d2      	uxtb	r2, r2
 8007048:	701a      	strb	r2, [r3, #0]
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	09db      	lsrs	r3, r3, #7
 800704e:	613b      	str	r3, [r7, #16]
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	2b7f      	cmp	r3, #127	; 0x7f
 8007054:	d8f0      	bhi.n	8007038 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	617a      	str	r2, [r7, #20]
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	b2d2      	uxtb	r2, r2
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007066:	2202      	movs	r2, #2
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	68b8      	ldr	r0, [r7, #8]
 800706c:	f7fe fdbe 	bl	8005bec <_SendPacket>
  RECORD_END();
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f383 8811 	msr	BASEPRI, r3
}
 8007076:	bf00      	nop
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	200143cc 	.word	0x200143cc
 8007084:	e000ed04 	.word	0xe000ed04

08007088 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800708e:	f3ef 8311 	mrs	r3, BASEPRI
 8007092:	f04f 0120 	mov.w	r1, #32
 8007096:	f381 8811 	msr	BASEPRI, r1
 800709a:	607b      	str	r3, [r7, #4]
 800709c:	4807      	ldr	r0, [pc, #28]	; (80070bc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800709e:	f7fe fcb4 	bl	8005a0a <_PreparePacket>
 80070a2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80070a4:	2203      	movs	r2, #3
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6838      	ldr	r0, [r7, #0]
 80070aa:	f7fe fd9f 	bl	8005bec <_SendPacket>
  RECORD_END();
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f383 8811 	msr	BASEPRI, r3
}
 80070b4:	bf00      	nop
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	200143cc 	.word	0x200143cc

080070c0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80070c6:	f3ef 8311 	mrs	r3, BASEPRI
 80070ca:	f04f 0120 	mov.w	r1, #32
 80070ce:	f381 8811 	msr	BASEPRI, r1
 80070d2:	607b      	str	r3, [r7, #4]
 80070d4:	4807      	ldr	r0, [pc, #28]	; (80070f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80070d6:	f7fe fc98 	bl	8005a0a <_PreparePacket>
 80070da:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80070dc:	2212      	movs	r2, #18
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6838      	ldr	r0, [r7, #0]
 80070e2:	f7fe fd83 	bl	8005bec <_SendPacket>
  RECORD_END();
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f383 8811 	msr	BASEPRI, r3
}
 80070ec:	bf00      	nop
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	200143cc 	.word	0x200143cc

080070f8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80070fe:	f3ef 8311 	mrs	r3, BASEPRI
 8007102:	f04f 0120 	mov.w	r1, #32
 8007106:	f381 8811 	msr	BASEPRI, r1
 800710a:	607b      	str	r3, [r7, #4]
 800710c:	4807      	ldr	r0, [pc, #28]	; (800712c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800710e:	f7fe fc7c 	bl	8005a0a <_PreparePacket>
 8007112:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007114:	2211      	movs	r2, #17
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	6838      	ldr	r0, [r7, #0]
 800711a:	f7fe fd67 	bl	8005bec <_SendPacket>
  RECORD_END();
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f383 8811 	msr	BASEPRI, r3
}
 8007124:	bf00      	nop
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	200143cc 	.word	0x200143cc

08007130 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007130:	b580      	push	{r7, lr}
 8007132:	b088      	sub	sp, #32
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007138:	f3ef 8311 	mrs	r3, BASEPRI
 800713c:	f04f 0120 	mov.w	r1, #32
 8007140:	f381 8811 	msr	BASEPRI, r1
 8007144:	617b      	str	r3, [r7, #20]
 8007146:	4819      	ldr	r0, [pc, #100]	; (80071ac <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007148:	f7fe fc5f 	bl	8005a0a <_PreparePacket>
 800714c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007152:	4b17      	ldr	r3, [pc, #92]	; (80071b0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	61fb      	str	r3, [r7, #28]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	61bb      	str	r3, [r7, #24]
 8007164:	e00b      	b.n	800717e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	b2da      	uxtb	r2, r3
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	1c59      	adds	r1, r3, #1
 800716e:	61f9      	str	r1, [r7, #28]
 8007170:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007174:	b2d2      	uxtb	r2, r2
 8007176:	701a      	strb	r2, [r3, #0]
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	09db      	lsrs	r3, r3, #7
 800717c:	61bb      	str	r3, [r7, #24]
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	2b7f      	cmp	r3, #127	; 0x7f
 8007182:	d8f0      	bhi.n	8007166 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	1c5a      	adds	r2, r3, #1
 8007188:	61fa      	str	r2, [r7, #28]
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	b2d2      	uxtb	r2, r2
 800718e:	701a      	strb	r2, [r3, #0]
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007194:	2208      	movs	r2, #8
 8007196:	68f9      	ldr	r1, [r7, #12]
 8007198:	6938      	ldr	r0, [r7, #16]
 800719a:	f7fe fd27 	bl	8005bec <_SendPacket>
  RECORD_END();
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f383 8811 	msr	BASEPRI, r3
}
 80071a4:	bf00      	nop
 80071a6:	3720      	adds	r7, #32
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	200143cc 	.word	0x200143cc
 80071b0:	2001439c 	.word	0x2001439c

080071b4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b088      	sub	sp, #32
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80071bc:	f3ef 8311 	mrs	r3, BASEPRI
 80071c0:	f04f 0120 	mov.w	r1, #32
 80071c4:	f381 8811 	msr	BASEPRI, r1
 80071c8:	617b      	str	r3, [r7, #20]
 80071ca:	4819      	ldr	r0, [pc, #100]	; (8007230 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80071cc:	f7fe fc1d 	bl	8005a0a <_PreparePacket>
 80071d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80071d6:	4b17      	ldr	r3, [pc, #92]	; (8007234 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	61fb      	str	r3, [r7, #28]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	61bb      	str	r3, [r7, #24]
 80071e8:	e00b      	b.n	8007202 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	1c59      	adds	r1, r3, #1
 80071f2:	61f9      	str	r1, [r7, #28]
 80071f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	701a      	strb	r2, [r3, #0]
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	09db      	lsrs	r3, r3, #7
 8007200:	61bb      	str	r3, [r7, #24]
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	2b7f      	cmp	r3, #127	; 0x7f
 8007206:	d8f0      	bhi.n	80071ea <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	61fa      	str	r2, [r7, #28]
 800720e:	69ba      	ldr	r2, [r7, #24]
 8007210:	b2d2      	uxtb	r2, r2
 8007212:	701a      	strb	r2, [r3, #0]
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007218:	2204      	movs	r2, #4
 800721a:	68f9      	ldr	r1, [r7, #12]
 800721c:	6938      	ldr	r0, [r7, #16]
 800721e:	f7fe fce5 	bl	8005bec <_SendPacket>
  RECORD_END();
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f383 8811 	msr	BASEPRI, r3
}
 8007228:	bf00      	nop
 800722a:	3720      	adds	r7, #32
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	200143cc 	.word	0x200143cc
 8007234:	2001439c 	.word	0x2001439c

08007238 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007238:	b580      	push	{r7, lr}
 800723a:	b088      	sub	sp, #32
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007240:	f3ef 8311 	mrs	r3, BASEPRI
 8007244:	f04f 0120 	mov.w	r1, #32
 8007248:	f381 8811 	msr	BASEPRI, r1
 800724c:	617b      	str	r3, [r7, #20]
 800724e:	4819      	ldr	r0, [pc, #100]	; (80072b4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007250:	f7fe fbdb 	bl	8005a0a <_PreparePacket>
 8007254:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800725a:	4b17      	ldr	r3, [pc, #92]	; (80072b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	61fb      	str	r3, [r7, #28]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	61bb      	str	r3, [r7, #24]
 800726c:	e00b      	b.n	8007286 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	b2da      	uxtb	r2, r3
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	1c59      	adds	r1, r3, #1
 8007276:	61f9      	str	r1, [r7, #28]
 8007278:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800727c:	b2d2      	uxtb	r2, r2
 800727e:	701a      	strb	r2, [r3, #0]
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	09db      	lsrs	r3, r3, #7
 8007284:	61bb      	str	r3, [r7, #24]
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	2b7f      	cmp	r3, #127	; 0x7f
 800728a:	d8f0      	bhi.n	800726e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	61fa      	str	r2, [r7, #28]
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	b2d2      	uxtb	r2, r2
 8007296:	701a      	strb	r2, [r3, #0]
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800729c:	2206      	movs	r2, #6
 800729e:	68f9      	ldr	r1, [r7, #12]
 80072a0:	6938      	ldr	r0, [r7, #16]
 80072a2:	f7fe fca3 	bl	8005bec <_SendPacket>
  RECORD_END();
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f383 8811 	msr	BASEPRI, r3
}
 80072ac:	bf00      	nop
 80072ae:	3720      	adds	r7, #32
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	200143cc 	.word	0x200143cc
 80072b8:	2001439c 	.word	0x2001439c

080072bc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80072bc:	b580      	push	{r7, lr}
 80072be:	b08a      	sub	sp, #40	; 0x28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80072c6:	f3ef 8311 	mrs	r3, BASEPRI
 80072ca:	f04f 0120 	mov.w	r1, #32
 80072ce:	f381 8811 	msr	BASEPRI, r1
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	4827      	ldr	r0, [pc, #156]	; (8007374 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80072d6:	f7fe fb98 	bl	8005a0a <_PreparePacket>
 80072da:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80072e0:	4b25      	ldr	r3, [pc, #148]	; (8007378 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	623b      	str	r3, [r7, #32]
 80072f2:	e00b      	b.n	800730c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fa:	1c59      	adds	r1, r3, #1
 80072fc:	6279      	str	r1, [r7, #36]	; 0x24
 80072fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007302:	b2d2      	uxtb	r2, r2
 8007304:	701a      	strb	r2, [r3, #0]
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	09db      	lsrs	r3, r3, #7
 800730a:	623b      	str	r3, [r7, #32]
 800730c:	6a3b      	ldr	r3, [r7, #32]
 800730e:	2b7f      	cmp	r3, #127	; 0x7f
 8007310:	d8f0      	bhi.n	80072f4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	627a      	str	r2, [r7, #36]	; 0x24
 8007318:	6a3a      	ldr	r2, [r7, #32]
 800731a:	b2d2      	uxtb	r2, r2
 800731c:	701a      	strb	r2, [r3, #0]
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007320:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	61fb      	str	r3, [r7, #28]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	61bb      	str	r3, [r7, #24]
 800732a:	e00b      	b.n	8007344 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	b2da      	uxtb	r2, r3
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	1c59      	adds	r1, r3, #1
 8007334:	61f9      	str	r1, [r7, #28]
 8007336:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	09db      	lsrs	r3, r3, #7
 8007342:	61bb      	str	r3, [r7, #24]
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	2b7f      	cmp	r3, #127	; 0x7f
 8007348:	d8f0      	bhi.n	800732c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	61fa      	str	r2, [r7, #28]
 8007350:	69ba      	ldr	r2, [r7, #24]
 8007352:	b2d2      	uxtb	r2, r2
 8007354:	701a      	strb	r2, [r3, #0]
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800735a:	2207      	movs	r2, #7
 800735c:	68f9      	ldr	r1, [r7, #12]
 800735e:	6938      	ldr	r0, [r7, #16]
 8007360:	f7fe fc44 	bl	8005bec <_SendPacket>
  RECORD_END();
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f383 8811 	msr	BASEPRI, r3
}
 800736a:	bf00      	nop
 800736c:	3728      	adds	r7, #40	; 0x28
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	200143cc 	.word	0x200143cc
 8007378:	2001439c 	.word	0x2001439c

0800737c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007384:	4b04      	ldr	r3, [pc, #16]	; (8007398 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	1ad3      	subs	r3, r2, r3
}
 800738c:	4618      	mov	r0, r3
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	2001439c 	.word	0x2001439c

0800739c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800739c:	b580      	push	{r7, lr}
 800739e:	b08c      	sub	sp, #48	; 0x30
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	4603      	mov	r3, r0
 80073a4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80073a6:	4b40      	ldr	r3, [pc, #256]	; (80074a8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d077      	beq.n	800749e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80073ae:	4b3e      	ldr	r3, [pc, #248]	; (80074a8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80073b4:	2300      	movs	r3, #0
 80073b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80073b8:	e008      	b.n	80073cc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80073ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d007      	beq.n	80073d6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80073c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c8:	3301      	adds	r3, #1
 80073ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d3f2      	bcc.n	80073ba <SEGGER_SYSVIEW_SendModule+0x1e>
 80073d4:	e000      	b.n	80073d8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80073d6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80073d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d055      	beq.n	800748a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80073de:	f3ef 8311 	mrs	r3, BASEPRI
 80073e2:	f04f 0120 	mov.w	r1, #32
 80073e6:	f381 8811 	msr	BASEPRI, r1
 80073ea:	617b      	str	r3, [r7, #20]
 80073ec:	482f      	ldr	r0, [pc, #188]	; (80074ac <SEGGER_SYSVIEW_SendModule+0x110>)
 80073ee:	f7fe fb0c 	bl	8005a0a <_PreparePacket>
 80073f2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	627b      	str	r3, [r7, #36]	; 0x24
 80073fc:	79fb      	ldrb	r3, [r7, #7]
 80073fe:	623b      	str	r3, [r7, #32]
 8007400:	e00b      	b.n	800741a <SEGGER_SYSVIEW_SendModule+0x7e>
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	b2da      	uxtb	r2, r3
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	1c59      	adds	r1, r3, #1
 800740a:	6279      	str	r1, [r7, #36]	; 0x24
 800740c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007410:	b2d2      	uxtb	r2, r2
 8007412:	701a      	strb	r2, [r3, #0]
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	09db      	lsrs	r3, r3, #7
 8007418:	623b      	str	r3, [r7, #32]
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	2b7f      	cmp	r3, #127	; 0x7f
 800741e:	d8f0      	bhi.n	8007402 <SEGGER_SYSVIEW_SendModule+0x66>
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	1c5a      	adds	r2, r3, #1
 8007424:	627a      	str	r2, [r7, #36]	; 0x24
 8007426:	6a3a      	ldr	r2, [r7, #32]
 8007428:	b2d2      	uxtb	r2, r2
 800742a:	701a      	strb	r2, [r3, #0]
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	61fb      	str	r3, [r7, #28]
 8007434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	e00b      	b.n	8007454 <SEGGER_SYSVIEW_SendModule+0xb8>
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	b2da      	uxtb	r2, r3
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	1c59      	adds	r1, r3, #1
 8007444:	61f9      	str	r1, [r7, #28]
 8007446:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800744a:	b2d2      	uxtb	r2, r2
 800744c:	701a      	strb	r2, [r3, #0]
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	09db      	lsrs	r3, r3, #7
 8007452:	61bb      	str	r3, [r7, #24]
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	2b7f      	cmp	r3, #127	; 0x7f
 8007458:	d8f0      	bhi.n	800743c <SEGGER_SYSVIEW_SendModule+0xa0>
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	1c5a      	adds	r2, r3, #1
 800745e:	61fa      	str	r2, [r7, #28]
 8007460:	69ba      	ldr	r2, [r7, #24]
 8007462:	b2d2      	uxtb	r2, r2
 8007464:	701a      	strb	r2, [r3, #0]
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800746a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2280      	movs	r2, #128	; 0x80
 8007470:	4619      	mov	r1, r3
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f7fe fa90 	bl	8005998 <_EncodeStr>
 8007478:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800747a:	2216      	movs	r2, #22
 800747c:	68f9      	ldr	r1, [r7, #12]
 800747e:	6938      	ldr	r0, [r7, #16]
 8007480:	f7fe fbb4 	bl	8005bec <_SendPacket>
      RECORD_END();
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748c:	2b00      	cmp	r3, #0
 800748e:	d006      	beq.n	800749e <SEGGER_SYSVIEW_SendModule+0x102>
 8007490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	4798      	blx	r3
    }
  }
}
 800749e:	bf00      	nop
 80074a0:	3730      	adds	r7, #48	; 0x30
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	200143c4 	.word	0x200143c4
 80074ac:	200143cc 	.word	0x200143cc

080074b0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80074b6:	4b0c      	ldr	r3, [pc, #48]	; (80074e8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00f      	beq.n	80074de <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80074be:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1f2      	bne.n	80074c4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80074de:	bf00      	nop
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	200143c4 	.word	0x200143c4

080074ec <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80074f2:	f3ef 8311 	mrs	r3, BASEPRI
 80074f6:	f04f 0120 	mov.w	r1, #32
 80074fa:	f381 8811 	msr	BASEPRI, r1
 80074fe:	60fb      	str	r3, [r7, #12]
 8007500:	4817      	ldr	r0, [pc, #92]	; (8007560 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007502:	f7fe fa82 	bl	8005a0a <_PreparePacket>
 8007506:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	617b      	str	r3, [r7, #20]
 8007510:	4b14      	ldr	r3, [pc, #80]	; (8007564 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	613b      	str	r3, [r7, #16]
 8007516:	e00b      	b.n	8007530 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	b2da      	uxtb	r2, r3
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	1c59      	adds	r1, r3, #1
 8007520:	6179      	str	r1, [r7, #20]
 8007522:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007526:	b2d2      	uxtb	r2, r2
 8007528:	701a      	strb	r2, [r3, #0]
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	09db      	lsrs	r3, r3, #7
 800752e:	613b      	str	r3, [r7, #16]
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	2b7f      	cmp	r3, #127	; 0x7f
 8007534:	d8f0      	bhi.n	8007518 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	617a      	str	r2, [r7, #20]
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	b2d2      	uxtb	r2, r2
 8007540:	701a      	strb	r2, [r3, #0]
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007546:	221b      	movs	r2, #27
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	68b8      	ldr	r0, [r7, #8]
 800754c:	f7fe fb4e 	bl	8005bec <_SendPacket>
  RECORD_END();
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f383 8811 	msr	BASEPRI, r3
}
 8007556:	bf00      	nop
 8007558:	3718      	adds	r7, #24
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	200143cc 	.word	0x200143cc
 8007564:	200143c8 	.word	0x200143c8

08007568 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007568:	b40f      	push	{r0, r1, r2, r3}
 800756a:	b580      	push	{r7, lr}
 800756c:	b082      	sub	sp, #8
 800756e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007570:	f107 0314 	add.w	r3, r7, #20
 8007574:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007576:	1d3b      	adds	r3, r7, #4
 8007578:	461a      	mov	r2, r3
 800757a:	2100      	movs	r1, #0
 800757c:	6938      	ldr	r0, [r7, #16]
 800757e:	f7fe fe47 	bl	8006210 <_VPrintTarget>
  va_end(ParamList);
}
 8007582:	bf00      	nop
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800758c:	b004      	add	sp, #16
 800758e:	4770      	bx	lr

08007590 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007590:	b580      	push	{r7, lr}
 8007592:	b08a      	sub	sp, #40	; 0x28
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007598:	f3ef 8311 	mrs	r3, BASEPRI
 800759c:	f04f 0120 	mov.w	r1, #32
 80075a0:	f381 8811 	msr	BASEPRI, r1
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	4827      	ldr	r0, [pc, #156]	; (8007644 <SEGGER_SYSVIEW_Warn+0xb4>)
 80075a8:	f7fe fa2f 	bl	8005a0a <_PreparePacket>
 80075ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80075ae:	2280      	movs	r2, #128	; 0x80
 80075b0:	6879      	ldr	r1, [r7, #4]
 80075b2:	6938      	ldr	r0, [r7, #16]
 80075b4:	f7fe f9f0 	bl	8005998 <_EncodeStr>
 80075b8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	627b      	str	r3, [r7, #36]	; 0x24
 80075be:	2301      	movs	r3, #1
 80075c0:	623b      	str	r3, [r7, #32]
 80075c2:	e00b      	b.n	80075dc <SEGGER_SYSVIEW_Warn+0x4c>
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	1c59      	adds	r1, r3, #1
 80075cc:	6279      	str	r1, [r7, #36]	; 0x24
 80075ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075d2:	b2d2      	uxtb	r2, r2
 80075d4:	701a      	strb	r2, [r3, #0]
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	09db      	lsrs	r3, r3, #7
 80075da:	623b      	str	r3, [r7, #32]
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	2b7f      	cmp	r3, #127	; 0x7f
 80075e0:	d8f0      	bhi.n	80075c4 <SEGGER_SYSVIEW_Warn+0x34>
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	627a      	str	r2, [r7, #36]	; 0x24
 80075e8:	6a3a      	ldr	r2, [r7, #32]
 80075ea:	b2d2      	uxtb	r2, r2
 80075ec:	701a      	strb	r2, [r3, #0]
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	61fb      	str	r3, [r7, #28]
 80075f6:	2300      	movs	r3, #0
 80075f8:	61bb      	str	r3, [r7, #24]
 80075fa:	e00b      	b.n	8007614 <SEGGER_SYSVIEW_Warn+0x84>
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	1c59      	adds	r1, r3, #1
 8007604:	61f9      	str	r1, [r7, #28]
 8007606:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800760a:	b2d2      	uxtb	r2, r2
 800760c:	701a      	strb	r2, [r3, #0]
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	09db      	lsrs	r3, r3, #7
 8007612:	61bb      	str	r3, [r7, #24]
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	2b7f      	cmp	r3, #127	; 0x7f
 8007618:	d8f0      	bhi.n	80075fc <SEGGER_SYSVIEW_Warn+0x6c>
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	1c5a      	adds	r2, r3, #1
 800761e:	61fa      	str	r2, [r7, #28]
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	701a      	strb	r2, [r3, #0]
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800762a:	221a      	movs	r2, #26
 800762c:	68f9      	ldr	r1, [r7, #12]
 800762e:	6938      	ldr	r0, [r7, #16]
 8007630:	f7fe fadc 	bl	8005bec <_SendPacket>
  RECORD_END();
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f383 8811 	msr	BASEPRI, r3
}
 800763a:	bf00      	nop
 800763c:	3728      	adds	r7, #40	; 0x28
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	200143cc 	.word	0x200143cc

08007648 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800764c:	4b13      	ldr	r3, [pc, #76]	; (800769c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800764e:	7e1b      	ldrb	r3, [r3, #24]
 8007650:	4619      	mov	r1, r3
 8007652:	4a13      	ldr	r2, [pc, #76]	; (80076a0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007654:	460b      	mov	r3, r1
 8007656:	005b      	lsls	r3, r3, #1
 8007658:	440b      	add	r3, r1
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	4413      	add	r3, r2
 800765e:	336c      	adds	r3, #108	; 0x6c
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	4b0e      	ldr	r3, [pc, #56]	; (800769c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007664:	7e1b      	ldrb	r3, [r3, #24]
 8007666:	4618      	mov	r0, r3
 8007668:	490d      	ldr	r1, [pc, #52]	; (80076a0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800766a:	4603      	mov	r3, r0
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	4403      	add	r3, r0
 8007670:	00db      	lsls	r3, r3, #3
 8007672:	440b      	add	r3, r1
 8007674:	3370      	adds	r3, #112	; 0x70
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	429a      	cmp	r2, r3
 800767a:	d00b      	beq.n	8007694 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800767c:	4b07      	ldr	r3, [pc, #28]	; (800769c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800767e:	789b      	ldrb	r3, [r3, #2]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d107      	bne.n	8007694 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007684:	4b05      	ldr	r3, [pc, #20]	; (800769c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007686:	2201      	movs	r2, #1
 8007688:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800768a:	f7fe f9cb 	bl	8005a24 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800768e:	4b03      	ldr	r3, [pc, #12]	; (800769c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007690:	2200      	movs	r2, #0
 8007692:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007694:	4b01      	ldr	r3, [pc, #4]	; (800769c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007696:	781b      	ldrb	r3, [r3, #0]
}
 8007698:	4618      	mov	r0, r3
 800769a:	bd80      	pop	{r7, pc}
 800769c:	2001439c 	.word	0x2001439c
 80076a0:	20012edc 	.word	0x20012edc

080076a4 <__libc_init_array>:
 80076a4:	b570      	push	{r4, r5, r6, lr}
 80076a6:	4d0d      	ldr	r5, [pc, #52]	; (80076dc <__libc_init_array+0x38>)
 80076a8:	4c0d      	ldr	r4, [pc, #52]	; (80076e0 <__libc_init_array+0x3c>)
 80076aa:	1b64      	subs	r4, r4, r5
 80076ac:	10a4      	asrs	r4, r4, #2
 80076ae:	2600      	movs	r6, #0
 80076b0:	42a6      	cmp	r6, r4
 80076b2:	d109      	bne.n	80076c8 <__libc_init_array+0x24>
 80076b4:	4d0b      	ldr	r5, [pc, #44]	; (80076e4 <__libc_init_array+0x40>)
 80076b6:	4c0c      	ldr	r4, [pc, #48]	; (80076e8 <__libc_init_array+0x44>)
 80076b8:	f000 f83e 	bl	8007738 <_init>
 80076bc:	1b64      	subs	r4, r4, r5
 80076be:	10a4      	asrs	r4, r4, #2
 80076c0:	2600      	movs	r6, #0
 80076c2:	42a6      	cmp	r6, r4
 80076c4:	d105      	bne.n	80076d2 <__libc_init_array+0x2e>
 80076c6:	bd70      	pop	{r4, r5, r6, pc}
 80076c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80076cc:	4798      	blx	r3
 80076ce:	3601      	adds	r6, #1
 80076d0:	e7ee      	b.n	80076b0 <__libc_init_array+0xc>
 80076d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d6:	4798      	blx	r3
 80076d8:	3601      	adds	r6, #1
 80076da:	e7f2      	b.n	80076c2 <__libc_init_array+0x1e>
 80076dc:	080078f0 	.word	0x080078f0
 80076e0:	080078f0 	.word	0x080078f0
 80076e4:	080078f0 	.word	0x080078f0
 80076e8:	080078f4 	.word	0x080078f4

080076ec <memcmp>:
 80076ec:	b510      	push	{r4, lr}
 80076ee:	3901      	subs	r1, #1
 80076f0:	4402      	add	r2, r0
 80076f2:	4290      	cmp	r0, r2
 80076f4:	d101      	bne.n	80076fa <memcmp+0xe>
 80076f6:	2000      	movs	r0, #0
 80076f8:	e005      	b.n	8007706 <memcmp+0x1a>
 80076fa:	7803      	ldrb	r3, [r0, #0]
 80076fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007700:	42a3      	cmp	r3, r4
 8007702:	d001      	beq.n	8007708 <memcmp+0x1c>
 8007704:	1b18      	subs	r0, r3, r4
 8007706:	bd10      	pop	{r4, pc}
 8007708:	3001      	adds	r0, #1
 800770a:	e7f2      	b.n	80076f2 <memcmp+0x6>

0800770c <memcpy>:
 800770c:	440a      	add	r2, r1
 800770e:	4291      	cmp	r1, r2
 8007710:	f100 33ff 	add.w	r3, r0, #4294967295
 8007714:	d100      	bne.n	8007718 <memcpy+0xc>
 8007716:	4770      	bx	lr
 8007718:	b510      	push	{r4, lr}
 800771a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800771e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007722:	4291      	cmp	r1, r2
 8007724:	d1f9      	bne.n	800771a <memcpy+0xe>
 8007726:	bd10      	pop	{r4, pc}

08007728 <memset>:
 8007728:	4402      	add	r2, r0
 800772a:	4603      	mov	r3, r0
 800772c:	4293      	cmp	r3, r2
 800772e:	d100      	bne.n	8007732 <memset+0xa>
 8007730:	4770      	bx	lr
 8007732:	f803 1b01 	strb.w	r1, [r3], #1
 8007736:	e7f9      	b.n	800772c <memset+0x4>

08007738 <_init>:
 8007738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773a:	bf00      	nop
 800773c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800773e:	bc08      	pop	{r3}
 8007740:	469e      	mov	lr, r3
 8007742:	4770      	bx	lr

08007744 <_fini>:
 8007744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007746:	bf00      	nop
 8007748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800774a:	bc08      	pop	{r3}
 800774c:	469e      	mov	lr, r3
 800774e:	4770      	bx	lr
