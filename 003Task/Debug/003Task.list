
003Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007490  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08007690  08007690  00017690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007828  08007828  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007828  08007828  00017828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007830  08007830  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007830  08007830  00017830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007834  08007834  00017834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014494  2000001c  08007854  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144b0  08007854  000244b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017717  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003352  00000000  00000000  00037761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  0003aab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  0003bf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a9a  00000000  00000000  0003d280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001744e  00000000  00000000  00066d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104d88  00000000  00000000  0007e168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00182ef0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000563c  00000000  00000000  00182f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000001c 	.word	0x2000001c
 800021c:	00000000 	.word	0x00000000
 8000220:	08007678 	.word	0x08007678

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000020 	.word	0x20000020
 800023c:	08007678 	.word	0x08007678

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	20012edc 	.word	0x20012edc

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b974 	b.w	80005d4 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	4604      	mov	r4, r0
 800030c:	468e      	mov	lr, r1
 800030e:	2b00      	cmp	r3, #0
 8000310:	d14d      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000312:	428a      	cmp	r2, r1
 8000314:	4694      	mov	ip, r2
 8000316:	d969      	bls.n	80003ec <__udivmoddi4+0xe8>
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	b152      	cbz	r2, 8000334 <__udivmoddi4+0x30>
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	f1c2 0120 	rsb	r1, r2, #32
 8000326:	fa20 f101 	lsr.w	r1, r0, r1
 800032a:	fa0c fc02 	lsl.w	ip, ip, r2
 800032e:	ea41 0e03 	orr.w	lr, r1, r3
 8000332:	4094      	lsls	r4, r2
 8000334:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000338:	0c21      	lsrs	r1, r4, #16
 800033a:	fbbe f6f8 	udiv	r6, lr, r8
 800033e:	fa1f f78c 	uxth.w	r7, ip
 8000342:	fb08 e316 	mls	r3, r8, r6, lr
 8000346:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034a:	fb06 f107 	mul.w	r1, r6, r7
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 811f 	bcs.w	800059c <__udivmoddi4+0x298>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 811c 	bls.w	800059c <__udivmoddi4+0x298>
 8000364:	3e02      	subs	r6, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 f707 	mul.w	r7, r0, r7
 800037c:	42a7      	cmp	r7, r4
 800037e:	d90a      	bls.n	8000396 <__udivmoddi4+0x92>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 33ff 	add.w	r3, r0, #4294967295
 8000388:	f080 810a 	bcs.w	80005a0 <__udivmoddi4+0x29c>
 800038c:	42a7      	cmp	r7, r4
 800038e:	f240 8107 	bls.w	80005a0 <__udivmoddi4+0x29c>
 8000392:	4464      	add	r4, ip
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039a:	1be4      	subs	r4, r4, r7
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa4>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xc2>
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	f000 80ef 	beq.w	8000596 <__udivmoddi4+0x292>
 80003b8:	2600      	movs	r6, #0
 80003ba:	e9c5 0100 	strd	r0, r1, [r5]
 80003be:	4630      	mov	r0, r6
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f683 	clz	r6, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d14a      	bne.n	8000464 <__udivmoddi4+0x160>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd4>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80f9 	bhi.w	80005ca <__udivmoddi4+0x2c6>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	469e      	mov	lr, r3
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa4>
 80003e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa4>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xec>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 8092 	bne.w	800051e <__udivmoddi4+0x21a>
 80003fa:	eba1 010c 	sub.w	r1, r1, ip
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	2601      	movs	r6, #1
 8000408:	0c20      	lsrs	r0, r4, #16
 800040a:	fbb1 f3f7 	udiv	r3, r1, r7
 800040e:	fb07 1113 	mls	r1, r7, r3, r1
 8000412:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000416:	fb0e f003 	mul.w	r0, lr, r3
 800041a:	4288      	cmp	r0, r1
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x12c>
 800041e:	eb1c 0101 	adds.w	r1, ip, r1
 8000422:	f103 38ff 	add.w	r8, r3, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x12a>
 8000428:	4288      	cmp	r0, r1
 800042a:	f200 80cb 	bhi.w	80005c4 <__udivmoddi4+0x2c0>
 800042e:	4643      	mov	r3, r8
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1110 	mls	r1, r7, r0, r1
 800043c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000440:	fb0e fe00 	mul.w	lr, lr, r0
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x156>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x154>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f200 80bb 	bhi.w	80005ce <__udivmoddi4+0x2ca>
 8000458:	4608      	mov	r0, r1
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000462:	e79c      	b.n	800039e <__udivmoddi4+0x9a>
 8000464:	f1c6 0720 	rsb	r7, r6, #32
 8000468:	40b3      	lsls	r3, r6
 800046a:	fa22 fc07 	lsr.w	ip, r2, r7
 800046e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000472:	fa20 f407 	lsr.w	r4, r0, r7
 8000476:	fa01 f306 	lsl.w	r3, r1, r6
 800047a:	431c      	orrs	r4, r3
 800047c:	40f9      	lsrs	r1, r7
 800047e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000482:	fa00 f306 	lsl.w	r3, r0, r6
 8000486:	fbb1 f8f9 	udiv	r8, r1, r9
 800048a:	0c20      	lsrs	r0, r4, #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fb09 1118 	mls	r1, r9, r8, r1
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	fb08 f00e 	mul.w	r0, r8, lr
 800049c:	4288      	cmp	r0, r1
 800049e:	fa02 f206 	lsl.w	r2, r2, r6
 80004a2:	d90b      	bls.n	80004bc <__udivmoddi4+0x1b8>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004ac:	f080 8088 	bcs.w	80005c0 <__udivmoddi4+0x2bc>
 80004b0:	4288      	cmp	r0, r1
 80004b2:	f240 8085 	bls.w	80005c0 <__udivmoddi4+0x2bc>
 80004b6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1a09      	subs	r1, r1, r0
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c4:	fb09 1110 	mls	r1, r9, r0, r1
 80004c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d0:	458e      	cmp	lr, r1
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x1e2>
 80004d4:	eb1c 0101 	adds.w	r1, ip, r1
 80004d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80004dc:	d26c      	bcs.n	80005b8 <__udivmoddi4+0x2b4>
 80004de:	458e      	cmp	lr, r1
 80004e0:	d96a      	bls.n	80005b8 <__udivmoddi4+0x2b4>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4461      	add	r1, ip
 80004e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ea:	fba0 9402 	umull	r9, r4, r0, r2
 80004ee:	eba1 010e 	sub.w	r1, r1, lr
 80004f2:	42a1      	cmp	r1, r4
 80004f4:	46c8      	mov	r8, r9
 80004f6:	46a6      	mov	lr, r4
 80004f8:	d356      	bcc.n	80005a8 <__udivmoddi4+0x2a4>
 80004fa:	d053      	beq.n	80005a4 <__udivmoddi4+0x2a0>
 80004fc:	b15d      	cbz	r5, 8000516 <__udivmoddi4+0x212>
 80004fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000502:	eb61 010e 	sbc.w	r1, r1, lr
 8000506:	fa01 f707 	lsl.w	r7, r1, r7
 800050a:	fa22 f306 	lsr.w	r3, r2, r6
 800050e:	40f1      	lsrs	r1, r6
 8000510:	431f      	orrs	r7, r3
 8000512:	e9c5 7100 	strd	r7, r1, [r5]
 8000516:	2600      	movs	r6, #0
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	f1c2 0320 	rsb	r3, r2, #32
 8000522:	40d8      	lsrs	r0, r3
 8000524:	fa0c fc02 	lsl.w	ip, ip, r2
 8000528:	fa21 f303 	lsr.w	r3, r1, r3
 800052c:	4091      	lsls	r1, r2
 800052e:	4301      	orrs	r1, r0
 8000530:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	fbb3 f0f7 	udiv	r0, r3, r7
 800053c:	fb07 3610 	mls	r6, r7, r0, r3
 8000540:	0c0b      	lsrs	r3, r1, #16
 8000542:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000546:	fb00 f60e 	mul.w	r6, r0, lr
 800054a:	429e      	cmp	r6, r3
 800054c:	fa04 f402 	lsl.w	r4, r4, r2
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x260>
 8000552:	eb1c 0303 	adds.w	r3, ip, r3
 8000556:	f100 38ff 	add.w	r8, r0, #4294967295
 800055a:	d22f      	bcs.n	80005bc <__udivmoddi4+0x2b8>
 800055c:	429e      	cmp	r6, r3
 800055e:	d92d      	bls.n	80005bc <__udivmoddi4+0x2b8>
 8000560:	3802      	subs	r0, #2
 8000562:	4463      	add	r3, ip
 8000564:	1b9b      	subs	r3, r3, r6
 8000566:	b289      	uxth	r1, r1
 8000568:	fbb3 f6f7 	udiv	r6, r3, r7
 800056c:	fb07 3316 	mls	r3, r7, r6, r3
 8000570:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000574:	fb06 f30e 	mul.w	r3, r6, lr
 8000578:	428b      	cmp	r3, r1
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x28a>
 800057c:	eb1c 0101 	adds.w	r1, ip, r1
 8000580:	f106 38ff 	add.w	r8, r6, #4294967295
 8000584:	d216      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000586:	428b      	cmp	r3, r1
 8000588:	d914      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000594:	e738      	b.n	8000408 <__udivmoddi4+0x104>
 8000596:	462e      	mov	r6, r5
 8000598:	4628      	mov	r0, r5
 800059a:	e705      	b.n	80003a8 <__udivmoddi4+0xa4>
 800059c:	4606      	mov	r6, r0
 800059e:	e6e3      	b.n	8000368 <__udivmoddi4+0x64>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6f8      	b.n	8000396 <__udivmoddi4+0x92>
 80005a4:	454b      	cmp	r3, r9
 80005a6:	d2a9      	bcs.n	80004fc <__udivmoddi4+0x1f8>
 80005a8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b0:	3801      	subs	r0, #1
 80005b2:	e7a3      	b.n	80004fc <__udivmoddi4+0x1f8>
 80005b4:	4646      	mov	r6, r8
 80005b6:	e7ea      	b.n	800058e <__udivmoddi4+0x28a>
 80005b8:	4620      	mov	r0, r4
 80005ba:	e794      	b.n	80004e6 <__udivmoddi4+0x1e2>
 80005bc:	4640      	mov	r0, r8
 80005be:	e7d1      	b.n	8000564 <__udivmoddi4+0x260>
 80005c0:	46d0      	mov	r8, sl
 80005c2:	e77b      	b.n	80004bc <__udivmoddi4+0x1b8>
 80005c4:	3b02      	subs	r3, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	e732      	b.n	8000430 <__udivmoddi4+0x12c>
 80005ca:	4630      	mov	r0, r6
 80005cc:	e709      	b.n	80003e2 <__udivmoddi4+0xde>
 80005ce:	4464      	add	r4, ip
 80005d0:	3802      	subs	r0, #2
 80005d2:	e742      	b.n	800045a <__udivmoddi4+0x156>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08c      	sub	sp, #48	; 0x30
 80005dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	4b7f      	ldr	r3, [pc, #508]	; (80007ec <MX_GPIO_Init+0x214>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a7e      	ldr	r2, [pc, #504]	; (80007ec <MX_GPIO_Init+0x214>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b7c      	ldr	r3, [pc, #496]	; (80007ec <MX_GPIO_Init+0x214>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0304 	and.w	r3, r3, #4
 8000602:	61bb      	str	r3, [r7, #24]
 8000604:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000606:	4b79      	ldr	r3, [pc, #484]	; (80007ec <MX_GPIO_Init+0x214>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a78      	ldr	r2, [pc, #480]	; (80007ec <MX_GPIO_Init+0x214>)
 800060c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b76      	ldr	r3, [pc, #472]	; (80007ec <MX_GPIO_Init+0x214>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b73      	ldr	r3, [pc, #460]	; (80007ec <MX_GPIO_Init+0x214>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a72      	ldr	r2, [pc, #456]	; (80007ec <MX_GPIO_Init+0x214>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b70      	ldr	r3, [pc, #448]	; (80007ec <MX_GPIO_Init+0x214>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	4b6d      	ldr	r3, [pc, #436]	; (80007ec <MX_GPIO_Init+0x214>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a6c      	ldr	r2, [pc, #432]	; (80007ec <MX_GPIO_Init+0x214>)
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b6a      	ldr	r3, [pc, #424]	; (80007ec <MX_GPIO_Init+0x214>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064e:	4b67      	ldr	r3, [pc, #412]	; (80007ec <MX_GPIO_Init+0x214>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a66      	ldr	r2, [pc, #408]	; (80007ec <MX_GPIO_Init+0x214>)
 8000654:	f043 0308 	orr.w	r3, r3, #8
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b64      	ldr	r3, [pc, #400]	; (80007ec <MX_GPIO_Init+0x214>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0308 	and.w	r3, r3, #8
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000666:	4b61      	ldr	r3, [pc, #388]	; (80007ec <MX_GPIO_Init+0x214>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a60      	ldr	r2, [pc, #384]	; (80007ec <MX_GPIO_Init+0x214>)
 800066c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b5e      	ldr	r3, [pc, #376]	; (80007ec <MX_GPIO_Init+0x214>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f244 0181 	movw	r1, #16513	; 0x4081
 8000684:	485a      	ldr	r0, [pc, #360]	; (80007f0 <MX_GPIO_Init+0x218>)
 8000686:	f000 fda9 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2140      	movs	r1, #64	; 0x40
 800068e:	4859      	ldr	r0, [pc, #356]	; (80007f4 <MX_GPIO_Init+0x21c>)
 8000690:	f000 fda4 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800069a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800069e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4619      	mov	r1, r3
 80006aa:	4853      	ldr	r0, [pc, #332]	; (80007f8 <MX_GPIO_Init+0x220>)
 80006ac:	f000 fbea 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006b0:	2332      	movs	r3, #50	; 0x32
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c0:	230b      	movs	r3, #11
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	484b      	ldr	r0, [pc, #300]	; (80007f8 <MX_GPIO_Init+0x220>)
 80006cc:	f000 fbda 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006d0:	2386      	movs	r3, #134	; 0x86
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d4:	2302      	movs	r3, #2
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006e0:	230b      	movs	r3, #11
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	4844      	ldr	r0, [pc, #272]	; (80007fc <MX_GPIO_Init+0x224>)
 80006ec:	f000 fbca 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006f0:	f244 0381 	movw	r3, #16513	; 0x4081
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4619      	mov	r1, r3
 8000708:	4839      	ldr	r0, [pc, #228]	; (80007f0 <MX_GPIO_Init+0x218>)
 800070a:	f000 fbbb 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800070e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000720:	230b      	movs	r3, #11
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4831      	ldr	r0, [pc, #196]	; (80007f0 <MX_GPIO_Init+0x218>)
 800072c:	f000 fbaa 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000730:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	2302      	movs	r3, #2
 8000738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073e:	2303      	movs	r3, #3
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000742:	2307      	movs	r3, #7
 8000744:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	482c      	ldr	r0, [pc, #176]	; (8000800 <MX_GPIO_Init+0x228>)
 800074e:	f000 fb99 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000752:	2340      	movs	r3, #64	; 0x40
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4822      	ldr	r0, [pc, #136]	; (80007f4 <MX_GPIO_Init+0x21c>)
 800076a:	f000 fb8b 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800076e:	2380      	movs	r3, #128	; 0x80
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_GPIO_Init+0x21c>)
 8000782:	f000 fb7f 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000786:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000794:	2303      	movs	r3, #3
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000798:	230a      	movs	r3, #10
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4816      	ldr	r0, [pc, #88]	; (80007fc <MX_GPIO_Init+0x224>)
 80007a4:	f000 fb6e 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80007a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	480f      	ldr	r0, [pc, #60]	; (80007fc <MX_GPIO_Init+0x224>)
 80007be:	f000 fb61 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d4:	230b      	movs	r3, #11
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_GPIO_Init+0x21c>)
 80007e0:	f000 fb50 	bl	8000e84 <HAL_GPIO_Init>

}
 80007e4:	bf00      	nop
 80007e6:	3730      	adds	r7, #48	; 0x30
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020400 	.word	0x40020400
 80007f4:	40021800 	.word	0x40021800
 80007f8:	40020800 	.word	0x40020800
 80007fc:	40020000 	.word	0x40020000
 8000800:	40020c00 	.word	0x40020c00

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080a:	f000 fa2c 	bl	8000c66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080e:	f000 f86d 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000812:	f7ff fee1 	bl	80005d8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 8000816:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <main+0xc8>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a2c      	ldr	r2, [pc, #176]	; (80008cc <main+0xc8>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000822:	482b      	ldr	r0, [pc, #172]	; (80008d0 <main+0xcc>)
 8000824:	f004 fbfc 	bl	8005020 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000828:	f004 fa24 	bl	8004c74 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(vLED_Green_handler, "LED_green_task", 200, NULL, 2, &pvled_green_handle);
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	9301      	str	r3, [sp, #4]
 8000832:	2302      	movs	r3, #2
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2300      	movs	r3, #0
 8000838:	22c8      	movs	r2, #200	; 0xc8
 800083a:	4926      	ldr	r1, [pc, #152]	; (80008d4 <main+0xd0>)
 800083c:	4826      	ldr	r0, [pc, #152]	; (80008d8 <main+0xd4>)
 800083e:	f002 fb23 	bl	8002e88 <xTaskCreate>
 8000842:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d00a      	beq.n	8000860 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800084a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800084e:	f383 8811 	msr	BASEPRI, r3
 8000852:	f3bf 8f6f 	isb	sy
 8000856:	f3bf 8f4f 	dsb	sy
 800085a:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800085c:	bf00      	nop
 800085e:	e7fe      	b.n	800085e <main+0x5a>

  status = xTaskCreate(vLED_Blue_handler, "LED_blue_task", 200, NULL, 2, &pvled_blue_handle);
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	2302      	movs	r3, #2
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2300      	movs	r3, #0
 800086c:	22c8      	movs	r2, #200	; 0xc8
 800086e:	491b      	ldr	r1, [pc, #108]	; (80008dc <main+0xd8>)
 8000870:	481b      	ldr	r0, [pc, #108]	; (80008e0 <main+0xdc>)
 8000872:	f002 fb09 	bl	8002e88 <xTaskCreate>
 8000876:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d00a      	beq.n	8000894 <main+0x90>
        __asm volatile
 800087e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000882:	f383 8811 	msr	BASEPRI, r3
 8000886:	f3bf 8f6f 	isb	sy
 800088a:	f3bf 8f4f 	dsb	sy
 800088e:	617b      	str	r3, [r7, #20]
    }
 8000890:	bf00      	nop
 8000892:	e7fe      	b.n	8000892 <main+0x8e>

  status = xTaskCreate(vLED_Red_handler, "LED_red_task", 200, NULL, 2, &pvled_red_handle);
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	9301      	str	r3, [sp, #4]
 8000898:	2302      	movs	r3, #2
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2300      	movs	r3, #0
 800089e:	22c8      	movs	r2, #200	; 0xc8
 80008a0:	4910      	ldr	r1, [pc, #64]	; (80008e4 <main+0xe0>)
 80008a2:	4811      	ldr	r0, [pc, #68]	; (80008e8 <main+0xe4>)
 80008a4:	f002 faf0 	bl	8002e88 <xTaskCreate>
 80008a8:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d00a      	beq.n	80008c6 <main+0xc2>
        __asm volatile
 80008b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b4:	f383 8811 	msr	BASEPRI, r3
 80008b8:	f3bf 8f6f 	isb	sy
 80008bc:	f3bf 8f4f 	dsb	sy
 80008c0:	613b      	str	r3, [r7, #16]
    }
 80008c2:	bf00      	nop
 80008c4:	e7fe      	b.n	80008c4 <main+0xc0>

  //Start the FreeRTOS scheduler
  vTaskStartScheduler();
 80008c6:	f002 fc7b 	bl	80031c0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <main+0xc6>
 80008cc:	e0001000 	.word	0xe0001000
 80008d0:	0007a120 	.word	0x0007a120
 80008d4:	08007690 	.word	0x08007690
 80008d8:	080009c9 	.word	0x080009c9
 80008dc:	080076a0 	.word	0x080076a0
 80008e0:	080009f1 	.word	0x080009f1
 80008e4:	080076b0 	.word	0x080076b0
 80008e8:	08000a19 	.word	0x08000a19

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b094      	sub	sp, #80	; 0x50
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	2234      	movs	r2, #52	; 0x34
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f006 feb4 	bl	8007668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	f107 0308 	add.w	r3, r7, #8
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000910:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <SystemClock_Config+0xd4>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	4a2a      	ldr	r2, [pc, #168]	; (80009c0 <SystemClock_Config+0xd4>)
 8000916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091a:	6413      	str	r3, [r2, #64]	; 0x40
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <SystemClock_Config+0xd4>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000928:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <SystemClock_Config+0xd8>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a25      	ldr	r2, [pc, #148]	; (80009c4 <SystemClock_Config+0xd8>)
 800092e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <SystemClock_Config+0xd8>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000940:	2302      	movs	r3, #2
 8000942:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000944:	2301      	movs	r3, #1
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000948:	2310      	movs	r3, #16
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094c:	2302      	movs	r3, #2
 800094e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000950:	2300      	movs	r3, #0
 8000952:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000954:	2308      	movs	r3, #8
 8000956:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000958:	23d8      	movs	r3, #216	; 0xd8
 800095a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800095c:	2302      	movs	r3, #2
 800095e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000960:	2302      	movs	r3, #2
 8000962:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000964:	2302      	movs	r3, #2
 8000966:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4618      	mov	r0, r3
 800096e:	f000 fcb9 	bl	80012e4 <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000978:	f000 f876 	bl	8000a68 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800097c:	f000 fc62 	bl	8001244 <HAL_PWREx_EnableOverDrive>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000986:	f000 f86f 	bl	8000a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098a:	230f      	movs	r3, #15
 800098c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098e:	2302      	movs	r3, #2
 8000990:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000996:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800099a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800099c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	2107      	movs	r1, #7
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 ff49 	bl	8001840 <HAL_RCC_ClockConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80009b4:	f000 f858 	bl	8000a68 <Error_Handler>
  }
}
 80009b8:	bf00      	nop
 80009ba:	3750      	adds	r7, #80	; 0x50
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40007000 	.word	0x40007000

080009c8 <vLED_Green_handler>:

/* USER CODE BEGIN 4 */
static void vLED_Green_handler( void * pvParameters )
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009d0:	4805      	ldr	r0, [pc, #20]	; (80009e8 <vLED_Green_handler+0x20>)
 80009d2:	f006 fd69 	bl	80074a8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, GREEN_LED_PIN);
 80009d6:	2101      	movs	r1, #1
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <vLED_Green_handler+0x24>)
 80009da:	f000 fc18 	bl	800120e <HAL_GPIO_TogglePin>
		//HAL_Delay(1000);
		vTaskDelay(pdMS_TO_TICKS(1000));
 80009de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e2:	f002 fbb5 	bl	8003150 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009e6:	e7f3      	b.n	80009d0 <vLED_Green_handler+0x8>
 80009e8:	080076c0 	.word	0x080076c0
 80009ec:	40020400 	.word	0x40020400

080009f0 <vLED_Blue_handler>:
	}
}
static void vLED_Blue_handler( void * pvParameters )
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <vLED_Blue_handler+0x20>)
 80009fa:	f006 fd55 	bl	80074a8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, BLUE_LED_PIN);
 80009fe:	2180      	movs	r1, #128	; 0x80
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <vLED_Blue_handler+0x24>)
 8000a02:	f000 fc04 	bl	800120e <HAL_GPIO_TogglePin>
		//HAL_Delay(800);
		vTaskDelay(pdMS_TO_TICKS(800));
 8000a06:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a0a:	f002 fba1 	bl	8003150 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000a0e:	e7f3      	b.n	80009f8 <vLED_Blue_handler+0x8>
 8000a10:	080076d4 	.word	0x080076d4
 8000a14:	40020400 	.word	0x40020400

08000a18 <vLED_Red_handler>:
	}
}
static void vLED_Red_handler( void * pvParameters )
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a20:	4806      	ldr	r0, [pc, #24]	; (8000a3c <vLED_Red_handler+0x24>)
 8000a22:	f006 fd41 	bl	80074a8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, RED_LED_PIN);
 8000a26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <vLED_Red_handler+0x28>)
 8000a2c:	f000 fbef 	bl	800120e <HAL_GPIO_TogglePin>
		//HAL_Delay(400);
		vTaskDelay(pdMS_TO_TICKS(400));
 8000a30:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a34:	f002 fb8c 	bl	8003150 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a38:	e7f2      	b.n	8000a20 <vLED_Red_handler+0x8>
 8000a3a:	bf00      	nop
 8000a3c:	080076e8 	.word	0x080076e8
 8000a40:	40020400 	.word	0x40020400

08000a44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d101      	bne.n	8000a5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a56:	f000 f913 	bl	8000c80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40001000 	.word	0x40001000

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <Error_Handler+0x8>
	...

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x44>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000aaa:	f003 fd2d 	bl	8004508 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	; 0x38
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000acc:	4b33      	ldr	r3, [pc, #204]	; (8000b9c <HAL_InitTick+0xe0>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	4a32      	ldr	r2, [pc, #200]	; (8000b9c <HAL_InitTick+0xe0>)
 8000ad2:	f043 0310 	orr.w	r3, r3, #16
 8000ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad8:	4b30      	ldr	r3, [pc, #192]	; (8000b9c <HAL_InitTick+0xe0>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	f003 0310 	and.w	r3, r3, #16
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ae4:	f107 0210 	add.w	r2, r7, #16
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4611      	mov	r1, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 f8b6 	bl	8001c60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d103      	bne.n	8000b06 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000afe:	f001 f89b 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 8000b02:	6378      	str	r0, [r7, #52]	; 0x34
 8000b04:	e004      	b.n	8000b10 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b06:	f001 f897 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b12:	4a23      	ldr	r2, [pc, #140]	; (8000ba0 <HAL_InitTick+0xe4>)
 8000b14:	fba2 2303 	umull	r2, r3, r2, r3
 8000b18:	0c9b      	lsrs	r3, r3, #18
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <HAL_InitTick+0xe8>)
 8000b20:	4a21      	ldr	r2, [pc, #132]	; (8000ba8 <HAL_InitTick+0xec>)
 8000b22:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <HAL_InitTick+0xe8>)
 8000b26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b2a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <HAL_InitTick+0xe8>)
 8000b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b30:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <HAL_InitTick+0xe8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <HAL_InitTick+0xe8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <HAL_InitTick+0xe8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b44:	4817      	ldr	r0, [pc, #92]	; (8000ba4 <HAL_InitTick+0xe8>)
 8000b46:	f001 f8bd 	bl	8001cc4 <HAL_TIM_Base_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d11b      	bne.n	8000b90 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b58:	4812      	ldr	r0, [pc, #72]	; (8000ba4 <HAL_InitTick+0xe8>)
 8000b5a:	f001 f915 	bl	8001d88 <HAL_TIM_Base_Start_IT>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d111      	bne.n	8000b90 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b6c:	2036      	movs	r0, #54	; 0x36
 8000b6e:	f000 f97b 	bl	8000e68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b0f      	cmp	r3, #15
 8000b76:	d808      	bhi.n	8000b8a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	2036      	movs	r0, #54	; 0x36
 8000b7e:	f000 f957 	bl	8000e30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <HAL_InitTick+0xf0>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6013      	str	r3, [r2, #0]
 8000b88:	e002      	b.n	8000b90 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3738      	adds	r7, #56	; 0x38
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	431bde83 	.word	0x431bde83
 8000ba4:	20000038 	.word	0x20000038
 8000ba8:	40001000 	.word	0x40001000
 8000bac:	20000004 	.word	0x20000004

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <TIM6_DAC_IRQHandler+0x10>)
 8000be2:	f001 f949 	bl	8001e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000038 	.word	0x20000038

08000bf0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <SystemInit+0x20>)
 8000bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <SystemInit+0x20>)
 8000bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c18:	f7ff ffea 	bl	8000bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c1e:	490d      	ldr	r1, [pc, #52]	; (8000c54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c24:	e002      	b.n	8000c2c <LoopCopyDataInit>

08000c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2a:	3304      	adds	r3, #4

08000c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c30:	d3f9      	bcc.n	8000c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c34:	4c0a      	ldr	r4, [pc, #40]	; (8000c60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c38:	e001      	b.n	8000c3e <LoopFillZerobss>

08000c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c3c:	3204      	adds	r2, #4

08000c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c40:	d3fb      	bcc.n	8000c3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c42:	f006 fccf 	bl	80075e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c46:	f7ff fddd 	bl	8000804 <main>
  bx  lr    
 8000c4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c4c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c54:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c58:	08007838 	.word	0x08007838
  ldr r2, =_sbss
 8000c5c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c60:	200144b0 	.word	0x200144b0

08000c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC_IRQHandler>

08000c66 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6a:	2003      	movs	r0, #3
 8000c6c:	f000 f8d5 	bl	8000e1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c70:	200f      	movs	r0, #15
 8000c72:	f7ff ff23 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c76:	f7ff fefd 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000084 	.word	0x20000084

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000084 	.word	0x20000084

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <__NVIC_SetPriorityGrouping+0x40>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	4313      	orrs	r3, r2
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <__NVIC_SetPriorityGrouping+0x40>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00
 8000d04:	05fa0000 	.word	0x05fa0000

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db0b      	blt.n	8000d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	4907      	ldr	r1, [pc, #28]	; (8000d5c <__NVIC_EnableIRQ+0x38>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	2001      	movs	r0, #1
 8000d46:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ff4c 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e42:	f7ff ff61 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	68b9      	ldr	r1, [r7, #8]
 8000e4c:	6978      	ldr	r0, [r7, #20]
 8000e4e:	f7ff ffb1 	bl	8000db4 <NVIC_EncodePriority>
 8000e52:	4602      	mov	r2, r0
 8000e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff80 	bl	8000d60 <__NVIC_SetPriority>
}
 8000e60:	bf00      	nop
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff54 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	; 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
 8000ea2:	e175      	b.n	8001190 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f040 8164 	bne.w	800118a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d005      	beq.n	8000eda <HAL_GPIO_Init+0x56>
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d130      	bne.n	8000f3c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f10:	2201      	movs	r2, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	091b      	lsrs	r3, r3, #4
 8000f26:	f003 0201 	and.w	r2, r3, #1
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b03      	cmp	r3, #3
 8000f46:	d017      	beq.n	8000f78 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d123      	bne.n	8000fcc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	69b9      	ldr	r1, [r7, #24]
 8000fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0203 	and.w	r2, r3, #3
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 80be 	beq.w	800118a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	4b66      	ldr	r3, [pc, #408]	; (80011a8 <HAL_GPIO_Init+0x324>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	4a65      	ldr	r2, [pc, #404]	; (80011a8 <HAL_GPIO_Init+0x324>)
 8001014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001018:	6453      	str	r3, [r2, #68]	; 0x44
 800101a:	4b63      	ldr	r3, [pc, #396]	; (80011a8 <HAL_GPIO_Init+0x324>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001026:	4a61      	ldr	r2, [pc, #388]	; (80011ac <HAL_GPIO_Init+0x328>)
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	3302      	adds	r3, #2
 800102e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	220f      	movs	r2, #15
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a58      	ldr	r2, [pc, #352]	; (80011b0 <HAL_GPIO_Init+0x32c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d037      	beq.n	80010c2 <HAL_GPIO_Init+0x23e>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a57      	ldr	r2, [pc, #348]	; (80011b4 <HAL_GPIO_Init+0x330>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d031      	beq.n	80010be <HAL_GPIO_Init+0x23a>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a56      	ldr	r2, [pc, #344]	; (80011b8 <HAL_GPIO_Init+0x334>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d02b      	beq.n	80010ba <HAL_GPIO_Init+0x236>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a55      	ldr	r2, [pc, #340]	; (80011bc <HAL_GPIO_Init+0x338>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d025      	beq.n	80010b6 <HAL_GPIO_Init+0x232>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a54      	ldr	r2, [pc, #336]	; (80011c0 <HAL_GPIO_Init+0x33c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d01f      	beq.n	80010b2 <HAL_GPIO_Init+0x22e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a53      	ldr	r2, [pc, #332]	; (80011c4 <HAL_GPIO_Init+0x340>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d019      	beq.n	80010ae <HAL_GPIO_Init+0x22a>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a52      	ldr	r2, [pc, #328]	; (80011c8 <HAL_GPIO_Init+0x344>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d013      	beq.n	80010aa <HAL_GPIO_Init+0x226>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a51      	ldr	r2, [pc, #324]	; (80011cc <HAL_GPIO_Init+0x348>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d00d      	beq.n	80010a6 <HAL_GPIO_Init+0x222>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a50      	ldr	r2, [pc, #320]	; (80011d0 <HAL_GPIO_Init+0x34c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d007      	beq.n	80010a2 <HAL_GPIO_Init+0x21e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4f      	ldr	r2, [pc, #316]	; (80011d4 <HAL_GPIO_Init+0x350>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d101      	bne.n	800109e <HAL_GPIO_Init+0x21a>
 800109a:	2309      	movs	r3, #9
 800109c:	e012      	b.n	80010c4 <HAL_GPIO_Init+0x240>
 800109e:	230a      	movs	r3, #10
 80010a0:	e010      	b.n	80010c4 <HAL_GPIO_Init+0x240>
 80010a2:	2308      	movs	r3, #8
 80010a4:	e00e      	b.n	80010c4 <HAL_GPIO_Init+0x240>
 80010a6:	2307      	movs	r3, #7
 80010a8:	e00c      	b.n	80010c4 <HAL_GPIO_Init+0x240>
 80010aa:	2306      	movs	r3, #6
 80010ac:	e00a      	b.n	80010c4 <HAL_GPIO_Init+0x240>
 80010ae:	2305      	movs	r3, #5
 80010b0:	e008      	b.n	80010c4 <HAL_GPIO_Init+0x240>
 80010b2:	2304      	movs	r3, #4
 80010b4:	e006      	b.n	80010c4 <HAL_GPIO_Init+0x240>
 80010b6:	2303      	movs	r3, #3
 80010b8:	e004      	b.n	80010c4 <HAL_GPIO_Init+0x240>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_Init+0x240>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <HAL_GPIO_Init+0x240>
 80010c2:	2300      	movs	r3, #0
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	f002 0203 	and.w	r2, r2, #3
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	4093      	lsls	r3, r2
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010d4:	4935      	ldr	r1, [pc, #212]	; (80011ac <HAL_GPIO_Init+0x328>)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e2:	4b3d      	ldr	r3, [pc, #244]	; (80011d8 <HAL_GPIO_Init+0x354>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001106:	4a34      	ldr	r2, [pc, #208]	; (80011d8 <HAL_GPIO_Init+0x354>)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800110c:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <HAL_GPIO_Init+0x354>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001130:	4a29      	ldr	r2, [pc, #164]	; (80011d8 <HAL_GPIO_Init+0x354>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001136:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <HAL_GPIO_Init+0x354>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800115a:	4a1f      	ldr	r2, [pc, #124]	; (80011d8 <HAL_GPIO_Init+0x354>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001160:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <HAL_GPIO_Init+0x354>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001184:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <HAL_GPIO_Init+0x354>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3301      	adds	r3, #1
 800118e:	61fb      	str	r3, [r7, #28]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	2b0f      	cmp	r3, #15
 8001194:	f67f ae86 	bls.w	8000ea4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40013800 	.word	0x40013800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40020400 	.word	0x40020400
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020c00 	.word	0x40020c00
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40021400 	.word	0x40021400
 80011c8:	40021800 	.word	0x40021800
 80011cc:	40021c00 	.word	0x40021c00
 80011d0:	40022000 	.word	0x40022000
 80011d4:	40022400 	.word	0x40022400
 80011d8:	40013c00 	.word	0x40013c00

080011dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]
 80011e8:	4613      	mov	r3, r2
 80011ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011ec:	787b      	ldrb	r3, [r7, #1]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011f8:	e003      	b.n	8001202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011fa:	887b      	ldrh	r3, [r7, #2]
 80011fc:	041a      	lsls	r2, r3, #16
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	619a      	str	r2, [r3, #24]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800120e:	b480      	push	{r7}
 8001210:	b085      	sub	sp, #20
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	460b      	mov	r3, r1
 8001218:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001220:	887a      	ldrh	r2, [r7, #2]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4013      	ands	r3, r2
 8001226:	041a      	lsls	r2, r3, #16
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	43d9      	mvns	r1, r3
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	400b      	ands	r3, r1
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	619a      	str	r2, [r3, #24]
}
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <HAL_PWREx_EnableOverDrive+0x98>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a22      	ldr	r2, [pc, #136]	; (80012dc <HAL_PWREx_EnableOverDrive+0x98>)
 8001254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <HAL_PWREx_EnableOverDrive+0x98>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a1d      	ldr	r2, [pc, #116]	; (80012e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800126c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001272:	f7ff fd19 	bl	8000ca8 <HAL_GetTick>
 8001276:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001278:	e009      	b.n	800128e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800127a:	f7ff fd15 	bl	8000ca8 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001288:	d901      	bls.n	800128e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e022      	b.n	80012d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800129a:	d1ee      	bne.n	800127a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012a8:	f7ff fcfe 	bl	8000ca8 <HAL_GetTick>
 80012ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012ae:	e009      	b.n	80012c4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012b0:	f7ff fcfa 	bl	8000ca8 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012be:	d901      	bls.n	80012c4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e007      	b.n	80012d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012d0:	d1ee      	bne.n	80012b0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40007000 	.word	0x40007000

080012e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80012ec:	2300      	movs	r3, #0
 80012ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e29b      	b.n	8001832 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 8087 	beq.w	8001416 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001308:	4b96      	ldr	r3, [pc, #600]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 030c 	and.w	r3, r3, #12
 8001310:	2b04      	cmp	r3, #4
 8001312:	d00c      	beq.n	800132e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001314:	4b93      	ldr	r3, [pc, #588]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 030c 	and.w	r3, r3, #12
 800131c:	2b08      	cmp	r3, #8
 800131e:	d112      	bne.n	8001346 <HAL_RCC_OscConfig+0x62>
 8001320:	4b90      	ldr	r3, [pc, #576]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001328:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800132c:	d10b      	bne.n	8001346 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132e:	4b8d      	ldr	r3, [pc, #564]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d06c      	beq.n	8001414 <HAL_RCC_OscConfig+0x130>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d168      	bne.n	8001414 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e275      	b.n	8001832 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134e:	d106      	bne.n	800135e <HAL_RCC_OscConfig+0x7a>
 8001350:	4b84      	ldr	r3, [pc, #528]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a83      	ldr	r2, [pc, #524]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 8001356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	e02e      	b.n	80013bc <HAL_RCC_OscConfig+0xd8>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10c      	bne.n	8001380 <HAL_RCC_OscConfig+0x9c>
 8001366:	4b7f      	ldr	r3, [pc, #508]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a7e      	ldr	r2, [pc, #504]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 800136c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	4b7c      	ldr	r3, [pc, #496]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a7b      	ldr	r2, [pc, #492]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 8001378:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	e01d      	b.n	80013bc <HAL_RCC_OscConfig+0xd8>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001388:	d10c      	bne.n	80013a4 <HAL_RCC_OscConfig+0xc0>
 800138a:	4b76      	ldr	r3, [pc, #472]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a75      	ldr	r2, [pc, #468]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 8001390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	4b73      	ldr	r3, [pc, #460]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a72      	ldr	r2, [pc, #456]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 800139c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e00b      	b.n	80013bc <HAL_RCC_OscConfig+0xd8>
 80013a4:	4b6f      	ldr	r3, [pc, #444]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a6e      	ldr	r2, [pc, #440]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 80013aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	4b6c      	ldr	r3, [pc, #432]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a6b      	ldr	r2, [pc, #428]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 80013b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d013      	beq.n	80013ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c4:	f7ff fc70 	bl	8000ca8 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013cc:	f7ff fc6c 	bl	8000ca8 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b64      	cmp	r3, #100	; 0x64
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e229      	b.n	8001832 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013de:	4b61      	ldr	r3, [pc, #388]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0xe8>
 80013ea:	e014      	b.n	8001416 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fc5c 	bl	8000ca8 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f4:	f7ff fc58 	bl	8000ca8 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b64      	cmp	r3, #100	; 0x64
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e215      	b.n	8001832 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001406:	4b57      	ldr	r3, [pc, #348]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x110>
 8001412:	e000      	b.n	8001416 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d069      	beq.n	80014f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001422:	4b50      	ldr	r3, [pc, #320]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00b      	beq.n	8001446 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800142e:	4b4d      	ldr	r3, [pc, #308]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	2b08      	cmp	r3, #8
 8001438:	d11c      	bne.n	8001474 <HAL_RCC_OscConfig+0x190>
 800143a:	4b4a      	ldr	r3, [pc, #296]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d116      	bne.n	8001474 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001446:	4b47      	ldr	r3, [pc, #284]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d005      	beq.n	800145e <HAL_RCC_OscConfig+0x17a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d001      	beq.n	800145e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e1e9      	b.n	8001832 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145e:	4b41      	ldr	r3, [pc, #260]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	493d      	ldr	r1, [pc, #244]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 800146e:	4313      	orrs	r3, r2
 8001470:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001472:	e040      	b.n	80014f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d023      	beq.n	80014c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800147c:	4b39      	ldr	r3, [pc, #228]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a38      	ldr	r2, [pc, #224]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff fc0e 	bl	8000ca8 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001490:	f7ff fc0a 	bl	8000ca8 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e1c7      	b.n	8001832 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a2:	4b30      	ldr	r3, [pc, #192]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ae:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4929      	ldr	r1, [pc, #164]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]
 80014c2:	e018      	b.n	80014f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c4:	4b27      	ldr	r3, [pc, #156]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a26      	ldr	r2, [pc, #152]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 80014ca:	f023 0301 	bic.w	r3, r3, #1
 80014ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff fbea 	bl	8000ca8 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d8:	f7ff fbe6 	bl	8000ca8 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e1a3      	b.n	8001832 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ea:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d038      	beq.n	8001574 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d019      	beq.n	800153e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150a:	4b16      	ldr	r3, [pc, #88]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 800150c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800150e:	4a15      	ldr	r2, [pc, #84]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001516:	f7ff fbc7 	bl	8000ca8 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800151e:	f7ff fbc3 	bl	8000ca8 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e180      	b.n	8001832 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 8001532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x23a>
 800153c:	e01a      	b.n	8001574 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 8001540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001542:	4a08      	ldr	r2, [pc, #32]	; (8001564 <HAL_RCC_OscConfig+0x280>)
 8001544:	f023 0301 	bic.w	r3, r3, #1
 8001548:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154a:	f7ff fbad 	bl	8000ca8 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001550:	e00a      	b.n	8001568 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001552:	f7ff fba9 	bl	8000ca8 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d903      	bls.n	8001568 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e166      	b.n	8001832 <HAL_RCC_OscConfig+0x54e>
 8001564:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001568:	4b92      	ldr	r3, [pc, #584]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 800156a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1ee      	bne.n	8001552 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 80a4 	beq.w	80016ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001582:	4b8c      	ldr	r3, [pc, #560]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10d      	bne.n	80015aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	4b89      	ldr	r3, [pc, #548]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	4a88      	ldr	r2, [pc, #544]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001598:	6413      	str	r3, [r2, #64]	; 0x40
 800159a:	4b86      	ldr	r3, [pc, #536]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015a6:	2301      	movs	r3, #1
 80015a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015aa:	4b83      	ldr	r3, [pc, #524]	; (80017b8 <HAL_RCC_OscConfig+0x4d4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d118      	bne.n	80015e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80015b6:	4b80      	ldr	r3, [pc, #512]	; (80017b8 <HAL_RCC_OscConfig+0x4d4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a7f      	ldr	r2, [pc, #508]	; (80017b8 <HAL_RCC_OscConfig+0x4d4>)
 80015bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015c2:	f7ff fb71 	bl	8000ca8 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ca:	f7ff fb6d 	bl	8000ca8 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b64      	cmp	r3, #100	; 0x64
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e12a      	b.n	8001832 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015dc:	4b76      	ldr	r3, [pc, #472]	; (80017b8 <HAL_RCC_OscConfig+0x4d4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d106      	bne.n	80015fe <HAL_RCC_OscConfig+0x31a>
 80015f0:	4b70      	ldr	r3, [pc, #448]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f4:	4a6f      	ldr	r2, [pc, #444]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6713      	str	r3, [r2, #112]	; 0x70
 80015fc:	e02d      	b.n	800165a <HAL_RCC_OscConfig+0x376>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0x33c>
 8001606:	4b6b      	ldr	r3, [pc, #428]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 8001608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160a:	4a6a      	ldr	r2, [pc, #424]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 800160c:	f023 0301 	bic.w	r3, r3, #1
 8001610:	6713      	str	r3, [r2, #112]	; 0x70
 8001612:	4b68      	ldr	r3, [pc, #416]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	4a67      	ldr	r2, [pc, #412]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 8001618:	f023 0304 	bic.w	r3, r3, #4
 800161c:	6713      	str	r3, [r2, #112]	; 0x70
 800161e:	e01c      	b.n	800165a <HAL_RCC_OscConfig+0x376>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b05      	cmp	r3, #5
 8001626:	d10c      	bne.n	8001642 <HAL_RCC_OscConfig+0x35e>
 8001628:	4b62      	ldr	r3, [pc, #392]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 800162a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162c:	4a61      	ldr	r2, [pc, #388]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	6713      	str	r3, [r2, #112]	; 0x70
 8001634:	4b5f      	ldr	r3, [pc, #380]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	4a5e      	ldr	r2, [pc, #376]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6713      	str	r3, [r2, #112]	; 0x70
 8001640:	e00b      	b.n	800165a <HAL_RCC_OscConfig+0x376>
 8001642:	4b5c      	ldr	r3, [pc, #368]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 8001644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001646:	4a5b      	ldr	r2, [pc, #364]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	6713      	str	r3, [r2, #112]	; 0x70
 800164e:	4b59      	ldr	r3, [pc, #356]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 8001650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001652:	4a58      	ldr	r2, [pc, #352]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 8001654:	f023 0304 	bic.w	r3, r3, #4
 8001658:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d015      	beq.n	800168e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001662:	f7ff fb21 	bl	8000ca8 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001668:	e00a      	b.n	8001680 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800166a:	f7ff fb1d 	bl	8000ca8 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	f241 3288 	movw	r2, #5000	; 0x1388
 8001678:	4293      	cmp	r3, r2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e0d8      	b.n	8001832 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001680:	4b4c      	ldr	r3, [pc, #304]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0ee      	beq.n	800166a <HAL_RCC_OscConfig+0x386>
 800168c:	e014      	b.n	80016b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168e:	f7ff fb0b 	bl	8000ca8 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7ff fb07 	bl	8000ca8 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e0c2      	b.n	8001832 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ac:	4b41      	ldr	r3, [pc, #260]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 80016ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1ee      	bne.n	8001696 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d105      	bne.n	80016ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016be:	4b3d      	ldr	r3, [pc, #244]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a3c      	ldr	r2, [pc, #240]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 80016c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 80ae 	beq.w	8001830 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016d4:	4b37      	ldr	r3, [pc, #220]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 030c 	and.w	r3, r3, #12
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d06d      	beq.n	80017bc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d14b      	bne.n	8001780 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e8:	4b32      	ldr	r3, [pc, #200]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a31      	ldr	r2, [pc, #196]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 80016ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff fad8 	bl	8000ca8 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016fc:	f7ff fad4 	bl	8000ca8 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e091      	b.n	8001832 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170e:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69da      	ldr	r2, [r3, #28]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	019b      	lsls	r3, r3, #6
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001730:	085b      	lsrs	r3, r3, #1
 8001732:	3b01      	subs	r3, #1
 8001734:	041b      	lsls	r3, r3, #16
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	061b      	lsls	r3, r3, #24
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	071b      	lsls	r3, r3, #28
 8001746:	491b      	ldr	r1, [pc, #108]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 8001748:	4313      	orrs	r3, r2
 800174a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a18      	ldr	r2, [pc, #96]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 8001752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7ff faa6 	bl	8000ca8 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001760:	f7ff faa2 	bl	8000ca8 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e05f      	b.n	8001832 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0x47c>
 800177e:	e057      	b.n	8001830 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0b      	ldr	r2, [pc, #44]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 8001786:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800178a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff fa8c 	bl	8000ca8 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff fa88 	bl	8000ca8 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e045      	b.n	8001832 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a6:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <HAL_RCC_OscConfig+0x4d0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x4b0>
 80017b2:	e03d      	b.n	8001830 <HAL_RCC_OscConfig+0x54c>
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80017bc:	4b1f      	ldr	r3, [pc, #124]	; (800183c <HAL_RCC_OscConfig+0x558>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d030      	beq.n	800182c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d129      	bne.n	800182c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d122      	bne.n	800182c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017ec:	4013      	ands	r3, r2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d119      	bne.n	800182c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	085b      	lsrs	r3, r3, #1
 8001804:	3b01      	subs	r3, #1
 8001806:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001808:	429a      	cmp	r2, r3
 800180a:	d10f      	bne.n	800182c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001816:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001818:	429a      	cmp	r2, r3
 800181a:	d107      	bne.n	800182c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800

08001840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0d0      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001858:	4b6a      	ldr	r3, [pc, #424]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 030f 	and.w	r3, r3, #15
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d910      	bls.n	8001888 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	4b67      	ldr	r3, [pc, #412]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f023 020f 	bic.w	r2, r3, #15
 800186e:	4965      	ldr	r1, [pc, #404]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b63      	ldr	r3, [pc, #396]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0b8      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d020      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a0:	4b59      	ldr	r3, [pc, #356]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	4a58      	ldr	r2, [pc, #352]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80018a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b8:	4b53      	ldr	r3, [pc, #332]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4a52      	ldr	r2, [pc, #328]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80018be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c4:	4b50      	ldr	r3, [pc, #320]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	494d      	ldr	r1, [pc, #308]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d040      	beq.n	8001964 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d115      	bne.n	8001922 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e07f      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001902:	4b41      	ldr	r3, [pc, #260]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e073      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001912:	4b3d      	ldr	r3, [pc, #244]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e06b      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001922:	4b39      	ldr	r3, [pc, #228]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f023 0203 	bic.w	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4936      	ldr	r1, [pc, #216]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 8001930:	4313      	orrs	r3, r2
 8001932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001934:	f7ff f9b8 	bl	8000ca8 <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193a:	e00a      	b.n	8001952 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193c:	f7ff f9b4 	bl	8000ca8 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	; 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e053      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001952:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 020c 	and.w	r2, r3, #12
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	429a      	cmp	r2, r3
 8001962:	d1eb      	bne.n	800193c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001964:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 030f 	and.w	r3, r3, #15
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d210      	bcs.n	8001994 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 020f 	bic.w	r2, r3, #15
 800197a:	4922      	ldr	r1, [pc, #136]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e032      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	4916      	ldr	r1, [pc, #88]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	490e      	ldr	r1, [pc, #56]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019d2:	f000 f821 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 80019d6:	4602      	mov	r2, r0
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	490a      	ldr	r1, [pc, #40]	; (8001a0c <HAL_RCC_ClockConfig+0x1cc>)
 80019e4:	5ccb      	ldrb	r3, [r1, r3]
 80019e6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ea:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <HAL_RCC_ClockConfig+0x1d0>)
 80019ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_RCC_ClockConfig+0x1d4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff f862 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023c00 	.word	0x40023c00
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	080077d4 	.word	0x080077d4
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a1c:	b094      	sub	sp, #80	; 0x50
 8001a1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	647b      	str	r3, [r7, #68]	; 0x44
 8001a24:	2300      	movs	r3, #0
 8001a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a28:	2300      	movs	r3, #0
 8001a2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a30:	4b79      	ldr	r3, [pc, #484]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d00d      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x40>
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	f200 80e1 	bhi.w	8001c04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x34>
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d003      	beq.n	8001a52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a4a:	e0db      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a4c:	4b73      	ldr	r3, [pc, #460]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a50:	e0db      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a52:	4b72      	ldr	r3, [pc, #456]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a56:	e0d8      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a58:	4b6f      	ldr	r3, [pc, #444]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a60:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a62:	4b6d      	ldr	r3, [pc, #436]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d063      	beq.n	8001b36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6e:	4b6a      	ldr	r3, [pc, #424]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	099b      	lsrs	r3, r3, #6
 8001a74:	2200      	movs	r2, #0
 8001a76:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
 8001a82:	2300      	movs	r3, #0
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
 8001a86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a8a:	4622      	mov	r2, r4
 8001a8c:	462b      	mov	r3, r5
 8001a8e:	f04f 0000 	mov.w	r0, #0
 8001a92:	f04f 0100 	mov.w	r1, #0
 8001a96:	0159      	lsls	r1, r3, #5
 8001a98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a9c:	0150      	lsls	r0, r2, #5
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	1a51      	subs	r1, r2, r1
 8001aa6:	6139      	str	r1, [r7, #16]
 8001aa8:	4629      	mov	r1, r5
 8001aaa:	eb63 0301 	sbc.w	r3, r3, r1
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001abc:	4659      	mov	r1, fp
 8001abe:	018b      	lsls	r3, r1, #6
 8001ac0:	4651      	mov	r1, sl
 8001ac2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ac6:	4651      	mov	r1, sl
 8001ac8:	018a      	lsls	r2, r1, #6
 8001aca:	4651      	mov	r1, sl
 8001acc:	ebb2 0801 	subs.w	r8, r2, r1
 8001ad0:	4659      	mov	r1, fp
 8001ad2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ae2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ae6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aea:	4690      	mov	r8, r2
 8001aec:	4699      	mov	r9, r3
 8001aee:	4623      	mov	r3, r4
 8001af0:	eb18 0303 	adds.w	r3, r8, r3
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	462b      	mov	r3, r5
 8001af8:	eb49 0303 	adc.w	r3, r9, r3
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	028b      	lsls	r3, r1, #10
 8001b0e:	4621      	mov	r1, r4
 8001b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b14:	4621      	mov	r1, r4
 8001b16:	028a      	lsls	r2, r1, #10
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b1e:	2200      	movs	r2, #0
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b28:	f7fe fbd4 	bl	80002d4 <__aeabi_uldivmod>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4613      	mov	r3, r2
 8001b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b34:	e058      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b36:	4b38      	ldr	r3, [pc, #224]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	099b      	lsrs	r3, r3, #6
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	4611      	mov	r1, r2
 8001b42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b46:	623b      	str	r3, [r7, #32]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b50:	4642      	mov	r2, r8
 8001b52:	464b      	mov	r3, r9
 8001b54:	f04f 0000 	mov.w	r0, #0
 8001b58:	f04f 0100 	mov.w	r1, #0
 8001b5c:	0159      	lsls	r1, r3, #5
 8001b5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b62:	0150      	lsls	r0, r2, #5
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4641      	mov	r1, r8
 8001b6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b6e:	4649      	mov	r1, r9
 8001b70:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b88:	ebb2 040a 	subs.w	r4, r2, sl
 8001b8c:	eb63 050b 	sbc.w	r5, r3, fp
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	00eb      	lsls	r3, r5, #3
 8001b9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b9e:	00e2      	lsls	r2, r4, #3
 8001ba0:	4614      	mov	r4, r2
 8001ba2:	461d      	mov	r5, r3
 8001ba4:	4643      	mov	r3, r8
 8001ba6:	18e3      	adds	r3, r4, r3
 8001ba8:	603b      	str	r3, [r7, #0]
 8001baa:	464b      	mov	r3, r9
 8001bac:	eb45 0303 	adc.w	r3, r5, r3
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	028b      	lsls	r3, r1, #10
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bc8:	4621      	mov	r1, r4
 8001bca:	028a      	lsls	r2, r1, #10
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	61fa      	str	r2, [r7, #28]
 8001bd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bdc:	f7fe fb7a 	bl	80002d4 <__aeabi_uldivmod>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4613      	mov	r3, r2
 8001be6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	0c1b      	lsrs	r3, r3, #16
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001bf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c02:	e002      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3750      	adds	r7, #80	; 0x50
 8001c10:	46bd      	mov	sp, r7
 8001c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	00f42400 	.word	0x00f42400

08001c20 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000000 	.word	0x20000000

08001c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c3c:	f7ff fff0 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	0a9b      	lsrs	r3, r3, #10
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	4903      	ldr	r1, [pc, #12]	; (8001c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c4e:	5ccb      	ldrb	r3, [r1, r3]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	080077e4 	.word	0x080077e4

08001c60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	220f      	movs	r2, #15
 8001c6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_RCC_GetClockConfig+0x5c>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0203 	and.w	r2, r3, #3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <HAL_RCC_GetClockConfig+0x5c>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <HAL_RCC_GetClockConfig+0x5c>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_RCC_GetClockConfig+0x5c>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	08db      	lsrs	r3, r3, #3
 8001c9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ca2:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <HAL_RCC_GetClockConfig+0x60>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 020f 	and.w	r2, r3, #15
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	601a      	str	r2, [r3, #0]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40023c00 	.word	0x40023c00

08001cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e049      	b.n	8001d6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d106      	bne.n	8001cf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f841 	bl	8001d72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	4619      	mov	r1, r3
 8001d02:	4610      	mov	r0, r2
 8001d04:	f000 f9e8 	bl	80020d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d001      	beq.n	8001da0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e054      	b.n	8001e4a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a26      	ldr	r2, [pc, #152]	; (8001e58 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d022      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x80>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dca:	d01d      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x80>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a22      	ldr	r2, [pc, #136]	; (8001e5c <HAL_TIM_Base_Start_IT+0xd4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d018      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x80>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a21      	ldr	r2, [pc, #132]	; (8001e60 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d013      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x80>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a1f      	ldr	r2, [pc, #124]	; (8001e64 <HAL_TIM_Base_Start_IT+0xdc>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d00e      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x80>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a1e      	ldr	r2, [pc, #120]	; (8001e68 <HAL_TIM_Base_Start_IT+0xe0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d009      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x80>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <HAL_TIM_Base_Start_IT+0xe4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d004      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x80>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a1b      	ldr	r2, [pc, #108]	; (8001e70 <HAL_TIM_Base_Start_IT+0xe8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d115      	bne.n	8001e34 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <HAL_TIM_Base_Start_IT+0xec>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b06      	cmp	r3, #6
 8001e18:	d015      	beq.n	8001e46 <HAL_TIM_Base_Start_IT+0xbe>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e20:	d011      	beq.n	8001e46 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0201 	orr.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e32:	e008      	b.n	8001e46 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	e000      	b.n	8001e48 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40010000 	.word	0x40010000
 8001e5c:	40000400 	.word	0x40000400
 8001e60:	40000800 	.word	0x40000800
 8001e64:	40000c00 	.word	0x40000c00
 8001e68:	40010400 	.word	0x40010400
 8001e6c:	40014000 	.word	0x40014000
 8001e70:	40001800 	.word	0x40001800
 8001e74:	00010007 	.word	0x00010007

08001e78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d020      	beq.n	8001edc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d01b      	beq.n	8001edc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0202 	mvn.w	r2, #2
 8001eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f8e9 	bl	800209a <HAL_TIM_IC_CaptureCallback>
 8001ec8:	e005      	b.n	8001ed6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f8db 	bl	8002086 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f8ec 	bl	80020ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d020      	beq.n	8001f28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d01b      	beq.n	8001f28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0204 	mvn.w	r2, #4
 8001ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2202      	movs	r2, #2
 8001efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f8c3 	bl	800209a <HAL_TIM_IC_CaptureCallback>
 8001f14:	e005      	b.n	8001f22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8b5 	bl	8002086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f8c6 	bl	80020ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d020      	beq.n	8001f74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d01b      	beq.n	8001f74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0208 	mvn.w	r2, #8
 8001f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2204      	movs	r2, #4
 8001f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f89d 	bl	800209a <HAL_TIM_IC_CaptureCallback>
 8001f60:	e005      	b.n	8001f6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f88f 	bl	8002086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f8a0 	bl	80020ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d020      	beq.n	8001fc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01b      	beq.n	8001fc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0210 	mvn.w	r2, #16
 8001f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2208      	movs	r2, #8
 8001f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f877 	bl	800209a <HAL_TIM_IC_CaptureCallback>
 8001fac:	e005      	b.n	8001fba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f869 	bl	8002086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f87a 	bl	80020ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00c      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d007      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0201 	mvn.w	r2, #1
 8001fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7fe fd30 	bl	8000a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d104      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00c      	beq.n	8002012 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800200a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f919 	bl	8002244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00c      	beq.n	8002036 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002022:	2b00      	cmp	r3, #0
 8002024:	d007      	beq.n	8002036 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800202e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f911 	bl	8002258 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00c      	beq.n	800205a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	d007      	beq.n	800205a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f834 	bl	80020c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f003 0320 	and.w	r3, r3, #32
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00c      	beq.n	800207e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b00      	cmp	r3, #0
 800206c:	d007      	beq.n	800207e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f06f 0220 	mvn.w	r2, #32
 8002076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f8d9 	bl	8002230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a46      	ldr	r2, [pc, #280]	; (8002204 <TIM_Base_SetConfig+0x12c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d013      	beq.n	8002118 <TIM_Base_SetConfig+0x40>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f6:	d00f      	beq.n	8002118 <TIM_Base_SetConfig+0x40>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a43      	ldr	r2, [pc, #268]	; (8002208 <TIM_Base_SetConfig+0x130>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d00b      	beq.n	8002118 <TIM_Base_SetConfig+0x40>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a42      	ldr	r2, [pc, #264]	; (800220c <TIM_Base_SetConfig+0x134>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d007      	beq.n	8002118 <TIM_Base_SetConfig+0x40>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a41      	ldr	r2, [pc, #260]	; (8002210 <TIM_Base_SetConfig+0x138>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d003      	beq.n	8002118 <TIM_Base_SetConfig+0x40>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a40      	ldr	r2, [pc, #256]	; (8002214 <TIM_Base_SetConfig+0x13c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d108      	bne.n	800212a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800211e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a35      	ldr	r2, [pc, #212]	; (8002204 <TIM_Base_SetConfig+0x12c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d02b      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002138:	d027      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a32      	ldr	r2, [pc, #200]	; (8002208 <TIM_Base_SetConfig+0x130>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d023      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a31      	ldr	r2, [pc, #196]	; (800220c <TIM_Base_SetConfig+0x134>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d01f      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a30      	ldr	r2, [pc, #192]	; (8002210 <TIM_Base_SetConfig+0x138>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01b      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a2f      	ldr	r2, [pc, #188]	; (8002214 <TIM_Base_SetConfig+0x13c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d017      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a2e      	ldr	r2, [pc, #184]	; (8002218 <TIM_Base_SetConfig+0x140>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a2d      	ldr	r2, [pc, #180]	; (800221c <TIM_Base_SetConfig+0x144>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00f      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a2c      	ldr	r2, [pc, #176]	; (8002220 <TIM_Base_SetConfig+0x148>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d00b      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a2b      	ldr	r2, [pc, #172]	; (8002224 <TIM_Base_SetConfig+0x14c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d007      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a2a      	ldr	r2, [pc, #168]	; (8002228 <TIM_Base_SetConfig+0x150>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d003      	beq.n	800218a <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a29      	ldr	r2, [pc, #164]	; (800222c <TIM_Base_SetConfig+0x154>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d108      	bne.n	800219c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a10      	ldr	r2, [pc, #64]	; (8002204 <TIM_Base_SetConfig+0x12c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d003      	beq.n	80021d0 <TIM_Base_SetConfig+0xf8>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a12      	ldr	r2, [pc, #72]	; (8002214 <TIM_Base_SetConfig+0x13c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d103      	bne.n	80021d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d105      	bne.n	80021f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f023 0201 	bic.w	r2, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	611a      	str	r2, [r3, #16]
  }
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40010000 	.word	0x40010000
 8002208:	40000400 	.word	0x40000400
 800220c:	40000800 	.word	0x40000800
 8002210:	40000c00 	.word	0x40000c00
 8002214:	40010400 	.word	0x40010400
 8002218:	40014000 	.word	0x40014000
 800221c:	40014400 	.word	0x40014400
 8002220:	40014800 	.word	0x40014800
 8002224:	40001800 	.word	0x40001800
 8002228:	40001c00 	.word	0x40001c00
 800222c:	40002000 	.word	0x40002000

08002230 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f103 0208 	add.w	r2, r3, #8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f04f 32ff 	mov.w	r2, #4294967295
 8002284:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f103 0208 	add.w	r2, r3, #8
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f103 0208 	add.w	r2, r3, #8
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022c6:	b480      	push	{r7}
 80022c8:	b085      	sub	sp, #20
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	601a      	str	r2, [r3, #0]
}
 8002302:	bf00      	nop
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800230e:	b480      	push	{r7}
 8002310:	b085      	sub	sp, #20
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d103      	bne.n	800232e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	e00c      	b.n	8002348 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3308      	adds	r3, #8
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	e002      	b.n	800233c <vListInsert+0x2e>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	429a      	cmp	r2, r3
 8002346:	d2f6      	bcs.n	8002336 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	601a      	str	r2, [r3, #0]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6892      	ldr	r2, [r2, #8]
 8002396:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6852      	ldr	r2, [r2, #4]
 80023a0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d103      	bne.n	80023b4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	1e5a      	subs	r2, r3, #1
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10a      	bne.n	80023fe <xQueueGenericReset+0x2a>
        __asm volatile
 80023e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ec:	f383 8811 	msr	BASEPRI, r3
 80023f0:	f3bf 8f6f 	isb	sy
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	60bb      	str	r3, [r7, #8]
    }
 80023fa:	bf00      	nop
 80023fc:	e7fe      	b.n	80023fc <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80023fe:	f002 f901 	bl	8004604 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240a:	68f9      	ldr	r1, [r7, #12]
 800240c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	441a      	add	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242e:	3b01      	subs	r3, #1
 8002430:	68f9      	ldr	r1, [r7, #12]
 8002432:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	441a      	add	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	22ff      	movs	r2, #255	; 0xff
 8002442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	22ff      	movs	r2, #255	; 0xff
 800244a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d114      	bne.n	800247e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d01a      	beq.n	8002492 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3310      	adds	r3, #16
 8002460:	4618      	mov	r0, r3
 8002462:	f001 f957 	bl	8003714 <xTaskRemoveFromEventList>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d012      	beq.n	8002492 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <xQueueGenericReset+0xcc>)
 800246e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	f3bf 8f4f 	dsb	sy
 8002478:	f3bf 8f6f 	isb	sy
 800247c:	e009      	b.n	8002492 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3310      	adds	r3, #16
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fef2 	bl	800226c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3324      	adds	r3, #36	; 0x24
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff feed 	bl	800226c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002492:	f002 f8e7 	bl	8004664 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002496:	2301      	movs	r3, #1
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	e000ed04 	.word	0xe000ed04

080024a4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08c      	sub	sp, #48	; 0x30
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	4613      	mov	r3, r2
 80024b0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10a      	bne.n	80024ce <xQueueGenericCreate+0x2a>
        __asm volatile
 80024b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024bc:	f383 8811 	msr	BASEPRI, r3
 80024c0:	f3bf 8f6f 	isb	sy
 80024c4:	f3bf 8f4f 	dsb	sy
 80024c8:	61bb      	str	r3, [r7, #24]
    }
 80024ca:	bf00      	nop
 80024cc:	e7fe      	b.n	80024cc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d006      	beq.n	80024ec <xQueueGenericCreate+0x48>
 80024de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d101      	bne.n	80024f0 <xQueueGenericCreate+0x4c>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <xQueueGenericCreate+0x4e>
 80024f0:	2300      	movs	r3, #0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10a      	bne.n	800250c <xQueueGenericCreate+0x68>
        __asm volatile
 80024f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fa:	f383 8811 	msr	BASEPRI, r3
 80024fe:	f3bf 8f6f 	isb	sy
 8002502:	f3bf 8f4f 	dsb	sy
 8002506:	617b      	str	r3, [r7, #20]
    }
 8002508:	bf00      	nop
 800250a:	e7fe      	b.n	800250a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002512:	d90a      	bls.n	800252a <xQueueGenericCreate+0x86>
        __asm volatile
 8002514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002518:	f383 8811 	msr	BASEPRI, r3
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	613b      	str	r3, [r7, #16]
    }
 8002526:	bf00      	nop
 8002528:	e7fe      	b.n	8002528 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	3350      	adds	r3, #80	; 0x50
 800252e:	4618      	mov	r0, r3
 8002530:	f002 f994 	bl	800485c <pvPortMalloc>
 8002534:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00d      	beq.n	8002558 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	3350      	adds	r3, #80	; 0x50
 8002544:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002546:	79fa      	ldrb	r2, [r7, #7]
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	4613      	mov	r3, r2
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f805 	bl	8002562 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002558:	6a3b      	ldr	r3, [r7, #32]
    }
 800255a:	4618      	mov	r0, r3
 800255c:	3728      	adds	r7, #40	; 0x28
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b084      	sub	sp, #16
 8002566:	af00      	add	r7, sp, #0
 8002568:	60f8      	str	r0, [r7, #12]
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d103      	bne.n	800257e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	e002      	b.n	8002584 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002590:	2101      	movs	r1, #1
 8002592:	69b8      	ldr	r0, [r7, #24]
 8002594:	f7ff ff1e 	bl	80023d4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	78fa      	ldrb	r2, [r7, #3]
 800259c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	68f9      	ldr	r1, [r7, #12]
 80025a6:	2073      	movs	r0, #115	; 0x73
 80025a8:	f004 f8fa 	bl	80067a0 <SEGGER_SYSVIEW_RecordU32x3>
}
 80025ac:	bf00      	nop
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b090      	sub	sp, #64	; 0x40
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80025c2:	2300      	movs	r3, #0
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80025ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10a      	bne.n	80025e6 <xQueueGenericSend+0x32>
        __asm volatile
 80025d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d4:	f383 8811 	msr	BASEPRI, r3
 80025d8:	f3bf 8f6f 	isb	sy
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80025e2:	bf00      	nop
 80025e4:	e7fe      	b.n	80025e4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d103      	bne.n	80025f4 <xQueueGenericSend+0x40>
 80025ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <xQueueGenericSend+0x44>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <xQueueGenericSend+0x46>
 80025f8:	2300      	movs	r3, #0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10a      	bne.n	8002614 <xQueueGenericSend+0x60>
        __asm volatile
 80025fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002602:	f383 8811 	msr	BASEPRI, r3
 8002606:	f3bf 8f6f 	isb	sy
 800260a:	f3bf 8f4f 	dsb	sy
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002610:	bf00      	nop
 8002612:	e7fe      	b.n	8002612 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d103      	bne.n	8002622 <xQueueGenericSend+0x6e>
 800261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <xQueueGenericSend+0x72>
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <xQueueGenericSend+0x74>
 8002626:	2300      	movs	r3, #0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10a      	bne.n	8002642 <xQueueGenericSend+0x8e>
        __asm volatile
 800262c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	623b      	str	r3, [r7, #32]
    }
 800263e:	bf00      	nop
 8002640:	e7fe      	b.n	8002640 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002642:	f001 fa07 	bl	8003a54 <xTaskGetSchedulerState>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d102      	bne.n	8002652 <xQueueGenericSend+0x9e>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <xQueueGenericSend+0xa2>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <xQueueGenericSend+0xa4>
 8002656:	2300      	movs	r3, #0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10a      	bne.n	8002672 <xQueueGenericSend+0xbe>
        __asm volatile
 800265c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002660:	f383 8811 	msr	BASEPRI, r3
 8002664:	f3bf 8f6f 	isb	sy
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	61fb      	str	r3, [r7, #28]
    }
 800266e:	bf00      	nop
 8002670:	e7fe      	b.n	8002670 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002672:	f001 ffc7 	bl	8004604 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800267a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267e:	429a      	cmp	r2, r3
 8002680:	d302      	bcc.n	8002688 <xQueueGenericSend+0xd4>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d136      	bne.n	80026f6 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268a:	4618      	mov	r0, r3
 800268c:	f004 fe16 	bl	80072bc <SEGGER_SYSVIEW_ShrinkId>
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	460b      	mov	r3, r1
 800269a:	4601      	mov	r1, r0
 800269c:	205a      	movs	r0, #90	; 0x5a
 800269e:	f004 f8f5 	bl	800688c <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026a8:	f000 fa78 	bl	8002b9c <prvCopyDataToQueue>
 80026ac:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d010      	beq.n	80026d8 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	3324      	adds	r3, #36	; 0x24
 80026ba:	4618      	mov	r0, r3
 80026bc:	f001 f82a 	bl	8003714 <xTaskRemoveFromEventList>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d013      	beq.n	80026ee <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80026c6:	4b4d      	ldr	r3, [pc, #308]	; (80027fc <xQueueGenericSend+0x248>)
 80026c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	f3bf 8f4f 	dsb	sy
 80026d2:	f3bf 8f6f 	isb	sy
 80026d6:	e00a      	b.n	80026ee <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80026d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80026de:	4b47      	ldr	r3, [pc, #284]	; (80027fc <xQueueGenericSend+0x248>)
 80026e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	f3bf 8f4f 	dsb	sy
 80026ea:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80026ee:	f001 ffb9 	bl	8004664 <vPortExitCritical>
                return pdPASS;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e07d      	b.n	80027f2 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d110      	bne.n	800271e <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026fc:	f001 ffb2 	bl	8004664 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002702:	4618      	mov	r0, r3
 8002704:	f004 fdda 	bl	80072bc <SEGGER_SYSVIEW_ShrinkId>
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	460b      	mov	r3, r1
 8002712:	4601      	mov	r1, r0
 8002714:	205a      	movs	r0, #90	; 0x5a
 8002716:	f004 f8b9 	bl	800688c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800271a:	2300      	movs	r3, #0
 800271c:	e069      	b.n	80027f2 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800271e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002720:	2b00      	cmp	r3, #0
 8002722:	d106      	bne.n	8002732 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	4618      	mov	r0, r3
 800272a:	f001 f859 	bl	80037e0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800272e:	2301      	movs	r3, #1
 8002730:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002732:	f001 ff97 	bl	8004664 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002736:	f000 fda5 	bl	8003284 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800273a:	f001 ff63 	bl	8004604 <vPortEnterCritical>
 800273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002740:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002744:	b25b      	sxtb	r3, r3
 8002746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274a:	d103      	bne.n	8002754 <xQueueGenericSend+0x1a0>
 800274c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800275a:	b25b      	sxtb	r3, r3
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002760:	d103      	bne.n	800276a <xQueueGenericSend+0x1b6>
 8002762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800276a:	f001 ff7b 	bl	8004664 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800276e:	1d3a      	adds	r2, r7, #4
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f001 f848 	bl	800380c <xTaskCheckForTimeOut>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d124      	bne.n	80027cc <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002782:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002784:	f000 fb02 	bl	8002d8c <prvIsQueueFull>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d018      	beq.n	80027c0 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800278e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002790:	3310      	adds	r3, #16
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f000 ff6a 	bl	8003670 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800279c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800279e:	f000 fa8d 	bl	8002cbc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80027a2:	f000 fd7d 	bl	80032a0 <xTaskResumeAll>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f47f af62 	bne.w	8002672 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80027ae:	4b13      	ldr	r3, [pc, #76]	; (80027fc <xQueueGenericSend+0x248>)
 80027b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	f3bf 8f6f 	isb	sy
 80027be:	e758      	b.n	8002672 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80027c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027c2:	f000 fa7b 	bl	8002cbc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80027c6:	f000 fd6b 	bl	80032a0 <xTaskResumeAll>
 80027ca:	e752      	b.n	8002672 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80027cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ce:	f000 fa75 	bl	8002cbc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80027d2:	f000 fd65 	bl	80032a0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80027d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d8:	4618      	mov	r0, r3
 80027da:	f004 fd6f 	bl	80072bc <SEGGER_SYSVIEW_ShrinkId>
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	460b      	mov	r3, r1
 80027e8:	4601      	mov	r1, r0
 80027ea:	205a      	movs	r0, #90	; 0x5a
 80027ec:	f004 f84e 	bl	800688c <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80027f0:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3738      	adds	r7, #56	; 0x38
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	e000ed04 	.word	0xe000ed04

08002800 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b090      	sub	sp, #64	; 0x40
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
 800280c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10a      	bne.n	800282e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281c:	f383 8811 	msr	BASEPRI, r3
 8002820:	f3bf 8f6f 	isb	sy
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800282a:	bf00      	nop
 800282c:	e7fe      	b.n	800282c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d103      	bne.n	800283c <xQueueGenericSendFromISR+0x3c>
 8002834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <xQueueGenericSendFromISR+0x40>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <xQueueGenericSendFromISR+0x42>
 8002840:	2300      	movs	r3, #0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10a      	bne.n	800285c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284a:	f383 8811 	msr	BASEPRI, r3
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	f3bf 8f4f 	dsb	sy
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002858:	bf00      	nop
 800285a:	e7fe      	b.n	800285a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d103      	bne.n	800286a <xQueueGenericSendFromISR+0x6a>
 8002862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <xQueueGenericSendFromISR+0x6e>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <xQueueGenericSendFromISR+0x70>
 800286e:	2300      	movs	r3, #0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10a      	bne.n	800288a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	623b      	str	r3, [r7, #32]
    }
 8002886:	bf00      	nop
 8002888:	e7fe      	b.n	8002888 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800288a:	f001 ffa7 	bl	80047dc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800288e:	f3ef 8211 	mrs	r2, BASEPRI
 8002892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002896:	f383 8811 	msr	BASEPRI, r3
 800289a:	f3bf 8f6f 	isb	sy
 800289e:	f3bf 8f4f 	dsb	sy
 80028a2:	61fa      	str	r2, [r7, #28]
 80028a4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80028a6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80028a8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d302      	bcc.n	80028bc <xQueueGenericSendFromISR+0xbc>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d148      	bne.n	800294e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80028bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80028cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ce:	4618      	mov	r0, r3
 80028d0:	f004 fcf4 	bl	80072bc <SEGGER_SYSVIEW_ShrinkId>
 80028d4:	4601      	mov	r1, r0
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	461a      	mov	r2, r3
 80028da:	2060      	movs	r0, #96	; 0x60
 80028dc:	f003 ff06 	bl	80066ec <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80028e6:	f000 f959 	bl	8002b9c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80028ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f2:	d112      	bne.n	800291a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d025      	beq.n	8002948 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fe:	3324      	adds	r3, #36	; 0x24
 8002900:	4618      	mov	r0, r3
 8002902:	f000 ff07 	bl	8003714 <xTaskRemoveFromEventList>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01d      	beq.n	8002948 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d01a      	beq.n	8002948 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	e016      	b.n	8002948 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800291a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800291e:	2b7f      	cmp	r3, #127	; 0x7f
 8002920:	d10a      	bne.n	8002938 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002926:	f383 8811 	msr	BASEPRI, r3
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	617b      	str	r3, [r7, #20]
    }
 8002934:	bf00      	nop
 8002936:	e7fe      	b.n	8002936 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002938:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800293c:	3301      	adds	r3, #1
 800293e:	b2db      	uxtb	r3, r3
 8002940:	b25a      	sxtb	r2, r3
 8002942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002948:	2301      	movs	r3, #1
 800294a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800294c:	e00b      	b.n	8002966 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800294e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002950:	4618      	mov	r0, r3
 8002952:	f004 fcb3 	bl	80072bc <SEGGER_SYSVIEW_ShrinkId>
 8002956:	4601      	mov	r1, r0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	461a      	mov	r2, r3
 800295c:	2060      	movs	r0, #96	; 0x60
 800295e:	f003 fec5 	bl	80066ec <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002962:	2300      	movs	r3, #0
 8002964:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002968:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002970:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002974:	4618      	mov	r0, r3
 8002976:	3740      	adds	r7, #64	; 0x40
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800297c:	b590      	push	{r4, r7, lr}
 800297e:	b08f      	sub	sp, #60	; 0x3c
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002988:	2300      	movs	r3, #0
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10a      	bne.n	80029ac <xQueueReceive+0x30>
        __asm volatile
 8002996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299a:	f383 8811 	msr	BASEPRI, r3
 800299e:	f3bf 8f6f 	isb	sy
 80029a2:	f3bf 8f4f 	dsb	sy
 80029a6:	623b      	str	r3, [r7, #32]
    }
 80029a8:	bf00      	nop
 80029aa:	e7fe      	b.n	80029aa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d103      	bne.n	80029ba <xQueueReceive+0x3e>
 80029b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <xQueueReceive+0x42>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <xQueueReceive+0x44>
 80029be:	2300      	movs	r3, #0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <xQueueReceive+0x5e>
        __asm volatile
 80029c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c8:	f383 8811 	msr	BASEPRI, r3
 80029cc:	f3bf 8f6f 	isb	sy
 80029d0:	f3bf 8f4f 	dsb	sy
 80029d4:	61fb      	str	r3, [r7, #28]
    }
 80029d6:	bf00      	nop
 80029d8:	e7fe      	b.n	80029d8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029da:	f001 f83b 	bl	8003a54 <xTaskGetSchedulerState>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d102      	bne.n	80029ea <xQueueReceive+0x6e>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <xQueueReceive+0x72>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <xQueueReceive+0x74>
 80029ee:	2300      	movs	r3, #0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <xQueueReceive+0x8e>
        __asm volatile
 80029f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f8:	f383 8811 	msr	BASEPRI, r3
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	61bb      	str	r3, [r7, #24]
    }
 8002a06:	bf00      	nop
 8002a08:	e7fe      	b.n	8002a08 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a0a:	f001 fdfb 	bl	8004604 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d02f      	beq.n	8002a7a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a1e:	f000 f927 	bl	8002c70 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a24:	4618      	mov	r0, r3
 8002a26:	f004 fc49 	bl	80072bc <SEGGER_SYSVIEW_ShrinkId>
 8002a2a:	4604      	mov	r4, r0
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f004 fc45 	bl	80072bc <SEGGER_SYSVIEW_ShrinkId>
 8002a32:	4602      	mov	r2, r0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2101      	movs	r1, #1
 8002a38:	9100      	str	r1, [sp, #0]
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	205c      	movs	r0, #92	; 0x5c
 8002a3e:	f003 ff25 	bl	800688c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	1e5a      	subs	r2, r3, #1
 8002a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a48:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00f      	beq.n	8002a72 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a54:	3310      	adds	r3, #16
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fe5c 	bl	8003714 <xTaskRemoveFromEventList>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d007      	beq.n	8002a72 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002a62:	4b4d      	ldr	r3, [pc, #308]	; (8002b98 <xQueueReceive+0x21c>)
 8002a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002a72:	f001 fdf7 	bl	8004664 <vPortExitCritical>
                return pdPASS;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e08a      	b.n	8002b90 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d113      	bne.n	8002aa8 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002a80:	f001 fdf0 	bl	8004664 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a86:	4618      	mov	r0, r3
 8002a88:	f004 fc18 	bl	80072bc <SEGGER_SYSVIEW_ShrinkId>
 8002a8c:	4604      	mov	r4, r0
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f004 fc14 	bl	80072bc <SEGGER_SYSVIEW_ShrinkId>
 8002a94:	4602      	mov	r2, r0
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2101      	movs	r1, #1
 8002a9a:	9100      	str	r1, [sp, #0]
 8002a9c:	4621      	mov	r1, r4
 8002a9e:	205c      	movs	r0, #92	; 0x5c
 8002aa0:	f003 fef4 	bl	800688c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e073      	b.n	8002b90 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002aae:	f107 0310 	add.w	r3, r7, #16
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fe94 	bl	80037e0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002abc:	f001 fdd2 	bl	8004664 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002ac0:	f000 fbe0 	bl	8003284 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002ac4:	f001 fd9e 	bl	8004604 <vPortEnterCritical>
 8002ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ace:	b25b      	sxtb	r3, r3
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d103      	bne.n	8002ade <xQueueReceive+0x162>
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ae4:	b25b      	sxtb	r3, r3
 8002ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aea:	d103      	bne.n	8002af4 <xQueueReceive+0x178>
 8002aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002af4:	f001 fdb6 	bl	8004664 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002af8:	1d3a      	adds	r2, r7, #4
 8002afa:	f107 0310 	add.w	r3, r7, #16
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fe83 	bl	800380c <xTaskCheckForTimeOut>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d124      	bne.n	8002b56 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b0e:	f000 f927 	bl	8002d60 <prvIsQueueEmpty>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d018      	beq.n	8002b4a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1a:	3324      	adds	r3, #36	; 0x24
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 fda5 	bl	8003670 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b28:	f000 f8c8 	bl	8002cbc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b2c:	f000 fbb8 	bl	80032a0 <xTaskResumeAll>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f47f af69 	bne.w	8002a0a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002b38:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <xQueueReceive+0x21c>)
 8002b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	e75f      	b.n	8002a0a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002b4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b4c:	f000 f8b6 	bl	8002cbc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b50:	f000 fba6 	bl	80032a0 <xTaskResumeAll>
 8002b54:	e759      	b.n	8002a0a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b58:	f000 f8b0 	bl	8002cbc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b5c:	f000 fba0 	bl	80032a0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b62:	f000 f8fd 	bl	8002d60 <prvIsQueueEmpty>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f43f af4e 	beq.w	8002a0a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	4618      	mov	r0, r3
 8002b72:	f004 fba3 	bl	80072bc <SEGGER_SYSVIEW_ShrinkId>
 8002b76:	4604      	mov	r4, r0
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f004 fb9f 	bl	80072bc <SEGGER_SYSVIEW_ShrinkId>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2101      	movs	r1, #1
 8002b84:	9100      	str	r1, [sp, #0]
 8002b86:	4621      	mov	r1, r4
 8002b88:	205c      	movs	r0, #92	; 0x5c
 8002b8a:	f003 fe7f 	bl	800688c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002b8e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3734      	adds	r7, #52	; 0x34
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd90      	pop	{r4, r7, pc}
 8002b98:	e000ed04 	.word	0xe000ed04

08002b9c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10d      	bne.n	8002bd6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d14d      	bne.n	8002c5e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 ff62 	bl	8003a90 <xTaskPriorityDisinherit>
 8002bcc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	e043      	b.n	8002c5e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d119      	bne.n	8002c10 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6858      	ldr	r0, [r3, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	461a      	mov	r2, r3
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	f004 fd30 	bl	800764c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	441a      	add	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d32b      	bcc.n	8002c5e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	e026      	b.n	8002c5e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	68d8      	ldr	r0, [r3, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	f004 fd16 	bl	800764c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	425b      	negs	r3, r3
 8002c2a:	441a      	add	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d207      	bcs.n	8002c4c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	425b      	negs	r3, r3
 8002c46:	441a      	add	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d105      	bne.n	8002c5e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002c66:	697b      	ldr	r3, [r7, #20]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d018      	beq.n	8002cb4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	441a      	add	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d303      	bcc.n	8002ca4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68d9      	ldr	r1, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	461a      	mov	r2, r3
 8002cae:	6838      	ldr	r0, [r7, #0]
 8002cb0:	f004 fccc 	bl	800764c <memcpy>
    }
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002cc4:	f001 fc9e 	bl	8004604 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cce:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cd0:	e011      	b.n	8002cf6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d012      	beq.n	8002d00 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3324      	adds	r3, #36	; 0x24
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fd18 	bl	8003714 <xTaskRemoveFromEventList>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002cea:	f000 fdf5 	bl	80038d8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	dce9      	bgt.n	8002cd2 <prvUnlockQueue+0x16>
 8002cfe:	e000      	b.n	8002d02 <prvUnlockQueue+0x46>
                        break;
 8002d00:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	22ff      	movs	r2, #255	; 0xff
 8002d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002d0a:	f001 fcab 	bl	8004664 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d0e:	f001 fc79 	bl	8004604 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d18:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d1a:	e011      	b.n	8002d40 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d012      	beq.n	8002d4a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3310      	adds	r3, #16
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fcf3 	bl	8003714 <xTaskRemoveFromEventList>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002d34:	f000 fdd0 	bl	80038d8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d38:	7bbb      	ldrb	r3, [r7, #14]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	dce9      	bgt.n	8002d1c <prvUnlockQueue+0x60>
 8002d48:	e000      	b.n	8002d4c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002d4a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	22ff      	movs	r2, #255	; 0xff
 8002d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002d54:	f001 fc86 	bl	8004664 <vPortExitCritical>
}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d68:	f001 fc4c 	bl	8004604 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d102      	bne.n	8002d7a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002d74:	2301      	movs	r3, #1
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	e001      	b.n	8002d7e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d7e:	f001 fc71 	bl	8004664 <vPortExitCritical>

    return xReturn;
 8002d82:	68fb      	ldr	r3, [r7, #12]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d94:	f001 fc36 	bl	8004604 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d102      	bne.n	8002daa <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002da4:	2301      	movs	r3, #1
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	e001      	b.n	8002dae <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002dae:	f001 fc59 	bl	8004664 <vPortExitCritical>

    return xReturn;
 8002db2:	68fb      	ldr	r3, [r7, #12]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	e01e      	b.n	8002e0a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002dcc:	4a13      	ldr	r2, [pc, #76]	; (8002e1c <vQueueAddToRegistry+0x60>)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d115      	bne.n	8002e04 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002dd8:	4910      	ldr	r1, [pc, #64]	; (8002e1c <vQueueAddToRegistry+0x60>)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002de2:	4a0e      	ldr	r2, [pc, #56]	; (8002e1c <vQueueAddToRegistry+0x60>)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4413      	add	r3, r2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f004 fa63 	bl	80072bc <SEGGER_SYSVIEW_ShrinkId>
 8002df6:	4601      	mov	r1, r0
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2071      	movs	r0, #113	; 0x71
 8002dfe:	f003 fc75 	bl	80066ec <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002e02:	e006      	b.n	8002e12 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	3301      	adds	r3, #1
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b07      	cmp	r3, #7
 8002e0e:	d9dd      	bls.n	8002dcc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002e10:	bf00      	nop
 8002e12:	bf00      	nop
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000088 	.word	0x20000088

08002e20 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002e30:	f001 fbe8 	bl	8004604 <vPortEnterCritical>
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e3a:	b25b      	sxtb	r3, r3
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e40:	d103      	bne.n	8002e4a <vQueueWaitForMessageRestricted+0x2a>
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e50:	b25b      	sxtb	r3, r3
 8002e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e56:	d103      	bne.n	8002e60 <vQueueWaitForMessageRestricted+0x40>
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e60:	f001 fc00 	bl	8004664 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d106      	bne.n	8002e7a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	3324      	adds	r3, #36	; 0x24
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	68b9      	ldr	r1, [r7, #8]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fc1f 	bl	80036b8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002e7a:	6978      	ldr	r0, [r7, #20]
 8002e7c:	f7ff ff1e 	bl	8002cbc <prvUnlockQueue>
    }
 8002e80:	bf00      	nop
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08c      	sub	sp, #48	; 0x30
 8002e8c:	af04      	add	r7, sp, #16
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	4613      	mov	r3, r2
 8002e96:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e98:	88fb      	ldrh	r3, [r7, #6]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f001 fcdd 	bl	800485c <pvPortMalloc>
 8002ea2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00e      	beq.n	8002ec8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002eaa:	2058      	movs	r0, #88	; 0x58
 8002eac:	f001 fcd6 	bl	800485c <pvPortMalloc>
 8002eb0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	631a      	str	r2, [r3, #48]	; 0x30
 8002ebe:	e005      	b.n	8002ecc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002ec0:	6978      	ldr	r0, [r7, #20]
 8002ec2:	f001 fdab 	bl	8004a1c <vPortFree>
 8002ec6:	e001      	b.n	8002ecc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d013      	beq.n	8002efa <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ed2:	88fa      	ldrh	r2, [r7, #6]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	9303      	str	r3, [sp, #12]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	9302      	str	r3, [sp, #8]
 8002edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ede:	9301      	str	r3, [sp, #4]
 8002ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f80e 	bl	8002f0a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002eee:	69f8      	ldr	r0, [r7, #28]
 8002ef0:	f000 f8a2 	bl	8003038 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	61bb      	str	r3, [r7, #24]
 8002ef8:	e002      	b.n	8002f00 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002efa:	f04f 33ff 	mov.w	r3, #4294967295
 8002efe:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002f00:	69bb      	ldr	r3, [r7, #24]
    }
 8002f02:	4618      	mov	r0, r3
 8002f04:	3720      	adds	r7, #32
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b088      	sub	sp, #32
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
 8002f16:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	461a      	mov	r2, r3
 8002f22:	21a5      	movs	r1, #165	; 0xa5
 8002f24:	f004 fba0 	bl	8007668 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002f32:	440b      	add	r3, r1
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	f023 0307 	bic.w	r3, r3, #7
 8002f40:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f50:	f383 8811 	msr	BASEPRI, r3
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	617b      	str	r3, [r7, #20]
    }
 8002f5e:	bf00      	nop
 8002f60:	e7fe      	b.n	8002f60 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d01f      	beq.n	8002fa8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61fb      	str	r3, [r7, #28]
 8002f6c:	e012      	b.n	8002f94 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	4413      	add	r3, r2
 8002f74:	7819      	ldrb	r1, [r3, #0]
 8002f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3334      	adds	r3, #52	; 0x34
 8002f7e:	460a      	mov	r2, r1
 8002f80:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	4413      	add	r3, r2
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d006      	beq.n	8002f9c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	3301      	adds	r3, #1
 8002f92:	61fb      	str	r3, [r7, #28]
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	2b09      	cmp	r3, #9
 8002f98:	d9e9      	bls.n	8002f6e <prvInitialiseNewTask+0x64>
 8002f9a:	e000      	b.n	8002f9e <prvInitialiseNewTask+0x94>
            {
                break;
 8002f9c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002fa6:	e003      	b.n	8002fb0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d901      	bls.n	8002fba <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002fb6:	2304      	movs	r3, #4
 8002fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fbe:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fc4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	2200      	movs	r2, #0
 8002fca:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fce:	3304      	adds	r3, #4
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff f96b 	bl	80022ac <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	3318      	adds	r3, #24
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff f966 	bl	80022ac <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fe4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe8:	f1c3 0205 	rsb	r2, r3, #5
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ff4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff8:	3350      	adds	r3, #80	; 0x50
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4618      	mov	r0, r3
 8003000:	f004 fb32 	bl	8007668 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003006:	3354      	adds	r3, #84	; 0x54
 8003008:	2201      	movs	r2, #1
 800300a:	2100      	movs	r1, #0
 800300c:	4618      	mov	r0, r3
 800300e:	f004 fb2b 	bl	8007668 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	68f9      	ldr	r1, [r7, #12]
 8003016:	69b8      	ldr	r0, [r7, #24]
 8003018:	f001 f944 	bl	80042a4 <pxPortInitialiseStack>
 800301c:	4602      	mov	r2, r0
 800301e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003020:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800302c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800302e:	bf00      	nop
 8003030:	3720      	adds	r7, #32
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003038:	b5b0      	push	{r4, r5, r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af02      	add	r7, sp, #8
 800303e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003040:	f001 fae0 	bl	8004604 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003044:	4b3b      	ldr	r3, [pc, #236]	; (8003134 <prvAddNewTaskToReadyList+0xfc>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3301      	adds	r3, #1
 800304a:	4a3a      	ldr	r2, [pc, #232]	; (8003134 <prvAddNewTaskToReadyList+0xfc>)
 800304c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800304e:	4b3a      	ldr	r3, [pc, #232]	; (8003138 <prvAddNewTaskToReadyList+0x100>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d109      	bne.n	800306a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003056:	4a38      	ldr	r2, [pc, #224]	; (8003138 <prvAddNewTaskToReadyList+0x100>)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800305c:	4b35      	ldr	r3, [pc, #212]	; (8003134 <prvAddNewTaskToReadyList+0xfc>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d110      	bne.n	8003086 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003064:	f000 fc5c 	bl	8003920 <prvInitialiseTaskLists>
 8003068:	e00d      	b.n	8003086 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800306a:	4b34      	ldr	r3, [pc, #208]	; (800313c <prvAddNewTaskToReadyList+0x104>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003072:	4b31      	ldr	r3, [pc, #196]	; (8003138 <prvAddNewTaskToReadyList+0x100>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	429a      	cmp	r2, r3
 800307e:	d802      	bhi.n	8003086 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003080:	4a2d      	ldr	r2, [pc, #180]	; (8003138 <prvAddNewTaskToReadyList+0x100>)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003086:	4b2e      	ldr	r3, [pc, #184]	; (8003140 <prvAddNewTaskToReadyList+0x108>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3301      	adds	r3, #1
 800308c:	4a2c      	ldr	r2, [pc, #176]	; (8003140 <prvAddNewTaskToReadyList+0x108>)
 800308e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003090:	4b2b      	ldr	r3, [pc, #172]	; (8003140 <prvAddNewTaskToReadyList+0x108>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d016      	beq.n	80030cc <prvAddNewTaskToReadyList+0x94>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f003 ffe5 	bl	8007070 <SEGGER_SYSVIEW_OnTaskCreate>
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	461d      	mov	r5, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	461c      	mov	r4, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	1ae3      	subs	r3, r4, r3
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	462b      	mov	r3, r5
 80030c8:	f001 fe76 	bl	8004db8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f004 f852 	bl	8007178 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	2201      	movs	r2, #1
 80030da:	409a      	lsls	r2, r3
 80030dc:	4b19      	ldr	r3, [pc, #100]	; (8003144 <prvAddNewTaskToReadyList+0x10c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	4a18      	ldr	r2, [pc, #96]	; (8003144 <prvAddNewTaskToReadyList+0x10c>)
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4a15      	ldr	r2, [pc, #84]	; (8003148 <prvAddNewTaskToReadyList+0x110>)
 80030f4:	441a      	add	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3304      	adds	r3, #4
 80030fa:	4619      	mov	r1, r3
 80030fc:	4610      	mov	r0, r2
 80030fe:	f7ff f8e2 	bl	80022c6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003102:	f001 faaf 	bl	8004664 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003106:	4b0d      	ldr	r3, [pc, #52]	; (800313c <prvAddNewTaskToReadyList+0x104>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00e      	beq.n	800312c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800310e:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <prvAddNewTaskToReadyList+0x100>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	429a      	cmp	r2, r3
 800311a:	d207      	bcs.n	800312c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <prvAddNewTaskToReadyList+0x114>)
 800311e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800312c:	bf00      	nop
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bdb0      	pop	{r4, r5, r7, pc}
 8003134:	200001a0 	.word	0x200001a0
 8003138:	200000c8 	.word	0x200000c8
 800313c:	200001ac 	.word	0x200001ac
 8003140:	200001bc 	.word	0x200001bc
 8003144:	200001a8 	.word	0x200001a8
 8003148:	200000cc 	.word	0x200000cc
 800314c:	e000ed04 	.word	0xe000ed04

08003150 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d01b      	beq.n	800319a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <vTaskDelay+0x68>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <vTaskDelay+0x30>
        __asm volatile
 800316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	60bb      	str	r3, [r7, #8]
    }
 800317c:	bf00      	nop
 800317e:	e7fe      	b.n	800317e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003180:	f000 f880 	bl	8003284 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	2023      	movs	r0, #35	; 0x23
 8003188:	f003 fa74 	bl	8006674 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800318c:	2100      	movs	r1, #0
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fcfe 	bl	8003b90 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003194:	f000 f884 	bl	80032a0 <xTaskResumeAll>
 8003198:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d107      	bne.n	80031b0 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80031a0:	4b06      	ldr	r3, [pc, #24]	; (80031bc <vTaskDelay+0x6c>)
 80031a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80031b0:	bf00      	nop
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	200001c8 	.word	0x200001c8
 80031bc:	e000ed04 	.word	0xe000ed04

080031c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80031c6:	4b27      	ldr	r3, [pc, #156]	; (8003264 <vTaskStartScheduler+0xa4>)
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	2300      	movs	r3, #0
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	2300      	movs	r3, #0
 80031d0:	2282      	movs	r2, #130	; 0x82
 80031d2:	4925      	ldr	r1, [pc, #148]	; (8003268 <vTaskStartScheduler+0xa8>)
 80031d4:	4825      	ldr	r0, [pc, #148]	; (800326c <vTaskStartScheduler+0xac>)
 80031d6:	f7ff fe57 	bl	8002e88 <xTaskCreate>
 80031da:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d102      	bne.n	80031e8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80031e2:	f000 fd4d 	bl	8003c80 <xTimerCreateTimerTask>
 80031e6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d124      	bne.n	8003238 <vTaskStartScheduler+0x78>
        __asm volatile
 80031ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f2:	f383 8811 	msr	BASEPRI, r3
 80031f6:	f3bf 8f6f 	isb	sy
 80031fa:	f3bf 8f4f 	dsb	sy
 80031fe:	60bb      	str	r3, [r7, #8]
    }
 8003200:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003202:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <vTaskStartScheduler+0xb0>)
 8003204:	f04f 32ff 	mov.w	r2, #4294967295
 8003208:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800320a:	4b1a      	ldr	r3, [pc, #104]	; (8003274 <vTaskStartScheduler+0xb4>)
 800320c:	2201      	movs	r2, #1
 800320e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003210:	4b19      	ldr	r3, [pc, #100]	; (8003278 <vTaskStartScheduler+0xb8>)
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003216:	4b19      	ldr	r3, [pc, #100]	; (800327c <vTaskStartScheduler+0xbc>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	4b12      	ldr	r3, [pc, #72]	; (8003264 <vTaskStartScheduler+0xa4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d102      	bne.n	8003228 <vTaskStartScheduler+0x68>
 8003222:	f003 ff09 	bl	8007038 <SEGGER_SYSVIEW_OnIdle>
 8003226:	e004      	b.n	8003232 <vTaskStartScheduler+0x72>
 8003228:	4b14      	ldr	r3, [pc, #80]	; (800327c <vTaskStartScheduler+0xbc>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f003 ff61 	bl	80070f4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003232:	f001 f8c7 	bl	80043c4 <xPortStartScheduler>
 8003236:	e00e      	b.n	8003256 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323e:	d10a      	bne.n	8003256 <vTaskStartScheduler+0x96>
        __asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	607b      	str	r3, [r7, #4]
    }
 8003252:	bf00      	nop
 8003254:	e7fe      	b.n	8003254 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <vTaskStartScheduler+0xc0>)
 8003258:	681b      	ldr	r3, [r3, #0]
}
 800325a:	bf00      	nop
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	200001c4 	.word	0x200001c4
 8003268:	080076fc 	.word	0x080076fc
 800326c:	080038f1 	.word	0x080038f1
 8003270:	200001c0 	.word	0x200001c0
 8003274:	200001ac 	.word	0x200001ac
 8003278:	200001a4 	.word	0x200001a4
 800327c:	200000c8 	.word	0x200000c8
 8003280:	2000000c 	.word	0x2000000c

08003284 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003288:	4b04      	ldr	r3, [pc, #16]	; (800329c <vTaskSuspendAll+0x18>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3301      	adds	r3, #1
 800328e:	4a03      	ldr	r2, [pc, #12]	; (800329c <vTaskSuspendAll+0x18>)
 8003290:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003292:	bf00      	nop
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	200001c8 	.word	0x200001c8

080032a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80032aa:	2300      	movs	r3, #0
 80032ac:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80032ae:	4b43      	ldr	r3, [pc, #268]	; (80033bc <xTaskResumeAll+0x11c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <xTaskResumeAll+0x2c>
        __asm volatile
 80032b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ba:	f383 8811 	msr	BASEPRI, r3
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	603b      	str	r3, [r7, #0]
    }
 80032c8:	bf00      	nop
 80032ca:	e7fe      	b.n	80032ca <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80032cc:	f001 f99a 	bl	8004604 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80032d0:	4b3a      	ldr	r3, [pc, #232]	; (80033bc <xTaskResumeAll+0x11c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3b01      	subs	r3, #1
 80032d6:	4a39      	ldr	r2, [pc, #228]	; (80033bc <xTaskResumeAll+0x11c>)
 80032d8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032da:	4b38      	ldr	r3, [pc, #224]	; (80033bc <xTaskResumeAll+0x11c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d165      	bne.n	80033ae <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032e2:	4b37      	ldr	r3, [pc, #220]	; (80033c0 <xTaskResumeAll+0x120>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d061      	beq.n	80033ae <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032ea:	e032      	b.n	8003352 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032ec:	4b35      	ldr	r3, [pc, #212]	; (80033c4 <xTaskResumeAll+0x124>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	3318      	adds	r3, #24
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff f841 	bl	8002380 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	3304      	adds	r3, #4
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff f83c 	bl	8002380 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4618      	mov	r0, r3
 800330c:	f003 ff34 	bl	8007178 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	2201      	movs	r2, #1
 8003316:	409a      	lsls	r2, r3
 8003318:	4b2b      	ldr	r3, [pc, #172]	; (80033c8 <xTaskResumeAll+0x128>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4313      	orrs	r3, r2
 800331e:	4a2a      	ldr	r2, [pc, #168]	; (80033c8 <xTaskResumeAll+0x128>)
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4a27      	ldr	r2, [pc, #156]	; (80033cc <xTaskResumeAll+0x12c>)
 8003330:	441a      	add	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	3304      	adds	r3, #4
 8003336:	4619      	mov	r1, r3
 8003338:	4610      	mov	r0, r2
 800333a:	f7fe ffc4 	bl	80022c6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003342:	4b23      	ldr	r3, [pc, #140]	; (80033d0 <xTaskResumeAll+0x130>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	429a      	cmp	r2, r3
 800334a:	d302      	bcc.n	8003352 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800334c:	4b21      	ldr	r3, [pc, #132]	; (80033d4 <xTaskResumeAll+0x134>)
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003352:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <xTaskResumeAll+0x124>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1c8      	bne.n	80032ec <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003360:	f000 fb5c 	bl	8003a1c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003364:	4b1c      	ldr	r3, [pc, #112]	; (80033d8 <xTaskResumeAll+0x138>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d010      	beq.n	8003392 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003370:	f000 f858 	bl	8003424 <xTaskIncrementTick>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800337a:	4b16      	ldr	r3, [pc, #88]	; (80033d4 <xTaskResumeAll+0x134>)
 800337c:	2201      	movs	r2, #1
 800337e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3b01      	subs	r3, #1
 8003384:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f1      	bne.n	8003370 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800338c:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <xTaskResumeAll+0x138>)
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003392:	4b10      	ldr	r3, [pc, #64]	; (80033d4 <xTaskResumeAll+0x134>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d009      	beq.n	80033ae <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800339a:	2301      	movs	r3, #1
 800339c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800339e:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <xTaskResumeAll+0x13c>)
 80033a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80033ae:	f001 f959 	bl	8004664 <vPortExitCritical>

    return xAlreadyYielded;
 80033b2:	68bb      	ldr	r3, [r7, #8]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	200001c8 	.word	0x200001c8
 80033c0:	200001a0 	.word	0x200001a0
 80033c4:	20000160 	.word	0x20000160
 80033c8:	200001a8 	.word	0x200001a8
 80033cc:	200000cc 	.word	0x200000cc
 80033d0:	200000c8 	.word	0x200000c8
 80033d4:	200001b4 	.word	0x200001b4
 80033d8:	200001b0 	.word	0x200001b0
 80033dc:	e000ed04 	.word	0xe000ed04

080033e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <xTaskGetTickCount+0x1c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80033ec:	687b      	ldr	r3, [r7, #4]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	200001a4 	.word	0x200001a4

08003400 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003406:	f001 f9e9 	bl	80047dc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800340a:	2300      	movs	r3, #0
 800340c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800340e:	4b04      	ldr	r3, [pc, #16]	; (8003420 <xTaskGetTickCountFromISR+0x20>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003414:	683b      	ldr	r3, [r7, #0]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	200001a4 	.word	0x200001a4

08003424 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800342e:	4b50      	ldr	r3, [pc, #320]	; (8003570 <xTaskIncrementTick+0x14c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	f040 8092 	bne.w	800355c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003438:	4b4e      	ldr	r3, [pc, #312]	; (8003574 <xTaskIncrementTick+0x150>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3301      	adds	r3, #1
 800343e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003440:	4a4c      	ldr	r2, [pc, #304]	; (8003574 <xTaskIncrementTick+0x150>)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d120      	bne.n	800348e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800344c:	4b4a      	ldr	r3, [pc, #296]	; (8003578 <xTaskIncrementTick+0x154>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <xTaskIncrementTick+0x48>
        __asm volatile
 8003456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	603b      	str	r3, [r7, #0]
    }
 8003468:	bf00      	nop
 800346a:	e7fe      	b.n	800346a <xTaskIncrementTick+0x46>
 800346c:	4b42      	ldr	r3, [pc, #264]	; (8003578 <xTaskIncrementTick+0x154>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	4b42      	ldr	r3, [pc, #264]	; (800357c <xTaskIncrementTick+0x158>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a40      	ldr	r2, [pc, #256]	; (8003578 <xTaskIncrementTick+0x154>)
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	4a40      	ldr	r2, [pc, #256]	; (800357c <xTaskIncrementTick+0x158>)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4b3f      	ldr	r3, [pc, #252]	; (8003580 <xTaskIncrementTick+0x15c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3301      	adds	r3, #1
 8003486:	4a3e      	ldr	r2, [pc, #248]	; (8003580 <xTaskIncrementTick+0x15c>)
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	f000 fac7 	bl	8003a1c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800348e:	4b3d      	ldr	r3, [pc, #244]	; (8003584 <xTaskIncrementTick+0x160>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	429a      	cmp	r2, r3
 8003496:	d34c      	bcc.n	8003532 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003498:	4b37      	ldr	r3, [pc, #220]	; (8003578 <xTaskIncrementTick+0x154>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d104      	bne.n	80034ac <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034a2:	4b38      	ldr	r3, [pc, #224]	; (8003584 <xTaskIncrementTick+0x160>)
 80034a4:	f04f 32ff 	mov.w	r2, #4294967295
 80034a8:	601a      	str	r2, [r3, #0]
                    break;
 80034aa:	e042      	b.n	8003532 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034ac:	4b32      	ldr	r3, [pc, #200]	; (8003578 <xTaskIncrementTick+0x154>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d203      	bcs.n	80034cc <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80034c4:	4a2f      	ldr	r2, [pc, #188]	; (8003584 <xTaskIncrementTick+0x160>)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80034ca:	e032      	b.n	8003532 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	3304      	adds	r3, #4
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fe ff55 	bl	8002380 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d004      	beq.n	80034e8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	3318      	adds	r3, #24
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe ff4c 	bl	8002380 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f003 fe44 	bl	8007178 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	2201      	movs	r2, #1
 80034f6:	409a      	lsls	r2, r3
 80034f8:	4b23      	ldr	r3, [pc, #140]	; (8003588 <xTaskIncrementTick+0x164>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	4a22      	ldr	r2, [pc, #136]	; (8003588 <xTaskIncrementTick+0x164>)
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4a1f      	ldr	r2, [pc, #124]	; (800358c <xTaskIncrementTick+0x168>)
 8003510:	441a      	add	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	3304      	adds	r3, #4
 8003516:	4619      	mov	r1, r3
 8003518:	4610      	mov	r0, r2
 800351a:	f7fe fed4 	bl	80022c6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003522:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <xTaskIncrementTick+0x16c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	429a      	cmp	r2, r3
 800352a:	d3b5      	bcc.n	8003498 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800352c:	2301      	movs	r3, #1
 800352e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003530:	e7b2      	b.n	8003498 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003532:	4b17      	ldr	r3, [pc, #92]	; (8003590 <xTaskIncrementTick+0x16c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003538:	4914      	ldr	r1, [pc, #80]	; (800358c <xTaskIncrementTick+0x168>)
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d901      	bls.n	800354e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800354a:	2301      	movs	r3, #1
 800354c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800354e:	4b11      	ldr	r3, [pc, #68]	; (8003594 <xTaskIncrementTick+0x170>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003556:	2301      	movs	r3, #1
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	e004      	b.n	8003566 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800355c:	4b0e      	ldr	r3, [pc, #56]	; (8003598 <xTaskIncrementTick+0x174>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3301      	adds	r3, #1
 8003562:	4a0d      	ldr	r2, [pc, #52]	; (8003598 <xTaskIncrementTick+0x174>)
 8003564:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003566:	697b      	ldr	r3, [r7, #20]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	200001c8 	.word	0x200001c8
 8003574:	200001a4 	.word	0x200001a4
 8003578:	20000158 	.word	0x20000158
 800357c:	2000015c 	.word	0x2000015c
 8003580:	200001b8 	.word	0x200001b8
 8003584:	200001c0 	.word	0x200001c0
 8003588:	200001a8 	.word	0x200001a8
 800358c:	200000cc 	.word	0x200000cc
 8003590:	200000c8 	.word	0x200000c8
 8003594:	200001b4 	.word	0x200001b4
 8003598:	200001b0 	.word	0x200001b0

0800359c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035a2:	4b2d      	ldr	r3, [pc, #180]	; (8003658 <vTaskSwitchContext+0xbc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80035aa:	4b2c      	ldr	r3, [pc, #176]	; (800365c <vTaskSwitchContext+0xc0>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80035b0:	e04d      	b.n	800364e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80035b2:	4b2a      	ldr	r3, [pc, #168]	; (800365c <vTaskSwitchContext+0xc0>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035b8:	4b29      	ldr	r3, [pc, #164]	; (8003660 <vTaskSwitchContext+0xc4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	fab3 f383 	clz	r3, r3
 80035c4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80035c6:	7afb      	ldrb	r3, [r7, #11]
 80035c8:	f1c3 031f 	rsb	r3, r3, #31
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	4925      	ldr	r1, [pc, #148]	; (8003664 <vTaskSwitchContext+0xc8>)
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10a      	bne.n	80035f8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80035e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e6:	f383 8811 	msr	BASEPRI, r3
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	607b      	str	r3, [r7, #4]
    }
 80035f4:	bf00      	nop
 80035f6:	e7fe      	b.n	80035f6 <vTaskSwitchContext+0x5a>
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4a18      	ldr	r2, [pc, #96]	; (8003664 <vTaskSwitchContext+0xc8>)
 8003604:	4413      	add	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	3308      	adds	r3, #8
 800361a:	429a      	cmp	r2, r3
 800361c:	d104      	bne.n	8003628 <vTaskSwitchContext+0x8c>
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	605a      	str	r2, [r3, #4]
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	4a0e      	ldr	r2, [pc, #56]	; (8003668 <vTaskSwitchContext+0xcc>)
 8003630:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003632:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <vTaskSwitchContext+0xcc>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4b0d      	ldr	r3, [pc, #52]	; (800366c <vTaskSwitchContext+0xd0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d102      	bne.n	8003644 <vTaskSwitchContext+0xa8>
 800363e:	f003 fcfb 	bl	8007038 <SEGGER_SYSVIEW_OnIdle>
}
 8003642:	e004      	b.n	800364e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003644:	4b08      	ldr	r3, [pc, #32]	; (8003668 <vTaskSwitchContext+0xcc>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f003 fd53 	bl	80070f4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800364e:	bf00      	nop
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200001c8 	.word	0x200001c8
 800365c:	200001b4 	.word	0x200001b4
 8003660:	200001a8 	.word	0x200001a8
 8003664:	200000cc 	.word	0x200000cc
 8003668:	200000c8 	.word	0x200000c8
 800366c:	200001c4 	.word	0x200001c4

08003670 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10a      	bne.n	8003696 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	60fb      	str	r3, [r7, #12]
    }
 8003692:	bf00      	nop
 8003694:	e7fe      	b.n	8003694 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003696:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <vTaskPlaceOnEventList+0x44>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	3318      	adds	r3, #24
 800369c:	4619      	mov	r1, r3
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7fe fe35 	bl	800230e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036a4:	2101      	movs	r1, #1
 80036a6:	6838      	ldr	r0, [r7, #0]
 80036a8:	f000 fa72 	bl	8003b90 <prvAddCurrentTaskToDelayedList>
}
 80036ac:	bf00      	nop
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	200000c8 	.word	0x200000c8

080036b8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10a      	bne.n	80036e0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80036ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	617b      	str	r3, [r7, #20]
    }
 80036dc:	bf00      	nop
 80036de:	e7fe      	b.n	80036de <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036e0:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <vTaskPlaceOnEventListRestricted+0x58>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3318      	adds	r3, #24
 80036e6:	4619      	mov	r1, r3
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f7fe fdec 	bl	80022c6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80036f4:	f04f 33ff 	mov.w	r3, #4294967295
 80036f8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80036fa:	2024      	movs	r0, #36	; 0x24
 80036fc:	f002 ff9c 	bl	8006638 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	68b8      	ldr	r0, [r7, #8]
 8003704:	f000 fa44 	bl	8003b90 <prvAddCurrentTaskToDelayedList>
    }
 8003708:	bf00      	nop
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	200000c8 	.word	0x200000c8

08003714 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10a      	bne.n	8003740 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800372a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372e:	f383 8811 	msr	BASEPRI, r3
 8003732:	f3bf 8f6f 	isb	sy
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	60fb      	str	r3, [r7, #12]
    }
 800373c:	bf00      	nop
 800373e:	e7fe      	b.n	800373e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	3318      	adds	r3, #24
 8003744:	4618      	mov	r0, r3
 8003746:	f7fe fe1b 	bl	8002380 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800374a:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <xTaskRemoveFromEventList+0xb4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d120      	bne.n	8003794 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	3304      	adds	r3, #4
 8003756:	4618      	mov	r0, r3
 8003758:	f7fe fe12 	bl	8002380 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4618      	mov	r0, r3
 8003760:	f003 fd0a 	bl	8007178 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	2201      	movs	r2, #1
 800376a:	409a      	lsls	r2, r3
 800376c:	4b17      	ldr	r3, [pc, #92]	; (80037cc <xTaskRemoveFromEventList+0xb8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4313      	orrs	r3, r2
 8003772:	4a16      	ldr	r2, [pc, #88]	; (80037cc <xTaskRemoveFromEventList+0xb8>)
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4a13      	ldr	r2, [pc, #76]	; (80037d0 <xTaskRemoveFromEventList+0xbc>)
 8003784:	441a      	add	r2, r3
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	3304      	adds	r3, #4
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f7fe fd9a 	bl	80022c6 <vListInsertEnd>
 8003792:	e005      	b.n	80037a0 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	3318      	adds	r3, #24
 8003798:	4619      	mov	r1, r3
 800379a:	480e      	ldr	r0, [pc, #56]	; (80037d4 <xTaskRemoveFromEventList+0xc0>)
 800379c:	f7fe fd93 	bl	80022c6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a4:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <xTaskRemoveFromEventList+0xc4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d905      	bls.n	80037ba <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80037ae:	2301      	movs	r3, #1
 80037b0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80037b2:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <xTaskRemoveFromEventList+0xc8>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	e001      	b.n	80037be <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80037be:	697b      	ldr	r3, [r7, #20]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	200001c8 	.word	0x200001c8
 80037cc:	200001a8 	.word	0x200001a8
 80037d0:	200000cc 	.word	0x200000cc
 80037d4:	20000160 	.word	0x20000160
 80037d8:	200000c8 	.word	0x200000c8
 80037dc:	200001b4 	.word	0x200001b4

080037e0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <vTaskInternalSetTimeOutState+0x24>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <vTaskInternalSetTimeOutState+0x28>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	605a      	str	r2, [r3, #4]
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	200001b8 	.word	0x200001b8
 8003808:	200001a4 	.word	0x200001a4

0800380c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10a      	bne.n	8003832 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	613b      	str	r3, [r7, #16]
    }
 800382e:	bf00      	nop
 8003830:	e7fe      	b.n	8003830 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10a      	bne.n	800384e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	60fb      	str	r3, [r7, #12]
    }
 800384a:	bf00      	nop
 800384c:	e7fe      	b.n	800384c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800384e:	f000 fed9 	bl	8004604 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003852:	4b1f      	ldr	r3, [pc, #124]	; (80038d0 <xTaskCheckForTimeOut+0xc4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386a:	d102      	bne.n	8003872 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800386c:	2300      	movs	r3, #0
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	e026      	b.n	80038c0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	4b17      	ldr	r3, [pc, #92]	; (80038d4 <xTaskCheckForTimeOut+0xc8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d00a      	beq.n	8003894 <xTaskCheckForTimeOut+0x88>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	429a      	cmp	r2, r3
 8003886:	d305      	bcc.n	8003894 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003888:	2301      	movs	r3, #1
 800388a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	e015      	b.n	80038c0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	429a      	cmp	r2, r3
 800389c:	d20b      	bcs.n	80038b6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	1ad2      	subs	r2, r2, r3
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff ff98 	bl	80037e0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61fb      	str	r3, [r7, #28]
 80038b4:	e004      	b.n	80038c0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80038bc:	2301      	movs	r3, #1
 80038be:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80038c0:	f000 fed0 	bl	8004664 <vPortExitCritical>

    return xReturn;
 80038c4:	69fb      	ldr	r3, [r7, #28]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3720      	adds	r7, #32
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	200001a4 	.word	0x200001a4
 80038d4:	200001b8 	.word	0x200001b8

080038d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80038dc:	4b03      	ldr	r3, [pc, #12]	; (80038ec <vTaskMissedYield+0x14>)
 80038de:	2201      	movs	r2, #1
 80038e0:	601a      	str	r2, [r3, #0]
}
 80038e2:	bf00      	nop
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	200001b4 	.word	0x200001b4

080038f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80038f8:	f000 f852 	bl	80039a0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <prvIdleTask+0x28>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d9f9      	bls.n	80038f8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003904:	4b05      	ldr	r3, [pc, #20]	; (800391c <prvIdleTask+0x2c>)
 8003906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003914:	e7f0      	b.n	80038f8 <prvIdleTask+0x8>
 8003916:	bf00      	nop
 8003918:	200000cc 	.word	0x200000cc
 800391c:	e000ed04 	.word	0xe000ed04

08003920 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003926:	2300      	movs	r3, #0
 8003928:	607b      	str	r3, [r7, #4]
 800392a:	e00c      	b.n	8003946 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4a12      	ldr	r2, [pc, #72]	; (8003980 <prvInitialiseTaskLists+0x60>)
 8003938:	4413      	add	r3, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe fc96 	bl	800226c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3301      	adds	r3, #1
 8003944:	607b      	str	r3, [r7, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b04      	cmp	r3, #4
 800394a:	d9ef      	bls.n	800392c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800394c:	480d      	ldr	r0, [pc, #52]	; (8003984 <prvInitialiseTaskLists+0x64>)
 800394e:	f7fe fc8d 	bl	800226c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003952:	480d      	ldr	r0, [pc, #52]	; (8003988 <prvInitialiseTaskLists+0x68>)
 8003954:	f7fe fc8a 	bl	800226c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003958:	480c      	ldr	r0, [pc, #48]	; (800398c <prvInitialiseTaskLists+0x6c>)
 800395a:	f7fe fc87 	bl	800226c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800395e:	480c      	ldr	r0, [pc, #48]	; (8003990 <prvInitialiseTaskLists+0x70>)
 8003960:	f7fe fc84 	bl	800226c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003964:	480b      	ldr	r0, [pc, #44]	; (8003994 <prvInitialiseTaskLists+0x74>)
 8003966:	f7fe fc81 	bl	800226c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800396a:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <prvInitialiseTaskLists+0x78>)
 800396c:	4a05      	ldr	r2, [pc, #20]	; (8003984 <prvInitialiseTaskLists+0x64>)
 800396e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003970:	4b0a      	ldr	r3, [pc, #40]	; (800399c <prvInitialiseTaskLists+0x7c>)
 8003972:	4a05      	ldr	r2, [pc, #20]	; (8003988 <prvInitialiseTaskLists+0x68>)
 8003974:	601a      	str	r2, [r3, #0]
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	200000cc 	.word	0x200000cc
 8003984:	20000130 	.word	0x20000130
 8003988:	20000144 	.word	0x20000144
 800398c:	20000160 	.word	0x20000160
 8003990:	20000174 	.word	0x20000174
 8003994:	2000018c 	.word	0x2000018c
 8003998:	20000158 	.word	0x20000158
 800399c:	2000015c 	.word	0x2000015c

080039a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039a6:	e019      	b.n	80039dc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80039a8:	f000 fe2c 	bl	8004604 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039ac:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <prvCheckTasksWaitingTermination+0x50>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3304      	adds	r3, #4
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fe fce1 	bl	8002380 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80039be:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <prvCheckTasksWaitingTermination+0x54>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <prvCheckTasksWaitingTermination+0x54>)
 80039c6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <prvCheckTasksWaitingTermination+0x58>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	4a0a      	ldr	r2, [pc, #40]	; (80039f8 <prvCheckTasksWaitingTermination+0x58>)
 80039d0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80039d2:	f000 fe47 	bl	8004664 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f810 	bl	80039fc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <prvCheckTasksWaitingTermination+0x58>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e1      	bne.n	80039a8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80039e4:	bf00      	nop
 80039e6:	bf00      	nop
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000174 	.word	0x20000174
 80039f4:	200001a0 	.word	0x200001a0
 80039f8:	20000188 	.word	0x20000188

080039fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f001 f807 	bl	8004a1c <vPortFree>
                vPortFree( pxTCB );
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f001 f804 	bl	8004a1c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003a14:	bf00      	nop
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a20:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <prvResetNextTaskUnblockTime+0x30>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d104      	bne.n	8003a34 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003a2a:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <prvResetNextTaskUnblockTime+0x34>)
 8003a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a30:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003a32:	e005      	b.n	8003a40 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <prvResetNextTaskUnblockTime+0x30>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a04      	ldr	r2, [pc, #16]	; (8003a50 <prvResetNextTaskUnblockTime+0x34>)
 8003a3e:	6013      	str	r3, [r2, #0]
}
 8003a40:	bf00      	nop
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	20000158 	.word	0x20000158
 8003a50:	200001c0 	.word	0x200001c0

08003a54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <xTaskGetSchedulerState+0x34>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d102      	bne.n	8003a68 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003a62:	2301      	movs	r3, #1
 8003a64:	607b      	str	r3, [r7, #4]
 8003a66:	e008      	b.n	8003a7a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a68:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <xTaskGetSchedulerState+0x38>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d102      	bne.n	8003a76 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003a70:	2302      	movs	r3, #2
 8003a72:	607b      	str	r3, [r7, #4]
 8003a74:	e001      	b.n	8003a7a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003a76:	2300      	movs	r3, #0
 8003a78:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003a7a:	687b      	ldr	r3, [r7, #4]
    }
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	200001ac 	.word	0x200001ac
 8003a8c:	200001c8 	.word	0x200001c8

08003a90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d068      	beq.n	8003b78 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003aa6:	4b37      	ldr	r3, [pc, #220]	; (8003b84 <xTaskPriorityDisinherit+0xf4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d00a      	beq.n	8003ac6 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	60fb      	str	r3, [r7, #12]
    }
 8003ac2:	bf00      	nop
 8003ac4:	e7fe      	b.n	8003ac4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10a      	bne.n	8003ae4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	60bb      	str	r3, [r7, #8]
    }
 8003ae0:	bf00      	nop
 8003ae2:	e7fe      	b.n	8003ae2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae8:	1e5a      	subs	r2, r3, #1
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d03e      	beq.n	8003b78 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d13a      	bne.n	8003b78 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	3304      	adds	r3, #4
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe fc3a 	bl	8002380 <uxListRemove>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	2201      	movs	r2, #1
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43da      	mvns	r2, r3
 8003b1e:	4b1a      	ldr	r3, [pc, #104]	; (8003b88 <xTaskPriorityDisinherit+0xf8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4013      	ands	r3, r2
 8003b24:	4a18      	ldr	r2, [pc, #96]	; (8003b88 <xTaskPriorityDisinherit+0xf8>)
 8003b26:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	204a      	movs	r0, #74	; 0x4a
 8003b2e:	f002 fda1 	bl	8006674 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	f1c3 0205 	rsb	r2, r3, #5
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	409a      	lsls	r2, r3
 8003b4e:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <xTaskPriorityDisinherit+0xf8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	4a0c      	ldr	r2, [pc, #48]	; (8003b88 <xTaskPriorityDisinherit+0xf8>)
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4a09      	ldr	r2, [pc, #36]	; (8003b8c <xTaskPriorityDisinherit+0xfc>)
 8003b66:	441a      	add	r2, r3
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4610      	mov	r0, r2
 8003b70:	f7fe fba9 	bl	80022c6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003b74:	2301      	movs	r3, #1
 8003b76:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003b78:	697b      	ldr	r3, [r7, #20]
    }
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	200000c8 	.word	0x200000c8
 8003b88:	200001a8 	.word	0x200001a8
 8003b8c:	200000cc 	.word	0x200000cc

08003b90 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003b9a:	4b32      	ldr	r3, [pc, #200]	; (8003c64 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ba0:	4b31      	ldr	r3, [pc, #196]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fe fbea 	bl	8002380 <uxListRemove>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10b      	bne.n	8003bca <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003bb2:	4b2d      	ldr	r3, [pc, #180]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	2201      	movs	r2, #1
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	4b2a      	ldr	r3, [pc, #168]	; (8003c6c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	4a29      	ldr	r2, [pc, #164]	; (8003c6c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003bc8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d110      	bne.n	8003bf4 <prvAddCurrentTaskToDelayedList+0x64>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00d      	beq.n	8003bf4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003bd8:	4b23      	ldr	r3, [pc, #140]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	211b      	movs	r1, #27
 8003bde:	4618      	mov	r0, r3
 8003be0:	f003 fb0c 	bl	80071fc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003be4:	4b20      	ldr	r3, [pc, #128]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3304      	adds	r3, #4
 8003bea:	4619      	mov	r1, r3
 8003bec:	4820      	ldr	r0, [pc, #128]	; (8003c70 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003bee:	f7fe fb6a 	bl	80022c6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003bf2:	e032      	b.n	8003c5a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bfc:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d20f      	bcs.n	8003c2c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003c0c:	4b16      	ldr	r3, [pc, #88]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2104      	movs	r1, #4
 8003c12:	4618      	mov	r0, r3
 8003c14:	f003 faf2 	bl	80071fc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c18:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3304      	adds	r3, #4
 8003c22:	4619      	mov	r1, r3
 8003c24:	4610      	mov	r0, r2
 8003c26:	f7fe fb72 	bl	800230e <vListInsert>
}
 8003c2a:	e016      	b.n	8003c5a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003c2c:	4b0e      	ldr	r3, [pc, #56]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2104      	movs	r1, #4
 8003c32:	4618      	mov	r0, r3
 8003c34:	f003 fae2 	bl	80071fc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c38:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3304      	adds	r3, #4
 8003c42:	4619      	mov	r1, r3
 8003c44:	4610      	mov	r0, r2
 8003c46:	f7fe fb62 	bl	800230e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003c4a:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <prvAddCurrentTaskToDelayedList+0xec>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d202      	bcs.n	8003c5a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003c54:	4a09      	ldr	r2, [pc, #36]	; (8003c7c <prvAddCurrentTaskToDelayedList+0xec>)
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	6013      	str	r3, [r2, #0]
}
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	200001a4 	.word	0x200001a4
 8003c68:	200000c8 	.word	0x200000c8
 8003c6c:	200001a8 	.word	0x200001a8
 8003c70:	2000018c 	.word	0x2000018c
 8003c74:	2000015c 	.word	0x2000015c
 8003c78:	20000158 	.word	0x20000158
 8003c7c:	200001c0 	.word	0x200001c0

08003c80 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003c8a:	f000 fad5 	bl	8004238 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003c8e:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <xTimerCreateTimerTask+0x54>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003c96:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <xTimerCreateTimerTask+0x58>)
 8003c98:	9301      	str	r3, [sp, #4]
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ca4:	490d      	ldr	r1, [pc, #52]	; (8003cdc <xTimerCreateTimerTask+0x5c>)
 8003ca6:	480e      	ldr	r0, [pc, #56]	; (8003ce0 <xTimerCreateTimerTask+0x60>)
 8003ca8:	f7ff f8ee 	bl	8002e88 <xTaskCreate>
 8003cac:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10a      	bne.n	8003cca <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	603b      	str	r3, [r7, #0]
    }
 8003cc6:	bf00      	nop
 8003cc8:	e7fe      	b.n	8003cc8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003cca:	687b      	ldr	r3, [r7, #4]
    }
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	200001fc 	.word	0x200001fc
 8003cd8:	20000200 	.word	0x20000200
 8003cdc:	08007704 	.word	0x08007704
 8003ce0:	08003e19 	.word	0x08003e19

08003ce4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08a      	sub	sp, #40	; 0x28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d00:	f383 8811 	msr	BASEPRI, r3
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	623b      	str	r3, [r7, #32]
    }
 8003d0e:	bf00      	nop
 8003d10:	e7fe      	b.n	8003d10 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003d12:	4b1a      	ldr	r3, [pc, #104]	; (8003d7c <xTimerGenericCommand+0x98>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d02a      	beq.n	8003d70 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b05      	cmp	r3, #5
 8003d2a:	dc18      	bgt.n	8003d5e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003d2c:	f7ff fe92 	bl	8003a54 <xTaskGetSchedulerState>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d109      	bne.n	8003d4a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003d36:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <xTimerGenericCommand+0x98>)
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	f107 0114 	add.w	r1, r7, #20
 8003d3e:	2300      	movs	r3, #0
 8003d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d42:	f7fe fc37 	bl	80025b4 <xQueueGenericSend>
 8003d46:	6278      	str	r0, [r7, #36]	; 0x24
 8003d48:	e012      	b.n	8003d70 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d4a:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <xTimerGenericCommand+0x98>)
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	f107 0114 	add.w	r1, r7, #20
 8003d52:	2300      	movs	r3, #0
 8003d54:	2200      	movs	r2, #0
 8003d56:	f7fe fc2d 	bl	80025b4 <xQueueGenericSend>
 8003d5a:	6278      	str	r0, [r7, #36]	; 0x24
 8003d5c:	e008      	b.n	8003d70 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d5e:	4b07      	ldr	r3, [pc, #28]	; (8003d7c <xTimerGenericCommand+0x98>)
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	f107 0114 	add.w	r1, r7, #20
 8003d66:	2300      	movs	r3, #0
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	f7fe fd49 	bl	8002800 <xQueueGenericSendFromISR>
 8003d6e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003d72:	4618      	mov	r0, r3
 8003d74:	3728      	adds	r7, #40	; 0x28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	200001fc 	.word	0x200001fc

08003d80 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d8a:	4b22      	ldr	r3, [pc, #136]	; (8003e14 <prvProcessExpiredTimer+0x94>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	3304      	adds	r3, #4
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fe faf1 	bl	8002380 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d022      	beq.n	8003df2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	699a      	ldr	r2, [r3, #24]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	18d1      	adds	r1, r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	6978      	ldr	r0, [r7, #20]
 8003dba:	f000 f8d1 	bl	8003f60 <prvInsertTimerInActiveList>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d01f      	beq.n	8003e04 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	2300      	movs	r3, #0
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	2100      	movs	r1, #0
 8003dce:	6978      	ldr	r0, [r7, #20]
 8003dd0:	f7ff ff88 	bl	8003ce4 <xTimerGenericCommand>
 8003dd4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d113      	bne.n	8003e04 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	60fb      	str	r3, [r7, #12]
    }
 8003dee:	bf00      	nop
 8003df0:	e7fe      	b.n	8003df0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	6978      	ldr	r0, [r7, #20]
 8003e0a:	4798      	blx	r3
    }
 8003e0c:	bf00      	nop
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	200001f4 	.word	0x200001f4

08003e18 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e20:	f107 0308 	add.w	r3, r7, #8
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 f857 	bl	8003ed8 <prvGetNextExpireTime>
 8003e2a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4619      	mov	r1, r3
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f803 	bl	8003e3c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003e36:	f000 f8d5 	bl	8003fe4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e3a:	e7f1      	b.n	8003e20 <prvTimerTask+0x8>

08003e3c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003e46:	f7ff fa1d 	bl	8003284 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e4a:	f107 0308 	add.w	r3, r7, #8
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 f866 	bl	8003f20 <prvSampleTimeNow>
 8003e54:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d130      	bne.n	8003ebe <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10a      	bne.n	8003e78 <prvProcessTimerOrBlockTask+0x3c>
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d806      	bhi.n	8003e78 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003e6a:	f7ff fa19 	bl	80032a0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e6e:	68f9      	ldr	r1, [r7, #12]
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ff85 	bl	8003d80 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003e76:	e024      	b.n	8003ec2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d008      	beq.n	8003e90 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e7e:	4b13      	ldr	r3, [pc, #76]	; (8003ecc <prvProcessTimerOrBlockTask+0x90>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <prvProcessTimerOrBlockTask+0x50>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <prvProcessTimerOrBlockTask+0x52>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e90:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <prvProcessTimerOrBlockTask+0x94>)
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	f7fe ffbf 	bl	8002e20 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003ea2:	f7ff f9fd 	bl	80032a0 <xTaskResumeAll>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10a      	bne.n	8003ec2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003eac:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <prvProcessTimerOrBlockTask+0x98>)
 8003eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	f3bf 8f6f 	isb	sy
    }
 8003ebc:	e001      	b.n	8003ec2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003ebe:	f7ff f9ef 	bl	80032a0 <xTaskResumeAll>
    }
 8003ec2:	bf00      	nop
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	200001f8 	.word	0x200001f8
 8003ed0:	200001fc 	.word	0x200001fc
 8003ed4:	e000ed04 	.word	0xe000ed04

08003ed8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ee0:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <prvGetNextExpireTime+0x44>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <prvGetNextExpireTime+0x16>
 8003eea:	2201      	movs	r2, #1
 8003eec:	e000      	b.n	8003ef0 <prvGetNextExpireTime+0x18>
 8003eee:	2200      	movs	r2, #0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d105      	bne.n	8003f08 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003efc:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <prvGetNextExpireTime+0x44>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	e001      	b.n	8003f0c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
    }
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	200001f4 	.word	0x200001f4

08003f20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003f28:	f7ff fa5a 	bl	80033e0 <xTaskGetTickCount>
 8003f2c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003f2e:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <prvSampleTimeNow+0x3c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d205      	bcs.n	8003f44 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003f38:	f000 f91a 	bl	8004170 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	e002      	b.n	8003f4a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003f4a:	4a04      	ldr	r2, [pc, #16]	; (8003f5c <prvSampleTimeNow+0x3c>)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003f50:	68fb      	ldr	r3, [r7, #12]
    }
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20000204 	.word	0x20000204

08003f60 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d812      	bhi.n	8003fac <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	1ad2      	subs	r2, r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d302      	bcc.n	8003f9a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003f94:	2301      	movs	r3, #1
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	e01b      	b.n	8003fd2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f9a:	4b10      	ldr	r3, [pc, #64]	; (8003fdc <prvInsertTimerInActiveList+0x7c>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	f7fe f9b2 	bl	800230e <vListInsert>
 8003faa:	e012      	b.n	8003fd2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d206      	bcs.n	8003fc2 <prvInsertTimerInActiveList+0x62>
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d302      	bcc.n	8003fc2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	e007      	b.n	8003fd2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fc2:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <prvInsertTimerInActiveList+0x80>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4610      	mov	r0, r2
 8003fce:	f7fe f99e 	bl	800230e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003fd2:	697b      	ldr	r3, [r7, #20]
    }
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	200001f8 	.word	0x200001f8
 8003fe0:	200001f4 	.word	0x200001f4

08003fe4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08c      	sub	sp, #48	; 0x30
 8003fe8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fea:	e0ae      	b.n	800414a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f2c0 80aa 	blt.w	8004148 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d004      	beq.n	800400a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	3304      	adds	r3, #4
 8004004:	4618      	mov	r0, r3
 8004006:	f7fe f9bb 	bl	8002380 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800400a:	1d3b      	adds	r3, r7, #4
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff ff87 	bl	8003f20 <prvSampleTimeNow>
 8004012:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b09      	cmp	r3, #9
 8004018:	f200 8097 	bhi.w	800414a <prvProcessReceivedCommands+0x166>
 800401c:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <prvProcessReceivedCommands+0x40>)
 800401e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004022:	bf00      	nop
 8004024:	0800404d 	.word	0x0800404d
 8004028:	0800404d 	.word	0x0800404d
 800402c:	0800404d 	.word	0x0800404d
 8004030:	080040c1 	.word	0x080040c1
 8004034:	080040d5 	.word	0x080040d5
 8004038:	0800411f 	.word	0x0800411f
 800403c:	0800404d 	.word	0x0800404d
 8004040:	0800404d 	.word	0x0800404d
 8004044:	080040c1 	.word	0x080040c1
 8004048:	080040d5 	.word	0x080040d5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	b2da      	uxtb	r2, r3
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	18d1      	adds	r1, r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a3a      	ldr	r2, [r7, #32]
 800406a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800406c:	f7ff ff78 	bl	8003f60 <prvInsertTimerInActiveList>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d069      	beq.n	800414a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800407c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d05e      	beq.n	800414a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	441a      	add	r2, r3
 8004094:	2300      	movs	r3, #0
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	2300      	movs	r3, #0
 800409a:	2100      	movs	r1, #0
 800409c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800409e:	f7ff fe21 	bl	8003ce4 <xTimerGenericCommand>
 80040a2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d14f      	bne.n	800414a <prvProcessReceivedCommands+0x166>
        __asm volatile
 80040aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	61bb      	str	r3, [r7, #24]
    }
 80040bc:	bf00      	nop
 80040be:	e7fe      	b.n	80040be <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80040d2:	e03a      	b.n	800414a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040da:	f043 0301 	orr.w	r3, r3, #1
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <prvProcessReceivedCommands+0x126>
        __asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	617b      	str	r3, [r7, #20]
    }
 8004106:	bf00      	nop
 8004108:	e7fe      	b.n	8004108 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	18d1      	adds	r1, r2, r3
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	6a3a      	ldr	r2, [r7, #32]
 8004116:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004118:	f7ff ff22 	bl	8003f60 <prvInsertTimerInActiveList>
                        break;
 800411c:	e015      	b.n	800414a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d103      	bne.n	8004134 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800412c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800412e:	f000 fc75 	bl	8004a1c <vPortFree>
 8004132:	e00a      	b.n	800414a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800413a:	f023 0301 	bic.w	r3, r3, #1
 800413e:	b2da      	uxtb	r2, r3
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004146:	e000      	b.n	800414a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004148:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800414a:	4b08      	ldr	r3, [pc, #32]	; (800416c <prvProcessReceivedCommands+0x188>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f107 0108 	add.w	r1, r7, #8
 8004152:	2200      	movs	r2, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f7fe fc11 	bl	800297c <xQueueReceive>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	f47f af45 	bne.w	8003fec <prvProcessReceivedCommands+0x8>
        }
    }
 8004162:	bf00      	nop
 8004164:	bf00      	nop
 8004166:	3728      	adds	r7, #40	; 0x28
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	200001fc 	.word	0x200001fc

08004170 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004176:	e048      	b.n	800420a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004178:	4b2d      	ldr	r3, [pc, #180]	; (8004230 <prvSwitchTimerLists+0xc0>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004182:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <prvSwitchTimerLists+0xc0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3304      	adds	r3, #4
 8004190:	4618      	mov	r0, r3
 8004192:	f7fe f8f5 	bl	8002380 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d02e      	beq.n	800420a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4413      	add	r3, r2
 80041b4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d90e      	bls.n	80041dc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041ca:	4b19      	ldr	r3, [pc, #100]	; (8004230 <prvSwitchTimerLists+0xc0>)
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3304      	adds	r3, #4
 80041d2:	4619      	mov	r1, r3
 80041d4:	4610      	mov	r0, r2
 80041d6:	f7fe f89a 	bl	800230e <vListInsert>
 80041da:	e016      	b.n	800420a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041dc:	2300      	movs	r3, #0
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	2300      	movs	r3, #0
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	2100      	movs	r1, #0
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f7ff fd7c 	bl	8003ce4 <xTimerGenericCommand>
 80041ec:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10a      	bne.n	800420a <prvSwitchTimerLists+0x9a>
        __asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	603b      	str	r3, [r7, #0]
    }
 8004206:	bf00      	nop
 8004208:	e7fe      	b.n	8004208 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800420a:	4b09      	ldr	r3, [pc, #36]	; (8004230 <prvSwitchTimerLists+0xc0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1b1      	bne.n	8004178 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004214:	4b06      	ldr	r3, [pc, #24]	; (8004230 <prvSwitchTimerLists+0xc0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800421a:	4b06      	ldr	r3, [pc, #24]	; (8004234 <prvSwitchTimerLists+0xc4>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a04      	ldr	r2, [pc, #16]	; (8004230 <prvSwitchTimerLists+0xc0>)
 8004220:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004222:	4a04      	ldr	r2, [pc, #16]	; (8004234 <prvSwitchTimerLists+0xc4>)
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	6013      	str	r3, [r2, #0]
    }
 8004228:	bf00      	nop
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	200001f4 	.word	0x200001f4
 8004234:	200001f8 	.word	0x200001f8

08004238 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800423c:	f000 f9e2 	bl	8004604 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004240:	4b12      	ldr	r3, [pc, #72]	; (800428c <prvCheckForValidListAndQueue+0x54>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d11d      	bne.n	8004284 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004248:	4811      	ldr	r0, [pc, #68]	; (8004290 <prvCheckForValidListAndQueue+0x58>)
 800424a:	f7fe f80f 	bl	800226c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800424e:	4811      	ldr	r0, [pc, #68]	; (8004294 <prvCheckForValidListAndQueue+0x5c>)
 8004250:	f7fe f80c 	bl	800226c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004254:	4b10      	ldr	r3, [pc, #64]	; (8004298 <prvCheckForValidListAndQueue+0x60>)
 8004256:	4a0e      	ldr	r2, [pc, #56]	; (8004290 <prvCheckForValidListAndQueue+0x58>)
 8004258:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800425a:	4b10      	ldr	r3, [pc, #64]	; (800429c <prvCheckForValidListAndQueue+0x64>)
 800425c:	4a0d      	ldr	r2, [pc, #52]	; (8004294 <prvCheckForValidListAndQueue+0x5c>)
 800425e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004260:	2200      	movs	r2, #0
 8004262:	210c      	movs	r1, #12
 8004264:	200a      	movs	r0, #10
 8004266:	f7fe f91d 	bl	80024a4 <xQueueGenericCreate>
 800426a:	4603      	mov	r3, r0
 800426c:	4a07      	ldr	r2, [pc, #28]	; (800428c <prvCheckForValidListAndQueue+0x54>)
 800426e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004270:	4b06      	ldr	r3, [pc, #24]	; (800428c <prvCheckForValidListAndQueue+0x54>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004278:	4b04      	ldr	r3, [pc, #16]	; (800428c <prvCheckForValidListAndQueue+0x54>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4908      	ldr	r1, [pc, #32]	; (80042a0 <prvCheckForValidListAndQueue+0x68>)
 800427e:	4618      	mov	r0, r3
 8004280:	f7fe fd9c 	bl	8002dbc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004284:	f000 f9ee 	bl	8004664 <vPortExitCritical>
    }
 8004288:	bf00      	nop
 800428a:	bd80      	pop	{r7, pc}
 800428c:	200001fc 	.word	0x200001fc
 8004290:	200001cc 	.word	0x200001cc
 8004294:	200001e0 	.word	0x200001e0
 8004298:	200001f4 	.word	0x200001f4
 800429c:	200001f8 	.word	0x200001f8
 80042a0:	0800770c 	.word	0x0800770c

080042a4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	3b04      	subs	r3, #4
 80042b4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	3b04      	subs	r3, #4
 80042c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f023 0201 	bic.w	r2, r3, #1
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3b04      	subs	r3, #4
 80042d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80042d4:	4a0c      	ldr	r2, [pc, #48]	; (8004308 <pxPortInitialiseStack+0x64>)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3b14      	subs	r3, #20
 80042de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3b04      	subs	r3, #4
 80042ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f06f 0202 	mvn.w	r2, #2
 80042f2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	3b20      	subs	r3, #32
 80042f8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80042fa:	68fb      	ldr	r3, [r7, #12]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	0800430d 	.word	0x0800430d

0800430c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004312:	2300      	movs	r3, #0
 8004314:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004316:	4b12      	ldr	r3, [pc, #72]	; (8004360 <prvTaskExitError+0x54>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431e:	d00a      	beq.n	8004336 <prvTaskExitError+0x2a>
        __asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	60fb      	str	r3, [r7, #12]
    }
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <prvTaskExitError+0x28>
        __asm volatile
 8004336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	60bb      	str	r3, [r7, #8]
    }
 8004348:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800434a:	bf00      	nop
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0fc      	beq.n	800434c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004352:	bf00      	nop
 8004354:	bf00      	nop
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	20000010 	.word	0x20000010
	...

08004370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004370:	4b07      	ldr	r3, [pc, #28]	; (8004390 <pxCurrentTCBConst2>)
 8004372:	6819      	ldr	r1, [r3, #0]
 8004374:	6808      	ldr	r0, [r1, #0]
 8004376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800437a:	f380 8809 	msr	PSP, r0
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f04f 0000 	mov.w	r0, #0
 8004386:	f380 8811 	msr	BASEPRI, r0
 800438a:	4770      	bx	lr
 800438c:	f3af 8000 	nop.w

08004390 <pxCurrentTCBConst2>:
 8004390:	200000c8 	.word	0x200000c8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop

08004398 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004398:	4808      	ldr	r0, [pc, #32]	; (80043bc <prvPortStartFirstTask+0x24>)
 800439a:	6800      	ldr	r0, [r0, #0]
 800439c:	6800      	ldr	r0, [r0, #0]
 800439e:	f380 8808 	msr	MSP, r0
 80043a2:	f04f 0000 	mov.w	r0, #0
 80043a6:	f380 8814 	msr	CONTROL, r0
 80043aa:	b662      	cpsie	i
 80043ac:	b661      	cpsie	f
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	df00      	svc	0
 80043b8:	bf00      	nop
 80043ba:	0000      	.short	0x0000
 80043bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80043c0:	bf00      	nop
 80043c2:	bf00      	nop

080043c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043ca:	4b46      	ldr	r3, [pc, #280]	; (80044e4 <xPortStartScheduler+0x120>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a46      	ldr	r2, [pc, #280]	; (80044e8 <xPortStartScheduler+0x124>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d10a      	bne.n	80043ea <xPortStartScheduler+0x26>
        __asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	613b      	str	r3, [r7, #16]
    }
 80043e6:	bf00      	nop
 80043e8:	e7fe      	b.n	80043e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043ea:	4b3e      	ldr	r3, [pc, #248]	; (80044e4 <xPortStartScheduler+0x120>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a3f      	ldr	r2, [pc, #252]	; (80044ec <xPortStartScheduler+0x128>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d10a      	bne.n	800440a <xPortStartScheduler+0x46>
        __asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	60fb      	str	r3, [r7, #12]
    }
 8004406:	bf00      	nop
 8004408:	e7fe      	b.n	8004408 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800440a:	4b39      	ldr	r3, [pc, #228]	; (80044f0 <xPortStartScheduler+0x12c>)
 800440c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	b2db      	uxtb	r3, r3
 8004414:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	22ff      	movs	r2, #255	; 0xff
 800441a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800442c:	b2da      	uxtb	r2, r3
 800442e:	4b31      	ldr	r3, [pc, #196]	; (80044f4 <xPortStartScheduler+0x130>)
 8004430:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004432:	4b31      	ldr	r3, [pc, #196]	; (80044f8 <xPortStartScheduler+0x134>)
 8004434:	2207      	movs	r2, #7
 8004436:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004438:	e009      	b.n	800444e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800443a:	4b2f      	ldr	r3, [pc, #188]	; (80044f8 <xPortStartScheduler+0x134>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3b01      	subs	r3, #1
 8004440:	4a2d      	ldr	r2, [pc, #180]	; (80044f8 <xPortStartScheduler+0x134>)
 8004442:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	b2db      	uxtb	r3, r3
 800444c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800444e:	78fb      	ldrb	r3, [r7, #3]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004456:	2b80      	cmp	r3, #128	; 0x80
 8004458:	d0ef      	beq.n	800443a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800445a:	4b27      	ldr	r3, [pc, #156]	; (80044f8 <xPortStartScheduler+0x134>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f1c3 0307 	rsb	r3, r3, #7
 8004462:	2b04      	cmp	r3, #4
 8004464:	d00a      	beq.n	800447c <xPortStartScheduler+0xb8>
        __asm volatile
 8004466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446a:	f383 8811 	msr	BASEPRI, r3
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	60bb      	str	r3, [r7, #8]
    }
 8004478:	bf00      	nop
 800447a:	e7fe      	b.n	800447a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800447c:	4b1e      	ldr	r3, [pc, #120]	; (80044f8 <xPortStartScheduler+0x134>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	021b      	lsls	r3, r3, #8
 8004482:	4a1d      	ldr	r2, [pc, #116]	; (80044f8 <xPortStartScheduler+0x134>)
 8004484:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004486:	4b1c      	ldr	r3, [pc, #112]	; (80044f8 <xPortStartScheduler+0x134>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800448e:	4a1a      	ldr	r2, [pc, #104]	; (80044f8 <xPortStartScheduler+0x134>)
 8004490:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800449a:	4b18      	ldr	r3, [pc, #96]	; (80044fc <xPortStartScheduler+0x138>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a17      	ldr	r2, [pc, #92]	; (80044fc <xPortStartScheduler+0x138>)
 80044a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80044a6:	4b15      	ldr	r3, [pc, #84]	; (80044fc <xPortStartScheduler+0x138>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a14      	ldr	r2, [pc, #80]	; (80044fc <xPortStartScheduler+0x138>)
 80044ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80044b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80044b2:	f000 f963 	bl	800477c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80044b6:	4b12      	ldr	r3, [pc, #72]	; (8004500 <xPortStartScheduler+0x13c>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80044bc:	f000 f982 	bl	80047c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044c0:	4b10      	ldr	r3, [pc, #64]	; (8004504 <xPortStartScheduler+0x140>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a0f      	ldr	r2, [pc, #60]	; (8004504 <xPortStartScheduler+0x140>)
 80044c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80044ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80044cc:	f7ff ff64 	bl	8004398 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80044d0:	f7ff f864 	bl	800359c <vTaskSwitchContext>
    prvTaskExitError();
 80044d4:	f7ff ff1a 	bl	800430c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	e000ed00 	.word	0xe000ed00
 80044e8:	410fc271 	.word	0x410fc271
 80044ec:	410fc270 	.word	0x410fc270
 80044f0:	e000e400 	.word	0xe000e400
 80044f4:	20000208 	.word	0x20000208
 80044f8:	2000020c 	.word	0x2000020c
 80044fc:	e000ed20 	.word	0xe000ed20
 8004500:	20000010 	.word	0x20000010
 8004504:	e000ef34 	.word	0xe000ef34

08004508 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800450e:	4b37      	ldr	r3, [pc, #220]	; (80045ec <vInitPrioGroupValue+0xe4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a37      	ldr	r2, [pc, #220]	; (80045f0 <vInitPrioGroupValue+0xe8>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d10a      	bne.n	800452e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	613b      	str	r3, [r7, #16]
    }
 800452a:	bf00      	nop
 800452c:	e7fe      	b.n	800452c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800452e:	4b2f      	ldr	r3, [pc, #188]	; (80045ec <vInitPrioGroupValue+0xe4>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a30      	ldr	r2, [pc, #192]	; (80045f4 <vInitPrioGroupValue+0xec>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d10a      	bne.n	800454e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	60fb      	str	r3, [r7, #12]
    }
 800454a:	bf00      	nop
 800454c:	e7fe      	b.n	800454c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800454e:	4b2a      	ldr	r3, [pc, #168]	; (80045f8 <vInitPrioGroupValue+0xf0>)
 8004550:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	b2db      	uxtb	r3, r3
 8004558:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	22ff      	movs	r2, #255	; 0xff
 800455e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004570:	b2da      	uxtb	r2, r3
 8004572:	4b22      	ldr	r3, [pc, #136]	; (80045fc <vInitPrioGroupValue+0xf4>)
 8004574:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004576:	4b22      	ldr	r3, [pc, #136]	; (8004600 <vInitPrioGroupValue+0xf8>)
 8004578:	2207      	movs	r2, #7
 800457a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800457c:	e009      	b.n	8004592 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800457e:	4b20      	ldr	r3, [pc, #128]	; (8004600 <vInitPrioGroupValue+0xf8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3b01      	subs	r3, #1
 8004584:	4a1e      	ldr	r2, [pc, #120]	; (8004600 <vInitPrioGroupValue+0xf8>)
 8004586:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	b2db      	uxtb	r3, r3
 8004590:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004592:	78fb      	ldrb	r3, [r7, #3]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459a:	2b80      	cmp	r3, #128	; 0x80
 800459c:	d0ef      	beq.n	800457e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800459e:	4b18      	ldr	r3, [pc, #96]	; (8004600 <vInitPrioGroupValue+0xf8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f1c3 0307 	rsb	r3, r3, #7
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d00a      	beq.n	80045c0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80045aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	60bb      	str	r3, [r7, #8]
    }
 80045bc:	bf00      	nop
 80045be:	e7fe      	b.n	80045be <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045c0:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <vInitPrioGroupValue+0xf8>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	4a0e      	ldr	r2, [pc, #56]	; (8004600 <vInitPrioGroupValue+0xf8>)
 80045c8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045ca:	4b0d      	ldr	r3, [pc, #52]	; (8004600 <vInitPrioGroupValue+0xf8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045d2:	4a0b      	ldr	r2, [pc, #44]	; (8004600 <vInitPrioGroupValue+0xf8>)
 80045d4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80045de:	bf00      	nop
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	e000ed00 	.word	0xe000ed00
 80045f0:	410fc271 	.word	0x410fc271
 80045f4:	410fc270 	.word	0x410fc270
 80045f8:	e000e400 	.word	0xe000e400
 80045fc:	20000208 	.word	0x20000208
 8004600:	2000020c 	.word	0x2000020c

08004604 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
        __asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	607b      	str	r3, [r7, #4]
    }
 800461c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800461e:	4b0f      	ldr	r3, [pc, #60]	; (800465c <vPortEnterCritical+0x58>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3301      	adds	r3, #1
 8004624:	4a0d      	ldr	r2, [pc, #52]	; (800465c <vPortEnterCritical+0x58>)
 8004626:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004628:	4b0c      	ldr	r3, [pc, #48]	; (800465c <vPortEnterCritical+0x58>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d10f      	bne.n	8004650 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <vPortEnterCritical+0x5c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <vPortEnterCritical+0x4c>
        __asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	603b      	str	r3, [r7, #0]
    }
 800464c:	bf00      	nop
 800464e:	e7fe      	b.n	800464e <vPortEnterCritical+0x4a>
    }
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	20000010 	.word	0x20000010
 8004660:	e000ed04 	.word	0xe000ed04

08004664 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800466a:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <vPortExitCritical+0x50>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10a      	bne.n	8004688 <vPortExitCritical+0x24>
        __asm volatile
 8004672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	607b      	str	r3, [r7, #4]
    }
 8004684:	bf00      	nop
 8004686:	e7fe      	b.n	8004686 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004688:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <vPortExitCritical+0x50>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3b01      	subs	r3, #1
 800468e:	4a09      	ldr	r2, [pc, #36]	; (80046b4 <vPortExitCritical+0x50>)
 8004690:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004692:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <vPortExitCritical+0x50>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d105      	bne.n	80046a6 <vPortExitCritical+0x42>
 800469a:	2300      	movs	r3, #0
 800469c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	f383 8811 	msr	BASEPRI, r3
    }
 80046a4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	20000010 	.word	0x20000010
	...

080046c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80046c0:	f3ef 8009 	mrs	r0, PSP
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	4b15      	ldr	r3, [pc, #84]	; (8004720 <pxCurrentTCBConst>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	f01e 0f10 	tst.w	lr, #16
 80046d0:	bf08      	it	eq
 80046d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046da:	6010      	str	r0, [r2, #0]
 80046dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046e4:	f380 8811 	msr	BASEPRI, r0
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f7fe ff54 	bl	800359c <vTaskSwitchContext>
 80046f4:	f04f 0000 	mov.w	r0, #0
 80046f8:	f380 8811 	msr	BASEPRI, r0
 80046fc:	bc09      	pop	{r0, r3}
 80046fe:	6819      	ldr	r1, [r3, #0]
 8004700:	6808      	ldr	r0, [r1, #0]
 8004702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004706:	f01e 0f10 	tst.w	lr, #16
 800470a:	bf08      	it	eq
 800470c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004710:	f380 8809 	msr	PSP, r0
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	f3af 8000 	nop.w

08004720 <pxCurrentTCBConst>:
 8004720:	200000c8 	.word	0x200000c8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004724:	bf00      	nop
 8004726:	bf00      	nop

08004728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
        __asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	607b      	str	r3, [r7, #4]
    }
 8004740:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004742:	f002 fbff 	bl	8006f44 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004746:	f7fe fe6d 	bl	8003424 <xTaskIncrementTick>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d006      	beq.n	800475e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004750:	f002 fc56 	bl	8007000 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004754:	4b08      	ldr	r3, [pc, #32]	; (8004778 <SysTick_Handler+0x50>)
 8004756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	e001      	b.n	8004762 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800475e:	f002 fc33 	bl	8006fc8 <SEGGER_SYSVIEW_RecordExitISR>
 8004762:	2300      	movs	r3, #0
 8004764:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	f383 8811 	msr	BASEPRI, r3
    }
 800476c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	e000ed04 	.word	0xe000ed04

0800477c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <vPortSetupTimerInterrupt+0x34>)
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004786:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <vPortSetupTimerInterrupt+0x38>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800478c:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <vPortSetupTimerInterrupt+0x3c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <vPortSetupTimerInterrupt+0x40>)
 8004792:	fba2 2303 	umull	r2, r3, r2, r3
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	4a09      	ldr	r2, [pc, #36]	; (80047c0 <vPortSetupTimerInterrupt+0x44>)
 800479a:	3b01      	subs	r3, #1
 800479c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800479e:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <vPortSetupTimerInterrupt+0x34>)
 80047a0:	2207      	movs	r2, #7
 80047a2:	601a      	str	r2, [r3, #0]
}
 80047a4:	bf00      	nop
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	e000e010 	.word	0xe000e010
 80047b4:	e000e018 	.word	0xe000e018
 80047b8:	20000000 	.word	0x20000000
 80047bc:	10624dd3 	.word	0x10624dd3
 80047c0:	e000e014 	.word	0xe000e014

080047c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80047c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80047d4 <vPortEnableVFP+0x10>
 80047c8:	6801      	ldr	r1, [r0, #0]
 80047ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047ce:	6001      	str	r1, [r0, #0]
 80047d0:	4770      	bx	lr
 80047d2:	0000      	.short	0x0000
 80047d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop

080047dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80047e2:	f3ef 8305 	mrs	r3, IPSR
 80047e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b0f      	cmp	r3, #15
 80047ec:	d914      	bls.n	8004818 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80047ee:	4a17      	ldr	r2, [pc, #92]	; (800484c <vPortValidateInterruptPriority+0x70>)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4413      	add	r3, r2
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80047f8:	4b15      	ldr	r3, [pc, #84]	; (8004850 <vPortValidateInterruptPriority+0x74>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	7afa      	ldrb	r2, [r7, #11]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d20a      	bcs.n	8004818 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	607b      	str	r3, [r7, #4]
    }
 8004814:	bf00      	nop
 8004816:	e7fe      	b.n	8004816 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004818:	4b0e      	ldr	r3, [pc, #56]	; (8004854 <vPortValidateInterruptPriority+0x78>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004820:	4b0d      	ldr	r3, [pc, #52]	; (8004858 <vPortValidateInterruptPriority+0x7c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d90a      	bls.n	800483e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	603b      	str	r3, [r7, #0]
    }
 800483a:	bf00      	nop
 800483c:	e7fe      	b.n	800483c <vPortValidateInterruptPriority+0x60>
    }
 800483e:	bf00      	nop
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	e000e3f0 	.word	0xe000e3f0
 8004850:	20000208 	.word	0x20000208
 8004854:	e000ed0c 	.word	0xe000ed0c
 8004858:	2000020c 	.word	0x2000020c

0800485c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08a      	sub	sp, #40	; 0x28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004864:	2300      	movs	r3, #0
 8004866:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004868:	f7fe fd0c 	bl	8003284 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800486c:	4b65      	ldr	r3, [pc, #404]	; (8004a04 <pvPortMalloc+0x1a8>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004874:	f000 f934 	bl	8004ae0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004878:	4b63      	ldr	r3, [pc, #396]	; (8004a08 <pvPortMalloc+0x1ac>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4013      	ands	r3, r2
 8004880:	2b00      	cmp	r3, #0
 8004882:	f040 80a7 	bne.w	80049d4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d02d      	beq.n	80048e8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800488c:	2208      	movs	r2, #8
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	429a      	cmp	r2, r3
 8004896:	d227      	bcs.n	80048e8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004898:	2208      	movs	r2, #8
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4413      	add	r3, r2
 800489e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d021      	beq.n	80048ee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f023 0307 	bic.w	r3, r3, #7
 80048b0:	3308      	adds	r3, #8
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d214      	bcs.n	80048e2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f023 0307 	bic.w	r3, r3, #7
 80048be:	3308      	adds	r3, #8
 80048c0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d010      	beq.n	80048ee <pvPortMalloc+0x92>
        __asm volatile
 80048cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	617b      	str	r3, [r7, #20]
    }
 80048de:	bf00      	nop
 80048e0:	e7fe      	b.n	80048e0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80048e2:	2300      	movs	r3, #0
 80048e4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048e6:	e002      	b.n	80048ee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	607b      	str	r3, [r7, #4]
 80048ec:	e000      	b.n	80048f0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048ee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d06e      	beq.n	80049d4 <pvPortMalloc+0x178>
 80048f6:	4b45      	ldr	r3, [pc, #276]	; (8004a0c <pvPortMalloc+0x1b0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d869      	bhi.n	80049d4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004900:	4b43      	ldr	r3, [pc, #268]	; (8004a10 <pvPortMalloc+0x1b4>)
 8004902:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004904:	4b42      	ldr	r3, [pc, #264]	; (8004a10 <pvPortMalloc+0x1b4>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800490a:	e004      	b.n	8004916 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	429a      	cmp	r2, r3
 800491e:	d903      	bls.n	8004928 <pvPortMalloc+0xcc>
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1f1      	bne.n	800490c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004928:	4b36      	ldr	r3, [pc, #216]	; (8004a04 <pvPortMalloc+0x1a8>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492e:	429a      	cmp	r2, r3
 8004930:	d050      	beq.n	80049d4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2208      	movs	r2, #8
 8004938:	4413      	add	r3, r2
 800493a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	1ad2      	subs	r2, r2, r3
 800494c:	2308      	movs	r3, #8
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	429a      	cmp	r2, r3
 8004952:	d91f      	bls.n	8004994 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4413      	add	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <pvPortMalloc+0x120>
        __asm volatile
 8004966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	613b      	str	r3, [r7, #16]
    }
 8004978:	bf00      	nop
 800497a:	e7fe      	b.n	800497a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	1ad2      	subs	r2, r2, r3
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800498e:	69b8      	ldr	r0, [r7, #24]
 8004990:	f000 f908 	bl	8004ba4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004994:	4b1d      	ldr	r3, [pc, #116]	; (8004a0c <pvPortMalloc+0x1b0>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	4a1b      	ldr	r2, [pc, #108]	; (8004a0c <pvPortMalloc+0x1b0>)
 80049a0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049a2:	4b1a      	ldr	r3, [pc, #104]	; (8004a0c <pvPortMalloc+0x1b0>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	4b1b      	ldr	r3, [pc, #108]	; (8004a14 <pvPortMalloc+0x1b8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d203      	bcs.n	80049b6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049ae:	4b17      	ldr	r3, [pc, #92]	; (8004a0c <pvPortMalloc+0x1b0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a18      	ldr	r2, [pc, #96]	; (8004a14 <pvPortMalloc+0x1b8>)
 80049b4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <pvPortMalloc+0x1ac>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	431a      	orrs	r2, r3
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80049ca:	4b13      	ldr	r3, [pc, #76]	; (8004a18 <pvPortMalloc+0x1bc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3301      	adds	r3, #1
 80049d0:	4a11      	ldr	r2, [pc, #68]	; (8004a18 <pvPortMalloc+0x1bc>)
 80049d2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80049d4:	f7fe fc64 	bl	80032a0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <pvPortMalloc+0x19c>
        __asm volatile
 80049e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	60fb      	str	r3, [r7, #12]
    }
 80049f4:	bf00      	nop
 80049f6:	e7fe      	b.n	80049f6 <pvPortMalloc+0x19a>
    return pvReturn;
 80049f8:	69fb      	ldr	r3, [r7, #28]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3728      	adds	r7, #40	; 0x28
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20012e18 	.word	0x20012e18
 8004a08:	20012e2c 	.word	0x20012e2c
 8004a0c:	20012e1c 	.word	0x20012e1c
 8004a10:	20012e10 	.word	0x20012e10
 8004a14:	20012e20 	.word	0x20012e20
 8004a18:	20012e24 	.word	0x20012e24

08004a1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d04d      	beq.n	8004aca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004a2e:	2308      	movs	r3, #8
 8004a30:	425b      	negs	r3, r3
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	4413      	add	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	4b24      	ldr	r3, [pc, #144]	; (8004ad4 <vPortFree+0xb8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4013      	ands	r3, r2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10a      	bne.n	8004a60 <vPortFree+0x44>
        __asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	60fb      	str	r3, [r7, #12]
    }
 8004a5c:	bf00      	nop
 8004a5e:	e7fe      	b.n	8004a5e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <vPortFree+0x62>
        __asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	60bb      	str	r3, [r7, #8]
    }
 8004a7a:	bf00      	nop
 8004a7c:	e7fe      	b.n	8004a7c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	4b14      	ldr	r3, [pc, #80]	; (8004ad4 <vPortFree+0xb8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01e      	beq.n	8004aca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d11a      	bne.n	8004aca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <vPortFree+0xb8>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	401a      	ands	r2, r3
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004aa4:	f7fe fbee 	bl	8003284 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <vPortFree+0xbc>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	4a09      	ldr	r2, [pc, #36]	; (8004ad8 <vPortFree+0xbc>)
 8004ab4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ab6:	6938      	ldr	r0, [r7, #16]
 8004ab8:	f000 f874 	bl	8004ba4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004abc:	4b07      	ldr	r3, [pc, #28]	; (8004adc <vPortFree+0xc0>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	4a06      	ldr	r2, [pc, #24]	; (8004adc <vPortFree+0xc0>)
 8004ac4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004ac6:	f7fe fbeb 	bl	80032a0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004aca:	bf00      	nop
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20012e2c 	.word	0x20012e2c
 8004ad8:	20012e1c 	.word	0x20012e1c
 8004adc:	20012e28 	.word	0x20012e28

08004ae0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ae6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004aea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004aec:	4b27      	ldr	r3, [pc, #156]	; (8004b8c <prvHeapInit+0xac>)
 8004aee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00c      	beq.n	8004b14 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	3307      	adds	r3, #7
 8004afe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0307 	bic.w	r3, r3, #7
 8004b06:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	4a1f      	ldr	r2, [pc, #124]	; (8004b8c <prvHeapInit+0xac>)
 8004b10:	4413      	add	r3, r2
 8004b12:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b18:	4a1d      	ldr	r2, [pc, #116]	; (8004b90 <prvHeapInit+0xb0>)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004b1e:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <prvHeapInit+0xb0>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	4413      	add	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004b2c:	2208      	movs	r2, #8
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	1a9b      	subs	r3, r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0307 	bic.w	r3, r3, #7
 8004b3a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4a15      	ldr	r2, [pc, #84]	; (8004b94 <prvHeapInit+0xb4>)
 8004b40:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004b42:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <prvHeapInit+0xb4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2200      	movs	r2, #0
 8004b48:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004b4a:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <prvHeapInit+0xb4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	1ad2      	subs	r2, r2, r3
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b60:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <prvHeapInit+0xb4>)
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	4a0a      	ldr	r2, [pc, #40]	; (8004b98 <prvHeapInit+0xb8>)
 8004b6e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4a09      	ldr	r2, [pc, #36]	; (8004b9c <prvHeapInit+0xbc>)
 8004b76:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <prvHeapInit+0xc0>)
 8004b7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b7e:	601a      	str	r2, [r3, #0]
}
 8004b80:	bf00      	nop
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	20000210 	.word	0x20000210
 8004b90:	20012e10 	.word	0x20012e10
 8004b94:	20012e18 	.word	0x20012e18
 8004b98:	20012e20 	.word	0x20012e20
 8004b9c:	20012e1c 	.word	0x20012e1c
 8004ba0:	20012e2c 	.word	0x20012e2c

08004ba4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004bac:	4b28      	ldr	r3, [pc, #160]	; (8004c50 <prvInsertBlockIntoFreeList+0xac>)
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	e002      	b.n	8004bb8 <prvInsertBlockIntoFreeList+0x14>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d8f7      	bhi.n	8004bb2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	4413      	add	r3, r2
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d108      	bne.n	8004be6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	441a      	add	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	441a      	add	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d118      	bne.n	8004c2c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4b15      	ldr	r3, [pc, #84]	; (8004c54 <prvInsertBlockIntoFreeList+0xb0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d00d      	beq.n	8004c22 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	441a      	add	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	e008      	b.n	8004c34 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c22:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <prvInsertBlockIntoFreeList+0xb0>)
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	e003      	b.n	8004c34 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d002      	beq.n	8004c42 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004c42:	bf00      	nop
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	20012e10 	.word	0x20012e10
 8004c54:	20012e18 	.word	0x20012e18

08004c58 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004c5c:	4803      	ldr	r0, [pc, #12]	; (8004c6c <_cbSendSystemDesc+0x14>)
 8004c5e:	f002 f91b 	bl	8006e98 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004c62:	4803      	ldr	r0, [pc, #12]	; (8004c70 <_cbSendSystemDesc+0x18>)
 8004c64:	f002 f918 	bl	8006e98 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004c68:	bf00      	nop
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	08007714 	.word	0x08007714
 8004c70:	08007750 	.word	0x08007750

08004c74 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004c78:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <SEGGER_SYSVIEW_Conf+0x20>)
 8004c7a:	6818      	ldr	r0, [r3, #0]
 8004c7c:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <SEGGER_SYSVIEW_Conf+0x20>)
 8004c7e:	6819      	ldr	r1, [r3, #0]
 8004c80:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <SEGGER_SYSVIEW_Conf+0x24>)
 8004c82:	4a06      	ldr	r2, [pc, #24]	; (8004c9c <SEGGER_SYSVIEW_Conf+0x28>)
 8004c84:	f001 fc84 	bl	8006590 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004c88:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004c8c:	f001 fcc4 	bl	8006618 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004c90:	bf00      	nop
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	20000000 	.word	0x20000000
 8004c98:	08004c59 	.word	0x08004c59
 8004c9c:	080077ec 	.word	0x080077ec

08004ca0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	607b      	str	r3, [r7, #4]
 8004caa:	e033      	b.n	8004d14 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004cac:	491e      	ldr	r1, [pc, #120]	; (8004d28 <_cbSendTaskList+0x88>)
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	6818      	ldr	r0, [r3, #0]
 8004cbc:	491a      	ldr	r1, [pc, #104]	; (8004d28 <_cbSendTaskList+0x88>)
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	3304      	adds	r3, #4
 8004ccc:	6819      	ldr	r1, [r3, #0]
 8004cce:	4c16      	ldr	r4, [pc, #88]	; (8004d28 <_cbSendTaskList+0x88>)
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4423      	add	r3, r4
 8004cdc:	3308      	adds	r3, #8
 8004cde:	681c      	ldr	r4, [r3, #0]
 8004ce0:	4d11      	ldr	r5, [pc, #68]	; (8004d28 <_cbSendTaskList+0x88>)
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	442b      	add	r3, r5
 8004cee:	330c      	adds	r3, #12
 8004cf0:	681d      	ldr	r5, [r3, #0]
 8004cf2:	4e0d      	ldr	r6, [pc, #52]	; (8004d28 <_cbSendTaskList+0x88>)
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4433      	add	r3, r6
 8004d00:	3310      	adds	r3, #16
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	462b      	mov	r3, r5
 8004d08:	4622      	mov	r2, r4
 8004d0a:	f000 f8bd 	bl	8004e88 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3301      	adds	r3, #1
 8004d12:	607b      	str	r3, [r7, #4]
 8004d14:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <_cbSendTaskList+0x8c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d3c6      	bcc.n	8004cac <_cbSendTaskList+0xc>
  }
}
 8004d1e:	bf00      	nop
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d28:	20012e30 	.word	0x20012e30
 8004d2c:	20012ed0 	.word	0x20012ed0

08004d30 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d34:	b082      	sub	sp, #8
 8004d36:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004d38:	f7fe fb62 	bl	8003400 <xTaskGetTickCountFromISR>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2200      	movs	r2, #0
 8004d40:	469a      	mov	sl, r3
 8004d42:	4693      	mov	fp, r2
 8004d44:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004d48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	f04f 0a00 	mov.w	sl, #0
 8004d54:	f04f 0b00 	mov.w	fp, #0
 8004d58:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004d5c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004d60:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004d64:	4652      	mov	r2, sl
 8004d66:	465b      	mov	r3, fp
 8004d68:	1a14      	subs	r4, r2, r0
 8004d6a:	eb63 0501 	sbc.w	r5, r3, r1
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	00ab      	lsls	r3, r5, #2
 8004d78:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004d7c:	00a2      	lsls	r2, r4, #2
 8004d7e:	4614      	mov	r4, r2
 8004d80:	461d      	mov	r5, r3
 8004d82:	eb14 0800 	adds.w	r8, r4, r0
 8004d86:	eb45 0901 	adc.w	r9, r5, r1
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d9e:	4690      	mov	r8, r2
 8004da0:	4699      	mov	r9, r3
 8004da2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004da6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004daa:	4610      	mov	r0, r2
 8004dac:	4619      	mov	r1, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004db8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af02      	add	r7, sp, #8
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004dc6:	2205      	movs	r2, #5
 8004dc8:	492b      	ldr	r1, [pc, #172]	; (8004e78 <SYSVIEW_AddTask+0xc0>)
 8004dca:	68b8      	ldr	r0, [r7, #8]
 8004dcc:	f002 fc2e 	bl	800762c <memcmp>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d04b      	beq.n	8004e6e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004dd6:	4b29      	ldr	r3, [pc, #164]	; (8004e7c <SYSVIEW_AddTask+0xc4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b07      	cmp	r3, #7
 8004ddc:	d903      	bls.n	8004de6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004dde:	4828      	ldr	r0, [pc, #160]	; (8004e80 <SYSVIEW_AddTask+0xc8>)
 8004de0:	f002 fb76 	bl	80074d0 <SEGGER_SYSVIEW_Warn>
    return;
 8004de4:	e044      	b.n	8004e70 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004de6:	4b25      	ldr	r3, [pc, #148]	; (8004e7c <SYSVIEW_AddTask+0xc4>)
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4926      	ldr	r1, [pc, #152]	; (8004e84 <SYSVIEW_AddTask+0xcc>)
 8004dec:	4613      	mov	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004dfa:	4b20      	ldr	r3, [pc, #128]	; (8004e7c <SYSVIEW_AddTask+0xc4>)
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	4921      	ldr	r1, [pc, #132]	; (8004e84 <SYSVIEW_AddTask+0xcc>)
 8004e00:	4613      	mov	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004e10:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <SYSVIEW_AddTask+0xc4>)
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	491b      	ldr	r1, [pc, #108]	; (8004e84 <SYSVIEW_AddTask+0xcc>)
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	440b      	add	r3, r1
 8004e20:	3308      	adds	r3, #8
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004e26:	4b15      	ldr	r3, [pc, #84]	; (8004e7c <SYSVIEW_AddTask+0xc4>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4916      	ldr	r1, [pc, #88]	; (8004e84 <SYSVIEW_AddTask+0xcc>)
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	330c      	adds	r3, #12
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <SYSVIEW_AddTask+0xc4>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	4910      	ldr	r1, [pc, #64]	; (8004e84 <SYSVIEW_AddTask+0xcc>)
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	3310      	adds	r3, #16
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004e52:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <SYSVIEW_AddTask+0xc4>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3301      	adds	r3, #1
 8004e58:	4a08      	ldr	r2, [pc, #32]	; (8004e7c <SYSVIEW_AddTask+0xc4>)
 8004e5a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 f80e 	bl	8004e88 <SYSVIEW_SendTaskInfo>
 8004e6c:	e000      	b.n	8004e70 <SYSVIEW_AddTask+0xb8>
    return;
 8004e6e:	bf00      	nop

}
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	08007760 	.word	0x08007760
 8004e7c:	20012ed0 	.word	0x20012ed0
 8004e80:	08007768 	.word	0x08007768
 8004e84:	20012e30 	.word	0x20012e30

08004e88 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08a      	sub	sp, #40	; 0x28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004e96:	f107 0310 	add.w	r3, r7, #16
 8004e9a:	2218      	movs	r2, #24
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f002 fbe2 	bl	8007668 <memset>
  TaskInfo.TaskID     = TaskID;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb6:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004eb8:	f107 0310 	add.w	r3, r7, #16
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f001 fef3 	bl	8006ca8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004ec2:	bf00      	nop
 8004ec4:	3728      	adds	r7, #40	; 0x28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <__NVIC_EnableIRQ>:
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	db0b      	blt.n	8004ef6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ede:	79fb      	ldrb	r3, [r7, #7]
 8004ee0:	f003 021f 	and.w	r2, r3, #31
 8004ee4:	4907      	ldr	r1, [pc, #28]	; (8004f04 <__NVIC_EnableIRQ+0x38>)
 8004ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	2001      	movs	r0, #1
 8004eee:	fa00 f202 	lsl.w	r2, r0, r2
 8004ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	e000e100 	.word	0xe000e100

08004f08 <__NVIC_SetPriority>:
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	6039      	str	r1, [r7, #0]
 8004f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	db0a      	blt.n	8004f32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	490c      	ldr	r1, [pc, #48]	; (8004f54 <__NVIC_SetPriority+0x4c>)
 8004f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f26:	0112      	lsls	r2, r2, #4
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004f30:	e00a      	b.n	8004f48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	4908      	ldr	r1, [pc, #32]	; (8004f58 <__NVIC_SetPriority+0x50>)
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	3b04      	subs	r3, #4
 8004f40:	0112      	lsls	r2, r2, #4
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	440b      	add	r3, r1
 8004f46:	761a      	strb	r2, [r3, #24]
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	e000e100 	.word	0xe000e100
 8004f58:	e000ed00 	.word	0xe000ed00

08004f5c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004f62:	f002 fb11 	bl	8007588 <SEGGER_SYSVIEW_IsStarted>
 8004f66:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004f6e:	f001 fd1f 	bl	80069b0 <SEGGER_SYSVIEW_Start>
  }
}
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004f86:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <_cbOnUARTRx+0x3c>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d806      	bhi.n	8004f9c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004f8e:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <_cbOnUARTRx+0x3c>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	3301      	adds	r3, #1
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	4b08      	ldr	r3, [pc, #32]	; (8004fb8 <_cbOnUARTRx+0x3c>)
 8004f98:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004f9a:	e009      	b.n	8004fb0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004f9c:	f7ff ffde 	bl	8004f5c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004fa0:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <_cbOnUARTRx+0x3c>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	1dfb      	adds	r3, r7, #7
 8004fa8:	2201      	movs	r2, #1
 8004faa:	4619      	mov	r1, r3
 8004fac:	f000 fb9e 	bl	80056ec <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004fb0:	bf00      	nop
}
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	20000014 	.word	0x20000014

08004fbc <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004fc4:	4b14      	ldr	r3, [pc, #80]	; (8005018 <_cbOnUARTTx+0x5c>)
 8004fc6:	785b      	ldrb	r3, [r3, #1]
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d80f      	bhi.n	8004fec <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004fcc:	4b12      	ldr	r3, [pc, #72]	; (8005018 <_cbOnUARTTx+0x5c>)
 8004fce:	785b      	ldrb	r3, [r3, #1]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	4b12      	ldr	r3, [pc, #72]	; (800501c <_cbOnUARTTx+0x60>)
 8004fd4:	5c9a      	ldrb	r2, [r3, r2]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004fda:	4b0f      	ldr	r3, [pc, #60]	; (8005018 <_cbOnUARTTx+0x5c>)
 8004fdc:	785b      	ldrb	r3, [r3, #1]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	4b0d      	ldr	r3, [pc, #52]	; (8005018 <_cbOnUARTTx+0x5c>)
 8004fe4:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004fea:	e00f      	b.n	800500c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004fec:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <_cbOnUARTTx+0x5c>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fa1d 	bl	8005434 <SEGGER_RTT_ReadUpBufferNoLock>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	da02      	bge.n	800500a <_cbOnUARTTx+0x4e>
    r = 0;
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	e000      	b.n	800500c <_cbOnUARTTx+0x50>
  }
Done:
 800500a:	bf00      	nop
  return r;
 800500c:	68fb      	ldr	r3, [r7, #12]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20000014 	.word	0x20000014
 800501c:	080077f4 	.word	0x080077f4

08005020 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005028:	4a04      	ldr	r2, [pc, #16]	; (800503c <SEGGER_UART_init+0x1c>)
 800502a:	4905      	ldr	r1, [pc, #20]	; (8005040 <SEGGER_UART_init+0x20>)
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 f865 	bl	80050fc <HIF_UART_Init>
}
 8005032:	bf00      	nop
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	08004f7d 	.word	0x08004f7d
 8005040:	08004fbd 	.word	0x08004fbd

08005044 <USART3_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART3_IRQHandler(void);
void USART3_IRQHandler(void) {
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800504a:	4b1e      	ldr	r3, [pc, #120]	; (80050c4 <USART3_IRQHandler+0x80>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	2b00      	cmp	r3, #0
 8005058:	d011      	beq.n	800507e <USART3_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 800505a:	4b1b      	ldr	r3, [pc, #108]	; (80050c8 <USART3_IRQHandler+0x84>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	b2db      	uxtb	r3, r3
 8005060:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f003 030b 	and.w	r3, r3, #11
 8005068:	2b00      	cmp	r3, #0
 800506a:	d108      	bne.n	800507e <USART3_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800506c:	4b17      	ldr	r3, [pc, #92]	; (80050cc <USART3_IRQHandler+0x88>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d004      	beq.n	800507e <USART3_IRQHandler+0x3a>
        _cbOnRx(v);
 8005074:	4b15      	ldr	r3, [pc, #84]	; (80050cc <USART3_IRQHandler+0x88>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	79fa      	ldrb	r2, [r7, #7]
 800507a:	4610      	mov	r0, r2
 800507c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01a      	beq.n	80050be <USART3_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005088:	4b11      	ldr	r3, [pc, #68]	; (80050d0 <USART3_IRQHandler+0x8c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d015      	beq.n	80050bc <USART3_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005090:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <USART3_IRQHandler+0x8c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	1dfa      	adds	r2, r7, #7
 8005096:	4610      	mov	r0, r2
 8005098:	4798      	blx	r3
 800509a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <USART3_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80050a2:	4b0c      	ldr	r3, [pc, #48]	; (80050d4 <USART3_IRQHandler+0x90>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a0b      	ldr	r2, [pc, #44]	; (80050d4 <USART3_IRQHandler+0x90>)
 80050a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e006      	b.n	80050be <USART3_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80050b0:	4b04      	ldr	r3, [pc, #16]	; (80050c4 <USART3_IRQHandler+0x80>)
 80050b2:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 80050b4:	79fa      	ldrb	r2, [r7, #7]
 80050b6:	4b08      	ldr	r3, [pc, #32]	; (80050d8 <USART3_IRQHandler+0x94>)
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	e000      	b.n	80050be <USART3_IRQHandler+0x7a>
      return;
 80050bc:	bf00      	nop
    }
  }
}
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	4000481c 	.word	0x4000481c
 80050c8:	40004824 	.word	0x40004824
 80050cc:	20012ed4 	.word	0x20012ed4
 80050d0:	20012ed8 	.word	0x20012ed8
 80050d4:	40004800 	.word	0x40004800
 80050d8:	40004828 	.word	0x40004828

080050dc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80050e0:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a04      	ldr	r2, [pc, #16]	; (80050f8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80050e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ea:	6013      	str	r3, [r2, #0]
}
 80050ec:	bf00      	nop
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40004800 	.word	0x40004800

080050fc <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  // Habilitar reloj de USART3 y puerto D
  RCC_APB1ENR |= (1 << 18);       // Habilitar reloj USART3 (APB1)
 8005108:	4b2e      	ldr	r3, [pc, #184]	; (80051c4 <HIF_UART_Init+0xc8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a2d      	ldr	r2, [pc, #180]	; (80051c4 <HIF_UART_Init+0xc8>)
 800510e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005112:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 << 3);        // Habilitar reloj GPIO D
 8005114:	4b2c      	ldr	r3, [pc, #176]	; (80051c8 <HIF_UART_Init+0xcc>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a2b      	ldr	r2, [pc, #172]	; (80051c8 <HIF_UART_Init+0xcc>)
 800511a:	f043 0308 	orr.w	r3, r3, #8
 800511e:	6013      	str	r3, [r2, #0]

  // Configurar los pines PD8 y PD9 para función alternativa AF7 (USART3)
  v  = GPIO_AFRH;
 8005120:	4b2a      	ldr	r3, [pc, #168]	; (80051cc <HIF_UART_Init+0xd0>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (15UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800512c:	613b      	str	r3, [r7, #16]
  v |=  ((7UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (7UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005134:	613b      	str	r3, [r7, #16]
  GPIO_AFRH = v;
 8005136:	4a25      	ldr	r2, [pc, #148]	; (80051cc <HIF_UART_Init+0xd0>)
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	6013      	str	r3, [r2, #0]

  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 800513c:	4b24      	ldr	r3, [pc, #144]	; (80051d0 <HIF_UART_Init+0xd4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005148:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8005150:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8005152:	4a1f      	ldr	r2, [pc, #124]	; (80051d0 <HIF_UART_Init+0xd4>)
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	6013      	str	r3, [r2, #0]

  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800515e:	4a1d      	ldr	r2, [pc, #116]	; (80051d4 <HIF_UART_Init+0xd8>)
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	fbb2 f3f3 	udiv	r3, r2, r3
 8005166:	3301      	adds	r3, #1
 8005168:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	085b      	lsrs	r3, r3, #1
 800516e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005176:	d302      	bcc.n	800517e <HIF_UART_Init+0x82>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005178:	f640 73ff 	movw	r3, #4095	; 0xfff
 800517c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d004      	beq.n	800518e <HIF_UART_Init+0x92>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	4a13      	ldr	r2, [pc, #76]	; (80051d8 <HIF_UART_Init+0xdc>)
 800518a:	b29b      	uxth	r3, r3
 800518c:	6013      	str	r3, [r2, #0]
  }

  //
  // Initialize USART
  //
  USART_CR1 = 0
 800518e:	4b13      	ldr	r3, [pc, #76]	; (80051dc <HIF_UART_Init+0xe0>)
 8005190:	f248 022d 	movw	r2, #32813	; 0x802d
 8005194:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005196:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <HIF_UART_Init+0xe4>)
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800519c:	4b11      	ldr	r3, [pc, #68]	; (80051e4 <HIF_UART_Init+0xe8>)
 800519e:	2280      	movs	r2, #128	; 0x80
 80051a0:	601a      	str	r2, [r3, #0]
            ;

  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80051a2:	4a11      	ldr	r2, [pc, #68]	; (80051e8 <HIF_UART_Init+0xec>)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80051a8:	4a10      	ldr	r2, [pc, #64]	; (80051ec <HIF_UART_Init+0xf0>)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80051ae:	2106      	movs	r1, #6
 80051b0:	2027      	movs	r0, #39	; 0x27
 80051b2:	f7ff fea9 	bl	8004f08 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80051b6:	2027      	movs	r0, #39	; 0x27
 80051b8:	f7ff fe88 	bl	8004ecc <__NVIC_EnableIRQ>
}
 80051bc:	bf00      	nop
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40023840 	.word	0x40023840
 80051c8:	40023830 	.word	0x40023830
 80051cc:	40020c24 	.word	0x40020c24
 80051d0:	40020c00 	.word	0x40020c00
 80051d4:	066ff300 	.word	0x066ff300
 80051d8:	4000480c 	.word	0x4000480c
 80051dc:	40004800 	.word	0x40004800
 80051e0:	40004804 	.word	0x40004804
 80051e4:	40004808 	.word	0x40004808
 80051e8:	20012ed4 	.word	0x20012ed4
 80051ec:	20012ed8 	.word	0x20012ed8

080051f0 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80051f6:	4b26      	ldr	r3, [pc, #152]	; (8005290 <_DoInit+0xa0>)
 80051f8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80051fa:	22a8      	movs	r2, #168	; 0xa8
 80051fc:	2100      	movs	r1, #0
 80051fe:	6838      	ldr	r0, [r7, #0]
 8005200:	f002 fa32 	bl	8007668 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	2203      	movs	r2, #3
 8005208:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2203      	movs	r2, #3
 800520e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	4a20      	ldr	r2, [pc, #128]	; (8005294 <_DoInit+0xa4>)
 8005214:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	4a1f      	ldr	r2, [pc, #124]	; (8005298 <_DoInit+0xa8>)
 800521a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005222:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2200      	movs	r2, #0
 8005228:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2200      	movs	r2, #0
 800522e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2200      	movs	r2, #0
 8005234:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	4a16      	ldr	r2, [pc, #88]	; (8005294 <_DoInit+0xa4>)
 800523a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	4a17      	ldr	r2, [pc, #92]	; (800529c <_DoInit+0xac>)
 8005240:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2210      	movs	r2, #16
 8005246:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2200      	movs	r2, #0
 800524c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2200      	movs	r2, #0
 8005252:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2200      	movs	r2, #0
 8005258:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800525a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800525e:	2300      	movs	r3, #0
 8005260:	607b      	str	r3, [r7, #4]
 8005262:	e00c      	b.n	800527e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f1c3 030f 	rsb	r3, r3, #15
 800526a:	4a0d      	ldr	r2, [pc, #52]	; (80052a0 <_DoInit+0xb0>)
 800526c:	5cd1      	ldrb	r1, [r2, r3]
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4413      	add	r3, r2
 8005274:	460a      	mov	r2, r1
 8005276:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3301      	adds	r3, #1
 800527c:	607b      	str	r3, [r7, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b0f      	cmp	r3, #15
 8005282:	d9ef      	bls.n	8005264 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005284:	f3bf 8f5f 	dmb	sy
}
 8005288:	bf00      	nop
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	20012edc 	.word	0x20012edc
 8005294:	080077b8 	.word	0x080077b8
 8005298:	20012f84 	.word	0x20012f84
 800529c:	20013384 	.word	0x20013384
 80052a0:	080077f8 	.word	0x080077f8

080052a4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08a      	sub	sp, #40	; 0x28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80052b0:	2300      	movs	r3, #0
 80052b2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d905      	bls.n	80052d4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	3b01      	subs	r3, #1
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
 80052d2:	e007      	b.n	80052e4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	69b9      	ldr	r1, [r7, #24]
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	1acb      	subs	r3, r1, r3
 80052de:	4413      	add	r3, r2
 80052e0:	3b01      	subs	r3, #1
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ee:	4293      	cmp	r3, r2
 80052f0:	bf28      	it	cs
 80052f2:	4613      	movcs	r3, r2
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80052f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4293      	cmp	r3, r2
 80052fc:	bf28      	it	cs
 80052fe:	4613      	movcs	r3, r2
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	4413      	add	r3, r2
 800530a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800530c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530e:	68b9      	ldr	r1, [r7, #8]
 8005310:	6978      	ldr	r0, [r7, #20]
 8005312:	f002 f99b 	bl	800764c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005316:	6a3a      	ldr	r2, [r7, #32]
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	4413      	add	r3, r2
 800531c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	4413      	add	r3, r2
 8005324:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	4413      	add	r3, r2
 8005334:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	429a      	cmp	r2, r3
 800533e:	d101      	bne.n	8005344 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005340:	2300      	movs	r3, #0
 8005342:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005344:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1b2      	bne.n	80052ba <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005354:	6a3b      	ldr	r3, [r7, #32]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3728      	adds	r7, #40	; 0x28
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800535e:	b580      	push	{r7, lr}
 8005360:	b088      	sub	sp, #32
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	429a      	cmp	r2, r3
 8005380:	d911      	bls.n	80053a6 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	68b9      	ldr	r1, [r7, #8]
 8005390:	6938      	ldr	r0, [r7, #16]
 8005392:	f002 f95b 	bl	800764c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005396:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800539a:	69fa      	ldr	r2, [r7, #28]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	441a      	add	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80053a4:	e01f      	b.n	80053e6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	4413      	add	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	6938      	ldr	r0, [r7, #16]
 80053ba:	f002 f947 	bl	800764c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	4413      	add	r3, r2
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4619      	mov	r1, r3
 80053d6:	6938      	ldr	r0, [r7, #16]
 80053d8:	f002 f938 	bl	800764c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80053dc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	60da      	str	r2, [r3, #12]
}
 80053e6:	bf00      	nop
 80053e8:	3720      	adds	r7, #32
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80053ee:	b480      	push	{r7}
 80053f0:	b087      	sub	sp, #28
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	429a      	cmp	r2, r3
 8005408:	d808      	bhi.n	800541c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad2      	subs	r2, r2, r3
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	4413      	add	r3, r2
 8005416:	3b01      	subs	r3, #1
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	e004      	b.n	8005426 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	3b01      	subs	r3, #1
 8005424:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005426:	697b      	ldr	r3, [r7, #20]
}
 8005428:	4618      	mov	r0, r3
 800542a:	371c      	adds	r7, #28
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005434:	b580      	push	{r7, lr}
 8005436:	b08c      	sub	sp, #48	; 0x30
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005440:	4b3e      	ldr	r3, [pc, #248]	; (800553c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005442:	623b      	str	r3, [r7, #32]
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b53      	cmp	r3, #83	; 0x53
 800544c:	d001      	beq.n	8005452 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800544e:	f7ff fecf 	bl	80051f0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	4613      	mov	r3, r2
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	4413      	add	r3, r2
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	4a37      	ldr	r2, [pc, #220]	; (800553c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005460:	4413      	add	r3, r2
 8005462:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005474:	2300      	movs	r3, #0
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	429a      	cmp	r2, r3
 800547e:	d92b      	bls.n	80054d8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4293      	cmp	r3, r2
 8005490:	bf28      	it	cs
 8005492:	4613      	movcs	r3, r2
 8005494:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549c:	4413      	add	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	6939      	ldr	r1, [r7, #16]
 80054a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054a6:	f002 f8d1 	bl	800764c <memcpy>
    NumBytesRead += NumBytesRem;
 80054aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	4413      	add	r3, r2
 80054b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80054b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	4413      	add	r3, r2
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80054c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	4413      	add	r3, r2
 80054c8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d101      	bne.n	80054d8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80054d4:	2300      	movs	r3, #0
 80054d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4293      	cmp	r3, r2
 80054e6:	bf28      	it	cs
 80054e8:	4613      	movcs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d019      	beq.n	8005526 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f8:	4413      	add	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	6939      	ldr	r1, [r7, #16]
 8005500:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005502:	f002 f8a3 	bl	800764c <memcpy>
    NumBytesRead += NumBytesRem;
 8005506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	4413      	add	r3, r2
 800550c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800550e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	4413      	add	r3, r2
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800551e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	4413      	add	r3, r2
 8005524:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005530:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005534:	4618      	mov	r0, r3
 8005536:	3730      	adds	r7, #48	; 0x30
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	20012edc 	.word	0x20012edc

08005540 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005540:	b580      	push	{r7, lr}
 8005542:	b08c      	sub	sp, #48	; 0x30
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800554c:	4b3e      	ldr	r3, [pc, #248]	; (8005648 <SEGGER_RTT_ReadNoLock+0x108>)
 800554e:	623b      	str	r3, [r7, #32]
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b53      	cmp	r3, #83	; 0x53
 8005558:	d001      	beq.n	800555e <SEGGER_RTT_ReadNoLock+0x1e>
 800555a:	f7ff fe49 	bl	80051f0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	4613      	mov	r3, r2
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	4413      	add	r3, r2
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	3360      	adds	r3, #96	; 0x60
 800556a:	4a37      	ldr	r2, [pc, #220]	; (8005648 <SEGGER_RTT_ReadNoLock+0x108>)
 800556c:	4413      	add	r3, r2
 800556e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005580:	2300      	movs	r3, #0
 8005582:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005584:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	429a      	cmp	r2, r3
 800558a:	d92b      	bls.n	80055e4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4293      	cmp	r3, r2
 800559c:	bf28      	it	cs
 800559e:	4613      	movcs	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a8:	4413      	add	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	6939      	ldr	r1, [r7, #16]
 80055b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055b2:	f002 f84b 	bl	800764c <memcpy>
    NumBytesRead += NumBytesRem;
 80055b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	4413      	add	r3, r2
 80055bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80055be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	4413      	add	r3, r2
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80055ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	4413      	add	r3, r2
 80055d4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055dc:	429a      	cmp	r2, r3
 80055de:	d101      	bne.n	80055e4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80055e0:	2300      	movs	r3, #0
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4293      	cmp	r3, r2
 80055f2:	bf28      	it	cs
 80055f4:	4613      	movcs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d019      	beq.n	8005632 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005604:	4413      	add	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	6939      	ldr	r1, [r7, #16]
 800560c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800560e:	f002 f81d 	bl	800764c <memcpy>
    NumBytesRead += NumBytesRem;
 8005612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	4413      	add	r3, r2
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800561a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	4413      	add	r3, r2
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800562a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	4413      	add	r3, r2
 8005630:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800563c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800563e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005640:	4618      	mov	r0, r3
 8005642:	3730      	adds	r7, #48	; 0x30
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	20012edc 	.word	0x20012edc

0800564c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4613      	mov	r3, r2
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	4413      	add	r3, r2
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	3360      	adds	r3, #96	; 0x60
 8005668:	4a1f      	ldr	r2, [pc, #124]	; (80056e8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800566a:	4413      	add	r3, r2
 800566c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d029      	beq.n	80056ca <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005676:	2b02      	cmp	r3, #2
 8005678:	d82e      	bhi.n	80056d8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800567e:	2b01      	cmp	r3, #1
 8005680:	d013      	beq.n	80056aa <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005682:	e029      	b.n	80056d8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005684:	6978      	ldr	r0, [r7, #20]
 8005686:	f7ff feb2 	bl	80053ee <_GetAvailWriteSpace>
 800568a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	429a      	cmp	r2, r3
 8005692:	d202      	bcs.n	800569a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005694:	2300      	movs	r3, #0
 8005696:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005698:	e021      	b.n	80056de <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	69b9      	ldr	r1, [r7, #24]
 80056a2:	6978      	ldr	r0, [r7, #20]
 80056a4:	f7ff fe5b 	bl	800535e <_WriteNoCheck>
    break;
 80056a8:	e019      	b.n	80056de <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80056aa:	6978      	ldr	r0, [r7, #20]
 80056ac:	f7ff fe9f 	bl	80053ee <_GetAvailWriteSpace>
 80056b0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	4293      	cmp	r3, r2
 80056b8:	bf28      	it	cs
 80056ba:	4613      	movcs	r3, r2
 80056bc:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	69b9      	ldr	r1, [r7, #24]
 80056c2:	6978      	ldr	r0, [r7, #20]
 80056c4:	f7ff fe4b 	bl	800535e <_WriteNoCheck>
    break;
 80056c8:	e009      	b.n	80056de <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	69b9      	ldr	r1, [r7, #24]
 80056ce:	6978      	ldr	r0, [r7, #20]
 80056d0:	f7ff fde8 	bl	80052a4 <_WriteBlocking>
 80056d4:	61f8      	str	r0, [r7, #28]
    break;
 80056d6:	e002      	b.n	80056de <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80056d8:	2300      	movs	r3, #0
 80056da:	61fb      	str	r3, [r7, #28]
    break;
 80056dc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80056de:	69fb      	ldr	r3, [r7, #28]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3720      	adds	r7, #32
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	20012edc 	.word	0x20012edc

080056ec <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80056f8:	4b0e      	ldr	r3, [pc, #56]	; (8005734 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80056fa:	61fb      	str	r3, [r7, #28]
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b53      	cmp	r3, #83	; 0x53
 8005704:	d001      	beq.n	800570a <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005706:	f7ff fd73 	bl	80051f0 <_DoInit>
  SEGGER_RTT_LOCK();
 800570a:	f3ef 8311 	mrs	r3, BASEPRI
 800570e:	f04f 0120 	mov.w	r1, #32
 8005712:	f381 8811 	msr	BASEPRI, r1
 8005716:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f7ff ff95 	bl	800564c <SEGGER_RTT_WriteDownBufferNoLock>
 8005722:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800572a:	697b      	ldr	r3, [r7, #20]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3720      	adds	r7, #32
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	20012edc 	.word	0x20012edc

08005738 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005746:	4b3d      	ldr	r3, [pc, #244]	; (800583c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005748:	61bb      	str	r3, [r7, #24]
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b53      	cmp	r3, #83	; 0x53
 8005752:	d001      	beq.n	8005758 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005754:	f7ff fd4c 	bl	80051f0 <_DoInit>
  SEGGER_RTT_LOCK();
 8005758:	f3ef 8311 	mrs	r3, BASEPRI
 800575c:	f04f 0120 	mov.w	r1, #32
 8005760:	f381 8811 	msr	BASEPRI, r1
 8005764:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005766:	4b35      	ldr	r3, [pc, #212]	; (800583c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005768:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800576a:	2300      	movs	r3, #0
 800576c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800576e:	6939      	ldr	r1, [r7, #16]
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	4613      	mov	r3, r2
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	4413      	add	r3, r2
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	440b      	add	r3, r1
 800577e:	3304      	adds	r3, #4
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d008      	beq.n	8005798 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	3301      	adds	r3, #1
 800578a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	69fa      	ldr	r2, [r7, #28]
 8005792:	429a      	cmp	r2, r3
 8005794:	dbeb      	blt.n	800576e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005796:	e000      	b.n	800579a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005798:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	69fa      	ldr	r2, [r7, #28]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	da3f      	bge.n	8005824 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80057a4:	6939      	ldr	r1, [r7, #16]
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	4613      	mov	r3, r2
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	4413      	add	r3, r2
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	440b      	add	r3, r1
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80057b8:	6939      	ldr	r1, [r7, #16]
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	4613      	mov	r3, r2
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4413      	add	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	440b      	add	r3, r1
 80057c8:	3304      	adds	r3, #4
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80057ce:	6939      	ldr	r1, [r7, #16]
 80057d0:	69fa      	ldr	r2, [r7, #28]
 80057d2:	4613      	mov	r3, r2
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	4413      	add	r3, r2
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	440b      	add	r3, r1
 80057dc:	3320      	adds	r3, #32
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80057e2:	6939      	ldr	r1, [r7, #16]
 80057e4:	69fa      	ldr	r2, [r7, #28]
 80057e6:	4613      	mov	r3, r2
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	4413      	add	r3, r2
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	440b      	add	r3, r1
 80057f0:	3328      	adds	r3, #40	; 0x28
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80057f6:	6939      	ldr	r1, [r7, #16]
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	4613      	mov	r3, r2
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	4413      	add	r3, r2
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	440b      	add	r3, r1
 8005804:	3324      	adds	r3, #36	; 0x24
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800580a:	6939      	ldr	r1, [r7, #16]
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	4613      	mov	r3, r2
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	4413      	add	r3, r2
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	440b      	add	r3, r1
 8005818:	332c      	adds	r3, #44	; 0x2c
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800581e:	f3bf 8f5f 	dmb	sy
 8005822:	e002      	b.n	800582a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005824:	f04f 33ff 	mov.w	r3, #4294967295
 8005828:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005830:	69fb      	ldr	r3, [r7, #28]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3720      	adds	r7, #32
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20012edc 	.word	0x20012edc

08005840 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005840:	b580      	push	{r7, lr}
 8005842:	b08a      	sub	sp, #40	; 0x28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800584e:	4b21      	ldr	r3, [pc, #132]	; (80058d4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005850:	623b      	str	r3, [r7, #32]
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b53      	cmp	r3, #83	; 0x53
 800585a:	d001      	beq.n	8005860 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800585c:	f7ff fcc8 	bl	80051f0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005860:	4b1c      	ldr	r3, [pc, #112]	; (80058d4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005862:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b02      	cmp	r3, #2
 8005868:	d82c      	bhi.n	80058c4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800586a:	f3ef 8311 	mrs	r3, BASEPRI
 800586e:	f04f 0120 	mov.w	r1, #32
 8005872:	f381 8811 	msr	BASEPRI, r1
 8005876:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4613      	mov	r3, r2
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	4413      	add	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	3360      	adds	r3, #96	; 0x60
 8005884:	69fa      	ldr	r2, [r7, #28]
 8005886:	4413      	add	r3, r2
 8005888:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00e      	beq.n	80058ae <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2200      	movs	r2, #0
 80058a6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2200      	movs	r2, #0
 80058ac:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80058b4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80058be:	2300      	movs	r3, #0
 80058c0:	627b      	str	r3, [r7, #36]	; 0x24
 80058c2:	e002      	b.n	80058ca <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80058c4:	f04f 33ff 	mov.w	r3, #4294967295
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3728      	adds	r7, #40	; 0x28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	20012edc 	.word	0x20012edc

080058d8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d105      	bne.n	80058f6 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	60fa      	str	r2, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	701a      	strb	r2, [r3, #0]
 80058f4:	e022      	b.n	800593c <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	60fa      	str	r2, [r7, #12]
 8005900:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b80      	cmp	r3, #128	; 0x80
 8005906:	d90a      	bls.n	800591e <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005908:	2380      	movs	r3, #128	; 0x80
 800590a:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 800590c:	e007      	b.n	800591e <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	1c53      	adds	r3, r2, #1
 8005912:	60bb      	str	r3, [r7, #8]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	1c59      	adds	r1, r3, #1
 8005918:	60f9      	str	r1, [r7, #12]
 800591a:	7812      	ldrb	r2, [r2, #0]
 800591c:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	1e5a      	subs	r2, r3, #1
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <_EncodeStr+0x58>
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1ee      	bne.n	800590e <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	b2da      	uxtb	r2, r3
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 800593c:	68fb      	ldr	r3, [r7, #12]
}
 800593e:	4618      	mov	r0, r3
 8005940:	371c      	adds	r7, #28
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3307      	adds	r3, #7
}
 8005956:	4618      	mov	r0, r3
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
	...

08005964 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800596a:	4b35      	ldr	r3, [pc, #212]	; (8005a40 <_HandleIncomingPacket+0xdc>)
 800596c:	7e1b      	ldrb	r3, [r3, #24]
 800596e:	4618      	mov	r0, r3
 8005970:	1cfb      	adds	r3, r7, #3
 8005972:	2201      	movs	r2, #1
 8005974:	4619      	mov	r1, r3
 8005976:	f7ff fde3 	bl	8005540 <SEGGER_RTT_ReadNoLock>
 800597a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d052      	beq.n	8005a28 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8005982:	78fb      	ldrb	r3, [r7, #3]
 8005984:	2b80      	cmp	r3, #128	; 0x80
 8005986:	d031      	beq.n	80059ec <_HandleIncomingPacket+0x88>
 8005988:	2b80      	cmp	r3, #128	; 0x80
 800598a:	dc40      	bgt.n	8005a0e <_HandleIncomingPacket+0xaa>
 800598c:	2b07      	cmp	r3, #7
 800598e:	dc15      	bgt.n	80059bc <_HandleIncomingPacket+0x58>
 8005990:	2b00      	cmp	r3, #0
 8005992:	dd3c      	ble.n	8005a0e <_HandleIncomingPacket+0xaa>
 8005994:	3b01      	subs	r3, #1
 8005996:	2b06      	cmp	r3, #6
 8005998:	d839      	bhi.n	8005a0e <_HandleIncomingPacket+0xaa>
 800599a:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <_HandleIncomingPacket+0x3c>)
 800599c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a0:	080059c3 	.word	0x080059c3
 80059a4:	080059c9 	.word	0x080059c9
 80059a8:	080059cf 	.word	0x080059cf
 80059ac:	080059d5 	.word	0x080059d5
 80059b0:	080059db 	.word	0x080059db
 80059b4:	080059e1 	.word	0x080059e1
 80059b8:	080059e7 	.word	0x080059e7
 80059bc:	2b7f      	cmp	r3, #127	; 0x7f
 80059be:	d035      	beq.n	8005a2c <_HandleIncomingPacket+0xc8>
 80059c0:	e025      	b.n	8005a0e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80059c2:	f000 fff5 	bl	80069b0 <SEGGER_SYSVIEW_Start>
      break;
 80059c6:	e036      	b.n	8005a36 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80059c8:	f001 f8ae 	bl	8006b28 <SEGGER_SYSVIEW_Stop>
      break;
 80059cc:	e033      	b.n	8005a36 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80059ce:	f001 fa87 	bl	8006ee0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80059d2:	e030      	b.n	8005a36 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80059d4:	f001 fa4c 	bl	8006e70 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80059d8:	e02d      	b.n	8005a36 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80059da:	f001 f8cb 	bl	8006b74 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80059de:	e02a      	b.n	8005a36 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80059e0:	f001 fd24 	bl	800742c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80059e4:	e027      	b.n	8005a36 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80059e6:	f001 fd03 	bl	80073f0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80059ea:	e024      	b.n	8005a36 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80059ec:	4b14      	ldr	r3, [pc, #80]	; (8005a40 <_HandleIncomingPacket+0xdc>)
 80059ee:	7e1b      	ldrb	r3, [r3, #24]
 80059f0:	4618      	mov	r0, r3
 80059f2:	1cfb      	adds	r3, r7, #3
 80059f4:	2201      	movs	r2, #1
 80059f6:	4619      	mov	r1, r3
 80059f8:	f7ff fda2 	bl	8005540 <SEGGER_RTT_ReadNoLock>
 80059fc:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d015      	beq.n	8005a30 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f001 fc68 	bl	80072dc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005a0c:	e010      	b.n	8005a30 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005a0e:	78fb      	ldrb	r3, [r7, #3]
 8005a10:	b25b      	sxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	da0e      	bge.n	8005a34 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005a16:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <_HandleIncomingPacket+0xdc>)
 8005a18:	7e1b      	ldrb	r3, [r3, #24]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	1cfb      	adds	r3, r7, #3
 8005a1e:	2201      	movs	r2, #1
 8005a20:	4619      	mov	r1, r3
 8005a22:	f7ff fd8d 	bl	8005540 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005a26:	e005      	b.n	8005a34 <_HandleIncomingPacket+0xd0>
    }
  }
 8005a28:	bf00      	nop
 8005a2a:	e004      	b.n	8005a36 <_HandleIncomingPacket+0xd2>
      break;
 8005a2c:	bf00      	nop
 8005a2e:	e002      	b.n	8005a36 <_HandleIncomingPacket+0xd2>
      break;
 8005a30:	bf00      	nop
 8005a32:	e000      	b.n	8005a36 <_HandleIncomingPacket+0xd2>
      break;
 8005a34:	bf00      	nop
}
 8005a36:	bf00      	nop
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	2001439c 	.word	0x2001439c

08005a44 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08c      	sub	sp, #48	; 0x30
 8005a48:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005a4e:	1d3b      	adds	r3, r7, #4
 8005a50:	3301      	adds	r3, #1
 8005a52:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a58:	4b32      	ldr	r3, [pc, #200]	; (8005b24 <_TrySendOverflowPacket+0xe0>)
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a5e:	e00b      	b.n	8005a78 <_TrySendOverflowPacket+0x34>
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a66:	1c59      	adds	r1, r3, #1
 8005a68:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a74:	09db      	lsrs	r3, r3, #7
 8005a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a7c:	d8f0      	bhi.n	8005a60 <_TrySendOverflowPacket+0x1c>
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a8e:	4b26      	ldr	r3, [pc, #152]	; (8005b28 <_TrySendOverflowPacket+0xe4>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8005a94:	4b23      	ldr	r3, [pc, #140]	; (8005b24 <_TrySendOverflowPacket+0xe0>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	623b      	str	r3, [r7, #32]
 8005aa6:	e00b      	b.n	8005ac0 <_TrySendOverflowPacket+0x7c>
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	1c59      	adds	r1, r3, #1
 8005ab0:	6279      	str	r1, [r7, #36]	; 0x24
 8005ab2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	701a      	strb	r2, [r3, #0]
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	09db      	lsrs	r3, r3, #7
 8005abe:	623b      	str	r3, [r7, #32]
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ac4:	d8f0      	bhi.n	8005aa8 <_TrySendOverflowPacket+0x64>
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	627a      	str	r2, [r7, #36]	; 0x24
 8005acc:	6a3a      	ldr	r2, [r7, #32]
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005ad6:	4b13      	ldr	r3, [pc, #76]	; (8005b24 <_TrySendOverflowPacket+0xe0>)
 8005ad8:	785b      	ldrb	r3, [r3, #1]
 8005ada:	4618      	mov	r0, r3
 8005adc:	1d3b      	adds	r3, r7, #4
 8005ade:	69fa      	ldr	r2, [r7, #28]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	1d3b      	adds	r3, r7, #4
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	f7fa fbaa 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005aec:	4603      	mov	r3, r0
 8005aee:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005af0:	f7ff faf4 	bl	80050dc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d009      	beq.n	8005b0e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005afa:	4a0a      	ldr	r2, [pc, #40]	; (8005b24 <_TrySendOverflowPacket+0xe0>)
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005b00:	4b08      	ldr	r3, [pc, #32]	; (8005b24 <_TrySendOverflowPacket+0xe0>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <_TrySendOverflowPacket+0xe0>)
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	e004      	b.n	8005b18 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005b0e:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <_TrySendOverflowPacket+0xe0>)
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	3301      	adds	r3, #1
 8005b14:	4a03      	ldr	r2, [pc, #12]	; (8005b24 <_TrySendOverflowPacket+0xe0>)
 8005b16:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005b18:	693b      	ldr	r3, [r7, #16]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3730      	adds	r7, #48	; 0x30
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	2001439c 	.word	0x2001439c
 8005b28:	e0001004 	.word	0xe0001004

08005b2c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08a      	sub	sp, #40	; 0x28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005b38:	4b96      	ldr	r3, [pc, #600]	; (8005d94 <_SendPacket+0x268>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d010      	beq.n	8005b62 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005b40:	4b94      	ldr	r3, [pc, #592]	; (8005d94 <_SendPacket+0x268>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 8130 	beq.w	8005daa <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005b4a:	4b92      	ldr	r3, [pc, #584]	; (8005d94 <_SendPacket+0x268>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d109      	bne.n	8005b66 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005b52:	f7ff ff77 	bl	8005a44 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005b56:	4b8f      	ldr	r3, [pc, #572]	; (8005d94 <_SendPacket+0x268>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	f040 8127 	bne.w	8005dae <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005b60:	e001      	b.n	8005b66 <_SendPacket+0x3a>
    goto Send;
 8005b62:	bf00      	nop
 8005b64:	e000      	b.n	8005b68 <_SendPacket+0x3c>
Send:
 8005b66:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b1f      	cmp	r3, #31
 8005b6c:	d809      	bhi.n	8005b82 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005b6e:	4b89      	ldr	r3, [pc, #548]	; (8005d94 <_SendPacket+0x268>)
 8005b70:	69da      	ldr	r2, [r3, #28]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	fa22 f303 	lsr.w	r3, r2, r3
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f040 8118 	bne.w	8005db2 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b17      	cmp	r3, #23
 8005b86:	d807      	bhi.n	8005b98 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	e0c4      	b.n	8005d22 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ba4:	d912      	bls.n	8005bcc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	09da      	lsrs	r2, r3, #7
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	b2d2      	uxtb	r2, r2
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	3a01      	subs	r2, #1
 8005bbe:	60fa      	str	r2, [r7, #12]
 8005bc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	701a      	strb	r2, [r3, #0]
 8005bca:	e006      	b.n	8005bda <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b7e      	cmp	r3, #126	; 0x7e
 8005bde:	d807      	bhi.n	8005bf0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	701a      	strb	r2, [r3, #0]
 8005bee:	e098      	b.n	8005d22 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bf6:	d212      	bcs.n	8005c1e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	09da      	lsrs	r2, r3, #7
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	3a01      	subs	r2, #1
 8005c10:	60fa      	str	r2, [r7, #12]
 8005c12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	e081      	b.n	8005d22 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c24:	d21d      	bcs.n	8005c62 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	0b9a      	lsrs	r2, r3, #14
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	b2d2      	uxtb	r2, r2
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	09db      	lsrs	r3, r3, #7
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	3a01      	subs	r2, #1
 8005c40:	60fa      	str	r2, [r7, #12]
 8005c42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	3a01      	subs	r2, #1
 8005c54:	60fa      	str	r2, [r7, #12]
 8005c56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	701a      	strb	r2, [r3, #0]
 8005c60:	e05f      	b.n	8005d22 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c68:	d228      	bcs.n	8005cbc <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	0d5a      	lsrs	r2, r3, #21
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3b01      	subs	r3, #1
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	0b9b      	lsrs	r3, r3, #14
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	3a01      	subs	r2, #1
 8005c84:	60fa      	str	r2, [r7, #12]
 8005c86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	09db      	lsrs	r3, r3, #7
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	3a01      	subs	r2, #1
 8005c9a:	60fa      	str	r2, [r7, #12]
 8005c9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	3a01      	subs	r2, #1
 8005cae:	60fa      	str	r2, [r7, #12]
 8005cb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	701a      	strb	r2, [r3, #0]
 8005cba:	e032      	b.n	8005d22 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	0f1a      	lsrs	r2, r3, #28
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	0d5b      	lsrs	r3, r3, #21
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	3a01      	subs	r2, #1
 8005cd6:	60fa      	str	r2, [r7, #12]
 8005cd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	0b9b      	lsrs	r3, r3, #14
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	3a01      	subs	r2, #1
 8005cec:	60fa      	str	r2, [r7, #12]
 8005cee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	09db      	lsrs	r3, r3, #7
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	3a01      	subs	r2, #1
 8005d02:	60fa      	str	r2, [r7, #12]
 8005d04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	3a01      	subs	r2, #1
 8005d16:	60fa      	str	r2, [r7, #12]
 8005d18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d22:	4b1d      	ldr	r3, [pc, #116]	; (8005d98 <_SendPacket+0x26c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d28:	4b1a      	ldr	r3, [pc, #104]	; (8005d94 <_SendPacket+0x268>)
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	627b      	str	r3, [r7, #36]	; 0x24
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	623b      	str	r3, [r7, #32]
 8005d3a:	e00b      	b.n	8005d54 <_SendPacket+0x228>
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	1c59      	adds	r1, r3, #1
 8005d44:	6279      	str	r1, [r7, #36]	; 0x24
 8005d46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	701a      	strb	r2, [r3, #0]
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	09db      	lsrs	r3, r3, #7
 8005d52:	623b      	str	r3, [r7, #32]
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	2b7f      	cmp	r3, #127	; 0x7f
 8005d58:	d8f0      	bhi.n	8005d3c <_SendPacket+0x210>
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	627a      	str	r2, [r7, #36]	; 0x24
 8005d60:	6a3a      	ldr	r2, [r7, #32]
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005d6a:	4b0a      	ldr	r3, [pc, #40]	; (8005d94 <_SendPacket+0x268>)
 8005d6c:	785b      	ldrb	r3, [r3, #1]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	461a      	mov	r2, r3
 8005d78:	68f9      	ldr	r1, [r7, #12]
 8005d7a:	f7fa fa61 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005d7e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005d80:	f7ff f9ac 	bl	80050dc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d008      	beq.n	8005d9c <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005d8a:	4a02      	ldr	r2, [pc, #8]	; (8005d94 <_SendPacket+0x268>)
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	60d3      	str	r3, [r2, #12]
 8005d90:	e010      	b.n	8005db4 <_SendPacket+0x288>
 8005d92:	bf00      	nop
 8005d94:	2001439c 	.word	0x2001439c
 8005d98:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005d9c:	4b19      	ldr	r3, [pc, #100]	; (8005e04 <_SendPacket+0x2d8>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	3301      	adds	r3, #1
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	4b17      	ldr	r3, [pc, #92]	; (8005e04 <_SendPacket+0x2d8>)
 8005da6:	701a      	strb	r2, [r3, #0]
 8005da8:	e004      	b.n	8005db4 <_SendPacket+0x288>
    goto SendDone;
 8005daa:	bf00      	nop
 8005dac:	e002      	b.n	8005db4 <_SendPacket+0x288>
      goto SendDone;
 8005dae:	bf00      	nop
 8005db0:	e000      	b.n	8005db4 <_SendPacket+0x288>
      goto SendDone;
 8005db2:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005db4:	4b13      	ldr	r3, [pc, #76]	; (8005e04 <_SendPacket+0x2d8>)
 8005db6:	7e1b      	ldrb	r3, [r3, #24]
 8005db8:	4619      	mov	r1, r3
 8005dba:	4a13      	ldr	r2, [pc, #76]	; (8005e08 <_SendPacket+0x2dc>)
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	440b      	add	r3, r1
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	4413      	add	r3, r2
 8005dc6:	336c      	adds	r3, #108	; 0x6c
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <_SendPacket+0x2d8>)
 8005dcc:	7e1b      	ldrb	r3, [r3, #24]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	490d      	ldr	r1, [pc, #52]	; (8005e08 <_SendPacket+0x2dc>)
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	4403      	add	r3, r0
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	440b      	add	r3, r1
 8005ddc:	3370      	adds	r3, #112	; 0x70
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d00b      	beq.n	8005dfc <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005de4:	4b07      	ldr	r3, [pc, #28]	; (8005e04 <_SendPacket+0x2d8>)
 8005de6:	789b      	ldrb	r3, [r3, #2]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d107      	bne.n	8005dfc <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005dec:	4b05      	ldr	r3, [pc, #20]	; (8005e04 <_SendPacket+0x2d8>)
 8005dee:	2201      	movs	r2, #1
 8005df0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005df2:	f7ff fdb7 	bl	8005964 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005df6:	4b03      	ldr	r3, [pc, #12]	; (8005e04 <_SendPacket+0x2d8>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005dfc:	bf00      	nop
 8005dfe:	3728      	adds	r7, #40	; 0x28
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	2001439c 	.word	0x2001439c
 8005e08:	20012edc 	.word	0x20012edc

08005e0c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08a      	sub	sp, #40	; 0x28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	3301      	adds	r3, #1
 8005e22:	2b80      	cmp	r3, #128	; 0x80
 8005e24:	d80a      	bhi.n	8005e3c <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	1c59      	adds	r1, r3, #1
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6051      	str	r1, [r2, #4]
 8005e30:	78fa      	ldrb	r2, [r7, #3]
 8005e32:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	2b80      	cmp	r3, #128	; 0x80
 8005e42:	d15a      	bne.n	8005efa <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	691a      	ldr	r2, [r3, #16]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	623b      	str	r3, [r7, #32]
 8005e64:	e00b      	b.n	8005e7e <_StoreChar+0x72>
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	1c59      	adds	r1, r3, #1
 8005e6e:	6279      	str	r1, [r7, #36]	; 0x24
 8005e70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	701a      	strb	r2, [r3, #0]
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	09db      	lsrs	r3, r3, #7
 8005e7c:	623b      	str	r3, [r7, #32]
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	2b7f      	cmp	r3, #127	; 0x7f
 8005e82:	d8f0      	bhi.n	8005e66 <_StoreChar+0x5a>
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	627a      	str	r2, [r7, #36]	; 0x24
 8005e8a:	6a3a      	ldr	r2, [r7, #32]
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	701a      	strb	r2, [r3, #0]
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	61fb      	str	r3, [r7, #28]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	61bb      	str	r3, [r7, #24]
 8005e9c:	e00b      	b.n	8005eb6 <_StoreChar+0xaa>
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	1c59      	adds	r1, r3, #1
 8005ea6:	61f9      	str	r1, [r7, #28]
 8005ea8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	701a      	strb	r2, [r3, #0]
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	09db      	lsrs	r3, r3, #7
 8005eb4:	61bb      	str	r3, [r7, #24]
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eba:	d8f0      	bhi.n	8005e9e <_StoreChar+0x92>
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	61fa      	str	r2, [r7, #28]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	b2d2      	uxtb	r2, r2
 8005ec6:	701a      	strb	r2, [r3, #0]
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	221a      	movs	r2, #26
 8005ed2:	6939      	ldr	r1, [r7, #16]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff fe29 	bl	8005b2c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7ff fd33 	bl	800594a <_PreparePacket>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	611a      	str	r2, [r3, #16]
  }
}
 8005efa:	bf00      	nop
 8005efc:	3728      	adds	r7, #40	; 0x28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
	...

08005f04 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08a      	sub	sp, #40	; 0x28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005f16:	2301      	movs	r3, #1
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005f1e:	e007      	b.n	8005f30 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005f20:	6a3a      	ldr	r2, [r7, #32]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f28:	623b      	str	r3, [r7, #32]
    Width++;
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005f30:	6a3a      	ldr	r2, [r7, #32]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d2f3      	bcs.n	8005f20 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d901      	bls.n	8005f44 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d11f      	bne.n	8005f8e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d01c      	beq.n	8005f8e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d005      	beq.n	8005f6a <_PrintUnsigned+0x66>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d102      	bne.n	8005f6a <_PrintUnsigned+0x66>
        c = '0';
 8005f64:	2330      	movs	r3, #48	; 0x30
 8005f66:	76fb      	strb	r3, [r7, #27]
 8005f68:	e001      	b.n	8005f6e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005f6a:	2320      	movs	r3, #32
 8005f6c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f6e:	e007      	b.n	8005f80 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	3b01      	subs	r3, #1
 8005f74:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005f76:	7efb      	ldrb	r3, [r7, #27]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f7ff ff46 	bl	8005e0c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <_PrintUnsigned+0x8a>
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d3f0      	bcc.n	8005f70 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d903      	bls.n	8005f9c <_PrintUnsigned+0x98>
      NumDigits--;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	603b      	str	r3, [r7, #0]
 8005f9a:	e009      	b.n	8005fb0 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa4:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d200      	bcs.n	8005fb0 <_PrintUnsigned+0xac>
        break;
 8005fae:	e005      	b.n	8005fbc <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	fb02 f303 	mul.w	r3, r2, r3
 8005fb8:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005fba:	e7e8      	b.n	8005f8e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc4:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fca:	fb02 f303 	mul.w	r3, r2, r3
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005fd4:	4a15      	ldr	r2, [pc, #84]	; (800602c <_PrintUnsigned+0x128>)
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	4413      	add	r3, r2
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f7ff ff14 	bl	8005e0c <_StoreChar>
    Digit /= Base;
 8005fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1e3      	bne.n	8005fbc <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d011      	beq.n	8006022 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00e      	beq.n	8006022 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006004:	e006      	b.n	8006014 <_PrintUnsigned+0x110>
        FieldWidth--;
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	3b01      	subs	r3, #1
 800600a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 800600c:	2120      	movs	r1, #32
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f7ff fefc 	bl	8005e0c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <_PrintUnsigned+0x11e>
 800601a:	69fa      	ldr	r2, [r7, #28]
 800601c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601e:	429a      	cmp	r2, r3
 8006020:	d3f1      	bcc.n	8006006 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8006022:	bf00      	nop
 8006024:	3728      	adds	r7, #40	; 0x28
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	08007818 	.word	0x08007818

08006030 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006030:	b580      	push	{r7, lr}
 8006032:	b088      	sub	sp, #32
 8006034:	af02      	add	r7, sp, #8
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	bfb8      	it	lt
 8006044:	425b      	neglt	r3, r3
 8006046:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006048:	2301      	movs	r3, #1
 800604a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800604c:	e007      	b.n	800605e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	fb92 f3f3 	sdiv	r3, r2, r3
 8006056:	613b      	str	r3, [r7, #16]
    Width++;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	3301      	adds	r3, #1
 800605c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	429a      	cmp	r2, r3
 8006064:	daf3      	bge.n	800604e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	429a      	cmp	r2, r3
 800606c:	d901      	bls.n	8006072 <_PrintInt+0x42>
    Width = NumDigits;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00a      	beq.n	800608e <_PrintInt+0x5e>
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	db04      	blt.n	8006088 <_PrintInt+0x58>
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d002      	beq.n	800608e <_PrintInt+0x5e>
    FieldWidth--;
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	3b01      	subs	r3, #1
 800608c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <_PrintInt+0x6e>
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d016      	beq.n	80060cc <_PrintInt+0x9c>
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d111      	bne.n	80060cc <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00e      	beq.n	80060cc <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060ae:	e006      	b.n	80060be <_PrintInt+0x8e>
        FieldWidth--;
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80060b6:	2120      	movs	r1, #32
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f7ff fea7 	bl	8005e0c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <_PrintInt+0x9c>
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d3f1      	bcc.n	80060b0 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	da07      	bge.n	80060e2 <_PrintInt+0xb2>
    v = -v;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	425b      	negs	r3, r3
 80060d6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80060d8:	212d      	movs	r1, #45	; 0x2d
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f7ff fe96 	bl	8005e0c <_StoreChar>
 80060e0:	e008      	b.n	80060f4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d003      	beq.n	80060f4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80060ec:	212b      	movs	r1, #43	; 0x2b
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f7ff fe8c 	bl	8005e0c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d019      	beq.n	8006132 <_PrintInt+0x102>
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d114      	bne.n	8006132 <_PrintInt+0x102>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d111      	bne.n	8006132 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00e      	beq.n	8006132 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006114:	e006      	b.n	8006124 <_PrintInt+0xf4>
        FieldWidth--;
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	3b01      	subs	r3, #1
 800611a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800611c:	2130      	movs	r1, #48	; 0x30
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f7ff fe74 	bl	8005e0c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <_PrintInt+0x102>
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	429a      	cmp	r2, r3
 8006130:	d3f1      	bcc.n	8006116 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	9301      	str	r3, [sp, #4]
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7ff fedf 	bl	8005f04 <_PrintUnsigned>
}
 8006146:	bf00      	nop
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
	...

08006150 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006150:	b580      	push	{r7, lr}
 8006152:	b098      	sub	sp, #96	; 0x60
 8006154:	af02      	add	r7, sp, #8
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800615c:	f3ef 8311 	mrs	r3, BASEPRI
 8006160:	f04f 0120 	mov.w	r1, #32
 8006164:	f381 8811 	msr	BASEPRI, r1
 8006168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800616a:	48b7      	ldr	r0, [pc, #732]	; (8006448 <_VPrintTarget+0x2f8>)
 800616c:	f7ff fbed 	bl	800594a <_PreparePacket>
 8006170:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8006172:	4bb5      	ldr	r3, [pc, #724]	; (8006448 <_VPrintTarget+0x2f8>)
 8006174:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8006176:	2300      	movs	r3, #0
 8006178:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	3301      	adds	r3, #1
 8006182:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3301      	adds	r3, #1
 8006194:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006196:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 81a8 	beq.w	80064f0 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80061a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061a4:	2b25      	cmp	r3, #37	; 0x25
 80061a6:	f040 8195 	bne.w	80064d4 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80061aa:	2300      	movs	r3, #0
 80061ac:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80061ae:	2301      	movs	r3, #1
 80061b0:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80061ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061be:	3b23      	subs	r3, #35	; 0x23
 80061c0:	2b0d      	cmp	r3, #13
 80061c2:	d83f      	bhi.n	8006244 <_VPrintTarget+0xf4>
 80061c4:	a201      	add	r2, pc, #4	; (adr r2, 80061cc <_VPrintTarget+0x7c>)
 80061c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ca:	bf00      	nop
 80061cc:	08006235 	.word	0x08006235
 80061d0:	08006245 	.word	0x08006245
 80061d4:	08006245 	.word	0x08006245
 80061d8:	08006245 	.word	0x08006245
 80061dc:	08006245 	.word	0x08006245
 80061e0:	08006245 	.word	0x08006245
 80061e4:	08006245 	.word	0x08006245
 80061e8:	08006245 	.word	0x08006245
 80061ec:	08006225 	.word	0x08006225
 80061f0:	08006245 	.word	0x08006245
 80061f4:	08006205 	.word	0x08006205
 80061f8:	08006245 	.word	0x08006245
 80061fc:	08006245 	.word	0x08006245
 8006200:	08006215 	.word	0x08006215
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006206:	f043 0301 	orr.w	r3, r3, #1
 800620a:	64bb      	str	r3, [r7, #72]	; 0x48
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	3301      	adds	r3, #1
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	e01a      	b.n	800624a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006216:	f043 0302 	orr.w	r3, r3, #2
 800621a:	64bb      	str	r3, [r7, #72]	; 0x48
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3301      	adds	r3, #1
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	e012      	b.n	800624a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006226:	f043 0304 	orr.w	r3, r3, #4
 800622a:	64bb      	str	r3, [r7, #72]	; 0x48
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3301      	adds	r3, #1
 8006230:	60fb      	str	r3, [r7, #12]
 8006232:	e00a      	b.n	800624a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006236:	f043 0308 	orr.w	r3, r3, #8
 800623a:	64bb      	str	r3, [r7, #72]	; 0x48
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3301      	adds	r3, #1
 8006240:	60fb      	str	r3, [r7, #12]
 8006242:	e002      	b.n	800624a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006244:	2300      	movs	r3, #0
 8006246:	653b      	str	r3, [r7, #80]	; 0x50
 8006248:	bf00      	nop
        }
      } while (v);
 800624a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1b0      	bne.n	80061b2 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006250:	2300      	movs	r3, #0
 8006252:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 800625c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006260:	2b2f      	cmp	r3, #47	; 0x2f
 8006262:	d912      	bls.n	800628a <_VPrintTarget+0x13a>
 8006264:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006268:	2b39      	cmp	r3, #57	; 0x39
 800626a:	d80e      	bhi.n	800628a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3301      	adds	r3, #1
 8006270:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006272:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	461a      	mov	r2, r3
 800627e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006282:	4413      	add	r3, r2
 8006284:	3b30      	subs	r3, #48	; 0x30
 8006286:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8006288:	e7e4      	b.n	8006254 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800628a:	2300      	movs	r3, #0
 800628c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8006296:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800629a:	2b2e      	cmp	r3, #46	; 0x2e
 800629c:	d11d      	bne.n	80062da <_VPrintTarget+0x18a>
        sFormat++;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	3301      	adds	r3, #1
 80062a2:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80062ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062b0:	2b2f      	cmp	r3, #47	; 0x2f
 80062b2:	d912      	bls.n	80062da <_VPrintTarget+0x18a>
 80062b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062b8:	2b39      	cmp	r3, #57	; 0x39
 80062ba:	d80e      	bhi.n	80062da <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3301      	adds	r3, #1
 80062c0:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80062c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062c4:	4613      	mov	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	005b      	lsls	r3, r3, #1
 80062cc:	461a      	mov	r2, r3
 80062ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062d2:	4413      	add	r3, r2
 80062d4:	3b30      	subs	r3, #48	; 0x30
 80062d6:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80062d8:	e7e4      	b.n	80062a4 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80062e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062e6:	2b6c      	cmp	r3, #108	; 0x6c
 80062e8:	d003      	beq.n	80062f2 <_VPrintTarget+0x1a2>
 80062ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062ee:	2b68      	cmp	r3, #104	; 0x68
 80062f0:	d107      	bne.n	8006302 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3301      	adds	r3, #1
 80062fe:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006300:	e7ef      	b.n	80062e2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006302:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006306:	2b25      	cmp	r3, #37	; 0x25
 8006308:	f000 80d8 	beq.w	80064bc <_VPrintTarget+0x36c>
 800630c:	2b25      	cmp	r3, #37	; 0x25
 800630e:	f2c0 80dc 	blt.w	80064ca <_VPrintTarget+0x37a>
 8006312:	2b78      	cmp	r3, #120	; 0x78
 8006314:	f300 80d9 	bgt.w	80064ca <_VPrintTarget+0x37a>
 8006318:	2b58      	cmp	r3, #88	; 0x58
 800631a:	f2c0 80d6 	blt.w	80064ca <_VPrintTarget+0x37a>
 800631e:	3b58      	subs	r3, #88	; 0x58
 8006320:	2b20      	cmp	r3, #32
 8006322:	f200 80d2 	bhi.w	80064ca <_VPrintTarget+0x37a>
 8006326:	a201      	add	r2, pc, #4	; (adr r2, 800632c <_VPrintTarget+0x1dc>)
 8006328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632c:	08006423 	.word	0x08006423
 8006330:	080064cb 	.word	0x080064cb
 8006334:	080064cb 	.word	0x080064cb
 8006338:	080064cb 	.word	0x080064cb
 800633c:	080064cb 	.word	0x080064cb
 8006340:	080064cb 	.word	0x080064cb
 8006344:	080064cb 	.word	0x080064cb
 8006348:	080064cb 	.word	0x080064cb
 800634c:	080064cb 	.word	0x080064cb
 8006350:	080064cb 	.word	0x080064cb
 8006354:	080064cb 	.word	0x080064cb
 8006358:	080063b1 	.word	0x080063b1
 800635c:	080063d7 	.word	0x080063d7
 8006360:	080064cb 	.word	0x080064cb
 8006364:	080064cb 	.word	0x080064cb
 8006368:	080064cb 	.word	0x080064cb
 800636c:	080064cb 	.word	0x080064cb
 8006370:	080064cb 	.word	0x080064cb
 8006374:	080064cb 	.word	0x080064cb
 8006378:	080064cb 	.word	0x080064cb
 800637c:	080064cb 	.word	0x080064cb
 8006380:	080064cb 	.word	0x080064cb
 8006384:	080064cb 	.word	0x080064cb
 8006388:	080064cb 	.word	0x080064cb
 800638c:	08006497 	.word	0x08006497
 8006390:	080064cb 	.word	0x080064cb
 8006394:	080064cb 	.word	0x080064cb
 8006398:	0800644d 	.word	0x0800644d
 800639c:	080064cb 	.word	0x080064cb
 80063a0:	080063fd 	.word	0x080063fd
 80063a4:	080064cb 	.word	0x080064cb
 80063a8:	080064cb 	.word	0x080064cb
 80063ac:	08006423 	.word	0x08006423
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	1d19      	adds	r1, r3, #4
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6011      	str	r1, [r2, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80063be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 80063c4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80063c8:	f107 0310 	add.w	r3, r7, #16
 80063cc:	4611      	mov	r1, r2
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7ff fd1c 	bl	8005e0c <_StoreChar>
        break;
 80063d4:	e07a      	b.n	80064cc <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	1d19      	adds	r1, r3, #4
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6011      	str	r1, [r2, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80063e4:	f107 0010 	add.w	r0, r7, #16
 80063e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ea:	9301      	str	r3, [sp, #4]
 80063ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063f2:	220a      	movs	r2, #10
 80063f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80063f6:	f7ff fe1b 	bl	8006030 <_PrintInt>
        break;
 80063fa:	e067      	b.n	80064cc <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	1d19      	adds	r1, r3, #4
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	6011      	str	r1, [r2, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800640a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800640c:	f107 0010 	add.w	r0, r7, #16
 8006410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006412:	9301      	str	r3, [sp, #4]
 8006414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800641a:	220a      	movs	r2, #10
 800641c:	f7ff fd72 	bl	8005f04 <_PrintUnsigned>
        break;
 8006420:	e054      	b.n	80064cc <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	1d19      	adds	r1, r3, #4
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6011      	str	r1, [r2, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006430:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006432:	f107 0010 	add.w	r0, r7, #16
 8006436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006440:	2210      	movs	r2, #16
 8006442:	f7ff fd5f 	bl	8005f04 <_PrintUnsigned>
        break;
 8006446:	e041      	b.n	80064cc <_VPrintTarget+0x37c>
 8006448:	200143cc 	.word	0x200143cc
      case 's':
        s = va_arg(*pParamList, const char*);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	1d19      	adds	r1, r3, #4
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6011      	str	r1, [r2, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 800645a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <_VPrintTarget+0x314>
          s = "(null)";
 8006460:	4b4a      	ldr	r3, [pc, #296]	; (800658c <_VPrintTarget+0x43c>)
 8006462:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8006464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 800646c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800646e:	3301      	adds	r3, #1
 8006470:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8006472:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00b      	beq.n	8006492 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 800647a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800647e:	f107 0310 	add.w	r3, r7, #16
 8006482:	4611      	mov	r1, r2
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff fcc1 	bl	8005e0c <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	2b7f      	cmp	r3, #127	; 0x7f
 800648e:	d9e9      	bls.n	8006464 <_VPrintTarget+0x314>
        break;
 8006490:	e01c      	b.n	80064cc <_VPrintTarget+0x37c>
            break;
 8006492:	bf00      	nop
        break;
 8006494:	e01a      	b.n	80064cc <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	1d19      	adds	r1, r3, #4
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	6011      	str	r1, [r2, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80064a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064a6:	f107 0010 	add.w	r0, r7, #16
 80064aa:	2300      	movs	r3, #0
 80064ac:	9301      	str	r3, [sp, #4]
 80064ae:	2308      	movs	r3, #8
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	2308      	movs	r3, #8
 80064b4:	2210      	movs	r2, #16
 80064b6:	f7ff fd25 	bl	8005f04 <_PrintUnsigned>
        break;
 80064ba:	e007      	b.n	80064cc <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80064bc:	f107 0310 	add.w	r3, r7, #16
 80064c0:	2125      	movs	r1, #37	; 0x25
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7ff fca2 	bl	8005e0c <_StoreChar>
        break;
 80064c8:	e000      	b.n	80064cc <_VPrintTarget+0x37c>
      default:
        break;
 80064ca:	bf00      	nop
      }
      sFormat++;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3301      	adds	r3, #1
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	e007      	b.n	80064e4 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80064d4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80064d8:	f107 0310 	add.w	r3, r7, #16
 80064dc:	4611      	mov	r1, r2
 80064de:	4618      	mov	r0, r3
 80064e0:	f7ff fc94 	bl	8005e0c <_StoreChar>
    }
  } while (*sFormat);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f47f ae4d 	bne.w	8006188 <_VPrintTarget+0x38>
 80064ee:	e000      	b.n	80064f2 <_VPrintTarget+0x3a2>
      break;
 80064f0:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d041      	beq.n	800657c <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80064f8:	6a3a      	ldr	r2, [r7, #32]
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	b2d2      	uxtb	r2, r2
 80064fe:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	63bb      	str	r3, [r7, #56]	; 0x38
 8006508:	e00b      	b.n	8006522 <_VPrintTarget+0x3d2>
 800650a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650c:	b2da      	uxtb	r2, r3
 800650e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006510:	1c59      	adds	r1, r3, #1
 8006512:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006514:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006518:	b2d2      	uxtb	r2, r2
 800651a:	701a      	strb	r2, [r3, #0]
 800651c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651e:	09db      	lsrs	r3, r3, #7
 8006520:	63bb      	str	r3, [r7, #56]	; 0x38
 8006522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006524:	2b7f      	cmp	r3, #127	; 0x7f
 8006526:	d8f0      	bhi.n	800650a <_VPrintTarget+0x3ba>
 8006528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800652a:	1c5a      	adds	r2, r3, #1
 800652c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800652e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006530:	b2d2      	uxtb	r2, r2
 8006532:	701a      	strb	r2, [r3, #0]
 8006534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006536:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	637b      	str	r3, [r7, #52]	; 0x34
 800653c:	2300      	movs	r3, #0
 800653e:	633b      	str	r3, [r7, #48]	; 0x30
 8006540:	e00b      	b.n	800655a <_VPrintTarget+0x40a>
 8006542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006544:	b2da      	uxtb	r2, r3
 8006546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006548:	1c59      	adds	r1, r3, #1
 800654a:	6379      	str	r1, [r7, #52]	; 0x34
 800654c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006550:	b2d2      	uxtb	r2, r2
 8006552:	701a      	strb	r2, [r3, #0]
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	09db      	lsrs	r3, r3, #7
 8006558:	633b      	str	r3, [r7, #48]	; 0x30
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	2b7f      	cmp	r3, #127	; 0x7f
 800655e:	d8f0      	bhi.n	8006542 <_VPrintTarget+0x3f2>
 8006560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006562:	1c5a      	adds	r2, r3, #1
 8006564:	637a      	str	r2, [r7, #52]	; 0x34
 8006566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006568:	b2d2      	uxtb	r2, r2
 800656a:	701a      	strb	r2, [r3, #0]
 800656c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656e:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	6979      	ldr	r1, [r7, #20]
 8006574:	221a      	movs	r2, #26
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff fad8 	bl	8005b2c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657e:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006582:	bf00      	nop
 8006584:	3758      	adds	r7, #88	; 0x58
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	080077c4 	.word	0x080077c4

08006590 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af02      	add	r7, sp, #8
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800659e:	2300      	movs	r3, #0
 80065a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80065a4:	4917      	ldr	r1, [pc, #92]	; (8006604 <SEGGER_SYSVIEW_Init+0x74>)
 80065a6:	4818      	ldr	r0, [pc, #96]	; (8006608 <SEGGER_SYSVIEW_Init+0x78>)
 80065a8:	f7ff f8c6 	bl	8005738 <SEGGER_RTT_AllocUpBuffer>
 80065ac:	4603      	mov	r3, r0
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	4b16      	ldr	r3, [pc, #88]	; (800660c <SEGGER_SYSVIEW_Init+0x7c>)
 80065b2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80065b4:	4b15      	ldr	r3, [pc, #84]	; (800660c <SEGGER_SYSVIEW_Init+0x7c>)
 80065b6:	785a      	ldrb	r2, [r3, #1]
 80065b8:	4b14      	ldr	r3, [pc, #80]	; (800660c <SEGGER_SYSVIEW_Init+0x7c>)
 80065ba:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80065bc:	4b13      	ldr	r3, [pc, #76]	; (800660c <SEGGER_SYSVIEW_Init+0x7c>)
 80065be:	7e1b      	ldrb	r3, [r3, #24]
 80065c0:	4618      	mov	r0, r3
 80065c2:	2300      	movs	r3, #0
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	2308      	movs	r3, #8
 80065c8:	4a11      	ldr	r2, [pc, #68]	; (8006610 <SEGGER_SYSVIEW_Init+0x80>)
 80065ca:	490f      	ldr	r1, [pc, #60]	; (8006608 <SEGGER_SYSVIEW_Init+0x78>)
 80065cc:	f7ff f938 	bl	8005840 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80065d0:	4b0e      	ldr	r3, [pc, #56]	; (800660c <SEGGER_SYSVIEW_Init+0x7c>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80065d6:	4b0f      	ldr	r3, [pc, #60]	; (8006614 <SEGGER_SYSVIEW_Init+0x84>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a0c      	ldr	r2, [pc, #48]	; (800660c <SEGGER_SYSVIEW_Init+0x7c>)
 80065dc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80065de:	4a0b      	ldr	r2, [pc, #44]	; (800660c <SEGGER_SYSVIEW_Init+0x7c>)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80065e4:	4a09      	ldr	r2, [pc, #36]	; (800660c <SEGGER_SYSVIEW_Init+0x7c>)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80065ea:	4a08      	ldr	r2, [pc, #32]	; (800660c <SEGGER_SYSVIEW_Init+0x7c>)
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80065f0:	4a06      	ldr	r2, [pc, #24]	; (800660c <SEGGER_SYSVIEW_Init+0x7c>)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80065f6:	4b05      	ldr	r3, [pc, #20]	; (800660c <SEGGER_SYSVIEW_Init+0x7c>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80065fc:	bf00      	nop
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	20013394 	.word	0x20013394
 8006608:	080077cc 	.word	0x080077cc
 800660c:	2001439c 	.word	0x2001439c
 8006610:	20014394 	.word	0x20014394
 8006614:	e0001004 	.word	0xe0001004

08006618 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006620:	4a04      	ldr	r2, [pc, #16]	; (8006634 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6113      	str	r3, [r2, #16]
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	2001439c 	.word	0x2001439c

08006638 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006640:	f3ef 8311 	mrs	r3, BASEPRI
 8006644:	f04f 0120 	mov.w	r1, #32
 8006648:	f381 8811 	msr	BASEPRI, r1
 800664c:	60fb      	str	r3, [r7, #12]
 800664e:	4808      	ldr	r0, [pc, #32]	; (8006670 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006650:	f7ff f97b 	bl	800594a <_PreparePacket>
 8006654:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	68b8      	ldr	r0, [r7, #8]
 800665c:	f7ff fa66 	bl	8005b2c <_SendPacket>
  RECORD_END();
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f383 8811 	msr	BASEPRI, r3
}
 8006666:	bf00      	nop
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	200143cc 	.word	0x200143cc

08006674 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800667e:	f3ef 8311 	mrs	r3, BASEPRI
 8006682:	f04f 0120 	mov.w	r1, #32
 8006686:	f381 8811 	msr	BASEPRI, r1
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	4816      	ldr	r0, [pc, #88]	; (80066e8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800668e:	f7ff f95c 	bl	800594a <_PreparePacket>
 8006692:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	61fb      	str	r3, [r7, #28]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	61bb      	str	r3, [r7, #24]
 80066a0:	e00b      	b.n	80066ba <SEGGER_SYSVIEW_RecordU32+0x46>
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	1c59      	adds	r1, r3, #1
 80066aa:	61f9      	str	r1, [r7, #28]
 80066ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066b0:	b2d2      	uxtb	r2, r2
 80066b2:	701a      	strb	r2, [r3, #0]
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	09db      	lsrs	r3, r3, #7
 80066b8:	61bb      	str	r3, [r7, #24]
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	2b7f      	cmp	r3, #127	; 0x7f
 80066be:	d8f0      	bhi.n	80066a2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	61fa      	str	r2, [r7, #28]
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	b2d2      	uxtb	r2, r2
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	68f9      	ldr	r1, [r7, #12]
 80066d4:	6938      	ldr	r0, [r7, #16]
 80066d6:	f7ff fa29 	bl	8005b2c <_SendPacket>
  RECORD_END();
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f383 8811 	msr	BASEPRI, r3
}
 80066e0:	bf00      	nop
 80066e2:	3720      	adds	r7, #32
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	200143cc 	.word	0x200143cc

080066ec <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08c      	sub	sp, #48	; 0x30
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80066f8:	f3ef 8311 	mrs	r3, BASEPRI
 80066fc:	f04f 0120 	mov.w	r1, #32
 8006700:	f381 8811 	msr	BASEPRI, r1
 8006704:	61fb      	str	r3, [r7, #28]
 8006706:	4825      	ldr	r0, [pc, #148]	; (800679c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006708:	f7ff f91f 	bl	800594a <_PreparePacket>
 800670c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	62bb      	str	r3, [r7, #40]	; 0x28
 800671a:	e00b      	b.n	8006734 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	b2da      	uxtb	r2, r3
 8006720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006722:	1c59      	adds	r1, r3, #1
 8006724:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006726:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	701a      	strb	r2, [r3, #0]
 800672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006730:	09db      	lsrs	r3, r3, #7
 8006732:	62bb      	str	r3, [r7, #40]	; 0x28
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	2b7f      	cmp	r3, #127	; 0x7f
 8006738:	d8f0      	bhi.n	800671c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800673a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006748:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	623b      	str	r3, [r7, #32]
 8006752:	e00b      	b.n	800676c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	b2da      	uxtb	r2, r3
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	1c59      	adds	r1, r3, #1
 800675c:	6279      	str	r1, [r7, #36]	; 0x24
 800675e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006762:	b2d2      	uxtb	r2, r2
 8006764:	701a      	strb	r2, [r3, #0]
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	09db      	lsrs	r3, r3, #7
 800676a:	623b      	str	r3, [r7, #32]
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	2b7f      	cmp	r3, #127	; 0x7f
 8006770:	d8f0      	bhi.n	8006754 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	627a      	str	r2, [r7, #36]	; 0x24
 8006778:	6a3a      	ldr	r2, [r7, #32]
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	6979      	ldr	r1, [r7, #20]
 8006786:	69b8      	ldr	r0, [r7, #24]
 8006788:	f7ff f9d0 	bl	8005b2c <_SendPacket>
  RECORD_END();
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	f383 8811 	msr	BASEPRI, r3
}
 8006792:	bf00      	nop
 8006794:	3730      	adds	r7, #48	; 0x30
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	200143cc 	.word	0x200143cc

080067a0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08e      	sub	sp, #56	; 0x38
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80067ae:	f3ef 8311 	mrs	r3, BASEPRI
 80067b2:	f04f 0120 	mov.w	r1, #32
 80067b6:	f381 8811 	msr	BASEPRI, r1
 80067ba:	61fb      	str	r3, [r7, #28]
 80067bc:	4832      	ldr	r0, [pc, #200]	; (8006888 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80067be:	f7ff f8c4 	bl	800594a <_PreparePacket>
 80067c2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	637b      	str	r3, [r7, #52]	; 0x34
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	633b      	str	r3, [r7, #48]	; 0x30
 80067d0:	e00b      	b.n	80067ea <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d8:	1c59      	adds	r1, r3, #1
 80067da:	6379      	str	r1, [r7, #52]	; 0x34
 80067dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	701a      	strb	r2, [r3, #0]
 80067e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e6:	09db      	lsrs	r3, r3, #7
 80067e8:	633b      	str	r3, [r7, #48]	; 0x30
 80067ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ec:	2b7f      	cmp	r3, #127	; 0x7f
 80067ee:	d8f0      	bhi.n	80067d2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80067f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	637a      	str	r2, [r7, #52]	; 0x34
 80067f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	62bb      	str	r3, [r7, #40]	; 0x28
 8006808:	e00b      	b.n	8006822 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680c:	b2da      	uxtb	r2, r3
 800680e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006810:	1c59      	adds	r1, r3, #1
 8006812:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006814:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006818:	b2d2      	uxtb	r2, r2
 800681a:	701a      	strb	r2, [r3, #0]
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681e:	09db      	lsrs	r3, r3, #7
 8006820:	62bb      	str	r3, [r7, #40]	; 0x28
 8006822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006824:	2b7f      	cmp	r3, #127	; 0x7f
 8006826:	d8f0      	bhi.n	800680a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800682e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	701a      	strb	r2, [r3, #0]
 8006834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006836:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	627b      	str	r3, [r7, #36]	; 0x24
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	623b      	str	r3, [r7, #32]
 8006840:	e00b      	b.n	800685a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	b2da      	uxtb	r2, r3
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	1c59      	adds	r1, r3, #1
 800684a:	6279      	str	r1, [r7, #36]	; 0x24
 800684c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006850:	b2d2      	uxtb	r2, r2
 8006852:	701a      	strb	r2, [r3, #0]
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	09db      	lsrs	r3, r3, #7
 8006858:	623b      	str	r3, [r7, #32]
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	2b7f      	cmp	r3, #127	; 0x7f
 800685e:	d8f0      	bhi.n	8006842 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006862:	1c5a      	adds	r2, r3, #1
 8006864:	627a      	str	r2, [r7, #36]	; 0x24
 8006866:	6a3a      	ldr	r2, [r7, #32]
 8006868:	b2d2      	uxtb	r2, r2
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	6979      	ldr	r1, [r7, #20]
 8006874:	69b8      	ldr	r0, [r7, #24]
 8006876:	f7ff f959 	bl	8005b2c <_SendPacket>
  RECORD_END();
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	f383 8811 	msr	BASEPRI, r3
}
 8006880:	bf00      	nop
 8006882:	3738      	adds	r7, #56	; 0x38
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	200143cc 	.word	0x200143cc

0800688c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800688c:	b580      	push	{r7, lr}
 800688e:	b090      	sub	sp, #64	; 0x40
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800689a:	f3ef 8311 	mrs	r3, BASEPRI
 800689e:	f04f 0120 	mov.w	r1, #32
 80068a2:	f381 8811 	msr	BASEPRI, r1
 80068a6:	61fb      	str	r3, [r7, #28]
 80068a8:	4840      	ldr	r0, [pc, #256]	; (80069ac <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80068aa:	f7ff f84e 	bl	800594a <_PreparePacket>
 80068ae:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80068bc:	e00b      	b.n	80068d6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80068be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c4:	1c59      	adds	r1, r3, #1
 80068c6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80068c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068cc:	b2d2      	uxtb	r2, r2
 80068ce:	701a      	strb	r2, [r3, #0]
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	09db      	lsrs	r3, r3, #7
 80068d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80068d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d8:	2b7f      	cmp	r3, #127	; 0x7f
 80068da:	d8f0      	bhi.n	80068be <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80068dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80068e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068e4:	b2d2      	uxtb	r2, r2
 80068e6:	701a      	strb	r2, [r3, #0]
 80068e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	637b      	str	r3, [r7, #52]	; 0x34
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	633b      	str	r3, [r7, #48]	; 0x30
 80068f4:	e00b      	b.n	800690e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80068f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fc:	1c59      	adds	r1, r3, #1
 80068fe:	6379      	str	r1, [r7, #52]	; 0x34
 8006900:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006904:	b2d2      	uxtb	r2, r2
 8006906:	701a      	strb	r2, [r3, #0]
 8006908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690a:	09db      	lsrs	r3, r3, #7
 800690c:	633b      	str	r3, [r7, #48]	; 0x30
 800690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006910:	2b7f      	cmp	r3, #127	; 0x7f
 8006912:	d8f0      	bhi.n	80068f6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	637a      	str	r2, [r7, #52]	; 0x34
 800691a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800691c:	b2d2      	uxtb	r2, r2
 800691e:	701a      	strb	r2, [r3, #0]
 8006920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006922:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	62bb      	str	r3, [r7, #40]	; 0x28
 800692c:	e00b      	b.n	8006946 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	b2da      	uxtb	r2, r3
 8006932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006934:	1c59      	adds	r1, r3, #1
 8006936:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006938:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800693c:	b2d2      	uxtb	r2, r2
 800693e:	701a      	strb	r2, [r3, #0]
 8006940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006942:	09db      	lsrs	r3, r3, #7
 8006944:	62bb      	str	r3, [r7, #40]	; 0x28
 8006946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006948:	2b7f      	cmp	r3, #127	; 0x7f
 800694a:	d8f0      	bhi.n	800692e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694e:	1c5a      	adds	r2, r3, #1
 8006950:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006952:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006954:	b2d2      	uxtb	r2, r2
 8006956:	701a      	strb	r2, [r3, #0]
 8006958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	627b      	str	r3, [r7, #36]	; 0x24
 8006960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006962:	623b      	str	r3, [r7, #32]
 8006964:	e00b      	b.n	800697e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	b2da      	uxtb	r2, r3
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	1c59      	adds	r1, r3, #1
 800696e:	6279      	str	r1, [r7, #36]	; 0x24
 8006970:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006974:	b2d2      	uxtb	r2, r2
 8006976:	701a      	strb	r2, [r3, #0]
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	09db      	lsrs	r3, r3, #7
 800697c:	623b      	str	r3, [r7, #32]
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	2b7f      	cmp	r3, #127	; 0x7f
 8006982:	d8f0      	bhi.n	8006966 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	627a      	str	r2, [r7, #36]	; 0x24
 800698a:	6a3a      	ldr	r2, [r7, #32]
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	701a      	strb	r2, [r3, #0]
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	6979      	ldr	r1, [r7, #20]
 8006998:	69b8      	ldr	r0, [r7, #24]
 800699a:	f7ff f8c7 	bl	8005b2c <_SendPacket>
  RECORD_END();
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	f383 8811 	msr	BASEPRI, r3
}
 80069a4:	bf00      	nop
 80069a6:	3740      	adds	r7, #64	; 0x40
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	200143cc 	.word	0x200143cc

080069b0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08c      	sub	sp, #48	; 0x30
 80069b4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80069b6:	4b59      	ldr	r3, [pc, #356]	; (8006b1c <SEGGER_SYSVIEW_Start+0x16c>)
 80069b8:	2201      	movs	r2, #1
 80069ba:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80069bc:	f3ef 8311 	mrs	r3, BASEPRI
 80069c0:	f04f 0120 	mov.w	r1, #32
 80069c4:	f381 8811 	msr	BASEPRI, r1
 80069c8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80069ca:	4b54      	ldr	r3, [pc, #336]	; (8006b1c <SEGGER_SYSVIEW_Start+0x16c>)
 80069cc:	785b      	ldrb	r3, [r3, #1]
 80069ce:	220a      	movs	r2, #10
 80069d0:	4953      	ldr	r1, [pc, #332]	; (8006b20 <SEGGER_SYSVIEW_Start+0x170>)
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7f9 fc34 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80069de:	f7fe fb7d 	bl	80050dc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80069e2:	200a      	movs	r0, #10
 80069e4:	f7ff fe28 	bl	8006638 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80069e8:	f3ef 8311 	mrs	r3, BASEPRI
 80069ec:	f04f 0120 	mov.w	r1, #32
 80069f0:	f381 8811 	msr	BASEPRI, r1
 80069f4:	60bb      	str	r3, [r7, #8]
 80069f6:	484b      	ldr	r0, [pc, #300]	; (8006b24 <SEGGER_SYSVIEW_Start+0x174>)
 80069f8:	f7fe ffa7 	bl	800594a <_PreparePacket>
 80069fc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a06:	4b45      	ldr	r3, [pc, #276]	; (8006b1c <SEGGER_SYSVIEW_Start+0x16c>)
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a0c:	e00b      	b.n	8006a26 <SEGGER_SYSVIEW_Start+0x76>
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a14:	1c59      	adds	r1, r3, #1
 8006a16:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a1c:	b2d2      	uxtb	r2, r2
 8006a1e:	701a      	strb	r2, [r3, #0]
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	09db      	lsrs	r3, r3, #7
 8006a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a28:	2b7f      	cmp	r3, #127	; 0x7f
 8006a2a:	d8f0      	bhi.n	8006a0e <SEGGER_SYSVIEW_Start+0x5e>
 8006a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a34:	b2d2      	uxtb	r2, r2
 8006a36:	701a      	strb	r2, [r3, #0]
 8006a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a40:	4b36      	ldr	r3, [pc, #216]	; (8006b1c <SEGGER_SYSVIEW_Start+0x16c>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	623b      	str	r3, [r7, #32]
 8006a46:	e00b      	b.n	8006a60 <SEGGER_SYSVIEW_Start+0xb0>
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	1c59      	adds	r1, r3, #1
 8006a50:	6279      	str	r1, [r7, #36]	; 0x24
 8006a52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	09db      	lsrs	r3, r3, #7
 8006a5e:	623b      	str	r3, [r7, #32]
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	2b7f      	cmp	r3, #127	; 0x7f
 8006a64:	d8f0      	bhi.n	8006a48 <SEGGER_SYSVIEW_Start+0x98>
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	1c5a      	adds	r2, r3, #1
 8006a6a:	627a      	str	r2, [r7, #36]	; 0x24
 8006a6c:	6a3a      	ldr	r2, [r7, #32]
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	701a      	strb	r2, [r3, #0]
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	61fb      	str	r3, [r7, #28]
 8006a7a:	4b28      	ldr	r3, [pc, #160]	; (8006b1c <SEGGER_SYSVIEW_Start+0x16c>)
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	61bb      	str	r3, [r7, #24]
 8006a80:	e00b      	b.n	8006a9a <SEGGER_SYSVIEW_Start+0xea>
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	1c59      	adds	r1, r3, #1
 8006a8a:	61f9      	str	r1, [r7, #28]
 8006a8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a90:	b2d2      	uxtb	r2, r2
 8006a92:	701a      	strb	r2, [r3, #0]
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	09db      	lsrs	r3, r3, #7
 8006a98:	61bb      	str	r3, [r7, #24]
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a9e:	d8f0      	bhi.n	8006a82 <SEGGER_SYSVIEW_Start+0xd2>
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	61fa      	str	r2, [r7, #28]
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	b2d2      	uxtb	r2, r2
 8006aaa:	701a      	strb	r2, [r3, #0]
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	617b      	str	r3, [r7, #20]
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	613b      	str	r3, [r7, #16]
 8006ab8:	e00b      	b.n	8006ad2 <SEGGER_SYSVIEW_Start+0x122>
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	1c59      	adds	r1, r3, #1
 8006ac2:	6179      	str	r1, [r7, #20]
 8006ac4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	701a      	strb	r2, [r3, #0]
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	09db      	lsrs	r3, r3, #7
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	2b7f      	cmp	r3, #127	; 0x7f
 8006ad6:	d8f0      	bhi.n	8006aba <SEGGER_SYSVIEW_Start+0x10a>
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	617a      	str	r2, [r7, #20]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	b2d2      	uxtb	r2, r2
 8006ae2:	701a      	strb	r2, [r3, #0]
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006ae8:	2218      	movs	r2, #24
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7ff f81d 	bl	8005b2c <_SendPacket>
      RECORD_END();
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006af8:	4b08      	ldr	r3, [pc, #32]	; (8006b1c <SEGGER_SYSVIEW_Start+0x16c>)
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006b00:	4b06      	ldr	r3, [pc, #24]	; (8006b1c <SEGGER_SYSVIEW_Start+0x16c>)
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006b06:	f000 f9eb 	bl	8006ee0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006b0a:	f000 f9b1 	bl	8006e70 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006b0e:	f000 fc8d 	bl	800742c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006b12:	bf00      	nop
 8006b14:	3730      	adds	r7, #48	; 0x30
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	2001439c 	.word	0x2001439c
 8006b20:	0800780c 	.word	0x0800780c
 8006b24:	200143cc 	.word	0x200143cc

08006b28 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b2e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b32:	f04f 0120 	mov.w	r1, #32
 8006b36:	f381 8811 	msr	BASEPRI, r1
 8006b3a:	607b      	str	r3, [r7, #4]
 8006b3c:	480b      	ldr	r0, [pc, #44]	; (8006b6c <SEGGER_SYSVIEW_Stop+0x44>)
 8006b3e:	f7fe ff04 	bl	800594a <_PreparePacket>
 8006b42:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006b44:	4b0a      	ldr	r3, [pc, #40]	; (8006b70 <SEGGER_SYSVIEW_Stop+0x48>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d007      	beq.n	8006b5c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006b4c:	220b      	movs	r2, #11
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	6838      	ldr	r0, [r7, #0]
 8006b52:	f7fe ffeb 	bl	8005b2c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006b56:	4b06      	ldr	r3, [pc, #24]	; (8006b70 <SEGGER_SYSVIEW_Stop+0x48>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f383 8811 	msr	BASEPRI, r3
}
 8006b62:	bf00      	nop
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	200143cc 	.word	0x200143cc
 8006b70:	2001439c 	.word	0x2001439c

08006b74 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08c      	sub	sp, #48	; 0x30
 8006b78:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b7a:	f3ef 8311 	mrs	r3, BASEPRI
 8006b7e:	f04f 0120 	mov.w	r1, #32
 8006b82:	f381 8811 	msr	BASEPRI, r1
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	4845      	ldr	r0, [pc, #276]	; (8006ca0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006b8a:	f7fe fede 	bl	800594a <_PreparePacket>
 8006b8e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b98:	4b42      	ldr	r3, [pc, #264]	; (8006ca4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b9e:	e00b      	b.n	8006bb8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba6:	1c59      	adds	r1, r3, #1
 8006ba8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006baa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bae:	b2d2      	uxtb	r2, r2
 8006bb0:	701a      	strb	r2, [r3, #0]
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	09db      	lsrs	r3, r3, #7
 8006bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bba:	2b7f      	cmp	r3, #127	; 0x7f
 8006bbc:	d8f0      	bhi.n	8006ba0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bc6:	b2d2      	uxtb	r2, r2
 8006bc8:	701a      	strb	r2, [r3, #0]
 8006bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bcc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd2:	4b34      	ldr	r3, [pc, #208]	; (8006ca4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	623b      	str	r3, [r7, #32]
 8006bd8:	e00b      	b.n	8006bf2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	1c59      	adds	r1, r3, #1
 8006be2:	6279      	str	r1, [r7, #36]	; 0x24
 8006be4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006be8:	b2d2      	uxtb	r2, r2
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	09db      	lsrs	r3, r3, #7
 8006bf0:	623b      	str	r3, [r7, #32]
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	2b7f      	cmp	r3, #127	; 0x7f
 8006bf6:	d8f0      	bhi.n	8006bda <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	627a      	str	r2, [r7, #36]	; 0x24
 8006bfe:	6a3a      	ldr	r2, [r7, #32]
 8006c00:	b2d2      	uxtb	r2, r2
 8006c02:	701a      	strb	r2, [r3, #0]
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	61fb      	str	r3, [r7, #28]
 8006c0c:	4b25      	ldr	r3, [pc, #148]	; (8006ca4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	61bb      	str	r3, [r7, #24]
 8006c12:	e00b      	b.n	8006c2c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	1c59      	adds	r1, r3, #1
 8006c1c:	61f9      	str	r1, [r7, #28]
 8006c1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c22:	b2d2      	uxtb	r2, r2
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	09db      	lsrs	r3, r3, #7
 8006c2a:	61bb      	str	r3, [r7, #24]
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c30:	d8f0      	bhi.n	8006c14 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	1c5a      	adds	r2, r3, #1
 8006c36:	61fa      	str	r2, [r7, #28]
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	701a      	strb	r2, [r3, #0]
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	617b      	str	r3, [r7, #20]
 8006c46:	2300      	movs	r3, #0
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	e00b      	b.n	8006c64 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	1c59      	adds	r1, r3, #1
 8006c54:	6179      	str	r1, [r7, #20]
 8006c56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	09db      	lsrs	r3, r3, #7
 8006c62:	613b      	str	r3, [r7, #16]
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	2b7f      	cmp	r3, #127	; 0x7f
 8006c68:	d8f0      	bhi.n	8006c4c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	617a      	str	r2, [r7, #20]
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	b2d2      	uxtb	r2, r2
 8006c74:	701a      	strb	r2, [r3, #0]
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006c7a:	2218      	movs	r2, #24
 8006c7c:	6879      	ldr	r1, [r7, #4]
 8006c7e:	68b8      	ldr	r0, [r7, #8]
 8006c80:	f7fe ff54 	bl	8005b2c <_SendPacket>
  RECORD_END();
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006c8a:	4b06      	ldr	r3, [pc, #24]	; (8006ca4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006c92:	4b04      	ldr	r3, [pc, #16]	; (8006ca4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	4798      	blx	r3
  }
}
 8006c98:	bf00      	nop
 8006c9a:	3730      	adds	r7, #48	; 0x30
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	200143cc 	.word	0x200143cc
 8006ca4:	2001439c 	.word	0x2001439c

08006ca8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b092      	sub	sp, #72	; 0x48
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006cb0:	f3ef 8311 	mrs	r3, BASEPRI
 8006cb4:	f04f 0120 	mov.w	r1, #32
 8006cb8:	f381 8811 	msr	BASEPRI, r1
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	486a      	ldr	r0, [pc, #424]	; (8006e68 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006cc0:	f7fe fe43 	bl	800594a <_PreparePacket>
 8006cc4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	4b66      	ldr	r3, [pc, #408]	; (8006e6c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	643b      	str	r3, [r7, #64]	; 0x40
 8006cda:	e00b      	b.n	8006cf4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ce2:	1c59      	adds	r1, r3, #1
 8006ce4:	6479      	str	r1, [r7, #68]	; 0x44
 8006ce6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cf0:	09db      	lsrs	r3, r3, #7
 8006cf2:	643b      	str	r3, [r7, #64]	; 0x40
 8006cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cf6:	2b7f      	cmp	r3, #127	; 0x7f
 8006cf8:	d8f0      	bhi.n	8006cdc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	647a      	str	r2, [r7, #68]	; 0x44
 8006d00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d14:	e00b      	b.n	8006d2e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d1c:	1c59      	adds	r1, r3, #1
 8006d1e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006d20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d24:	b2d2      	uxtb	r2, r2
 8006d26:	701a      	strb	r2, [r3, #0]
 8006d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2a:	09db      	lsrs	r3, r3, #7
 8006d2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d30:	2b7f      	cmp	r3, #127	; 0x7f
 8006d32:	d8f0      	bhi.n	8006d16 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d3c:	b2d2      	uxtb	r2, r2
 8006d3e:	701a      	strb	r2, [r3, #0]
 8006d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d42:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f7fe fdc3 	bl	80058d8 <_EncodeStr>
 8006d52:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006d54:	2209      	movs	r2, #9
 8006d56:	68f9      	ldr	r1, [r7, #12]
 8006d58:	6938      	ldr	r0, [r7, #16]
 8006d5a:	f7fe fee7 	bl	8005b2c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	637b      	str	r3, [r7, #52]	; 0x34
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	4b40      	ldr	r3, [pc, #256]	; (8006e6c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	633b      	str	r3, [r7, #48]	; 0x30
 8006d72:	e00b      	b.n	8006d8c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d7a:	1c59      	adds	r1, r3, #1
 8006d7c:	6379      	str	r1, [r7, #52]	; 0x34
 8006d7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d82:	b2d2      	uxtb	r2, r2
 8006d84:	701a      	strb	r2, [r3, #0]
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	09db      	lsrs	r3, r3, #7
 8006d8a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d90:	d8f0      	bhi.n	8006d74 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	637a      	str	r2, [r7, #52]	; 0x34
 8006d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	701a      	strb	r2, [r3, #0]
 8006d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dac:	e00b      	b.n	8006dc6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db4:	1c59      	adds	r1, r3, #1
 8006db6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006db8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	701a      	strb	r2, [r3, #0]
 8006dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc2:	09db      	lsrs	r3, r3, #7
 8006dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8006dca:	d8f0      	bhi.n	8006dae <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dd4:	b2d2      	uxtb	r2, r2
 8006dd6:	701a      	strb	r2, [r3, #0]
 8006dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dda:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	627b      	str	r3, [r7, #36]	; 0x24
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	623b      	str	r3, [r7, #32]
 8006de6:	e00b      	b.n	8006e00 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	1c59      	adds	r1, r3, #1
 8006df0:	6279      	str	r1, [r7, #36]	; 0x24
 8006df2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	701a      	strb	r2, [r3, #0]
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	09db      	lsrs	r3, r3, #7
 8006dfe:	623b      	str	r3, [r7, #32]
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	2b7f      	cmp	r3, #127	; 0x7f
 8006e04:	d8f0      	bhi.n	8006de8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	1c5a      	adds	r2, r3, #1
 8006e0a:	627a      	str	r2, [r7, #36]	; 0x24
 8006e0c:	6a3a      	ldr	r2, [r7, #32]
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	701a      	strb	r2, [r3, #0]
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	61fb      	str	r3, [r7, #28]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	61bb      	str	r3, [r7, #24]
 8006e20:	e00b      	b.n	8006e3a <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	1c59      	adds	r1, r3, #1
 8006e2a:	61f9      	str	r1, [r7, #28]
 8006e2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e30:	b2d2      	uxtb	r2, r2
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	09db      	lsrs	r3, r3, #7
 8006e38:	61bb      	str	r3, [r7, #24]
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e3e:	d8f0      	bhi.n	8006e22 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	61fa      	str	r2, [r7, #28]
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	701a      	strb	r2, [r3, #0]
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006e50:	2215      	movs	r2, #21
 8006e52:	68f9      	ldr	r1, [r7, #12]
 8006e54:	6938      	ldr	r0, [r7, #16]
 8006e56:	f7fe fe69 	bl	8005b2c <_SendPacket>
  RECORD_END();
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f383 8811 	msr	BASEPRI, r3
}
 8006e60:	bf00      	nop
 8006e62:	3748      	adds	r7, #72	; 0x48
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	200143cc 	.word	0x200143cc
 8006e6c:	2001439c 	.word	0x2001439c

08006e70 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006e74:	4b07      	ldr	r3, [pc, #28]	; (8006e94 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e76:	6a1b      	ldr	r3, [r3, #32]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d008      	beq.n	8006e8e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006e7c:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006e86:	4b03      	ldr	r3, [pc, #12]	; (8006e94 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	4798      	blx	r3
  }
}
 8006e8e:	bf00      	nop
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	2001439c 	.word	0x2001439c

08006e98 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ea0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ea4:	f04f 0120 	mov.w	r1, #32
 8006ea8:	f381 8811 	msr	BASEPRI, r1
 8006eac:	617b      	str	r3, [r7, #20]
 8006eae:	480b      	ldr	r0, [pc, #44]	; (8006edc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006eb0:	f7fe fd4b 	bl	800594a <_PreparePacket>
 8006eb4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006eb6:	2280      	movs	r2, #128	; 0x80
 8006eb8:	6879      	ldr	r1, [r7, #4]
 8006eba:	6938      	ldr	r0, [r7, #16]
 8006ebc:	f7fe fd0c 	bl	80058d8 <_EncodeStr>
 8006ec0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006ec2:	220e      	movs	r2, #14
 8006ec4:	68f9      	ldr	r1, [r7, #12]
 8006ec6:	6938      	ldr	r0, [r7, #16]
 8006ec8:	f7fe fe30 	bl	8005b2c <_SendPacket>
  RECORD_END();
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f383 8811 	msr	BASEPRI, r3
}
 8006ed2:	bf00      	nop
 8006ed4:	3718      	adds	r7, #24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	200143cc 	.word	0x200143cc

08006ee0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006ee0:	b590      	push	{r4, r7, lr}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006ee6:	4b15      	ldr	r3, [pc, #84]	; (8006f3c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d01a      	beq.n	8006f24 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006eee:	4b13      	ldr	r3, [pc, #76]	; (8006f3c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d015      	beq.n	8006f24 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006ef8:	4b10      	ldr	r3, [pc, #64]	; (8006f3c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4798      	blx	r3
 8006f00:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006f04:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006f06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f0a:	f04f 0200 	mov.w	r2, #0
 8006f0e:	f04f 0300 	mov.w	r3, #0
 8006f12:	000a      	movs	r2, r1
 8006f14:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006f16:	4613      	mov	r3, r2
 8006f18:	461a      	mov	r2, r3
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	200d      	movs	r0, #13
 8006f1e:	f7ff fbe5 	bl	80066ec <SEGGER_SYSVIEW_RecordU32x2>
 8006f22:	e006      	b.n	8006f32 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006f24:	4b06      	ldr	r3, [pc, #24]	; (8006f40 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4619      	mov	r1, r3
 8006f2a:	200c      	movs	r0, #12
 8006f2c:	f7ff fba2 	bl	8006674 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006f30:	bf00      	nop
 8006f32:	bf00      	nop
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd90      	pop	{r4, r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	2001439c 	.word	0x2001439c
 8006f40:	e0001004 	.word	0xe0001004

08006f44 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f4a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f4e:	f04f 0120 	mov.w	r1, #32
 8006f52:	f381 8811 	msr	BASEPRI, r1
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	4819      	ldr	r0, [pc, #100]	; (8006fc0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006f5a:	f7fe fcf6 	bl	800594a <_PreparePacket>
 8006f5e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006f64:	4b17      	ldr	r3, [pc, #92]	; (8006fc4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f6c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	617b      	str	r3, [r7, #20]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	613b      	str	r3, [r7, #16]
 8006f76:	e00b      	b.n	8006f90 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	1c59      	adds	r1, r3, #1
 8006f80:	6179      	str	r1, [r7, #20]
 8006f82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f86:	b2d2      	uxtb	r2, r2
 8006f88:	701a      	strb	r2, [r3, #0]
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	09db      	lsrs	r3, r3, #7
 8006f8e:	613b      	str	r3, [r7, #16]
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	2b7f      	cmp	r3, #127	; 0x7f
 8006f94:	d8f0      	bhi.n	8006f78 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	1c5a      	adds	r2, r3, #1
 8006f9a:	617a      	str	r2, [r7, #20]
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	b2d2      	uxtb	r2, r2
 8006fa0:	701a      	strb	r2, [r3, #0]
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	68b8      	ldr	r0, [r7, #8]
 8006fac:	f7fe fdbe 	bl	8005b2c <_SendPacket>
  RECORD_END();
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f383 8811 	msr	BASEPRI, r3
}
 8006fb6:	bf00      	nop
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	200143cc 	.word	0x200143cc
 8006fc4:	e000ed04 	.word	0xe000ed04

08006fc8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006fce:	f3ef 8311 	mrs	r3, BASEPRI
 8006fd2:	f04f 0120 	mov.w	r1, #32
 8006fd6:	f381 8811 	msr	BASEPRI, r1
 8006fda:	607b      	str	r3, [r7, #4]
 8006fdc:	4807      	ldr	r0, [pc, #28]	; (8006ffc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006fde:	f7fe fcb4 	bl	800594a <_PreparePacket>
 8006fe2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006fe4:	2203      	movs	r2, #3
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6838      	ldr	r0, [r7, #0]
 8006fea:	f7fe fd9f 	bl	8005b2c <_SendPacket>
  RECORD_END();
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f383 8811 	msr	BASEPRI, r3
}
 8006ff4:	bf00      	nop
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	200143cc 	.word	0x200143cc

08007000 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007006:	f3ef 8311 	mrs	r3, BASEPRI
 800700a:	f04f 0120 	mov.w	r1, #32
 800700e:	f381 8811 	msr	BASEPRI, r1
 8007012:	607b      	str	r3, [r7, #4]
 8007014:	4807      	ldr	r0, [pc, #28]	; (8007034 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007016:	f7fe fc98 	bl	800594a <_PreparePacket>
 800701a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800701c:	2212      	movs	r2, #18
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6838      	ldr	r0, [r7, #0]
 8007022:	f7fe fd83 	bl	8005b2c <_SendPacket>
  RECORD_END();
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f383 8811 	msr	BASEPRI, r3
}
 800702c:	bf00      	nop
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	200143cc 	.word	0x200143cc

08007038 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800703e:	f3ef 8311 	mrs	r3, BASEPRI
 8007042:	f04f 0120 	mov.w	r1, #32
 8007046:	f381 8811 	msr	BASEPRI, r1
 800704a:	607b      	str	r3, [r7, #4]
 800704c:	4807      	ldr	r0, [pc, #28]	; (800706c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800704e:	f7fe fc7c 	bl	800594a <_PreparePacket>
 8007052:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007054:	2211      	movs	r2, #17
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6838      	ldr	r0, [r7, #0]
 800705a:	f7fe fd67 	bl	8005b2c <_SendPacket>
  RECORD_END();
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f383 8811 	msr	BASEPRI, r3
}
 8007064:	bf00      	nop
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	200143cc 	.word	0x200143cc

08007070 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007070:	b580      	push	{r7, lr}
 8007072:	b088      	sub	sp, #32
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007078:	f3ef 8311 	mrs	r3, BASEPRI
 800707c:	f04f 0120 	mov.w	r1, #32
 8007080:	f381 8811 	msr	BASEPRI, r1
 8007084:	617b      	str	r3, [r7, #20]
 8007086:	4819      	ldr	r0, [pc, #100]	; (80070ec <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007088:	f7fe fc5f 	bl	800594a <_PreparePacket>
 800708c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007092:	4b17      	ldr	r3, [pc, #92]	; (80070f0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	61fb      	str	r3, [r7, #28]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	61bb      	str	r3, [r7, #24]
 80070a4:	e00b      	b.n	80070be <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	1c59      	adds	r1, r3, #1
 80070ae:	61f9      	str	r1, [r7, #28]
 80070b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070b4:	b2d2      	uxtb	r2, r2
 80070b6:	701a      	strb	r2, [r3, #0]
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	09db      	lsrs	r3, r3, #7
 80070bc:	61bb      	str	r3, [r7, #24]
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	2b7f      	cmp	r3, #127	; 0x7f
 80070c2:	d8f0      	bhi.n	80070a6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	61fa      	str	r2, [r7, #28]
 80070ca:	69ba      	ldr	r2, [r7, #24]
 80070cc:	b2d2      	uxtb	r2, r2
 80070ce:	701a      	strb	r2, [r3, #0]
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80070d4:	2208      	movs	r2, #8
 80070d6:	68f9      	ldr	r1, [r7, #12]
 80070d8:	6938      	ldr	r0, [r7, #16]
 80070da:	f7fe fd27 	bl	8005b2c <_SendPacket>
  RECORD_END();
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f383 8811 	msr	BASEPRI, r3
}
 80070e4:	bf00      	nop
 80070e6:	3720      	adds	r7, #32
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	200143cc 	.word	0x200143cc
 80070f0:	2001439c 	.word	0x2001439c

080070f4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b088      	sub	sp, #32
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80070fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007100:	f04f 0120 	mov.w	r1, #32
 8007104:	f381 8811 	msr	BASEPRI, r1
 8007108:	617b      	str	r3, [r7, #20]
 800710a:	4819      	ldr	r0, [pc, #100]	; (8007170 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800710c:	f7fe fc1d 	bl	800594a <_PreparePacket>
 8007110:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007116:	4b17      	ldr	r3, [pc, #92]	; (8007174 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	61fb      	str	r3, [r7, #28]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	61bb      	str	r3, [r7, #24]
 8007128:	e00b      	b.n	8007142 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	b2da      	uxtb	r2, r3
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	1c59      	adds	r1, r3, #1
 8007132:	61f9      	str	r1, [r7, #28]
 8007134:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007138:	b2d2      	uxtb	r2, r2
 800713a:	701a      	strb	r2, [r3, #0]
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	09db      	lsrs	r3, r3, #7
 8007140:	61bb      	str	r3, [r7, #24]
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	2b7f      	cmp	r3, #127	; 0x7f
 8007146:	d8f0      	bhi.n	800712a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	61fa      	str	r2, [r7, #28]
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	b2d2      	uxtb	r2, r2
 8007152:	701a      	strb	r2, [r3, #0]
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007158:	2204      	movs	r2, #4
 800715a:	68f9      	ldr	r1, [r7, #12]
 800715c:	6938      	ldr	r0, [r7, #16]
 800715e:	f7fe fce5 	bl	8005b2c <_SendPacket>
  RECORD_END();
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f383 8811 	msr	BASEPRI, r3
}
 8007168:	bf00      	nop
 800716a:	3720      	adds	r7, #32
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	200143cc 	.word	0x200143cc
 8007174:	2001439c 	.word	0x2001439c

08007178 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007178:	b580      	push	{r7, lr}
 800717a:	b088      	sub	sp, #32
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007180:	f3ef 8311 	mrs	r3, BASEPRI
 8007184:	f04f 0120 	mov.w	r1, #32
 8007188:	f381 8811 	msr	BASEPRI, r1
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	4819      	ldr	r0, [pc, #100]	; (80071f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007190:	f7fe fbdb 	bl	800594a <_PreparePacket>
 8007194:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800719a:	4b17      	ldr	r3, [pc, #92]	; (80071f8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	61fb      	str	r3, [r7, #28]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	61bb      	str	r3, [r7, #24]
 80071ac:	e00b      	b.n	80071c6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	1c59      	adds	r1, r3, #1
 80071b6:	61f9      	str	r1, [r7, #28]
 80071b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071bc:	b2d2      	uxtb	r2, r2
 80071be:	701a      	strb	r2, [r3, #0]
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	09db      	lsrs	r3, r3, #7
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	2b7f      	cmp	r3, #127	; 0x7f
 80071ca:	d8f0      	bhi.n	80071ae <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	61fa      	str	r2, [r7, #28]
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	b2d2      	uxtb	r2, r2
 80071d6:	701a      	strb	r2, [r3, #0]
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80071dc:	2206      	movs	r2, #6
 80071de:	68f9      	ldr	r1, [r7, #12]
 80071e0:	6938      	ldr	r0, [r7, #16]
 80071e2:	f7fe fca3 	bl	8005b2c <_SendPacket>
  RECORD_END();
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f383 8811 	msr	BASEPRI, r3
}
 80071ec:	bf00      	nop
 80071ee:	3720      	adds	r7, #32
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	200143cc 	.word	0x200143cc
 80071f8:	2001439c 	.word	0x2001439c

080071fc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b08a      	sub	sp, #40	; 0x28
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007206:	f3ef 8311 	mrs	r3, BASEPRI
 800720a:	f04f 0120 	mov.w	r1, #32
 800720e:	f381 8811 	msr	BASEPRI, r1
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	4827      	ldr	r0, [pc, #156]	; (80072b4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007216:	f7fe fb98 	bl	800594a <_PreparePacket>
 800721a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007220:	4b25      	ldr	r3, [pc, #148]	; (80072b8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	627b      	str	r3, [r7, #36]	; 0x24
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	623b      	str	r3, [r7, #32]
 8007232:	e00b      	b.n	800724c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	b2da      	uxtb	r2, r3
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	1c59      	adds	r1, r3, #1
 800723c:	6279      	str	r1, [r7, #36]	; 0x24
 800723e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007242:	b2d2      	uxtb	r2, r2
 8007244:	701a      	strb	r2, [r3, #0]
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	09db      	lsrs	r3, r3, #7
 800724a:	623b      	str	r3, [r7, #32]
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	2b7f      	cmp	r3, #127	; 0x7f
 8007250:	d8f0      	bhi.n	8007234 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007254:	1c5a      	adds	r2, r3, #1
 8007256:	627a      	str	r2, [r7, #36]	; 0x24
 8007258:	6a3a      	ldr	r2, [r7, #32]
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	61fb      	str	r3, [r7, #28]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	61bb      	str	r3, [r7, #24]
 800726a:	e00b      	b.n	8007284 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	b2da      	uxtb	r2, r3
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	1c59      	adds	r1, r3, #1
 8007274:	61f9      	str	r1, [r7, #28]
 8007276:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800727a:	b2d2      	uxtb	r2, r2
 800727c:	701a      	strb	r2, [r3, #0]
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	09db      	lsrs	r3, r3, #7
 8007282:	61bb      	str	r3, [r7, #24]
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	2b7f      	cmp	r3, #127	; 0x7f
 8007288:	d8f0      	bhi.n	800726c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	61fa      	str	r2, [r7, #28]
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	b2d2      	uxtb	r2, r2
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800729a:	2207      	movs	r2, #7
 800729c:	68f9      	ldr	r1, [r7, #12]
 800729e:	6938      	ldr	r0, [r7, #16]
 80072a0:	f7fe fc44 	bl	8005b2c <_SendPacket>
  RECORD_END();
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	f383 8811 	msr	BASEPRI, r3
}
 80072aa:	bf00      	nop
 80072ac:	3728      	adds	r7, #40	; 0x28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	200143cc 	.word	0x200143cc
 80072b8:	2001439c 	.word	0x2001439c

080072bc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80072c4:	4b04      	ldr	r3, [pc, #16]	; (80072d8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	1ad3      	subs	r3, r2, r3
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	2001439c 	.word	0x2001439c

080072dc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08c      	sub	sp, #48	; 0x30
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	4603      	mov	r3, r0
 80072e4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80072e6:	4b40      	ldr	r3, [pc, #256]	; (80073e8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d077      	beq.n	80073de <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80072ee:	4b3e      	ldr	r3, [pc, #248]	; (80073e8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80072f4:	2300      	movs	r3, #0
 80072f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80072f8:	e008      	b.n	800730c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80072fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007302:	2b00      	cmp	r3, #0
 8007304:	d007      	beq.n	8007316 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007308:	3301      	adds	r3, #1
 800730a:	62bb      	str	r3, [r7, #40]	; 0x28
 800730c:	79fb      	ldrb	r3, [r7, #7]
 800730e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007310:	429a      	cmp	r2, r3
 8007312:	d3f2      	bcc.n	80072fa <SEGGER_SYSVIEW_SendModule+0x1e>
 8007314:	e000      	b.n	8007318 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007316:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731a:	2b00      	cmp	r3, #0
 800731c:	d055      	beq.n	80073ca <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800731e:	f3ef 8311 	mrs	r3, BASEPRI
 8007322:	f04f 0120 	mov.w	r1, #32
 8007326:	f381 8811 	msr	BASEPRI, r1
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	482f      	ldr	r0, [pc, #188]	; (80073ec <SEGGER_SYSVIEW_SendModule+0x110>)
 800732e:	f7fe fb0c 	bl	800594a <_PreparePacket>
 8007332:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
 800733c:	79fb      	ldrb	r3, [r7, #7]
 800733e:	623b      	str	r3, [r7, #32]
 8007340:	e00b      	b.n	800735a <SEGGER_SYSVIEW_SendModule+0x7e>
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	b2da      	uxtb	r2, r3
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	1c59      	adds	r1, r3, #1
 800734a:	6279      	str	r1, [r7, #36]	; 0x24
 800734c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007350:	b2d2      	uxtb	r2, r2
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	09db      	lsrs	r3, r3, #7
 8007358:	623b      	str	r3, [r7, #32]
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	2b7f      	cmp	r3, #127	; 0x7f
 800735e:	d8f0      	bhi.n	8007342 <SEGGER_SYSVIEW_SendModule+0x66>
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	627a      	str	r2, [r7, #36]	; 0x24
 8007366:	6a3a      	ldr	r2, [r7, #32]
 8007368:	b2d2      	uxtb	r2, r2
 800736a:	701a      	strb	r2, [r3, #0]
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	61fb      	str	r3, [r7, #28]
 8007374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	61bb      	str	r3, [r7, #24]
 800737a:	e00b      	b.n	8007394 <SEGGER_SYSVIEW_SendModule+0xb8>
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	b2da      	uxtb	r2, r3
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	1c59      	adds	r1, r3, #1
 8007384:	61f9      	str	r1, [r7, #28]
 8007386:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800738a:	b2d2      	uxtb	r2, r2
 800738c:	701a      	strb	r2, [r3, #0]
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	09db      	lsrs	r3, r3, #7
 8007392:	61bb      	str	r3, [r7, #24]
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	2b7f      	cmp	r3, #127	; 0x7f
 8007398:	d8f0      	bhi.n	800737c <SEGGER_SYSVIEW_SendModule+0xa0>
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	61fa      	str	r2, [r7, #28]
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	701a      	strb	r2, [r3, #0]
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2280      	movs	r2, #128	; 0x80
 80073b0:	4619      	mov	r1, r3
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f7fe fa90 	bl	80058d8 <_EncodeStr>
 80073b8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80073ba:	2216      	movs	r2, #22
 80073bc:	68f9      	ldr	r1, [r7, #12]
 80073be:	6938      	ldr	r0, [r7, #16]
 80073c0:	f7fe fbb4 	bl	8005b2c <_SendPacket>
      RECORD_END();
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80073ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d006      	beq.n	80073de <SEGGER_SYSVIEW_SendModule+0x102>
 80073d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80073d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	4798      	blx	r3
    }
  }
}
 80073de:	bf00      	nop
 80073e0:	3730      	adds	r7, #48	; 0x30
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	200143c4 	.word	0x200143c4
 80073ec:	200143cc 	.word	0x200143cc

080073f0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80073f6:	4b0c      	ldr	r3, [pc, #48]	; (8007428 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00f      	beq.n	800741e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80073fe:	4b0a      	ldr	r3, [pc, #40]	; (8007428 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1f2      	bne.n	8007404 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800741e:	bf00      	nop
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	200143c4 	.word	0x200143c4

0800742c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007432:	f3ef 8311 	mrs	r3, BASEPRI
 8007436:	f04f 0120 	mov.w	r1, #32
 800743a:	f381 8811 	msr	BASEPRI, r1
 800743e:	60fb      	str	r3, [r7, #12]
 8007440:	4817      	ldr	r0, [pc, #92]	; (80074a0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007442:	f7fe fa82 	bl	800594a <_PreparePacket>
 8007446:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	617b      	str	r3, [r7, #20]
 8007450:	4b14      	ldr	r3, [pc, #80]	; (80074a4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	613b      	str	r3, [r7, #16]
 8007456:	e00b      	b.n	8007470 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	b2da      	uxtb	r2, r3
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	1c59      	adds	r1, r3, #1
 8007460:	6179      	str	r1, [r7, #20]
 8007462:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007466:	b2d2      	uxtb	r2, r2
 8007468:	701a      	strb	r2, [r3, #0]
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	09db      	lsrs	r3, r3, #7
 800746e:	613b      	str	r3, [r7, #16]
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	2b7f      	cmp	r3, #127	; 0x7f
 8007474:	d8f0      	bhi.n	8007458 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	1c5a      	adds	r2, r3, #1
 800747a:	617a      	str	r2, [r7, #20]
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	b2d2      	uxtb	r2, r2
 8007480:	701a      	strb	r2, [r3, #0]
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007486:	221b      	movs	r2, #27
 8007488:	6879      	ldr	r1, [r7, #4]
 800748a:	68b8      	ldr	r0, [r7, #8]
 800748c:	f7fe fb4e 	bl	8005b2c <_SendPacket>
  RECORD_END();
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f383 8811 	msr	BASEPRI, r3
}
 8007496:	bf00      	nop
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	200143cc 	.word	0x200143cc
 80074a4:	200143c8 	.word	0x200143c8

080074a8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80074a8:	b40f      	push	{r0, r1, r2, r3}
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b082      	sub	sp, #8
 80074ae:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80074b0:	f107 0314 	add.w	r3, r7, #20
 80074b4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80074b6:	1d3b      	adds	r3, r7, #4
 80074b8:	461a      	mov	r2, r3
 80074ba:	2100      	movs	r1, #0
 80074bc:	6938      	ldr	r0, [r7, #16]
 80074be:	f7fe fe47 	bl	8006150 <_VPrintTarget>
  va_end(ParamList);
}
 80074c2:	bf00      	nop
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074cc:	b004      	add	sp, #16
 80074ce:	4770      	bx	lr

080074d0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b08a      	sub	sp, #40	; 0x28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80074d8:	f3ef 8311 	mrs	r3, BASEPRI
 80074dc:	f04f 0120 	mov.w	r1, #32
 80074e0:	f381 8811 	msr	BASEPRI, r1
 80074e4:	617b      	str	r3, [r7, #20]
 80074e6:	4827      	ldr	r0, [pc, #156]	; (8007584 <SEGGER_SYSVIEW_Warn+0xb4>)
 80074e8:	f7fe fa2f 	bl	800594a <_PreparePacket>
 80074ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80074ee:	2280      	movs	r2, #128	; 0x80
 80074f0:	6879      	ldr	r1, [r7, #4]
 80074f2:	6938      	ldr	r0, [r7, #16]
 80074f4:	f7fe f9f0 	bl	80058d8 <_EncodeStr>
 80074f8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	627b      	str	r3, [r7, #36]	; 0x24
 80074fe:	2301      	movs	r3, #1
 8007500:	623b      	str	r3, [r7, #32]
 8007502:	e00b      	b.n	800751c <SEGGER_SYSVIEW_Warn+0x4c>
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	b2da      	uxtb	r2, r3
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	1c59      	adds	r1, r3, #1
 800750c:	6279      	str	r1, [r7, #36]	; 0x24
 800750e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007512:	b2d2      	uxtb	r2, r2
 8007514:	701a      	strb	r2, [r3, #0]
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	09db      	lsrs	r3, r3, #7
 800751a:	623b      	str	r3, [r7, #32]
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	2b7f      	cmp	r3, #127	; 0x7f
 8007520:	d8f0      	bhi.n	8007504 <SEGGER_SYSVIEW_Warn+0x34>
 8007522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007524:	1c5a      	adds	r2, r3, #1
 8007526:	627a      	str	r2, [r7, #36]	; 0x24
 8007528:	6a3a      	ldr	r2, [r7, #32]
 800752a:	b2d2      	uxtb	r2, r2
 800752c:	701a      	strb	r2, [r3, #0]
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	61fb      	str	r3, [r7, #28]
 8007536:	2300      	movs	r3, #0
 8007538:	61bb      	str	r3, [r7, #24]
 800753a:	e00b      	b.n	8007554 <SEGGER_SYSVIEW_Warn+0x84>
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	b2da      	uxtb	r2, r3
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	1c59      	adds	r1, r3, #1
 8007544:	61f9      	str	r1, [r7, #28]
 8007546:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800754a:	b2d2      	uxtb	r2, r2
 800754c:	701a      	strb	r2, [r3, #0]
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	09db      	lsrs	r3, r3, #7
 8007552:	61bb      	str	r3, [r7, #24]
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	2b7f      	cmp	r3, #127	; 0x7f
 8007558:	d8f0      	bhi.n	800753c <SEGGER_SYSVIEW_Warn+0x6c>
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	61fa      	str	r2, [r7, #28]
 8007560:	69ba      	ldr	r2, [r7, #24]
 8007562:	b2d2      	uxtb	r2, r2
 8007564:	701a      	strb	r2, [r3, #0]
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800756a:	221a      	movs	r2, #26
 800756c:	68f9      	ldr	r1, [r7, #12]
 800756e:	6938      	ldr	r0, [r7, #16]
 8007570:	f7fe fadc 	bl	8005b2c <_SendPacket>
  RECORD_END();
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f383 8811 	msr	BASEPRI, r3
}
 800757a:	bf00      	nop
 800757c:	3728      	adds	r7, #40	; 0x28
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	200143cc 	.word	0x200143cc

08007588 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800758c:	4b13      	ldr	r3, [pc, #76]	; (80075dc <SEGGER_SYSVIEW_IsStarted+0x54>)
 800758e:	7e1b      	ldrb	r3, [r3, #24]
 8007590:	4619      	mov	r1, r3
 8007592:	4a13      	ldr	r2, [pc, #76]	; (80075e0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007594:	460b      	mov	r3, r1
 8007596:	005b      	lsls	r3, r3, #1
 8007598:	440b      	add	r3, r1
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	4413      	add	r3, r2
 800759e:	336c      	adds	r3, #108	; 0x6c
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	4b0e      	ldr	r3, [pc, #56]	; (80075dc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075a4:	7e1b      	ldrb	r3, [r3, #24]
 80075a6:	4618      	mov	r0, r3
 80075a8:	490d      	ldr	r1, [pc, #52]	; (80075e0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80075aa:	4603      	mov	r3, r0
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	4403      	add	r3, r0
 80075b0:	00db      	lsls	r3, r3, #3
 80075b2:	440b      	add	r3, r1
 80075b4:	3370      	adds	r3, #112	; 0x70
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d00b      	beq.n	80075d4 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80075bc:	4b07      	ldr	r3, [pc, #28]	; (80075dc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075be:	789b      	ldrb	r3, [r3, #2]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d107      	bne.n	80075d4 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80075c4:	4b05      	ldr	r3, [pc, #20]	; (80075dc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075c6:	2201      	movs	r2, #1
 80075c8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80075ca:	f7fe f9cb 	bl	8005964 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80075ce:	4b03      	ldr	r3, [pc, #12]	; (80075dc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80075d4:	4b01      	ldr	r3, [pc, #4]	; (80075dc <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	2001439c 	.word	0x2001439c
 80075e0:	20012edc 	.word	0x20012edc

080075e4 <__libc_init_array>:
 80075e4:	b570      	push	{r4, r5, r6, lr}
 80075e6:	4d0d      	ldr	r5, [pc, #52]	; (800761c <__libc_init_array+0x38>)
 80075e8:	4c0d      	ldr	r4, [pc, #52]	; (8007620 <__libc_init_array+0x3c>)
 80075ea:	1b64      	subs	r4, r4, r5
 80075ec:	10a4      	asrs	r4, r4, #2
 80075ee:	2600      	movs	r6, #0
 80075f0:	42a6      	cmp	r6, r4
 80075f2:	d109      	bne.n	8007608 <__libc_init_array+0x24>
 80075f4:	4d0b      	ldr	r5, [pc, #44]	; (8007624 <__libc_init_array+0x40>)
 80075f6:	4c0c      	ldr	r4, [pc, #48]	; (8007628 <__libc_init_array+0x44>)
 80075f8:	f000 f83e 	bl	8007678 <_init>
 80075fc:	1b64      	subs	r4, r4, r5
 80075fe:	10a4      	asrs	r4, r4, #2
 8007600:	2600      	movs	r6, #0
 8007602:	42a6      	cmp	r6, r4
 8007604:	d105      	bne.n	8007612 <__libc_init_array+0x2e>
 8007606:	bd70      	pop	{r4, r5, r6, pc}
 8007608:	f855 3b04 	ldr.w	r3, [r5], #4
 800760c:	4798      	blx	r3
 800760e:	3601      	adds	r6, #1
 8007610:	e7ee      	b.n	80075f0 <__libc_init_array+0xc>
 8007612:	f855 3b04 	ldr.w	r3, [r5], #4
 8007616:	4798      	blx	r3
 8007618:	3601      	adds	r6, #1
 800761a:	e7f2      	b.n	8007602 <__libc_init_array+0x1e>
 800761c:	08007830 	.word	0x08007830
 8007620:	08007830 	.word	0x08007830
 8007624:	08007830 	.word	0x08007830
 8007628:	08007834 	.word	0x08007834

0800762c <memcmp>:
 800762c:	b510      	push	{r4, lr}
 800762e:	3901      	subs	r1, #1
 8007630:	4402      	add	r2, r0
 8007632:	4290      	cmp	r0, r2
 8007634:	d101      	bne.n	800763a <memcmp+0xe>
 8007636:	2000      	movs	r0, #0
 8007638:	e005      	b.n	8007646 <memcmp+0x1a>
 800763a:	7803      	ldrb	r3, [r0, #0]
 800763c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007640:	42a3      	cmp	r3, r4
 8007642:	d001      	beq.n	8007648 <memcmp+0x1c>
 8007644:	1b18      	subs	r0, r3, r4
 8007646:	bd10      	pop	{r4, pc}
 8007648:	3001      	adds	r0, #1
 800764a:	e7f2      	b.n	8007632 <memcmp+0x6>

0800764c <memcpy>:
 800764c:	440a      	add	r2, r1
 800764e:	4291      	cmp	r1, r2
 8007650:	f100 33ff 	add.w	r3, r0, #4294967295
 8007654:	d100      	bne.n	8007658 <memcpy+0xc>
 8007656:	4770      	bx	lr
 8007658:	b510      	push	{r4, lr}
 800765a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800765e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007662:	4291      	cmp	r1, r2
 8007664:	d1f9      	bne.n	800765a <memcpy+0xe>
 8007666:	bd10      	pop	{r4, pc}

08007668 <memset>:
 8007668:	4402      	add	r2, r0
 800766a:	4603      	mov	r3, r0
 800766c:	4293      	cmp	r3, r2
 800766e:	d100      	bne.n	8007672 <memset+0xa>
 8007670:	4770      	bx	lr
 8007672:	f803 1b01 	strb.w	r1, [r3], #1
 8007676:	e7f9      	b.n	800766c <memset+0x4>

08007678 <_init>:
 8007678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767a:	bf00      	nop
 800767c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767e:	bc08      	pop	{r3}
 8007680:	469e      	mov	lr, r3
 8007682:	4770      	bx	lr

08007684 <_fini>:
 8007684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007686:	bf00      	nop
 8007688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768a:	bc08      	pop	{r3}
 800768c:	469e      	mov	lr, r3
 800768e:	4770      	bx	lr
