
001Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076f8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  080078f8  080078f8  000178f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ab0  08007ab0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007ab0  08007ab0  00017ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ab8  08007ab8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ab8  08007ab8  00017ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007abc  08007abc  00017abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144a8  20000080  08007b40  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014528  08007b40  00024528  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018427  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000364f  00000000  00000000  000384d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  0003bb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c8  00000000  00000000  0003d0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b40d  00000000  00000000  0003e480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001831b  00000000  00000000  0006988d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001073ca  00000000  00000000  00081ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00188f72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fd8  00000000  00000000  00188fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	080078e0 	.word	0x080078e0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	080078e0 	.word	0x080078e0

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	20012f44 	.word	0x20012f44

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b974 	b.w	80005d4 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	4604      	mov	r4, r0
 800030c:	468e      	mov	lr, r1
 800030e:	2b00      	cmp	r3, #0
 8000310:	d14d      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000312:	428a      	cmp	r2, r1
 8000314:	4694      	mov	ip, r2
 8000316:	d969      	bls.n	80003ec <__udivmoddi4+0xe8>
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	b152      	cbz	r2, 8000334 <__udivmoddi4+0x30>
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	f1c2 0120 	rsb	r1, r2, #32
 8000326:	fa20 f101 	lsr.w	r1, r0, r1
 800032a:	fa0c fc02 	lsl.w	ip, ip, r2
 800032e:	ea41 0e03 	orr.w	lr, r1, r3
 8000332:	4094      	lsls	r4, r2
 8000334:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000338:	0c21      	lsrs	r1, r4, #16
 800033a:	fbbe f6f8 	udiv	r6, lr, r8
 800033e:	fa1f f78c 	uxth.w	r7, ip
 8000342:	fb08 e316 	mls	r3, r8, r6, lr
 8000346:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034a:	fb06 f107 	mul.w	r1, r6, r7
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 811f 	bcs.w	800059c <__udivmoddi4+0x298>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 811c 	bls.w	800059c <__udivmoddi4+0x298>
 8000364:	3e02      	subs	r6, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 f707 	mul.w	r7, r0, r7
 800037c:	42a7      	cmp	r7, r4
 800037e:	d90a      	bls.n	8000396 <__udivmoddi4+0x92>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 33ff 	add.w	r3, r0, #4294967295
 8000388:	f080 810a 	bcs.w	80005a0 <__udivmoddi4+0x29c>
 800038c:	42a7      	cmp	r7, r4
 800038e:	f240 8107 	bls.w	80005a0 <__udivmoddi4+0x29c>
 8000392:	4464      	add	r4, ip
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039a:	1be4      	subs	r4, r4, r7
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa4>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xc2>
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	f000 80ef 	beq.w	8000596 <__udivmoddi4+0x292>
 80003b8:	2600      	movs	r6, #0
 80003ba:	e9c5 0100 	strd	r0, r1, [r5]
 80003be:	4630      	mov	r0, r6
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f683 	clz	r6, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d14a      	bne.n	8000464 <__udivmoddi4+0x160>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd4>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80f9 	bhi.w	80005ca <__udivmoddi4+0x2c6>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	469e      	mov	lr, r3
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa4>
 80003e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa4>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xec>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 8092 	bne.w	800051e <__udivmoddi4+0x21a>
 80003fa:	eba1 010c 	sub.w	r1, r1, ip
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	2601      	movs	r6, #1
 8000408:	0c20      	lsrs	r0, r4, #16
 800040a:	fbb1 f3f7 	udiv	r3, r1, r7
 800040e:	fb07 1113 	mls	r1, r7, r3, r1
 8000412:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000416:	fb0e f003 	mul.w	r0, lr, r3
 800041a:	4288      	cmp	r0, r1
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x12c>
 800041e:	eb1c 0101 	adds.w	r1, ip, r1
 8000422:	f103 38ff 	add.w	r8, r3, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x12a>
 8000428:	4288      	cmp	r0, r1
 800042a:	f200 80cb 	bhi.w	80005c4 <__udivmoddi4+0x2c0>
 800042e:	4643      	mov	r3, r8
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1110 	mls	r1, r7, r0, r1
 800043c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000440:	fb0e fe00 	mul.w	lr, lr, r0
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x156>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x154>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f200 80bb 	bhi.w	80005ce <__udivmoddi4+0x2ca>
 8000458:	4608      	mov	r0, r1
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000462:	e79c      	b.n	800039e <__udivmoddi4+0x9a>
 8000464:	f1c6 0720 	rsb	r7, r6, #32
 8000468:	40b3      	lsls	r3, r6
 800046a:	fa22 fc07 	lsr.w	ip, r2, r7
 800046e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000472:	fa20 f407 	lsr.w	r4, r0, r7
 8000476:	fa01 f306 	lsl.w	r3, r1, r6
 800047a:	431c      	orrs	r4, r3
 800047c:	40f9      	lsrs	r1, r7
 800047e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000482:	fa00 f306 	lsl.w	r3, r0, r6
 8000486:	fbb1 f8f9 	udiv	r8, r1, r9
 800048a:	0c20      	lsrs	r0, r4, #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fb09 1118 	mls	r1, r9, r8, r1
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	fb08 f00e 	mul.w	r0, r8, lr
 800049c:	4288      	cmp	r0, r1
 800049e:	fa02 f206 	lsl.w	r2, r2, r6
 80004a2:	d90b      	bls.n	80004bc <__udivmoddi4+0x1b8>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004ac:	f080 8088 	bcs.w	80005c0 <__udivmoddi4+0x2bc>
 80004b0:	4288      	cmp	r0, r1
 80004b2:	f240 8085 	bls.w	80005c0 <__udivmoddi4+0x2bc>
 80004b6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1a09      	subs	r1, r1, r0
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c4:	fb09 1110 	mls	r1, r9, r0, r1
 80004c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d0:	458e      	cmp	lr, r1
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x1e2>
 80004d4:	eb1c 0101 	adds.w	r1, ip, r1
 80004d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80004dc:	d26c      	bcs.n	80005b8 <__udivmoddi4+0x2b4>
 80004de:	458e      	cmp	lr, r1
 80004e0:	d96a      	bls.n	80005b8 <__udivmoddi4+0x2b4>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4461      	add	r1, ip
 80004e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ea:	fba0 9402 	umull	r9, r4, r0, r2
 80004ee:	eba1 010e 	sub.w	r1, r1, lr
 80004f2:	42a1      	cmp	r1, r4
 80004f4:	46c8      	mov	r8, r9
 80004f6:	46a6      	mov	lr, r4
 80004f8:	d356      	bcc.n	80005a8 <__udivmoddi4+0x2a4>
 80004fa:	d053      	beq.n	80005a4 <__udivmoddi4+0x2a0>
 80004fc:	b15d      	cbz	r5, 8000516 <__udivmoddi4+0x212>
 80004fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000502:	eb61 010e 	sbc.w	r1, r1, lr
 8000506:	fa01 f707 	lsl.w	r7, r1, r7
 800050a:	fa22 f306 	lsr.w	r3, r2, r6
 800050e:	40f1      	lsrs	r1, r6
 8000510:	431f      	orrs	r7, r3
 8000512:	e9c5 7100 	strd	r7, r1, [r5]
 8000516:	2600      	movs	r6, #0
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	f1c2 0320 	rsb	r3, r2, #32
 8000522:	40d8      	lsrs	r0, r3
 8000524:	fa0c fc02 	lsl.w	ip, ip, r2
 8000528:	fa21 f303 	lsr.w	r3, r1, r3
 800052c:	4091      	lsls	r1, r2
 800052e:	4301      	orrs	r1, r0
 8000530:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	fbb3 f0f7 	udiv	r0, r3, r7
 800053c:	fb07 3610 	mls	r6, r7, r0, r3
 8000540:	0c0b      	lsrs	r3, r1, #16
 8000542:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000546:	fb00 f60e 	mul.w	r6, r0, lr
 800054a:	429e      	cmp	r6, r3
 800054c:	fa04 f402 	lsl.w	r4, r4, r2
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x260>
 8000552:	eb1c 0303 	adds.w	r3, ip, r3
 8000556:	f100 38ff 	add.w	r8, r0, #4294967295
 800055a:	d22f      	bcs.n	80005bc <__udivmoddi4+0x2b8>
 800055c:	429e      	cmp	r6, r3
 800055e:	d92d      	bls.n	80005bc <__udivmoddi4+0x2b8>
 8000560:	3802      	subs	r0, #2
 8000562:	4463      	add	r3, ip
 8000564:	1b9b      	subs	r3, r3, r6
 8000566:	b289      	uxth	r1, r1
 8000568:	fbb3 f6f7 	udiv	r6, r3, r7
 800056c:	fb07 3316 	mls	r3, r7, r6, r3
 8000570:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000574:	fb06 f30e 	mul.w	r3, r6, lr
 8000578:	428b      	cmp	r3, r1
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x28a>
 800057c:	eb1c 0101 	adds.w	r1, ip, r1
 8000580:	f106 38ff 	add.w	r8, r6, #4294967295
 8000584:	d216      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000586:	428b      	cmp	r3, r1
 8000588:	d914      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000594:	e738      	b.n	8000408 <__udivmoddi4+0x104>
 8000596:	462e      	mov	r6, r5
 8000598:	4628      	mov	r0, r5
 800059a:	e705      	b.n	80003a8 <__udivmoddi4+0xa4>
 800059c:	4606      	mov	r6, r0
 800059e:	e6e3      	b.n	8000368 <__udivmoddi4+0x64>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6f8      	b.n	8000396 <__udivmoddi4+0x92>
 80005a4:	454b      	cmp	r3, r9
 80005a6:	d2a9      	bcs.n	80004fc <__udivmoddi4+0x1f8>
 80005a8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b0:	3801      	subs	r0, #1
 80005b2:	e7a3      	b.n	80004fc <__udivmoddi4+0x1f8>
 80005b4:	4646      	mov	r6, r8
 80005b6:	e7ea      	b.n	800058e <__udivmoddi4+0x28a>
 80005b8:	4620      	mov	r0, r4
 80005ba:	e794      	b.n	80004e6 <__udivmoddi4+0x1e2>
 80005bc:	4640      	mov	r0, r8
 80005be:	e7d1      	b.n	8000564 <__udivmoddi4+0x260>
 80005c0:	46d0      	mov	r8, sl
 80005c2:	e77b      	b.n	80004bc <__udivmoddi4+0x1b8>
 80005c4:	3b02      	subs	r3, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	e732      	b.n	8000430 <__udivmoddi4+0x12c>
 80005ca:	4630      	mov	r0, r6
 80005cc:	e709      	b.n	80003e2 <__udivmoddi4+0xde>
 80005ce:	4464      	add	r4, ip
 80005d0:	3802      	subs	r0, #2
 80005d2:	e742      	b.n	800045a <__udivmoddi4+0x156>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fb96 	bl	8000d0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f853 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 f8bf 	bl	8000768 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 80005ea:	4b20      	ldr	r3, [pc, #128]	; (800066c <main+0x94>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a1f      	ldr	r2, [pc, #124]	; (800066c <main+0x94>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 80005f6:	481e      	ldr	r0, [pc, #120]	; (8000670 <main+0x98>)
 80005f8:	f004 fca2 	bl	8004f40 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 80005fc:	f004 faca 	bl	8004b94 <SEGGER_SYSVIEW_Conf>

  //SEGGER_SYSVIEW_Start();

  status = xTaskCreate(vTask1_handler, "Task-1", 200, "Hello from Task-1", 2, &pvTask1_handle);
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	2302      	movs	r3, #2
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <main+0x9c>)
 800060c:	22c8      	movs	r2, #200	; 0xc8
 800060e:	491a      	ldr	r1, [pc, #104]	; (8000678 <main+0xa0>)
 8000610:	481a      	ldr	r0, [pc, #104]	; (800067c <main+0xa4>)
 8000612:	f002 fc45 	bl	8002ea0 <xTaskCreate>
 8000616:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d00a      	beq.n	8000634 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800061e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000622:	f383 8811 	msr	BASEPRI, r3
 8000626:	f3bf 8f6f 	isb	sy
 800062a:	f3bf 8f4f 	dsb	sy
 800062e:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000630:	bf00      	nop
 8000632:	e7fe      	b.n	8000632 <main+0x5a>

  status = xTaskCreate(vTask2_handler, "Task-2", 200, "Hello from Task-2", 2, &pvTask2_handle);
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	2302      	movs	r3, #2
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	4b10      	ldr	r3, [pc, #64]	; (8000680 <main+0xa8>)
 800063e:	22c8      	movs	r2, #200	; 0xc8
 8000640:	4910      	ldr	r1, [pc, #64]	; (8000684 <main+0xac>)
 8000642:	4811      	ldr	r0, [pc, #68]	; (8000688 <main+0xb0>)
 8000644:	f002 fc2c 	bl	8002ea0 <xTaskCreate>
 8000648:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d00a      	beq.n	8000666 <main+0x8e>
        __asm volatile
 8000650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000654:	f383 8811 	msr	BASEPRI, r3
 8000658:	f3bf 8f6f 	isb	sy
 800065c:	f3bf 8f4f 	dsb	sy
 8000660:	60fb      	str	r3, [r7, #12]
    }
 8000662:	bf00      	nop
 8000664:	e7fe      	b.n	8000664 <main+0x8c>

  //Start the FreeRTOS scheduler
  vTaskStartScheduler();
 8000666:	f002 fd71 	bl	800314c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066a:	e7fe      	b.n	800066a <main+0x92>
 800066c:	e0001000 	.word	0xe0001000
 8000670:	0007a120 	.word	0x0007a120
 8000674:	080078f8 	.word	0x080078f8
 8000678:	0800790c 	.word	0x0800790c
 800067c:	08000995 	.word	0x08000995
 8000680:	08007914 	.word	0x08007914
 8000684:	08007928 	.word	0x08007928
 8000688:	080009b9 	.word	0x080009b9

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	; 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	2234      	movs	r2, #52	; 0x34
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f006 fc2c 	bl	8006ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <SystemClock_Config+0xd4>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a2a      	ldr	r2, [pc, #168]	; (8000760 <SystemClock_Config+0xd4>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <SystemClock_Config+0xd4>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <SystemClock_Config+0xd8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a25      	ldr	r2, [pc, #148]	; (8000764 <SystemClock_Config+0xd8>)
 80006ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <SystemClock_Config+0xd8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e8:	2310      	movs	r3, #16
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f0:	2300      	movs	r3, #0
 80006f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f4:	2308      	movs	r3, #8
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006f8:	23d8      	movs	r3, #216	; 0xd8
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000700:	2302      	movs	r3, #2
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000704:	2302      	movs	r3, #2
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fe23 	bl	8001358 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000718:	f000 f972 	bl	8000a00 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800071c:	f000 fdcc 	bl	80012b8 <HAL_PWREx_EnableOverDrive>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000726:	f000 f96b 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000736:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2107      	movs	r1, #7
 8000748:	4618      	mov	r0, r3
 800074a:	f001 f8b3 	bl	80018b4 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000754:	f000 f954 	bl	8000a00 <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	; 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08c      	sub	sp, #48	; 0x30
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	4b7f      	ldr	r3, [pc, #508]	; (800097c <MX_GPIO_Init+0x214>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a7e      	ldr	r2, [pc, #504]	; (800097c <MX_GPIO_Init+0x214>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b7c      	ldr	r3, [pc, #496]	; (800097c <MX_GPIO_Init+0x214>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	61bb      	str	r3, [r7, #24]
 8000794:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	4b79      	ldr	r3, [pc, #484]	; (800097c <MX_GPIO_Init+0x214>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a78      	ldr	r2, [pc, #480]	; (800097c <MX_GPIO_Init+0x214>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b76      	ldr	r3, [pc, #472]	; (800097c <MX_GPIO_Init+0x214>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b73      	ldr	r3, [pc, #460]	; (800097c <MX_GPIO_Init+0x214>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a72      	ldr	r2, [pc, #456]	; (800097c <MX_GPIO_Init+0x214>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b70      	ldr	r3, [pc, #448]	; (800097c <MX_GPIO_Init+0x214>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	4b6d      	ldr	r3, [pc, #436]	; (800097c <MX_GPIO_Init+0x214>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a6c      	ldr	r2, [pc, #432]	; (800097c <MX_GPIO_Init+0x214>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b6a      	ldr	r3, [pc, #424]	; (800097c <MX_GPIO_Init+0x214>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	4b67      	ldr	r3, [pc, #412]	; (800097c <MX_GPIO_Init+0x214>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a66      	ldr	r2, [pc, #408]	; (800097c <MX_GPIO_Init+0x214>)
 80007e4:	f043 0308 	orr.w	r3, r3, #8
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b64      	ldr	r3, [pc, #400]	; (800097c <MX_GPIO_Init+0x214>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0308 	and.w	r3, r3, #8
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007f6:	4b61      	ldr	r3, [pc, #388]	; (800097c <MX_GPIO_Init+0x214>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a60      	ldr	r2, [pc, #384]	; (800097c <MX_GPIO_Init+0x214>)
 80007fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b5e      	ldr	r3, [pc, #376]	; (800097c <MX_GPIO_Init+0x214>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f244 0181 	movw	r1, #16513	; 0x4081
 8000814:	485a      	ldr	r0, [pc, #360]	; (8000980 <MX_GPIO_Init+0x218>)
 8000816:	f000 fd35 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2140      	movs	r1, #64	; 0x40
 800081e:	4859      	ldr	r0, [pc, #356]	; (8000984 <MX_GPIO_Init+0x21c>)
 8000820:	f000 fd30 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800082a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4853      	ldr	r0, [pc, #332]	; (8000988 <MX_GPIO_Init+0x220>)
 800083c:	f000 fb76 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000840:	2332      	movs	r3, #50	; 0x32
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000850:	230b      	movs	r3, #11
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	484b      	ldr	r0, [pc, #300]	; (8000988 <MX_GPIO_Init+0x220>)
 800085c:	f000 fb66 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000860:	2386      	movs	r3, #134	; 0x86
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000870:	230b      	movs	r3, #11
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	4844      	ldr	r0, [pc, #272]	; (800098c <MX_GPIO_Init+0x224>)
 800087c:	f000 fb56 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000880:	f244 0381 	movw	r3, #16513	; 0x4081
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4839      	ldr	r0, [pc, #228]	; (8000980 <MX_GPIO_Init+0x218>)
 800089a:	f000 fb47 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800089e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b0:	230b      	movs	r3, #11
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4831      	ldr	r0, [pc, #196]	; (8000980 <MX_GPIO_Init+0x218>)
 80008bc:	f000 fb36 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008d2:	2307      	movs	r3, #7
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	482c      	ldr	r0, [pc, #176]	; (8000990 <MX_GPIO_Init+0x228>)
 80008de:	f000 fb25 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008e2:	2340      	movs	r3, #64	; 0x40
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4822      	ldr	r0, [pc, #136]	; (8000984 <MX_GPIO_Init+0x21c>)
 80008fa:	f000 fb17 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008fe:	2380      	movs	r3, #128	; 0x80
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	481c      	ldr	r0, [pc, #112]	; (8000984 <MX_GPIO_Init+0x21c>)
 8000912:	f000 fb0b 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000916:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000928:	230a      	movs	r3, #10
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4816      	ldr	r0, [pc, #88]	; (800098c <MX_GPIO_Init+0x224>)
 8000934:	f000 fafa 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000938:	f44f 7300 	mov.w	r3, #512	; 0x200
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	480f      	ldr	r0, [pc, #60]	; (800098c <MX_GPIO_Init+0x224>)
 800094e:	f000 faed 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000952:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000964:	230b      	movs	r3, #11
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_GPIO_Init+0x21c>)
 8000970:	f000 fadc 	bl	8000f2c <HAL_GPIO_Init>

}
 8000974:	bf00      	nop
 8000976:	3730      	adds	r7, #48	; 0x30
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800
 8000980:	40020400 	.word	0x40020400
 8000984:	40021800 	.word	0x40021800
 8000988:	40020800 	.word	0x40020800
 800098c:	40020000 	.word	0x40020000
 8000990:	40020c00 	.word	0x40020c00

08000994 <vTask1_handler>:

/* USER CODE BEGIN 4 */
static void vTask1_handler( void * pvParameters )
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]

    while(1)
    {
        /* Task code goes here. */
    	printf("%s\n", (char*)pvParameters);
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f006 fb21 	bl	8006fe4 <puts>
    	taskYIELD();
 80009a2:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <vTask1_handler+0x20>)
 80009a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	f3bf 8f4f 	dsb	sy
 80009ae:	f3bf 8f6f 	isb	sy
    	printf("%s\n", (char*)pvParameters);
 80009b2:	e7f3      	b.n	800099c <vTask1_handler+0x8>
 80009b4:	e000ed04 	.word	0xe000ed04

080009b8 <vTask2_handler>:
    }
}

static void vTask2_handler( void * pvParameters )
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

    while(1)
    {
        /* Task code goes here. */
    	printf("%s\n", (char*)pvParameters);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f006 fb0f 	bl	8006fe4 <puts>
    	taskYIELD();
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <vTask2_handler+0x20>)
 80009c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	f3bf 8f4f 	dsb	sy
 80009d2:	f3bf 8f6f 	isb	sy
    	printf("%s\n", (char*)pvParameters);
 80009d6:	e7f3      	b.n	80009c0 <vTask2_handler+0x8>
 80009d8:	e000ed04 	.word	0xe000ed04

080009dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a04      	ldr	r2, [pc, #16]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d101      	bne.n	80009f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ee:	f000 f99b 	bl	8000d28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40001000 	.word	0x40001000

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_MspInit+0x44>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <HAL_MspInit+0x44>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <HAL_MspInit+0x44>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_MspInit+0x44>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_MspInit+0x44>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_MspInit+0x44>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000a42:	f003 fcf1 	bl	8004428 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08e      	sub	sp, #56	; 0x38
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a64:	4b33      	ldr	r3, [pc, #204]	; (8000b34 <HAL_InitTick+0xe0>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a32      	ldr	r2, [pc, #200]	; (8000b34 <HAL_InitTick+0xe0>)
 8000a6a:	f043 0310 	orr.w	r3, r3, #16
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	4b30      	ldr	r3, [pc, #192]	; (8000b34 <HAL_InitTick+0xe0>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f003 0310 	and.w	r3, r3, #16
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a7c:	f107 0210 	add.w	r2, r7, #16
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 f924 	bl	8001cd4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a8c:	6a3b      	ldr	r3, [r7, #32]
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d103      	bne.n	8000a9e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a96:	f001 f909 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 8000a9a:	6378      	str	r0, [r7, #52]	; 0x34
 8000a9c:	e004      	b.n	8000aa8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a9e:	f001 f905 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aaa:	4a23      	ldr	r2, [pc, #140]	; (8000b38 <HAL_InitTick+0xe4>)
 8000aac:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab0:	0c9b      	lsrs	r3, r3, #18
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <HAL_InitTick+0xe8>)
 8000ab8:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <HAL_InitTick+0xec>)
 8000aba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <HAL_InitTick+0xe8>)
 8000abe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ac2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ac4:	4a1d      	ldr	r2, [pc, #116]	; (8000b3c <HAL_InitTick+0xe8>)
 8000ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <HAL_InitTick+0xe8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <HAL_InitTick+0xe8>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <HAL_InitTick+0xe8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000adc:	4817      	ldr	r0, [pc, #92]	; (8000b3c <HAL_InitTick+0xe8>)
 8000ade:	f001 f92b 	bl	8001d38 <HAL_TIM_Base_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ae8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d11b      	bne.n	8000b28 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000af0:	4812      	ldr	r0, [pc, #72]	; (8000b3c <HAL_InitTick+0xe8>)
 8000af2:	f001 f983 	bl	8001dfc <HAL_TIM_Base_Start_IT>
 8000af6:	4603      	mov	r3, r0
 8000af8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000afc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d111      	bne.n	8000b28 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b04:	2036      	movs	r0, #54	; 0x36
 8000b06:	f000 fa03 	bl	8000f10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d808      	bhi.n	8000b22 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	2036      	movs	r0, #54	; 0x36
 8000b16:	f000 f9df 	bl	8000ed8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <HAL_InitTick+0xf0>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	e002      	b.n	8000b28 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3738      	adds	r7, #56	; 0x38
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40023800 	.word	0x40023800
 8000b38:	431bde83 	.word	0x431bde83
 8000b3c:	2000009c 	.word	0x2000009c
 8000b40:	40001000 	.word	0x40001000
 8000b44:	20000004 	.word	0x20000004

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <NMI_Handler+0x4>

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <TIM6_DAC_IRQHandler+0x10>)
 8000b7a:	f001 f9b7 	bl	8001eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000009c 	.word	0x2000009c

08000b88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	e00a      	b.n	8000bb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b9a:	f3af 8000 	nop.w
 8000b9e:	4601      	mov	r1, r0
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	60ba      	str	r2, [r7, #8]
 8000ba6:	b2ca      	uxtb	r2, r1
 8000ba8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dbf0      	blt.n	8000b9a <_read+0x12>
	}

return len;
 8000bb8:	687b      	ldr	r3, [r7, #4]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
	return -1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bea:	605a      	str	r2, [r3, #4]
	return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <_isatty>:

int _isatty(int file)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
	return 1;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f006 f904 	bl	8006e68 <__errno>
 8000c60:	4603      	mov	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20080000 	.word	0x20080000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	200000e8 	.word	0x200000e8
 8000c94:	20014528 	.word	0x20014528

08000c98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <SystemInit+0x20>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <SystemInit+0x20>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cc0:	f7ff ffea 	bl	8000c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	; (8000cfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	; (8000d08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cea:	f006 f8c3 	bl	8006e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cee:	f7ff fc73 	bl	80005d8 <main>
  bx  lr    
 8000cf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cf4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000d00:	08007ac0 	.word	0x08007ac0
  ldr r2, =_sbss
 8000d04:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000d08:	20014528 	.word	0x20014528

08000d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC_IRQHandler>

08000d0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d12:	2003      	movs	r0, #3
 8000d14:	f000 f8d5 	bl	8000ec2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d18:	200f      	movs	r0, #15
 8000d1a:	f7ff fe9b 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1e:	f7ff fe75 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x20>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x24>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_IncTick+0x24>)
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	200000ec 	.word	0x200000ec

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_GetTick+0x14>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	200000ec 	.word	0x200000ec

08000d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <__NVIC_SetPriorityGrouping+0x40>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d92:	4313      	orrs	r3, r2
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x40>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00
 8000dac:	05fa0000 	.word	0x05fa0000

08000db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	f003 0307 	and.w	r3, r3, #7
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	db0b      	blt.n	8000df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	f003 021f 	and.w	r2, r3, #31
 8000de4:	4907      	ldr	r1, [pc, #28]	; (8000e04 <__NVIC_EnableIRQ+0x38>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	095b      	lsrs	r3, r3, #5
 8000dec:	2001      	movs	r0, #1
 8000dee:	fa00 f202 	lsl.w	r2, r0, r2
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000e100 	.word	0xe000e100

08000e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db0a      	blt.n	8000e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	490c      	ldr	r1, [pc, #48]	; (8000e54 <__NVIC_SetPriority+0x4c>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	0112      	lsls	r2, r2, #4
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e30:	e00a      	b.n	8000e48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4908      	ldr	r1, [pc, #32]	; (8000e58 <__NVIC_SetPriority+0x50>)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	0112      	lsls	r2, r2, #4
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	440b      	add	r3, r1
 8000e46:	761a      	strb	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f1c3 0307 	rsb	r3, r3, #7
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	bf28      	it	cs
 8000e7a:	2304      	movcs	r3, #4
 8000e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d902      	bls.n	8000e8c <NVIC_EncodePriority+0x30>
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3b03      	subs	r3, #3
 8000e8a:	e000      	b.n	8000e8e <NVIC_EncodePriority+0x32>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43d9      	mvns	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	4313      	orrs	r3, r2
         );
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3724      	adds	r7, #36	; 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ff4c 	bl	8000d68 <__NVIC_SetPriorityGrouping>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eea:	f7ff ff61 	bl	8000db0 <__NVIC_GetPriorityGrouping>
 8000eee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	68b9      	ldr	r1, [r7, #8]
 8000ef4:	6978      	ldr	r0, [r7, #20]
 8000ef6:	f7ff ffb1 	bl	8000e5c <NVIC_EncodePriority>
 8000efa:	4602      	mov	r2, r0
 8000efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f00:	4611      	mov	r1, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff80 	bl	8000e08 <__NVIC_SetPriority>
}
 8000f08:	bf00      	nop
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff54 	bl	8000dcc <__NVIC_EnableIRQ>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	e175      	b.n	8001238 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	f040 8164 	bne.w	8001232 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d005      	beq.n	8000f82 <HAL_GPIO_Init+0x56>
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d130      	bne.n	8000fe4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	f003 0201 	and.w	r2, r3, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d017      	beq.n	8001020 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d123      	bne.n	8001074 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	08da      	lsrs	r2, r3, #3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3208      	adds	r2, #8
 8001034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	220f      	movs	r2, #15
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	08da      	lsrs	r2, r3, #3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3208      	adds	r2, #8
 800106e:	69b9      	ldr	r1, [r7, #24]
 8001070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0203 	and.w	r2, r3, #3
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 80be 	beq.w	8001232 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	4b66      	ldr	r3, [pc, #408]	; (8001250 <HAL_GPIO_Init+0x324>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	4a65      	ldr	r2, [pc, #404]	; (8001250 <HAL_GPIO_Init+0x324>)
 80010bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c0:	6453      	str	r3, [r2, #68]	; 0x44
 80010c2:	4b63      	ldr	r3, [pc, #396]	; (8001250 <HAL_GPIO_Init+0x324>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010ce:	4a61      	ldr	r2, [pc, #388]	; (8001254 <HAL_GPIO_Init+0x328>)
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	089b      	lsrs	r3, r3, #2
 80010d4:	3302      	adds	r3, #2
 80010d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	220f      	movs	r2, #15
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a58      	ldr	r2, [pc, #352]	; (8001258 <HAL_GPIO_Init+0x32c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d037      	beq.n	800116a <HAL_GPIO_Init+0x23e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a57      	ldr	r2, [pc, #348]	; (800125c <HAL_GPIO_Init+0x330>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d031      	beq.n	8001166 <HAL_GPIO_Init+0x23a>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a56      	ldr	r2, [pc, #344]	; (8001260 <HAL_GPIO_Init+0x334>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d02b      	beq.n	8001162 <HAL_GPIO_Init+0x236>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a55      	ldr	r2, [pc, #340]	; (8001264 <HAL_GPIO_Init+0x338>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d025      	beq.n	800115e <HAL_GPIO_Init+0x232>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a54      	ldr	r2, [pc, #336]	; (8001268 <HAL_GPIO_Init+0x33c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d01f      	beq.n	800115a <HAL_GPIO_Init+0x22e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a53      	ldr	r2, [pc, #332]	; (800126c <HAL_GPIO_Init+0x340>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d019      	beq.n	8001156 <HAL_GPIO_Init+0x22a>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a52      	ldr	r2, [pc, #328]	; (8001270 <HAL_GPIO_Init+0x344>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d013      	beq.n	8001152 <HAL_GPIO_Init+0x226>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a51      	ldr	r2, [pc, #324]	; (8001274 <HAL_GPIO_Init+0x348>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d00d      	beq.n	800114e <HAL_GPIO_Init+0x222>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a50      	ldr	r2, [pc, #320]	; (8001278 <HAL_GPIO_Init+0x34c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d007      	beq.n	800114a <HAL_GPIO_Init+0x21e>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4f      	ldr	r2, [pc, #316]	; (800127c <HAL_GPIO_Init+0x350>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d101      	bne.n	8001146 <HAL_GPIO_Init+0x21a>
 8001142:	2309      	movs	r3, #9
 8001144:	e012      	b.n	800116c <HAL_GPIO_Init+0x240>
 8001146:	230a      	movs	r3, #10
 8001148:	e010      	b.n	800116c <HAL_GPIO_Init+0x240>
 800114a:	2308      	movs	r3, #8
 800114c:	e00e      	b.n	800116c <HAL_GPIO_Init+0x240>
 800114e:	2307      	movs	r3, #7
 8001150:	e00c      	b.n	800116c <HAL_GPIO_Init+0x240>
 8001152:	2306      	movs	r3, #6
 8001154:	e00a      	b.n	800116c <HAL_GPIO_Init+0x240>
 8001156:	2305      	movs	r3, #5
 8001158:	e008      	b.n	800116c <HAL_GPIO_Init+0x240>
 800115a:	2304      	movs	r3, #4
 800115c:	e006      	b.n	800116c <HAL_GPIO_Init+0x240>
 800115e:	2303      	movs	r3, #3
 8001160:	e004      	b.n	800116c <HAL_GPIO_Init+0x240>
 8001162:	2302      	movs	r3, #2
 8001164:	e002      	b.n	800116c <HAL_GPIO_Init+0x240>
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <HAL_GPIO_Init+0x240>
 800116a:	2300      	movs	r3, #0
 800116c:	69fa      	ldr	r2, [r7, #28]
 800116e:	f002 0203 	and.w	r2, r2, #3
 8001172:	0092      	lsls	r2, r2, #2
 8001174:	4093      	lsls	r3, r2
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800117c:	4935      	ldr	r1, [pc, #212]	; (8001254 <HAL_GPIO_Init+0x328>)
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	3302      	adds	r3, #2
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118a:	4b3d      	ldr	r3, [pc, #244]	; (8001280 <HAL_GPIO_Init+0x354>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ae:	4a34      	ldr	r2, [pc, #208]	; (8001280 <HAL_GPIO_Init+0x354>)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b4:	4b32      	ldr	r3, [pc, #200]	; (8001280 <HAL_GPIO_Init+0x354>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d8:	4a29      	ldr	r2, [pc, #164]	; (8001280 <HAL_GPIO_Init+0x354>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011de:	4b28      	ldr	r3, [pc, #160]	; (8001280 <HAL_GPIO_Init+0x354>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001202:	4a1f      	ldr	r2, [pc, #124]	; (8001280 <HAL_GPIO_Init+0x354>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_GPIO_Init+0x354>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800122c:	4a14      	ldr	r2, [pc, #80]	; (8001280 <HAL_GPIO_Init+0x354>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3301      	adds	r3, #1
 8001236:	61fb      	str	r3, [r7, #28]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	2b0f      	cmp	r3, #15
 800123c:	f67f ae86 	bls.w	8000f4c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	40013800 	.word	0x40013800
 8001258:	40020000 	.word	0x40020000
 800125c:	40020400 	.word	0x40020400
 8001260:	40020800 	.word	0x40020800
 8001264:	40020c00 	.word	0x40020c00
 8001268:	40021000 	.word	0x40021000
 800126c:	40021400 	.word	0x40021400
 8001270:	40021800 	.word	0x40021800
 8001274:	40021c00 	.word	0x40021c00
 8001278:	40022000 	.word	0x40022000
 800127c:	40022400 	.word	0x40022400
 8001280:	40013c00 	.word	0x40013c00

08001284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
 8001290:	4613      	mov	r3, r2
 8001292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001294:	787b      	ldrb	r3, [r7, #1]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80012a0:	e003      	b.n	80012aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80012a2:	887b      	ldrh	r3, [r7, #2]
 80012a4:	041a      	lsls	r2, r3, #16
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	619a      	str	r2, [r3, #24]
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	4b23      	ldr	r3, [pc, #140]	; (8001350 <HAL_PWREx_EnableOverDrive+0x98>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a22      	ldr	r2, [pc, #136]	; (8001350 <HAL_PWREx_EnableOverDrive+0x98>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <HAL_PWREx_EnableOverDrive+0x98>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a1d      	ldr	r2, [pc, #116]	; (8001354 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012e6:	f7ff fd33 	bl	8000d50 <HAL_GetTick>
 80012ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012ec:	e009      	b.n	8001302 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012ee:	f7ff fd2f 	bl	8000d50 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012fc:	d901      	bls.n	8001302 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e022      	b.n	8001348 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800130e:	d1ee      	bne.n	80012ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800131c:	f7ff fd18 	bl	8000d50 <HAL_GetTick>
 8001320:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001322:	e009      	b.n	8001338 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001324:	f7ff fd14 	bl	8000d50 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001332:	d901      	bls.n	8001338 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e007      	b.n	8001348 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_PWREx_EnableOverDrive+0x9c>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001344:	d1ee      	bne.n	8001324 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40023800 	.word	0x40023800
 8001354:	40007000 	.word	0x40007000

08001358 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e29b      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 8087 	beq.w	800148a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800137c:	4b96      	ldr	r3, [pc, #600]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	2b04      	cmp	r3, #4
 8001386:	d00c      	beq.n	80013a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001388:	4b93      	ldr	r3, [pc, #588]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	2b08      	cmp	r3, #8
 8001392:	d112      	bne.n	80013ba <HAL_RCC_OscConfig+0x62>
 8001394:	4b90      	ldr	r3, [pc, #576]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800139c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013a0:	d10b      	bne.n	80013ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a2:	4b8d      	ldr	r3, [pc, #564]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d06c      	beq.n	8001488 <HAL_RCC_OscConfig+0x130>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d168      	bne.n	8001488 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e275      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c2:	d106      	bne.n	80013d2 <HAL_RCC_OscConfig+0x7a>
 80013c4:	4b84      	ldr	r3, [pc, #528]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a83      	ldr	r2, [pc, #524]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80013ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	e02e      	b.n	8001430 <HAL_RCC_OscConfig+0xd8>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x9c>
 80013da:	4b7f      	ldr	r3, [pc, #508]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a7e      	ldr	r2, [pc, #504]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80013e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b7c      	ldr	r3, [pc, #496]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a7b      	ldr	r2, [pc, #492]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80013ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e01d      	b.n	8001430 <HAL_RCC_OscConfig+0xd8>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0xc0>
 80013fe:	4b76      	ldr	r3, [pc, #472]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a75      	ldr	r2, [pc, #468]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b73      	ldr	r3, [pc, #460]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a72      	ldr	r2, [pc, #456]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e00b      	b.n	8001430 <HAL_RCC_OscConfig+0xd8>
 8001418:	4b6f      	ldr	r3, [pc, #444]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a6e      	ldr	r2, [pc, #440]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 800141e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b6c      	ldr	r3, [pc, #432]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a6b      	ldr	r2, [pc, #428]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 800142a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d013      	beq.n	8001460 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff fc8a 	bl	8000d50 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fc86 	bl	8000d50 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e229      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	4b61      	ldr	r3, [pc, #388]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0xe8>
 800145e:	e014      	b.n	800148a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff fc76 	bl	8000d50 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fc72 	bl	8000d50 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e215      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147a:	4b57      	ldr	r3, [pc, #348]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x110>
 8001486:	e000      	b.n	800148a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d069      	beq.n	800156a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001496:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00b      	beq.n	80014ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a2:	4b4d      	ldr	r3, [pc, #308]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d11c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x190>
 80014ae:	4b4a      	ldr	r3, [pc, #296]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d116      	bne.n	80014e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ba:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x17a>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e1e9      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d2:	4b41      	ldr	r3, [pc, #260]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	493d      	ldr	r1, [pc, #244]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	e040      	b.n	800156a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d023      	beq.n	8001538 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f0:	4b39      	ldr	r3, [pc, #228]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a38      	ldr	r2, [pc, #224]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fc:	f7ff fc28 	bl	8000d50 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001504:	f7ff fc24 	bl	8000d50 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e1c7      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001516:	4b30      	ldr	r3, [pc, #192]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001522:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4929      	ldr	r1, [pc, #164]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
 8001536:	e018      	b.n	800156a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001538:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a26      	ldr	r2, [pc, #152]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 800153e:	f023 0301 	bic.w	r3, r3, #1
 8001542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fc04 	bl	8000d50 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800154c:	f7ff fc00 	bl	8000d50 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e1a3      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155e:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d038      	beq.n	80015e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d019      	beq.n	80015b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001582:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158a:	f7ff fbe1 	bl	8000d50 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001592:	f7ff fbdd 	bl	8000d50 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e180      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80015a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x23a>
 80015b0:	e01a      	b.n	80015e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80015b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_RCC_OscConfig+0x280>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015be:	f7ff fbc7 	bl	8000d50 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c4:	e00a      	b.n	80015dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff fbc3 	bl	8000d50 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d903      	bls.n	80015dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e166      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
 80015d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015dc:	4b92      	ldr	r3, [pc, #584]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80015de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1ee      	bne.n	80015c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80a4 	beq.w	800173e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f6:	4b8c      	ldr	r3, [pc, #560]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10d      	bne.n	800161e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b89      	ldr	r3, [pc, #548]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	4a88      	ldr	r2, [pc, #544]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	6413      	str	r3, [r2, #64]	; 0x40
 800160e:	4b86      	ldr	r3, [pc, #536]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800161a:	2301      	movs	r3, #1
 800161c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800161e:	4b83      	ldr	r3, [pc, #524]	; (800182c <HAL_RCC_OscConfig+0x4d4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001626:	2b00      	cmp	r3, #0
 8001628:	d118      	bne.n	800165c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800162a:	4b80      	ldr	r3, [pc, #512]	; (800182c <HAL_RCC_OscConfig+0x4d4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a7f      	ldr	r2, [pc, #508]	; (800182c <HAL_RCC_OscConfig+0x4d4>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001636:	f7ff fb8b 	bl	8000d50 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163e:	f7ff fb87 	bl	8000d50 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b64      	cmp	r3, #100	; 0x64
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e12a      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001650:	4b76      	ldr	r3, [pc, #472]	; (800182c <HAL_RCC_OscConfig+0x4d4>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d106      	bne.n	8001672 <HAL_RCC_OscConfig+0x31a>
 8001664:	4b70      	ldr	r3, [pc, #448]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001668:	4a6f      	ldr	r2, [pc, #444]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6713      	str	r3, [r2, #112]	; 0x70
 8001670:	e02d      	b.n	80016ce <HAL_RCC_OscConfig+0x376>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0x33c>
 800167a:	4b6b      	ldr	r3, [pc, #428]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167e:	4a6a      	ldr	r2, [pc, #424]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	6713      	str	r3, [r2, #112]	; 0x70
 8001686:	4b68      	ldr	r3, [pc, #416]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168a:	4a67      	ldr	r2, [pc, #412]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 800168c:	f023 0304 	bic.w	r3, r3, #4
 8001690:	6713      	str	r3, [r2, #112]	; 0x70
 8001692:	e01c      	b.n	80016ce <HAL_RCC_OscConfig+0x376>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b05      	cmp	r3, #5
 800169a:	d10c      	bne.n	80016b6 <HAL_RCC_OscConfig+0x35e>
 800169c:	4b62      	ldr	r3, [pc, #392]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 800169e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a0:	4a61      	ldr	r2, [pc, #388]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6713      	str	r3, [r2, #112]	; 0x70
 80016a8:	4b5f      	ldr	r3, [pc, #380]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80016aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ac:	4a5e      	ldr	r2, [pc, #376]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6713      	str	r3, [r2, #112]	; 0x70
 80016b4:	e00b      	b.n	80016ce <HAL_RCC_OscConfig+0x376>
 80016b6:	4b5c      	ldr	r3, [pc, #368]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ba:	4a5b      	ldr	r2, [pc, #364]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	6713      	str	r3, [r2, #112]	; 0x70
 80016c2:	4b59      	ldr	r3, [pc, #356]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c6:	4a58      	ldr	r2, [pc, #352]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80016c8:	f023 0304 	bic.w	r3, r3, #4
 80016cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d015      	beq.n	8001702 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d6:	f7ff fb3b 	bl	8000d50 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff fb37 	bl	8000d50 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e0d8      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f4:	4b4c      	ldr	r3, [pc, #304]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0ee      	beq.n	80016de <HAL_RCC_OscConfig+0x386>
 8001700:	e014      	b.n	800172c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001702:	f7ff fb25 	bl	8000d50 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001708:	e00a      	b.n	8001720 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff fb21 	bl	8000d50 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	; 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e0c2      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001720:	4b41      	ldr	r3, [pc, #260]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1ee      	bne.n	800170a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800172c:	7dfb      	ldrb	r3, [r7, #23]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d105      	bne.n	800173e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a3c      	ldr	r2, [pc, #240]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 80ae 	beq.w	80018a4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001748:	4b37      	ldr	r3, [pc, #220]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	2b08      	cmp	r3, #8
 8001752:	d06d      	beq.n	8001830 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d14b      	bne.n	80017f4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175c:	4b32      	ldr	r3, [pc, #200]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a31      	ldr	r2, [pc, #196]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001762:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff faf2 	bl	8000d50 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001770:	f7ff faee 	bl	8000d50 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e091      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001782:	4b29      	ldr	r3, [pc, #164]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69da      	ldr	r2, [r3, #28]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	019b      	lsls	r3, r3, #6
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a4:	085b      	lsrs	r3, r3, #1
 80017a6:	3b01      	subs	r3, #1
 80017a8:	041b      	lsls	r3, r3, #16
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	061b      	lsls	r3, r3, #24
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b8:	071b      	lsls	r3, r3, #28
 80017ba:	491b      	ldr	r1, [pc, #108]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a18      	ldr	r2, [pc, #96]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80017c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fac0 	bl	8000d50 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d4:	f7ff fabc 	bl	8000d50 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e05f      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x47c>
 80017f2:	e057      	b.n	80018a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 80017fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff faa6 	bl	8000d50 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff faa2 	bl	8000d50 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e045      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181a:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_RCC_OscConfig+0x4d0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x4b0>
 8001826:	e03d      	b.n	80018a4 <HAL_RCC_OscConfig+0x54c>
 8001828:	40023800 	.word	0x40023800
 800182c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <HAL_RCC_OscConfig+0x558>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d030      	beq.n	80018a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001848:	429a      	cmp	r2, r3
 800184a:	d129      	bne.n	80018a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001856:	429a      	cmp	r2, r3
 8001858:	d122      	bne.n	80018a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001860:	4013      	ands	r3, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001866:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001868:	4293      	cmp	r3, r2
 800186a:	d119      	bne.n	80018a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001876:	085b      	lsrs	r3, r3, #1
 8001878:	3b01      	subs	r3, #1
 800187a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d10f      	bne.n	80018a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d107      	bne.n	80018a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0d0      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018cc:	4b6a      	ldr	r3, [pc, #424]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 030f 	and.w	r3, r3, #15
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d910      	bls.n	80018fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	4b67      	ldr	r3, [pc, #412]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 020f 	bic.w	r2, r3, #15
 80018e2:	4965      	ldr	r1, [pc, #404]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b63      	ldr	r3, [pc, #396]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0b8      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d020      	beq.n	800194a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001914:	4b59      	ldr	r3, [pc, #356]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4a58      	ldr	r2, [pc, #352]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 800191a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800191e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800192c:	4b53      	ldr	r3, [pc, #332]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	4a52      	ldr	r2, [pc, #328]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001936:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001938:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	494d      	ldr	r1, [pc, #308]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d040      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	4b47      	ldr	r3, [pc, #284]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d115      	bne.n	8001996 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e07f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d107      	bne.n	8001986 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001976:	4b41      	ldr	r3, [pc, #260]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d109      	bne.n	8001996 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e073      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001986:	4b3d      	ldr	r3, [pc, #244]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e06b      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001996:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f023 0203 	bic.w	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	4936      	ldr	r1, [pc, #216]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019a8:	f7ff f9d2 	bl	8000d50 <HAL_GetTick>
 80019ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ae:	e00a      	b.n	80019c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b0:	f7ff f9ce 	bl	8000d50 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80019be:	4293      	cmp	r3, r2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e053      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c6:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 020c 	and.w	r2, r3, #12
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d1eb      	bne.n	80019b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019d8:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d210      	bcs.n	8001a08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e6:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 020f 	bic.w	r2, r3, #15
 80019ee:	4922      	ldr	r1, [pc, #136]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e032      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d008      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4916      	ldr	r1, [pc, #88]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d009      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	490e      	ldr	r1, [pc, #56]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a46:	f000 f821 	bl	8001a8c <HAL_RCC_GetSysClockFreq>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	490a      	ldr	r1, [pc, #40]	; (8001a80 <HAL_RCC_ClockConfig+0x1cc>)
 8001a58:	5ccb      	ldrb	r3, [r1, r3]
 8001a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <HAL_RCC_ClockConfig+0x1d0>)
 8001a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_RCC_ClockConfig+0x1d4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fff4 	bl	8000a54 <HAL_InitTick>

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	08007a08 	.word	0x08007a08
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000004 	.word	0x20000004

08001a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a90:	b094      	sub	sp, #80	; 0x50
 8001a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	647b      	str	r3, [r7, #68]	; 0x44
 8001a98:	2300      	movs	r3, #0
 8001a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aa4:	4b79      	ldr	r3, [pc, #484]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d00d      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x40>
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	f200 80e1 	bhi.w	8001c78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d003      	beq.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001abe:	e0db      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ac0:	4b73      	ldr	r3, [pc, #460]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ac2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ac4:	e0db      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ac6:	4b72      	ldr	r3, [pc, #456]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ac8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aca:	e0d8      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001acc:	4b6f      	ldr	r3, [pc, #444]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ad4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ad6:	4b6d      	ldr	r3, [pc, #436]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d063      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae2:	4b6a      	ldr	r3, [pc, #424]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	099b      	lsrs	r3, r3, #6
 8001ae8:	2200      	movs	r2, #0
 8001aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8001aec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001af4:	633b      	str	r3, [r7, #48]	; 0x30
 8001af6:	2300      	movs	r3, #0
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
 8001afa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001afe:	4622      	mov	r2, r4
 8001b00:	462b      	mov	r3, r5
 8001b02:	f04f 0000 	mov.w	r0, #0
 8001b06:	f04f 0100 	mov.w	r1, #0
 8001b0a:	0159      	lsls	r1, r3, #5
 8001b0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b10:	0150      	lsls	r0, r2, #5
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4621      	mov	r1, r4
 8001b18:	1a51      	subs	r1, r2, r1
 8001b1a:	6139      	str	r1, [r7, #16]
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b30:	4659      	mov	r1, fp
 8001b32:	018b      	lsls	r3, r1, #6
 8001b34:	4651      	mov	r1, sl
 8001b36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b3a:	4651      	mov	r1, sl
 8001b3c:	018a      	lsls	r2, r1, #6
 8001b3e:	4651      	mov	r1, sl
 8001b40:	ebb2 0801 	subs.w	r8, r2, r1
 8001b44:	4659      	mov	r1, fp
 8001b46:	eb63 0901 	sbc.w	r9, r3, r1
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b5e:	4690      	mov	r8, r2
 8001b60:	4699      	mov	r9, r3
 8001b62:	4623      	mov	r3, r4
 8001b64:	eb18 0303 	adds.w	r3, r8, r3
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	462b      	mov	r3, r5
 8001b6c:	eb49 0303 	adc.w	r3, r9, r3
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b7e:	4629      	mov	r1, r5
 8001b80:	028b      	lsls	r3, r1, #10
 8001b82:	4621      	mov	r1, r4
 8001b84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b88:	4621      	mov	r1, r4
 8001b8a:	028a      	lsls	r2, r1, #10
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b92:	2200      	movs	r2, #0
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b9c:	f7fe fb9a 	bl	80002d4 <__aeabi_uldivmod>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ba8:	e058      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	099b      	lsrs	r3, r3, #6
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bba:	623b      	str	r3, [r7, #32]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bc4:	4642      	mov	r2, r8
 8001bc6:	464b      	mov	r3, r9
 8001bc8:	f04f 0000 	mov.w	r0, #0
 8001bcc:	f04f 0100 	mov.w	r1, #0
 8001bd0:	0159      	lsls	r1, r3, #5
 8001bd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bd6:	0150      	lsls	r0, r2, #5
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4641      	mov	r1, r8
 8001bde:	ebb2 0a01 	subs.w	sl, r2, r1
 8001be2:	4649      	mov	r1, r9
 8001be4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bfc:	ebb2 040a 	subs.w	r4, r2, sl
 8001c00:	eb63 050b 	sbc.w	r5, r3, fp
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	00eb      	lsls	r3, r5, #3
 8001c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c12:	00e2      	lsls	r2, r4, #3
 8001c14:	4614      	mov	r4, r2
 8001c16:	461d      	mov	r5, r3
 8001c18:	4643      	mov	r3, r8
 8001c1a:	18e3      	adds	r3, r4, r3
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	464b      	mov	r3, r9
 8001c20:	eb45 0303 	adc.w	r3, r5, r3
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c32:	4629      	mov	r1, r5
 8001c34:	028b      	lsls	r3, r1, #10
 8001c36:	4621      	mov	r1, r4
 8001c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	028a      	lsls	r2, r1, #10
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c46:	2200      	movs	r2, #0
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	61fa      	str	r2, [r7, #28]
 8001c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c50:	f7fe fb40 	bl	80002d4 <__aeabi_uldivmod>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4613      	mov	r3, r2
 8001c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	0c1b      	lsrs	r3, r3, #16
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	3301      	adds	r3, #1
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001c6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c76:	e002      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3750      	adds	r7, #80	; 0x50
 8001c84:	46bd      	mov	sp, r7
 8001c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	00f42400 	.word	0x00f42400

08001c94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000000 	.word	0x20000000

08001cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cb0:	f7ff fff0 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	0a9b      	lsrs	r3, r3, #10
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4903      	ldr	r1, [pc, #12]	; (8001cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	08007a18 	.word	0x08007a18

08001cd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0203 	and.w	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	08db      	lsrs	r3, r3, #3
 8001d0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <HAL_RCC_GetClockConfig+0x60>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 020f 	and.w	r2, r3, #15
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	601a      	str	r2, [r3, #0]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40023c00 	.word	0x40023c00

08001d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e049      	b.n	8001dde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d106      	bne.n	8001d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f841 	bl	8001de6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3304      	adds	r3, #4
 8001d74:	4619      	mov	r1, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f000 f9e8 	bl	800214c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d001      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e054      	b.n	8001ebe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a26      	ldr	r2, [pc, #152]	; (8001ecc <HAL_TIM_Base_Start_IT+0xd0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d022      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e3e:	d01d      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a22      	ldr	r2, [pc, #136]	; (8001ed0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d018      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a21      	ldr	r2, [pc, #132]	; (8001ed4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d013      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00e      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1e      	ldr	r2, [pc, #120]	; (8001edc <HAL_TIM_Base_Start_IT+0xe0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d009      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <HAL_TIM_Base_Start_IT+0xe4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d004      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x80>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1b      	ldr	r2, [pc, #108]	; (8001ee4 <HAL_TIM_Base_Start_IT+0xe8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d115      	bne.n	8001ea8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <HAL_TIM_Base_Start_IT+0xec>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b06      	cmp	r3, #6
 8001e8c:	d015      	beq.n	8001eba <HAL_TIM_Base_Start_IT+0xbe>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e94:	d011      	beq.n	8001eba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0201 	orr.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea6:	e008      	b.n	8001eba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0201 	orr.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	e000      	b.n	8001ebc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40010000 	.word	0x40010000
 8001ed0:	40000400 	.word	0x40000400
 8001ed4:	40000800 	.word	0x40000800
 8001ed8:	40000c00 	.word	0x40000c00
 8001edc:	40010400 	.word	0x40010400
 8001ee0:	40014000 	.word	0x40014000
 8001ee4:	40001800 	.word	0x40001800
 8001ee8:	00010007 	.word	0x00010007

08001eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d020      	beq.n	8001f50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01b      	beq.n	8001f50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0202 	mvn.w	r2, #2
 8001f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f8e9 	bl	800210e <HAL_TIM_IC_CaptureCallback>
 8001f3c:	e005      	b.n	8001f4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f8db 	bl	80020fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f8ec 	bl	8002122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d020      	beq.n	8001f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d01b      	beq.n	8001f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0204 	mvn.w	r2, #4
 8001f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2202      	movs	r2, #2
 8001f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f8c3 	bl	800210e <HAL_TIM_IC_CaptureCallback>
 8001f88:	e005      	b.n	8001f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f8b5 	bl	80020fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f8c6 	bl	8002122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d020      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01b      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0208 	mvn.w	r2, #8
 8001fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f89d 	bl	800210e <HAL_TIM_IC_CaptureCallback>
 8001fd4:	e005      	b.n	8001fe2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f88f 	bl	80020fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f8a0 	bl	8002122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d020      	beq.n	8002034 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01b      	beq.n	8002034 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0210 	mvn.w	r2, #16
 8002004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2208      	movs	r2, #8
 800200a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f877 	bl	800210e <HAL_TIM_IC_CaptureCallback>
 8002020:	e005      	b.n	800202e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f869 	bl	80020fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f87a 	bl	8002122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00c      	beq.n	8002058 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0201 	mvn.w	r2, #1
 8002050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7fe fcc2 	bl	80009dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205e:	2b00      	cmp	r3, #0
 8002060:	d104      	bne.n	800206c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00c      	beq.n	8002086 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800207e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f919 	bl	80022b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00c      	beq.n	80020aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002096:	2b00      	cmp	r3, #0
 8002098:	d007      	beq.n	80020aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80020a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f911 	bl	80022cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00c      	beq.n	80020ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f834 	bl	8002136 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00c      	beq.n	80020f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d007      	beq.n	80020f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f06f 0220 	mvn.w	r2, #32
 80020ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f8d9 	bl	80022a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a46      	ldr	r2, [pc, #280]	; (8002278 <TIM_Base_SetConfig+0x12c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d013      	beq.n	800218c <TIM_Base_SetConfig+0x40>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216a:	d00f      	beq.n	800218c <TIM_Base_SetConfig+0x40>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a43      	ldr	r2, [pc, #268]	; (800227c <TIM_Base_SetConfig+0x130>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d00b      	beq.n	800218c <TIM_Base_SetConfig+0x40>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a42      	ldr	r2, [pc, #264]	; (8002280 <TIM_Base_SetConfig+0x134>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d007      	beq.n	800218c <TIM_Base_SetConfig+0x40>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a41      	ldr	r2, [pc, #260]	; (8002284 <TIM_Base_SetConfig+0x138>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d003      	beq.n	800218c <TIM_Base_SetConfig+0x40>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a40      	ldr	r2, [pc, #256]	; (8002288 <TIM_Base_SetConfig+0x13c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d108      	bne.n	800219e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a35      	ldr	r2, [pc, #212]	; (8002278 <TIM_Base_SetConfig+0x12c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d02b      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ac:	d027      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a32      	ldr	r2, [pc, #200]	; (800227c <TIM_Base_SetConfig+0x130>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d023      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a31      	ldr	r2, [pc, #196]	; (8002280 <TIM_Base_SetConfig+0x134>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d01f      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a30      	ldr	r2, [pc, #192]	; (8002284 <TIM_Base_SetConfig+0x138>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01b      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a2f      	ldr	r2, [pc, #188]	; (8002288 <TIM_Base_SetConfig+0x13c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d017      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a2e      	ldr	r2, [pc, #184]	; (800228c <TIM_Base_SetConfig+0x140>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d013      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a2d      	ldr	r2, [pc, #180]	; (8002290 <TIM_Base_SetConfig+0x144>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00f      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a2c      	ldr	r2, [pc, #176]	; (8002294 <TIM_Base_SetConfig+0x148>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00b      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a2b      	ldr	r2, [pc, #172]	; (8002298 <TIM_Base_SetConfig+0x14c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d007      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a2a      	ldr	r2, [pc, #168]	; (800229c <TIM_Base_SetConfig+0x150>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d003      	beq.n	80021fe <TIM_Base_SetConfig+0xb2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a29      	ldr	r2, [pc, #164]	; (80022a0 <TIM_Base_SetConfig+0x154>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d108      	bne.n	8002210 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4313      	orrs	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a10      	ldr	r2, [pc, #64]	; (8002278 <TIM_Base_SetConfig+0x12c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d003      	beq.n	8002244 <TIM_Base_SetConfig+0xf8>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a12      	ldr	r2, [pc, #72]	; (8002288 <TIM_Base_SetConfig+0x13c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d103      	bne.n	800224c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b01      	cmp	r3, #1
 800225c:	d105      	bne.n	800226a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f023 0201 	bic.w	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	611a      	str	r2, [r3, #16]
  }
}
 800226a:	bf00      	nop
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40010000 	.word	0x40010000
 800227c:	40000400 	.word	0x40000400
 8002280:	40000800 	.word	0x40000800
 8002284:	40000c00 	.word	0x40000c00
 8002288:	40010400 	.word	0x40010400
 800228c:	40014000 	.word	0x40014000
 8002290:	40014400 	.word	0x40014400
 8002294:	40014800 	.word	0x40014800
 8002298:	40001800 	.word	0x40001800
 800229c:	40001c00 	.word	0x40001c00
 80022a0:	40002000 	.word	0x40002000

080022a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f103 0208 	add.w	r2, r3, #8
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295
 80022f8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f103 0208 	add.w	r2, r3, #8
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f103 0208 	add.w	r2, r3, #8
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800233a:	b480      	push	{r7}
 800233c:	b085      	sub	sp, #20
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	601a      	str	r2, [r3, #0]
}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002382:	b480      	push	{r7}
 8002384:	b085      	sub	sp, #20
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d103      	bne.n	80023a2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	e00c      	b.n	80023bc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3308      	adds	r3, #8
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e002      	b.n	80023b0 <vListInsert+0x2e>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d2f6      	bcs.n	80023aa <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	601a      	str	r2, [r3, #0]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6892      	ldr	r2, [r2, #8]
 800240a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6852      	ldr	r2, [r2, #4]
 8002414:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	429a      	cmp	r2, r3
 800241e:	d103      	bne.n	8002428 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	1e5a      	subs	r2, r3, #1
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10a      	bne.n	8002472 <xQueueGenericReset+0x2a>
        __asm volatile
 800245c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002460:	f383 8811 	msr	BASEPRI, r3
 8002464:	f3bf 8f6f 	isb	sy
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	60bb      	str	r3, [r7, #8]
    }
 800246e:	bf00      	nop
 8002470:	e7fe      	b.n	8002470 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002472:	f002 f857 	bl	8004524 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247e:	68f9      	ldr	r1, [r7, #12]
 8002480:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002482:	fb01 f303 	mul.w	r3, r1, r3
 8002486:	441a      	add	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a2:	3b01      	subs	r3, #1
 80024a4:	68f9      	ldr	r1, [r7, #12]
 80024a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024a8:	fb01 f303 	mul.w	r3, r1, r3
 80024ac:	441a      	add	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	22ff      	movs	r2, #255	; 0xff
 80024b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	22ff      	movs	r2, #255	; 0xff
 80024be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d109      	bne.n	80024dc <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00f      	beq.n	80024f0 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	3310      	adds	r3, #16
 80024d4:	4618      	mov	r0, r3
 80024d6:	f001 f8b3 	bl	8003640 <xTaskRemoveFromEventList>
 80024da:	e009      	b.n	80024f0 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	3310      	adds	r3, #16
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fefd 	bl	80022e0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	3324      	adds	r3, #36	; 0x24
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fef8 	bl	80022e0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80024f0:	f002 f848 	bl	8004584 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80024f4:	2301      	movs	r3, #1
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024fe:	b580      	push	{r7, lr}
 8002500:	b08c      	sub	sp, #48	; 0x30
 8002502:	af02      	add	r7, sp, #8
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	4613      	mov	r3, r2
 800250a:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10a      	bne.n	8002528 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002516:	f383 8811 	msr	BASEPRI, r3
 800251a:	f3bf 8f6f 	isb	sy
 800251e:	f3bf 8f4f 	dsb	sy
 8002522:	61bb      	str	r3, [r7, #24]
    }
 8002524:	bf00      	nop
 8002526:	e7fe      	b.n	8002526 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	fb02 f303 	mul.w	r3, r2, r3
 8002530:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d006      	beq.n	8002546 <xQueueGenericCreate+0x48>
 8002538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	429a      	cmp	r2, r3
 8002544:	d101      	bne.n	800254a <xQueueGenericCreate+0x4c>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <xQueueGenericCreate+0x4e>
 800254a:	2300      	movs	r3, #0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10a      	bne.n	8002566 <xQueueGenericCreate+0x68>
        __asm volatile
 8002550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002554:	f383 8811 	msr	BASEPRI, r3
 8002558:	f3bf 8f6f 	isb	sy
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	617b      	str	r3, [r7, #20]
    }
 8002562:	bf00      	nop
 8002564:	e7fe      	b.n	8002564 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800256c:	d90a      	bls.n	8002584 <xQueueGenericCreate+0x86>
        __asm volatile
 800256e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002572:	f383 8811 	msr	BASEPRI, r3
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	613b      	str	r3, [r7, #16]
    }
 8002580:	bf00      	nop
 8002582:	e7fe      	b.n	8002582 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	3350      	adds	r3, #80	; 0x50
 8002588:	4618      	mov	r0, r3
 800258a:	f002 f8f7 	bl	800477c <pvPortMalloc>
 800258e:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00d      	beq.n	80025b2 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3350      	adds	r3, #80	; 0x50
 800259e:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025a0:	79fa      	ldrb	r2, [r7, #7]
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	4613      	mov	r3, r2
 80025a8:	69fa      	ldr	r2, [r7, #28]
 80025aa:	68b9      	ldr	r1, [r7, #8]
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 f805 	bl	80025bc <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80025b2:	6a3b      	ldr	r3, [r7, #32]
    }
 80025b4:	4618      	mov	r0, r3
 80025b6:	3728      	adds	r7, #40	; 0x28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d103      	bne.n	80025d8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e002      	b.n	80025de <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025ea:	2101      	movs	r1, #1
 80025ec:	69b8      	ldr	r0, [r7, #24]
 80025ee:	f7ff ff2b 	bl	8002448 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	68f9      	ldr	r1, [r7, #12]
 8002600:	2073      	movs	r0, #115	; 0x73
 8002602:	f003 fd11 	bl	8006028 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b090      	sub	sp, #64	; 0x40
 8002614:	af02      	add	r7, sp, #8
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800261e:	2300      	movs	r3, #0
 8002620:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10a      	bne.n	8002642 <xQueueGenericSend+0x32>
        __asm volatile
 800262c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800263e:	bf00      	nop
 8002640:	e7fe      	b.n	8002640 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d103      	bne.n	8002650 <xQueueGenericSend+0x40>
 8002648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <xQueueGenericSend+0x44>
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <xQueueGenericSend+0x46>
 8002654:	2300      	movs	r3, #0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10a      	bne.n	8002670 <xQueueGenericSend+0x60>
        __asm volatile
 800265a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265e:	f383 8811 	msr	BASEPRI, r3
 8002662:	f3bf 8f6f 	isb	sy
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800266c:	bf00      	nop
 800266e:	e7fe      	b.n	800266e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d103      	bne.n	800267e <xQueueGenericSend+0x6e>
 8002676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <xQueueGenericSend+0x72>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <xQueueGenericSend+0x74>
 8002682:	2300      	movs	r3, #0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10a      	bne.n	800269e <xQueueGenericSend+0x8e>
        __asm volatile
 8002688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268c:	f383 8811 	msr	BASEPRI, r3
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	623b      	str	r3, [r7, #32]
    }
 800269a:	bf00      	nop
 800269c:	e7fe      	b.n	800269c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800269e:	f001 f969 	bl	8003974 <xTaskGetSchedulerState>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d102      	bne.n	80026ae <xQueueGenericSend+0x9e>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <xQueueGenericSend+0xa2>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <xQueueGenericSend+0xa4>
 80026b2:	2300      	movs	r3, #0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10a      	bne.n	80026ce <xQueueGenericSend+0xbe>
        __asm volatile
 80026b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026bc:	f383 8811 	msr	BASEPRI, r3
 80026c0:	f3bf 8f6f 	isb	sy
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	61fb      	str	r3, [r7, #28]
    }
 80026ca:	bf00      	nop
 80026cc:	e7fe      	b.n	80026cc <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80026ce:	f001 ff29 	bl	8004524 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026da:	429a      	cmp	r2, r3
 80026dc:	d302      	bcc.n	80026e4 <xQueueGenericSend+0xd4>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d11f      	bne.n	8002724 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 80026e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e6:	4618      	mov	r0, r3
 80026e8:	f004 fa2c 	bl	8006b44 <SEGGER_SYSVIEW_ShrinkId>
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	460b      	mov	r3, r1
 80026f6:	4601      	mov	r1, r0
 80026f8:	205a      	movs	r0, #90	; 0x5a
 80026fa:	f003 fd0b 	bl	8006114 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	68b9      	ldr	r1, [r7, #8]
 8002702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002704:	f000 fa56 	bl	8002bb4 <prvCopyDataToQueue>
 8002708:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	2b00      	cmp	r3, #0
 8002710:	d004      	beq.n	800271c <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	3324      	adds	r3, #36	; 0x24
 8002716:	4618      	mov	r0, r3
 8002718:	f000 ff92 	bl	8003640 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800271c:	f001 ff32 	bl	8004584 <vPortExitCritical>
                return pdPASS;
 8002720:	2301      	movs	r3, #1
 8002722:	e07d      	b.n	8002820 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d110      	bne.n	800274c <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800272a:	f001 ff2b 	bl	8004584 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002730:	4618      	mov	r0, r3
 8002732:	f004 fa07 	bl	8006b44 <SEGGER_SYSVIEW_ShrinkId>
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	460b      	mov	r3, r1
 8002740:	4601      	mov	r1, r0
 8002742:	205a      	movs	r0, #90	; 0x5a
 8002744:	f003 fce6 	bl	8006114 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002748:	2300      	movs	r3, #0
 800274a:	e069      	b.n	8002820 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 800274c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002752:	f107 0314 	add.w	r3, r7, #20
 8002756:	4618      	mov	r0, r3
 8002758:	f000 ffd8 	bl	800370c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800275c:	2301      	movs	r3, #1
 800275e:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002760:	f001 ff10 	bl	8004584 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002764:	f000 fd54 	bl	8003210 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002768:	f001 fedc 	bl	8004524 <vPortEnterCritical>
 800276c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002772:	b25b      	sxtb	r3, r3
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d103      	bne.n	8002782 <xQueueGenericSend+0x172>
 800277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002784:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002788:	b25b      	sxtb	r3, r3
 800278a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278e:	d103      	bne.n	8002798 <xQueueGenericSend+0x188>
 8002790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002798:	f001 fef4 	bl	8004584 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800279c:	1d3a      	adds	r2, r7, #4
 800279e:	f107 0314 	add.w	r3, r7, #20
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 ffc7 	bl	8003738 <xTaskCheckForTimeOut>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d124      	bne.n	80027fa <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027b2:	f000 faf7 	bl	8002da4 <prvIsQueueFull>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d018      	beq.n	80027ee <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027be:	3310      	adds	r3, #16
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	4611      	mov	r1, r2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 fee9 	bl	800359c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80027ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027cc:	f000 fa82 	bl	8002cd4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80027d0:	f000 fd2c 	bl	800322c <xTaskResumeAll>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f47f af79 	bne.w	80026ce <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <xQueueGenericSend+0x218>)
 80027de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	f3bf 8f6f 	isb	sy
 80027ec:	e76f      	b.n	80026ce <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80027ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027f0:	f000 fa70 	bl	8002cd4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80027f4:	f000 fd1a 	bl	800322c <xTaskResumeAll>
 80027f8:	e769      	b.n	80026ce <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80027fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027fc:	f000 fa6a 	bl	8002cd4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002800:	f000 fd14 	bl	800322c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002806:	4618      	mov	r0, r3
 8002808:	f004 f99c 	bl	8006b44 <SEGGER_SYSVIEW_ShrinkId>
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	460b      	mov	r3, r1
 8002816:	4601      	mov	r1, r0
 8002818:	205a      	movs	r0, #90	; 0x5a
 800281a:	f003 fc7b 	bl	8006114 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800281e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002820:	4618      	mov	r0, r3
 8002822:	3738      	adds	r7, #56	; 0x38
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	e000ed04 	.word	0xe000ed04

0800282c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b090      	sub	sp, #64	; 0x40
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800283e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10a      	bne.n	800285a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002848:	f383 8811 	msr	BASEPRI, r3
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	f3bf 8f4f 	dsb	sy
 8002854:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002856:	bf00      	nop
 8002858:	e7fe      	b.n	8002858 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d103      	bne.n	8002868 <xQueueGenericSendFromISR+0x3c>
 8002860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <xQueueGenericSendFromISR+0x40>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <xQueueGenericSendFromISR+0x42>
 800286c:	2300      	movs	r3, #0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10a      	bne.n	8002888 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002876:	f383 8811 	msr	BASEPRI, r3
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002884:	bf00      	nop
 8002886:	e7fe      	b.n	8002886 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d103      	bne.n	8002896 <xQueueGenericSendFromISR+0x6a>
 800288e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <xQueueGenericSendFromISR+0x6e>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <xQueueGenericSendFromISR+0x70>
 800289a:	2300      	movs	r3, #0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10a      	bne.n	80028b6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80028a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	623b      	str	r3, [r7, #32]
    }
 80028b2:	bf00      	nop
 80028b4:	e7fe      	b.n	80028b4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028b6:	f001 ff21 	bl	80046fc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80028ba:	f3ef 8211 	mrs	r2, BASEPRI
 80028be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c2:	f383 8811 	msr	BASEPRI, r3
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	61fa      	str	r2, [r7, #28]
 80028d0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80028d2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80028d4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028de:	429a      	cmp	r2, r3
 80028e0:	d302      	bcc.n	80028e8 <xQueueGenericSendFromISR+0xbc>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d148      	bne.n	800297a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80028e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80028f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fa:	4618      	mov	r0, r3
 80028fc:	f004 f922 	bl	8006b44 <SEGGER_SYSVIEW_ShrinkId>
 8002900:	4601      	mov	r1, r0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	461a      	mov	r2, r3
 8002906:	2060      	movs	r0, #96	; 0x60
 8002908:	f003 fb34 	bl	8005f74 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002912:	f000 f94f 	bl	8002bb4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002916:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800291a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291e:	d112      	bne.n	8002946 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	2b00      	cmp	r3, #0
 8002926:	d025      	beq.n	8002974 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292a:	3324      	adds	r3, #36	; 0x24
 800292c:	4618      	mov	r0, r3
 800292e:	f000 fe87 	bl	8003640 <xTaskRemoveFromEventList>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d01d      	beq.n	8002974 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d01a      	beq.n	8002974 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	e016      	b.n	8002974 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002946:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800294a:	2b7f      	cmp	r3, #127	; 0x7f
 800294c:	d10a      	bne.n	8002964 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800294e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002952:	f383 8811 	msr	BASEPRI, r3
 8002956:	f3bf 8f6f 	isb	sy
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	617b      	str	r3, [r7, #20]
    }
 8002960:	bf00      	nop
 8002962:	e7fe      	b.n	8002962 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002964:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002968:	3301      	adds	r3, #1
 800296a:	b2db      	uxtb	r3, r3
 800296c:	b25a      	sxtb	r2, r3
 800296e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002974:	2301      	movs	r3, #1
 8002976:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002978:	e00b      	b.n	8002992 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800297a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297c:	4618      	mov	r0, r3
 800297e:	f004 f8e1 	bl	8006b44 <SEGGER_SYSVIEW_ShrinkId>
 8002982:	4601      	mov	r1, r0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	461a      	mov	r2, r3
 8002988:	2060      	movs	r0, #96	; 0x60
 800298a:	f003 faf3 	bl	8005f74 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800298e:	2300      	movs	r3, #0
 8002990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002994:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800299c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800299e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3740      	adds	r7, #64	; 0x40
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b08f      	sub	sp, #60	; 0x3c
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80029bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10a      	bne.n	80029d8 <xQueueReceive+0x30>
        __asm volatile
 80029c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c6:	f383 8811 	msr	BASEPRI, r3
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	623b      	str	r3, [r7, #32]
    }
 80029d4:	bf00      	nop
 80029d6:	e7fe      	b.n	80029d6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d103      	bne.n	80029e6 <xQueueReceive+0x3e>
 80029de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <xQueueReceive+0x42>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <xQueueReceive+0x44>
 80029ea:	2300      	movs	r3, #0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <xQueueReceive+0x5e>
        __asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	61fb      	str	r3, [r7, #28]
    }
 8002a02:	bf00      	nop
 8002a04:	e7fe      	b.n	8002a04 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a06:	f000 ffb5 	bl	8003974 <xTaskGetSchedulerState>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d102      	bne.n	8002a16 <xQueueReceive+0x6e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <xQueueReceive+0x72>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <xQueueReceive+0x74>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <xQueueReceive+0x8e>
        __asm volatile
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	61bb      	str	r3, [r7, #24]
    }
 8002a32:	bf00      	nop
 8002a34:	e7fe      	b.n	8002a34 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a36:	f001 fd75 	bl	8004524 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d024      	beq.n	8002a90 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a46:	68b9      	ldr	r1, [r7, #8]
 8002a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a4a:	f000 f91d 	bl	8002c88 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a50:	4618      	mov	r0, r3
 8002a52:	f004 f877 	bl	8006b44 <SEGGER_SYSVIEW_ShrinkId>
 8002a56:	4604      	mov	r4, r0
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f004 f873 	bl	8006b44 <SEGGER_SYSVIEW_ShrinkId>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2101      	movs	r1, #1
 8002a64:	9100      	str	r1, [sp, #0]
 8002a66:	4621      	mov	r1, r4
 8002a68:	205c      	movs	r0, #92	; 0x5c
 8002a6a:	f003 fb53 	bl	8006114 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	1e5a      	subs	r2, r3, #1
 8002a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a74:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d004      	beq.n	8002a88 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	3310      	adds	r3, #16
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fddc 	bl	8003640 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002a88:	f001 fd7c 	bl	8004584 <vPortExitCritical>
                return pdPASS;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e08a      	b.n	8002ba6 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d113      	bne.n	8002abe <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002a96:	f001 fd75 	bl	8004584 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f004 f851 	bl	8006b44 <SEGGER_SYSVIEW_ShrinkId>
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f004 f84d 	bl	8006b44 <SEGGER_SYSVIEW_ShrinkId>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2101      	movs	r1, #1
 8002ab0:	9100      	str	r1, [sp, #0]
 8002ab2:	4621      	mov	r1, r4
 8002ab4:	205c      	movs	r0, #92	; 0x5c
 8002ab6:	f003 fb2d 	bl	8006114 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002aba:	2300      	movs	r3, #0
 8002abc:	e073      	b.n	8002ba6 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d106      	bne.n	8002ad2 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ac4:	f107 0310 	add.w	r3, r7, #16
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 fe1f 	bl	800370c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ad2:	f001 fd57 	bl	8004584 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002ad6:	f000 fb9b 	bl	8003210 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002ada:	f001 fd23 	bl	8004524 <vPortEnterCritical>
 8002ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ae4:	b25b      	sxtb	r3, r3
 8002ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aea:	d103      	bne.n	8002af4 <xQueueReceive+0x14c>
 8002aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002afa:	b25b      	sxtb	r3, r3
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	d103      	bne.n	8002b0a <xQueueReceive+0x162>
 8002b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b0a:	f001 fd3b 	bl	8004584 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b0e:	1d3a      	adds	r2, r7, #4
 8002b10:	f107 0310 	add.w	r3, r7, #16
 8002b14:	4611      	mov	r1, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fe0e 	bl	8003738 <xTaskCheckForTimeOut>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d124      	bne.n	8002b6c <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b24:	f000 f928 	bl	8002d78 <prvIsQueueEmpty>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d018      	beq.n	8002b60 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b30:	3324      	adds	r3, #36	; 0x24
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fd30 	bl	800359c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b3e:	f000 f8c9 	bl	8002cd4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b42:	f000 fb73 	bl	800322c <xTaskResumeAll>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f47f af74 	bne.w	8002a36 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002b4e:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <xQueueReceive+0x208>)
 8002b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	f3bf 8f4f 	dsb	sy
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	e76a      	b.n	8002a36 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b62:	f000 f8b7 	bl	8002cd4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b66:	f000 fb61 	bl	800322c <xTaskResumeAll>
 8002b6a:	e764      	b.n	8002a36 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b6e:	f000 f8b1 	bl	8002cd4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b72:	f000 fb5b 	bl	800322c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b78:	f000 f8fe 	bl	8002d78 <prvIsQueueEmpty>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f43f af59 	beq.w	8002a36 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b86:	4618      	mov	r0, r3
 8002b88:	f003 ffdc 	bl	8006b44 <SEGGER_SYSVIEW_ShrinkId>
 8002b8c:	4604      	mov	r4, r0
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f003 ffd8 	bl	8006b44 <SEGGER_SYSVIEW_ShrinkId>
 8002b94:	4602      	mov	r2, r0
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2101      	movs	r1, #1
 8002b9a:	9100      	str	r1, [sp, #0]
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	205c      	movs	r0, #92	; 0x5c
 8002ba0:	f003 fab8 	bl	8006114 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002ba4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3734      	adds	r7, #52	; 0x34
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd90      	pop	{r4, r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	e000ed04 	.word	0xe000ed04

08002bb4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10d      	bne.n	8002bee <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d14d      	bne.n	8002c76 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fee6 	bl	80039b0 <xTaskPriorityDisinherit>
 8002be4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	e043      	b.n	8002c76 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d119      	bne.n	8002c28 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6858      	ldr	r0, [r3, #4]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	68b9      	ldr	r1, [r7, #8]
 8002c00:	f004 f96c 	bl	8006edc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	441a      	add	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d32b      	bcc.n	8002c76 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	e026      	b.n	8002c76 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	68d8      	ldr	r0, [r3, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	461a      	mov	r2, r3
 8002c32:	68b9      	ldr	r1, [r7, #8]
 8002c34:	f004 f952 	bl	8006edc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	425b      	negs	r3, r3
 8002c42:	441a      	add	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d207      	bcs.n	8002c64 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	425b      	negs	r3, r3
 8002c5e:	441a      	add	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d105      	bne.n	8002c76 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002c7e:	697b      	ldr	r3, [r7, #20]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d018      	beq.n	8002ccc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	441a      	add	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d303      	bcc.n	8002cbc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68d9      	ldr	r1, [r3, #12]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	6838      	ldr	r0, [r7, #0]
 8002cc8:	f004 f908 	bl	8006edc <memcpy>
    }
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002cdc:	f001 fc22 	bl	8004524 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ce6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ce8:	e011      	b.n	8002d0e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d012      	beq.n	8002d18 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3324      	adds	r3, #36	; 0x24
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fca2 	bl	8003640 <xTaskRemoveFromEventList>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002d02:	f000 fd7f 	bl	8003804 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	dce9      	bgt.n	8002cea <prvUnlockQueue+0x16>
 8002d16:	e000      	b.n	8002d1a <prvUnlockQueue+0x46>
                        break;
 8002d18:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	22ff      	movs	r2, #255	; 0xff
 8002d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002d22:	f001 fc2f 	bl	8004584 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d26:	f001 fbfd 	bl	8004524 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d30:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d32:	e011      	b.n	8002d58 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d012      	beq.n	8002d62 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3310      	adds	r3, #16
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 fc7d 	bl	8003640 <xTaskRemoveFromEventList>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002d4c:	f000 fd5a 	bl	8003804 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d50:	7bbb      	ldrb	r3, [r7, #14]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	dce9      	bgt.n	8002d34 <prvUnlockQueue+0x60>
 8002d60:	e000      	b.n	8002d64 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002d62:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	22ff      	movs	r2, #255	; 0xff
 8002d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002d6c:	f001 fc0a 	bl	8004584 <vPortExitCritical>
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d80:	f001 fbd0 	bl	8004524 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	e001      	b.n	8002d96 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d96:	f001 fbf5 	bl	8004584 <vPortExitCritical>

    return xReturn;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002dac:	f001 fbba 	bl	8004524 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d102      	bne.n	8002dc2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	e001      	b.n	8002dc6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002dc6:	f001 fbdd 	bl	8004584 <vPortExitCritical>

    return xReturn;
 8002dca:	68fb      	ldr	r3, [r7, #12]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	e01e      	b.n	8002e22 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002de4:	4a13      	ldr	r2, [pc, #76]	; (8002e34 <vQueueAddToRegistry+0x60>)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d115      	bne.n	8002e1c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002df0:	4910      	ldr	r1, [pc, #64]	; (8002e34 <vQueueAddToRegistry+0x60>)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002dfa:	4a0e      	ldr	r2, [pc, #56]	; (8002e34 <vQueueAddToRegistry+0x60>)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4413      	add	r3, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f003 fe9b 	bl	8006b44 <SEGGER_SYSVIEW_ShrinkId>
 8002e0e:	4601      	mov	r1, r0
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	2071      	movs	r0, #113	; 0x71
 8002e16:	f003 f8ad 	bl	8005f74 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002e1a:	e006      	b.n	8002e2a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b07      	cmp	r3, #7
 8002e26:	d9dd      	bls.n	8002de4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	200000f0 	.word	0x200000f0

08002e38 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002e48:	f001 fb6c 	bl	8004524 <vPortEnterCritical>
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e52:	b25b      	sxtb	r3, r3
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d103      	bne.n	8002e62 <vQueueWaitForMessageRestricted+0x2a>
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e68:	b25b      	sxtb	r3, r3
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6e:	d103      	bne.n	8002e78 <vQueueWaitForMessageRestricted+0x40>
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e78:	f001 fb84 	bl	8004584 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d106      	bne.n	8002e92 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	3324      	adds	r3, #36	; 0x24
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	68b9      	ldr	r1, [r7, #8]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fba9 	bl	80035e4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002e92:	6978      	ldr	r0, [r7, #20]
 8002e94:	f7ff ff1e 	bl	8002cd4 <prvUnlockQueue>
    }
 8002e98:	bf00      	nop
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08c      	sub	sp, #48	; 0x30
 8002ea4:	af04      	add	r7, sp, #16
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f001 fc61 	bl	800477c <pvPortMalloc>
 8002eba:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00e      	beq.n	8002ee0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ec2:	2058      	movs	r0, #88	; 0x58
 8002ec4:	f001 fc5a 	bl	800477c <pvPortMalloc>
 8002ec8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed6:	e005      	b.n	8002ee4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002ed8:	6978      	ldr	r0, [r7, #20]
 8002eda:	f001 fd2f 	bl	800493c <vPortFree>
 8002ede:	e001      	b.n	8002ee4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d013      	beq.n	8002f12 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002eea:	88fa      	ldrh	r2, [r7, #6]
 8002eec:	2300      	movs	r3, #0
 8002eee:	9303      	str	r3, [sp, #12]
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	9302      	str	r3, [sp, #8]
 8002ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f80e 	bl	8002f22 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002f06:	69f8      	ldr	r0, [r7, #28]
 8002f08:	f000 f8a2 	bl	8003050 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	61bb      	str	r3, [r7, #24]
 8002f10:	e002      	b.n	8002f18 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f12:	f04f 33ff 	mov.w	r3, #4294967295
 8002f16:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002f18:	69bb      	ldr	r3, [r7, #24]
    }
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3720      	adds	r7, #32
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b088      	sub	sp, #32
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
 8002f2e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f32:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	461a      	mov	r2, r3
 8002f3a:	21a5      	movs	r1, #165	; 0xa5
 8002f3c:	f003 ffdc 	bl	8006ef8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002f4a:	440b      	add	r3, r1
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	f023 0307 	bic.w	r3, r3, #7
 8002f58:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	617b      	str	r3, [r7, #20]
    }
 8002f76:	bf00      	nop
 8002f78:	e7fe      	b.n	8002f78 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01f      	beq.n	8002fc0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f80:	2300      	movs	r3, #0
 8002f82:	61fb      	str	r3, [r7, #28]
 8002f84:	e012      	b.n	8002fac <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	7819      	ldrb	r1, [r3, #0]
 8002f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	4413      	add	r3, r2
 8002f94:	3334      	adds	r3, #52	; 0x34
 8002f96:	460a      	mov	r2, r1
 8002f98:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d006      	beq.n	8002fb4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	61fb      	str	r3, [r7, #28]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b09      	cmp	r3, #9
 8002fb0:	d9e9      	bls.n	8002f86 <prvInitialiseNewTask+0x64>
 8002fb2:	e000      	b.n	8002fb6 <prvInitialiseNewTask+0x94>
            {
                break;
 8002fb4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002fbe:	e003      	b.n	8002fc8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d901      	bls.n	8002fd2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002fce:	2304      	movs	r3, #4
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fd6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fdc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff f999 	bl	8002320 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff0:	3318      	adds	r3, #24
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff f994 	bl	8002320 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ffc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003000:	f1c3 0205 	rsb	r2, r3, #5
 8003004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003006:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800300c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003010:	3350      	adds	r3, #80	; 0x50
 8003012:	2204      	movs	r2, #4
 8003014:	2100      	movs	r1, #0
 8003016:	4618      	mov	r0, r3
 8003018:	f003 ff6e 	bl	8006ef8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	3354      	adds	r3, #84	; 0x54
 8003020:	2201      	movs	r2, #1
 8003022:	2100      	movs	r1, #0
 8003024:	4618      	mov	r0, r3
 8003026:	f003 ff67 	bl	8006ef8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	68f9      	ldr	r1, [r7, #12]
 800302e:	69b8      	ldr	r0, [r7, #24]
 8003030:	f001 f8c8 	bl	80041c4 <pxPortInitialiseStack>
 8003034:	4602      	mov	r2, r0
 8003036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003038:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003044:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003046:	bf00      	nop
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003050:	b5b0      	push	{r4, r5, r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af02      	add	r7, sp, #8
 8003056:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003058:	f001 fa64 	bl	8004524 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800305c:	4b35      	ldr	r3, [pc, #212]	; (8003134 <prvAddNewTaskToReadyList+0xe4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3301      	adds	r3, #1
 8003062:	4a34      	ldr	r2, [pc, #208]	; (8003134 <prvAddNewTaskToReadyList+0xe4>)
 8003064:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003066:	4b34      	ldr	r3, [pc, #208]	; (8003138 <prvAddNewTaskToReadyList+0xe8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d109      	bne.n	8003082 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800306e:	4a32      	ldr	r2, [pc, #200]	; (8003138 <prvAddNewTaskToReadyList+0xe8>)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003074:	4b2f      	ldr	r3, [pc, #188]	; (8003134 <prvAddNewTaskToReadyList+0xe4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d110      	bne.n	800309e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800307c:	f000 fbe0 	bl	8003840 <prvInitialiseTaskLists>
 8003080:	e00d      	b.n	800309e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003082:	4b2e      	ldr	r3, [pc, #184]	; (800313c <prvAddNewTaskToReadyList+0xec>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800308a:	4b2b      	ldr	r3, [pc, #172]	; (8003138 <prvAddNewTaskToReadyList+0xe8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	429a      	cmp	r2, r3
 8003096:	d802      	bhi.n	800309e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003098:	4a27      	ldr	r2, [pc, #156]	; (8003138 <prvAddNewTaskToReadyList+0xe8>)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800309e:	4b28      	ldr	r3, [pc, #160]	; (8003140 <prvAddNewTaskToReadyList+0xf0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3301      	adds	r3, #1
 80030a4:	4a26      	ldr	r2, [pc, #152]	; (8003140 <prvAddNewTaskToReadyList+0xf0>)
 80030a6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030a8:	4b25      	ldr	r3, [pc, #148]	; (8003140 <prvAddNewTaskToReadyList+0xf0>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d016      	beq.n	80030e4 <prvAddNewTaskToReadyList+0x94>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f003 fc1d 	bl	80068f8 <SEGGER_SYSVIEW_OnTaskCreate>
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	461d      	mov	r5, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	461c      	mov	r4, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	1ae3      	subs	r3, r4, r3
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	462b      	mov	r3, r5
 80030e0:	f001 fdfa 	bl	8004cd8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f003 fc8a 	bl	8006a00 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	2201      	movs	r2, #1
 80030f2:	409a      	lsls	r2, r3
 80030f4:	4b13      	ldr	r3, [pc, #76]	; (8003144 <prvAddNewTaskToReadyList+0xf4>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	4a12      	ldr	r2, [pc, #72]	; (8003144 <prvAddNewTaskToReadyList+0xf4>)
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4a0f      	ldr	r2, [pc, #60]	; (8003148 <prvAddNewTaskToReadyList+0xf8>)
 800310c:	441a      	add	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3304      	adds	r3, #4
 8003112:	4619      	mov	r1, r3
 8003114:	4610      	mov	r0, r2
 8003116:	f7ff f910 	bl	800233a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800311a:	f001 fa33 	bl	8004584 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800311e:	4b07      	ldr	r3, [pc, #28]	; (800313c <prvAddNewTaskToReadyList+0xec>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003126:	4b04      	ldr	r3, [pc, #16]	; (8003138 <prvAddNewTaskToReadyList+0xe8>)
 8003128:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bdb0      	pop	{r4, r5, r7, pc}
 8003132:	bf00      	nop
 8003134:	20000208 	.word	0x20000208
 8003138:	20000130 	.word	0x20000130
 800313c:	20000214 	.word	0x20000214
 8003140:	20000224 	.word	0x20000224
 8003144:	20000210 	.word	0x20000210
 8003148:	20000134 	.word	0x20000134

0800314c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003152:	4b27      	ldr	r3, [pc, #156]	; (80031f0 <vTaskStartScheduler+0xa4>)
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	2300      	movs	r3, #0
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	2300      	movs	r3, #0
 800315c:	2282      	movs	r2, #130	; 0x82
 800315e:	4925      	ldr	r1, [pc, #148]	; (80031f4 <vTaskStartScheduler+0xa8>)
 8003160:	4825      	ldr	r0, [pc, #148]	; (80031f8 <vTaskStartScheduler+0xac>)
 8003162:	f7ff fe9d 	bl	8002ea0 <xTaskCreate>
 8003166:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d102      	bne.n	8003174 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800316e:	f000 fd17 	bl	8003ba0 <xTimerCreateTimerTask>
 8003172:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d124      	bne.n	80031c4 <vTaskStartScheduler+0x78>
        __asm volatile
 800317a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317e:	f383 8811 	msr	BASEPRI, r3
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	60bb      	str	r3, [r7, #8]
    }
 800318c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800318e:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <vTaskStartScheduler+0xb0>)
 8003190:	f04f 32ff 	mov.w	r2, #4294967295
 8003194:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003196:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <vTaskStartScheduler+0xb4>)
 8003198:	2201      	movs	r2, #1
 800319a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800319c:	4b19      	ldr	r3, [pc, #100]	; (8003204 <vTaskStartScheduler+0xb8>)
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80031a2:	4b19      	ldr	r3, [pc, #100]	; (8003208 <vTaskStartScheduler+0xbc>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <vTaskStartScheduler+0xa4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d102      	bne.n	80031b4 <vTaskStartScheduler+0x68>
 80031ae:	f003 fb87 	bl	80068c0 <SEGGER_SYSVIEW_OnIdle>
 80031b2:	e004      	b.n	80031be <vTaskStartScheduler+0x72>
 80031b4:	4b14      	ldr	r3, [pc, #80]	; (8003208 <vTaskStartScheduler+0xbc>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f003 fbdf 	bl	800697c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80031be:	f001 f891 	bl	80042e4 <xPortStartScheduler>
 80031c2:	e00e      	b.n	80031e2 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ca:	d10a      	bne.n	80031e2 <vTaskStartScheduler+0x96>
        __asm volatile
 80031cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d0:	f383 8811 	msr	BASEPRI, r3
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	607b      	str	r3, [r7, #4]
    }
 80031de:	bf00      	nop
 80031e0:	e7fe      	b.n	80031e0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80031e2:	4b0a      	ldr	r3, [pc, #40]	; (800320c <vTaskStartScheduler+0xc0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
}
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	2000022c 	.word	0x2000022c
 80031f4:	08007930 	.word	0x08007930
 80031f8:	0800381d 	.word	0x0800381d
 80031fc:	20000228 	.word	0x20000228
 8003200:	20000214 	.word	0x20000214
 8003204:	2000020c 	.word	0x2000020c
 8003208:	20000130 	.word	0x20000130
 800320c:	2000000c 	.word	0x2000000c

08003210 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003214:	4b04      	ldr	r3, [pc, #16]	; (8003228 <vTaskSuspendAll+0x18>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	3301      	adds	r3, #1
 800321a:	4a03      	ldr	r2, [pc, #12]	; (8003228 <vTaskSuspendAll+0x18>)
 800321c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800321e:	bf00      	nop
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	20000230 	.word	0x20000230

0800322c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003236:	2300      	movs	r3, #0
 8003238:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800323a:	4b3d      	ldr	r3, [pc, #244]	; (8003330 <xTaskResumeAll+0x104>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10a      	bne.n	8003258 <xTaskResumeAll+0x2c>
        __asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	603b      	str	r3, [r7, #0]
    }
 8003254:	bf00      	nop
 8003256:	e7fe      	b.n	8003256 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003258:	f001 f964 	bl	8004524 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800325c:	4b34      	ldr	r3, [pc, #208]	; (8003330 <xTaskResumeAll+0x104>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3b01      	subs	r3, #1
 8003262:	4a33      	ldr	r2, [pc, #204]	; (8003330 <xTaskResumeAll+0x104>)
 8003264:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003266:	4b32      	ldr	r3, [pc, #200]	; (8003330 <xTaskResumeAll+0x104>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d159      	bne.n	8003322 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800326e:	4b31      	ldr	r3, [pc, #196]	; (8003334 <xTaskResumeAll+0x108>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d055      	beq.n	8003322 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003276:	e032      	b.n	80032de <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003278:	4b2f      	ldr	r3, [pc, #188]	; (8003338 <xTaskResumeAll+0x10c>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3318      	adds	r3, #24
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff f8b5 	bl	80023f4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	3304      	adds	r3, #4
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff f8b0 	bl	80023f4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4618      	mov	r0, r3
 8003298:	f003 fbb2 	bl	8006a00 <SEGGER_SYSVIEW_OnTaskStartReady>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	2201      	movs	r2, #1
 80032a2:	409a      	lsls	r2, r3
 80032a4:	4b25      	ldr	r3, [pc, #148]	; (800333c <xTaskResumeAll+0x110>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	4a24      	ldr	r2, [pc, #144]	; (800333c <xTaskResumeAll+0x110>)
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4a21      	ldr	r2, [pc, #132]	; (8003340 <xTaskResumeAll+0x114>)
 80032bc:	441a      	add	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	3304      	adds	r3, #4
 80032c2:	4619      	mov	r1, r3
 80032c4:	4610      	mov	r0, r2
 80032c6:	f7ff f838 	bl	800233a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ce:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <xTaskResumeAll+0x118>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d302      	bcc.n	80032de <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <xTaskResumeAll+0x11c>)
 80032da:	2201      	movs	r2, #1
 80032dc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032de:	4b16      	ldr	r3, [pc, #88]	; (8003338 <xTaskResumeAll+0x10c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1c8      	bne.n	8003278 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80032ec:	f000 fb26 	bl	800393c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80032f0:	4b16      	ldr	r3, [pc, #88]	; (800334c <xTaskResumeAll+0x120>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d010      	beq.n	800331e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80032fc:	f000 f84a 	bl	8003394 <xTaskIncrementTick>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <xTaskResumeAll+0x11c>)
 8003308:	2201      	movs	r2, #1
 800330a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	3b01      	subs	r3, #1
 8003310:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f1      	bne.n	80032fc <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003318:	4b0c      	ldr	r3, [pc, #48]	; (800334c <xTaskResumeAll+0x120>)
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800331e:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <xTaskResumeAll+0x11c>)
 8003320:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003322:	f001 f92f 	bl	8004584 <vPortExitCritical>

    return xAlreadyYielded;
 8003326:	687b      	ldr	r3, [r7, #4]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20000230 	.word	0x20000230
 8003334:	20000208 	.word	0x20000208
 8003338:	200001c8 	.word	0x200001c8
 800333c:	20000210 	.word	0x20000210
 8003340:	20000134 	.word	0x20000134
 8003344:	20000130 	.word	0x20000130
 8003348:	2000021c 	.word	0x2000021c
 800334c:	20000218 	.word	0x20000218

08003350 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003356:	4b05      	ldr	r3, [pc, #20]	; (800336c <xTaskGetTickCount+0x1c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800335c:	687b      	ldr	r3, [r7, #4]
}
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	2000020c 	.word	0x2000020c

08003370 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003376:	f001 f9c1 	bl	80046fc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800337a:	2300      	movs	r3, #0
 800337c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800337e:	4b04      	ldr	r3, [pc, #16]	; (8003390 <xTaskGetTickCountFromISR+0x20>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003384:	683b      	ldr	r3, [r7, #0]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	2000020c 	.word	0x2000020c

08003394 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800339e:	4b41      	ldr	r3, [pc, #260]	; (80034a4 <xTaskIncrementTick+0x110>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d173      	bne.n	800348e <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033a6:	4b40      	ldr	r3, [pc, #256]	; (80034a8 <xTaskIncrementTick+0x114>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3301      	adds	r3, #1
 80033ac:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80033ae:	4a3e      	ldr	r2, [pc, #248]	; (80034a8 <xTaskIncrementTick+0x114>)
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d120      	bne.n	80033fc <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80033ba:	4b3c      	ldr	r3, [pc, #240]	; (80034ac <xTaskIncrementTick+0x118>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <xTaskIncrementTick+0x46>
        __asm volatile
 80033c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	603b      	str	r3, [r7, #0]
    }
 80033d6:	bf00      	nop
 80033d8:	e7fe      	b.n	80033d8 <xTaskIncrementTick+0x44>
 80033da:	4b34      	ldr	r3, [pc, #208]	; (80034ac <xTaskIncrementTick+0x118>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	4b33      	ldr	r3, [pc, #204]	; (80034b0 <xTaskIncrementTick+0x11c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a31      	ldr	r2, [pc, #196]	; (80034ac <xTaskIncrementTick+0x118>)
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	4a31      	ldr	r2, [pc, #196]	; (80034b0 <xTaskIncrementTick+0x11c>)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4b31      	ldr	r3, [pc, #196]	; (80034b4 <xTaskIncrementTick+0x120>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3301      	adds	r3, #1
 80033f4:	4a2f      	ldr	r2, [pc, #188]	; (80034b4 <xTaskIncrementTick+0x120>)
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	f000 faa0 	bl	800393c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80033fc:	4b2e      	ldr	r3, [pc, #184]	; (80034b8 <xTaskIncrementTick+0x124>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	429a      	cmp	r2, r3
 8003404:	d348      	bcc.n	8003498 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003406:	4b29      	ldr	r3, [pc, #164]	; (80034ac <xTaskIncrementTick+0x118>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d104      	bne.n	800341a <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003410:	4b29      	ldr	r3, [pc, #164]	; (80034b8 <xTaskIncrementTick+0x124>)
 8003412:	f04f 32ff 	mov.w	r2, #4294967295
 8003416:	601a      	str	r2, [r3, #0]
                    break;
 8003418:	e03e      	b.n	8003498 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800341a:	4b24      	ldr	r3, [pc, #144]	; (80034ac <xTaskIncrementTick+0x118>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	429a      	cmp	r2, r3
 8003430:	d203      	bcs.n	800343a <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003432:	4a21      	ldr	r2, [pc, #132]	; (80034b8 <xTaskIncrementTick+0x124>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003438:	e02e      	b.n	8003498 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	3304      	adds	r3, #4
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe ffd8 	bl	80023f4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	2b00      	cmp	r3, #0
 800344a:	d004      	beq.n	8003456 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	3318      	adds	r3, #24
 8003450:	4618      	mov	r0, r3
 8003452:	f7fe ffcf 	bl	80023f4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	4618      	mov	r0, r3
 800345a:	f003 fad1 	bl	8006a00 <SEGGER_SYSVIEW_OnTaskStartReady>
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	2201      	movs	r2, #1
 8003464:	409a      	lsls	r2, r3
 8003466:	4b15      	ldr	r3, [pc, #84]	; (80034bc <xTaskIncrementTick+0x128>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4313      	orrs	r3, r2
 800346c:	4a13      	ldr	r2, [pc, #76]	; (80034bc <xTaskIncrementTick+0x128>)
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4a10      	ldr	r2, [pc, #64]	; (80034c0 <xTaskIncrementTick+0x12c>)
 800347e:	441a      	add	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	3304      	adds	r3, #4
 8003484:	4619      	mov	r1, r3
 8003486:	4610      	mov	r0, r2
 8003488:	f7fe ff57 	bl	800233a <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800348c:	e7bb      	b.n	8003406 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800348e:	4b0d      	ldr	r3, [pc, #52]	; (80034c4 <xTaskIncrementTick+0x130>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3301      	adds	r3, #1
 8003494:	4a0b      	ldr	r2, [pc, #44]	; (80034c4 <xTaskIncrementTick+0x130>)
 8003496:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003498:	697b      	ldr	r3, [r7, #20]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000230 	.word	0x20000230
 80034a8:	2000020c 	.word	0x2000020c
 80034ac:	200001c0 	.word	0x200001c0
 80034b0:	200001c4 	.word	0x200001c4
 80034b4:	20000220 	.word	0x20000220
 80034b8:	20000228 	.word	0x20000228
 80034bc:	20000210 	.word	0x20000210
 80034c0:	20000134 	.word	0x20000134
 80034c4:	20000218 	.word	0x20000218

080034c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034ce:	4b2d      	ldr	r3, [pc, #180]	; (8003584 <vTaskSwitchContext+0xbc>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80034d6:	4b2c      	ldr	r3, [pc, #176]	; (8003588 <vTaskSwitchContext+0xc0>)
 80034d8:	2201      	movs	r2, #1
 80034da:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80034dc:	e04d      	b.n	800357a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80034de:	4b2a      	ldr	r3, [pc, #168]	; (8003588 <vTaskSwitchContext+0xc0>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034e4:	4b29      	ldr	r3, [pc, #164]	; (800358c <vTaskSwitchContext+0xc4>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	fab3 f383 	clz	r3, r3
 80034f0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80034f2:	7afb      	ldrb	r3, [r7, #11]
 80034f4:	f1c3 031f 	rsb	r3, r3, #31
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	4925      	ldr	r1, [pc, #148]	; (8003590 <vTaskSwitchContext+0xc8>)
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10a      	bne.n	8003524 <vTaskSwitchContext+0x5c>
        __asm volatile
 800350e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	607b      	str	r3, [r7, #4]
    }
 8003520:	bf00      	nop
 8003522:	e7fe      	b.n	8003522 <vTaskSwitchContext+0x5a>
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4a18      	ldr	r2, [pc, #96]	; (8003590 <vTaskSwitchContext+0xc8>)
 8003530:	4413      	add	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	3308      	adds	r3, #8
 8003546:	429a      	cmp	r2, r3
 8003548:	d104      	bne.n	8003554 <vTaskSwitchContext+0x8c>
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	605a      	str	r2, [r3, #4]
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	4a0e      	ldr	r2, [pc, #56]	; (8003594 <vTaskSwitchContext+0xcc>)
 800355c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800355e:	4b0d      	ldr	r3, [pc, #52]	; (8003594 <vTaskSwitchContext+0xcc>)
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	4b0d      	ldr	r3, [pc, #52]	; (8003598 <vTaskSwitchContext+0xd0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d102      	bne.n	8003570 <vTaskSwitchContext+0xa8>
 800356a:	f003 f9a9 	bl	80068c0 <SEGGER_SYSVIEW_OnIdle>
}
 800356e:	e004      	b.n	800357a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003570:	4b08      	ldr	r3, [pc, #32]	; (8003594 <vTaskSwitchContext+0xcc>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f003 fa01 	bl	800697c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800357a:	bf00      	nop
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20000230 	.word	0x20000230
 8003588:	2000021c 	.word	0x2000021c
 800358c:	20000210 	.word	0x20000210
 8003590:	20000134 	.word	0x20000134
 8003594:	20000130 	.word	0x20000130
 8003598:	2000022c 	.word	0x2000022c

0800359c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10a      	bne.n	80035c2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	60fb      	str	r3, [r7, #12]
    }
 80035be:	bf00      	nop
 80035c0:	e7fe      	b.n	80035c0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035c2:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <vTaskPlaceOnEventList+0x44>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3318      	adds	r3, #24
 80035c8:	4619      	mov	r1, r3
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fe fed9 	bl	8002382 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035d0:	2101      	movs	r1, #1
 80035d2:	6838      	ldr	r0, [r7, #0]
 80035d4:	f000 fa6c 	bl	8003ab0 <prvAddCurrentTaskToDelayedList>
}
 80035d8:	bf00      	nop
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20000130 	.word	0x20000130

080035e4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10a      	bne.n	800360c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80035f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fa:	f383 8811 	msr	BASEPRI, r3
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	617b      	str	r3, [r7, #20]
    }
 8003608:	bf00      	nop
 800360a:	e7fe      	b.n	800360a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800360c:	4b0b      	ldr	r3, [pc, #44]	; (800363c <vTaskPlaceOnEventListRestricted+0x58>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3318      	adds	r3, #24
 8003612:	4619      	mov	r1, r3
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f7fe fe90 	bl	800233a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003620:	f04f 33ff 	mov.w	r3, #4294967295
 8003624:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003626:	2024      	movs	r0, #36	; 0x24
 8003628:	f002 fc4a 	bl	8005ec0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	68b8      	ldr	r0, [r7, #8]
 8003630:	f000 fa3e 	bl	8003ab0 <prvAddCurrentTaskToDelayedList>
    }
 8003634:	bf00      	nop
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20000130 	.word	0x20000130

08003640 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10a      	bne.n	800366c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365a:	f383 8811 	msr	BASEPRI, r3
 800365e:	f3bf 8f6f 	isb	sy
 8003662:	f3bf 8f4f 	dsb	sy
 8003666:	60fb      	str	r3, [r7, #12]
    }
 8003668:	bf00      	nop
 800366a:	e7fe      	b.n	800366a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	3318      	adds	r3, #24
 8003670:	4618      	mov	r0, r3
 8003672:	f7fe febf 	bl	80023f4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003676:	4b1f      	ldr	r3, [pc, #124]	; (80036f4 <xTaskRemoveFromEventList+0xb4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d120      	bne.n	80036c0 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	3304      	adds	r3, #4
 8003682:	4618      	mov	r0, r3
 8003684:	f7fe feb6 	bl	80023f4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4618      	mov	r0, r3
 800368c:	f003 f9b8 	bl	8006a00 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	2201      	movs	r2, #1
 8003696:	409a      	lsls	r2, r3
 8003698:	4b17      	ldr	r3, [pc, #92]	; (80036f8 <xTaskRemoveFromEventList+0xb8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4313      	orrs	r3, r2
 800369e:	4a16      	ldr	r2, [pc, #88]	; (80036f8 <xTaskRemoveFromEventList+0xb8>)
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4a13      	ldr	r2, [pc, #76]	; (80036fc <xTaskRemoveFromEventList+0xbc>)
 80036b0:	441a      	add	r2, r3
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	3304      	adds	r3, #4
 80036b6:	4619      	mov	r1, r3
 80036b8:	4610      	mov	r0, r2
 80036ba:	f7fe fe3e 	bl	800233a <vListInsertEnd>
 80036be:	e005      	b.n	80036cc <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	3318      	adds	r3, #24
 80036c4:	4619      	mov	r1, r3
 80036c6:	480e      	ldr	r0, [pc, #56]	; (8003700 <xTaskRemoveFromEventList+0xc0>)
 80036c8:	f7fe fe37 	bl	800233a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d0:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <xTaskRemoveFromEventList+0xc4>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d905      	bls.n	80036e6 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80036da:	2301      	movs	r3, #1
 80036dc:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80036de:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <xTaskRemoveFromEventList+0xc8>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	e001      	b.n	80036ea <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80036ea:	697b      	ldr	r3, [r7, #20]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20000230 	.word	0x20000230
 80036f8:	20000210 	.word	0x20000210
 80036fc:	20000134 	.word	0x20000134
 8003700:	200001c8 	.word	0x200001c8
 8003704:	20000130 	.word	0x20000130
 8003708:	2000021c 	.word	0x2000021c

0800370c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <vTaskInternalSetTimeOutState+0x24>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800371c:	4b05      	ldr	r3, [pc, #20]	; (8003734 <vTaskInternalSetTimeOutState+0x28>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	605a      	str	r2, [r3, #4]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	20000220 	.word	0x20000220
 8003734:	2000020c 	.word	0x2000020c

08003738 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10a      	bne.n	800375e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	613b      	str	r3, [r7, #16]
    }
 800375a:	bf00      	nop
 800375c:	e7fe      	b.n	800375c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10a      	bne.n	800377a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	60fb      	str	r3, [r7, #12]
    }
 8003776:	bf00      	nop
 8003778:	e7fe      	b.n	8003778 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800377a:	f000 fed3 	bl	8004524 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800377e:	4b1f      	ldr	r3, [pc, #124]	; (80037fc <xTaskCheckForTimeOut+0xc4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003796:	d102      	bne.n	800379e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]
 800379c:	e026      	b.n	80037ec <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	4b17      	ldr	r3, [pc, #92]	; (8003800 <xTaskCheckForTimeOut+0xc8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d00a      	beq.n	80037c0 <xTaskCheckForTimeOut+0x88>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d305      	bcc.n	80037c0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80037b4:	2301      	movs	r3, #1
 80037b6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	e015      	b.n	80037ec <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d20b      	bcs.n	80037e2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	1ad2      	subs	r2, r2, r3
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff ff98 	bl	800370c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80037dc:	2300      	movs	r3, #0
 80037de:	61fb      	str	r3, [r7, #28]
 80037e0:	e004      	b.n	80037ec <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80037e8:	2301      	movs	r3, #1
 80037ea:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80037ec:	f000 feca 	bl	8004584 <vPortExitCritical>

    return xReturn;
 80037f0:	69fb      	ldr	r3, [r7, #28]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3720      	adds	r7, #32
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	2000020c 	.word	0x2000020c
 8003800:	20000220 	.word	0x20000220

08003804 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003808:	4b03      	ldr	r3, [pc, #12]	; (8003818 <vTaskMissedYield+0x14>)
 800380a:	2201      	movs	r2, #1
 800380c:	601a      	str	r2, [r3, #0]
}
 800380e:	bf00      	nop
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	2000021c 	.word	0x2000021c

0800381c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003824:	f000 f84c 	bl	80038c0 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003828:	4b04      	ldr	r3, [pc, #16]	; (800383c <prvIdleTask+0x20>)
 800382a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003838:	e7f4      	b.n	8003824 <prvIdleTask+0x8>
 800383a:	bf00      	nop
 800383c:	e000ed04 	.word	0xe000ed04

08003840 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003846:	2300      	movs	r3, #0
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	e00c      	b.n	8003866 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4a12      	ldr	r2, [pc, #72]	; (80038a0 <prvInitialiseTaskLists+0x60>)
 8003858:	4413      	add	r3, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe fd40 	bl	80022e0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3301      	adds	r3, #1
 8003864:	607b      	str	r3, [r7, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b04      	cmp	r3, #4
 800386a:	d9ef      	bls.n	800384c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800386c:	480d      	ldr	r0, [pc, #52]	; (80038a4 <prvInitialiseTaskLists+0x64>)
 800386e:	f7fe fd37 	bl	80022e0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003872:	480d      	ldr	r0, [pc, #52]	; (80038a8 <prvInitialiseTaskLists+0x68>)
 8003874:	f7fe fd34 	bl	80022e0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003878:	480c      	ldr	r0, [pc, #48]	; (80038ac <prvInitialiseTaskLists+0x6c>)
 800387a:	f7fe fd31 	bl	80022e0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800387e:	480c      	ldr	r0, [pc, #48]	; (80038b0 <prvInitialiseTaskLists+0x70>)
 8003880:	f7fe fd2e 	bl	80022e0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003884:	480b      	ldr	r0, [pc, #44]	; (80038b4 <prvInitialiseTaskLists+0x74>)
 8003886:	f7fe fd2b 	bl	80022e0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800388a:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <prvInitialiseTaskLists+0x78>)
 800388c:	4a05      	ldr	r2, [pc, #20]	; (80038a4 <prvInitialiseTaskLists+0x64>)
 800388e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <prvInitialiseTaskLists+0x7c>)
 8003892:	4a05      	ldr	r2, [pc, #20]	; (80038a8 <prvInitialiseTaskLists+0x68>)
 8003894:	601a      	str	r2, [r3, #0]
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000134 	.word	0x20000134
 80038a4:	20000198 	.word	0x20000198
 80038a8:	200001ac 	.word	0x200001ac
 80038ac:	200001c8 	.word	0x200001c8
 80038b0:	200001dc 	.word	0x200001dc
 80038b4:	200001f4 	.word	0x200001f4
 80038b8:	200001c0 	.word	0x200001c0
 80038bc:	200001c4 	.word	0x200001c4

080038c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038c6:	e019      	b.n	80038fc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80038c8:	f000 fe2c 	bl	8004524 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038cc:	4b10      	ldr	r3, [pc, #64]	; (8003910 <prvCheckTasksWaitingTermination+0x50>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3304      	adds	r3, #4
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fe fd8b 	bl	80023f4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80038de:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <prvCheckTasksWaitingTermination+0x54>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	4a0b      	ldr	r2, [pc, #44]	; (8003914 <prvCheckTasksWaitingTermination+0x54>)
 80038e6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <prvCheckTasksWaitingTermination+0x58>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <prvCheckTasksWaitingTermination+0x58>)
 80038f0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80038f2:	f000 fe47 	bl	8004584 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f810 	bl	800391c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <prvCheckTasksWaitingTermination+0x58>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e1      	bne.n	80038c8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003904:	bf00      	nop
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	200001dc 	.word	0x200001dc
 8003914:	20000208 	.word	0x20000208
 8003918:	200001f0 	.word	0x200001f0

0800391c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003928:	4618      	mov	r0, r3
 800392a:	f001 f807 	bl	800493c <vPortFree>
                vPortFree( pxTCB );
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f001 f804 	bl	800493c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003940:	4b0a      	ldr	r3, [pc, #40]	; (800396c <prvResetNextTaskUnblockTime+0x30>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d104      	bne.n	8003954 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800394a:	4b09      	ldr	r3, [pc, #36]	; (8003970 <prvResetNextTaskUnblockTime+0x34>)
 800394c:	f04f 32ff 	mov.w	r2, #4294967295
 8003950:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003952:	e005      	b.n	8003960 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <prvResetNextTaskUnblockTime+0x30>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a04      	ldr	r2, [pc, #16]	; (8003970 <prvResetNextTaskUnblockTime+0x34>)
 800395e:	6013      	str	r3, [r2, #0]
}
 8003960:	bf00      	nop
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	200001c0 	.word	0x200001c0
 8003970:	20000228 	.word	0x20000228

08003974 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800397a:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <xTaskGetSchedulerState+0x34>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d102      	bne.n	8003988 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003982:	2301      	movs	r3, #1
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	e008      	b.n	800399a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003988:	4b08      	ldr	r3, [pc, #32]	; (80039ac <xTaskGetSchedulerState+0x38>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d102      	bne.n	8003996 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003990:	2302      	movs	r3, #2
 8003992:	607b      	str	r3, [r7, #4]
 8003994:	e001      	b.n	800399a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003996:	2300      	movs	r3, #0
 8003998:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800399a:	687b      	ldr	r3, [r7, #4]
    }
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	20000214 	.word	0x20000214
 80039ac:	20000230 	.word	0x20000230

080039b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d068      	beq.n	8003a98 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80039c6:	4b37      	ldr	r3, [pc, #220]	; (8003aa4 <xTaskPriorityDisinherit+0xf4>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d00a      	beq.n	80039e6 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	60fb      	str	r3, [r7, #12]
    }
 80039e2:	bf00      	nop
 80039e4:	e7fe      	b.n	80039e4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10a      	bne.n	8003a04 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	60bb      	str	r3, [r7, #8]
    }
 8003a00:	bf00      	nop
 8003a02:	e7fe      	b.n	8003a02 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a08:	1e5a      	subs	r2, r3, #1
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d03e      	beq.n	8003a98 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d13a      	bne.n	8003a98 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	3304      	adds	r3, #4
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe fce4 	bl	80023f4 <uxListRemove>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10a      	bne.n	8003a48 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	2201      	movs	r2, #1
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43da      	mvns	r2, r3
 8003a3e:	4b1a      	ldr	r3, [pc, #104]	; (8003aa8 <xTaskPriorityDisinherit+0xf8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4013      	ands	r3, r2
 8003a44:	4a18      	ldr	r2, [pc, #96]	; (8003aa8 <xTaskPriorityDisinherit+0xf8>)
 8003a46:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	204a      	movs	r0, #74	; 0x4a
 8003a4e:	f002 fa55 	bl	8005efc <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	f1c3 0205 	rsb	r2, r3, #5
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	4b0e      	ldr	r3, [pc, #56]	; (8003aa8 <xTaskPriorityDisinherit+0xf8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	4a0c      	ldr	r2, [pc, #48]	; (8003aa8 <xTaskPriorityDisinherit+0xf8>)
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4a09      	ldr	r2, [pc, #36]	; (8003aac <xTaskPriorityDisinherit+0xfc>)
 8003a86:	441a      	add	r2, r3
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4610      	mov	r0, r2
 8003a90:	f7fe fc53 	bl	800233a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003a94:	2301      	movs	r3, #1
 8003a96:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003a98:	697b      	ldr	r3, [r7, #20]
    }
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000130 	.word	0x20000130
 8003aa8:	20000210 	.word	0x20000210
 8003aac:	20000134 	.word	0x20000134

08003ab0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003aba:	4b32      	ldr	r3, [pc, #200]	; (8003b84 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ac0:	4b31      	ldr	r3, [pc, #196]	; (8003b88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe fc94 	bl	80023f4 <uxListRemove>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10b      	bne.n	8003aea <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ad2:	4b2d      	ldr	r3, [pc, #180]	; (8003b88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	2201      	movs	r2, #1
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43da      	mvns	r2, r3
 8003ae0:	4b2a      	ldr	r3, [pc, #168]	; (8003b8c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	4a29      	ldr	r2, [pc, #164]	; (8003b8c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003ae8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af0:	d110      	bne.n	8003b14 <prvAddCurrentTaskToDelayedList+0x64>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00d      	beq.n	8003b14 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003af8:	4b23      	ldr	r3, [pc, #140]	; (8003b88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	211b      	movs	r1, #27
 8003afe:	4618      	mov	r0, r3
 8003b00:	f002 ffc0 	bl	8006a84 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b04:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4820      	ldr	r0, [pc, #128]	; (8003b90 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003b0e:	f7fe fc14 	bl	800233a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003b12:	e032      	b.n	8003b7a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b1c:	4b1a      	ldr	r3, [pc, #104]	; (8003b88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d20f      	bcs.n	8003b4c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003b2c:	4b16      	ldr	r3, [pc, #88]	; (8003b88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2104      	movs	r1, #4
 8003b32:	4618      	mov	r0, r3
 8003b34:	f002 ffa6 	bl	8006a84 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b38:	4b16      	ldr	r3, [pc, #88]	; (8003b94 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3304      	adds	r3, #4
 8003b42:	4619      	mov	r1, r3
 8003b44:	4610      	mov	r0, r2
 8003b46:	f7fe fc1c 	bl	8002382 <vListInsert>
}
 8003b4a:	e016      	b.n	8003b7a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003b4c:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2104      	movs	r1, #4
 8003b52:	4618      	mov	r0, r3
 8003b54:	f002 ff96 	bl	8006a84 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b58:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3304      	adds	r3, #4
 8003b62:	4619      	mov	r1, r3
 8003b64:	4610      	mov	r0, r2
 8003b66:	f7fe fc0c 	bl	8002382 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003b6a:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <prvAddCurrentTaskToDelayedList+0xec>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d202      	bcs.n	8003b7a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003b74:	4a09      	ldr	r2, [pc, #36]	; (8003b9c <prvAddCurrentTaskToDelayedList+0xec>)
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	6013      	str	r3, [r2, #0]
}
 8003b7a:	bf00      	nop
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	2000020c 	.word	0x2000020c
 8003b88:	20000130 	.word	0x20000130
 8003b8c:	20000210 	.word	0x20000210
 8003b90:	200001f4 	.word	0x200001f4
 8003b94:	200001c4 	.word	0x200001c4
 8003b98:	200001c0 	.word	0x200001c0
 8003b9c:	20000228 	.word	0x20000228

08003ba0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003baa:	f000 fad5 	bl	8004158 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003bae:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <xTimerCreateTimerTask+0x54>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00b      	beq.n	8003bce <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003bb6:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <xTimerCreateTimerTask+0x58>)
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	2302      	movs	r3, #2
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bc4:	490d      	ldr	r1, [pc, #52]	; (8003bfc <xTimerCreateTimerTask+0x5c>)
 8003bc6:	480e      	ldr	r0, [pc, #56]	; (8003c00 <xTimerCreateTimerTask+0x60>)
 8003bc8:	f7ff f96a 	bl	8002ea0 <xTaskCreate>
 8003bcc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10a      	bne.n	8003bea <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd8:	f383 8811 	msr	BASEPRI, r3
 8003bdc:	f3bf 8f6f 	isb	sy
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	603b      	str	r3, [r7, #0]
    }
 8003be6:	bf00      	nop
 8003be8:	e7fe      	b.n	8003be8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003bea:	687b      	ldr	r3, [r7, #4]
    }
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20000264 	.word	0x20000264
 8003bf8:	20000268 	.word	0x20000268
 8003bfc:	08007938 	.word	0x08007938
 8003c00:	08003d39 	.word	0x08003d39

08003c04 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	; 0x28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10a      	bne.n	8003c32 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	623b      	str	r3, [r7, #32]
    }
 8003c2e:	bf00      	nop
 8003c30:	e7fe      	b.n	8003c30 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003c32:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <xTimerGenericCommand+0x98>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d02a      	beq.n	8003c90 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b05      	cmp	r3, #5
 8003c4a:	dc18      	bgt.n	8003c7e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c4c:	f7ff fe92 	bl	8003974 <xTaskGetSchedulerState>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d109      	bne.n	8003c6a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c56:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <xTimerGenericCommand+0x98>)
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	f107 0114 	add.w	r1, r7, #20
 8003c5e:	2300      	movs	r3, #0
 8003c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c62:	f7fe fcd5 	bl	8002610 <xQueueGenericSend>
 8003c66:	6278      	str	r0, [r7, #36]	; 0x24
 8003c68:	e012      	b.n	8003c90 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c6a:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <xTimerGenericCommand+0x98>)
 8003c6c:	6818      	ldr	r0, [r3, #0]
 8003c6e:	f107 0114 	add.w	r1, r7, #20
 8003c72:	2300      	movs	r3, #0
 8003c74:	2200      	movs	r2, #0
 8003c76:	f7fe fccb 	bl	8002610 <xQueueGenericSend>
 8003c7a:	6278      	str	r0, [r7, #36]	; 0x24
 8003c7c:	e008      	b.n	8003c90 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c7e:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <xTimerGenericCommand+0x98>)
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	f107 0114 	add.w	r1, r7, #20
 8003c86:	2300      	movs	r3, #0
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	f7fe fdcf 	bl	800282c <xQueueGenericSendFromISR>
 8003c8e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003c92:	4618      	mov	r0, r3
 8003c94:	3728      	adds	r7, #40	; 0x28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000264 	.word	0x20000264

08003ca0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003caa:	4b22      	ldr	r3, [pc, #136]	; (8003d34 <prvProcessExpiredTimer+0x94>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fe fb9b 	bl	80023f4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d022      	beq.n	8003d12 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	699a      	ldr	r2, [r3, #24]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	18d1      	adds	r1, r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	6978      	ldr	r0, [r7, #20]
 8003cda:	f000 f8d1 	bl	8003e80 <prvInsertTimerInActiveList>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01f      	beq.n	8003d24 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	2300      	movs	r3, #0
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	2100      	movs	r1, #0
 8003cee:	6978      	ldr	r0, [r7, #20]
 8003cf0:	f7ff ff88 	bl	8003c04 <xTimerGenericCommand>
 8003cf4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d113      	bne.n	8003d24 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d00:	f383 8811 	msr	BASEPRI, r3
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	60fb      	str	r3, [r7, #12]
    }
 8003d0e:	bf00      	nop
 8003d10:	e7fe      	b.n	8003d10 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d18:	f023 0301 	bic.w	r3, r3, #1
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	6978      	ldr	r0, [r7, #20]
 8003d2a:	4798      	blx	r3
    }
 8003d2c:	bf00      	nop
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	2000025c 	.word	0x2000025c

08003d38 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d40:	f107 0308 	add.w	r3, r7, #8
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 f857 	bl	8003df8 <prvGetNextExpireTime>
 8003d4a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4619      	mov	r1, r3
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 f803 	bl	8003d5c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003d56:	f000 f8d5 	bl	8003f04 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d5a:	e7f1      	b.n	8003d40 <prvTimerTask+0x8>

08003d5c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003d66:	f7ff fa53 	bl	8003210 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d6a:	f107 0308 	add.w	r3, r7, #8
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 f866 	bl	8003e40 <prvSampleTimeNow>
 8003d74:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d130      	bne.n	8003dde <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10a      	bne.n	8003d98 <prvProcessTimerOrBlockTask+0x3c>
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d806      	bhi.n	8003d98 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003d8a:	f7ff fa4f 	bl	800322c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d8e:	68f9      	ldr	r1, [r7, #12]
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff ff85 	bl	8003ca0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003d96:	e024      	b.n	8003de2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d008      	beq.n	8003db0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d9e:	4b13      	ldr	r3, [pc, #76]	; (8003dec <prvProcessTimerOrBlockTask+0x90>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <prvProcessTimerOrBlockTask+0x50>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <prvProcessTimerOrBlockTask+0x52>
 8003dac:	2300      	movs	r3, #0
 8003dae:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003db0:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <prvProcessTimerOrBlockTask+0x94>)
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	f7ff f83b 	bl	8002e38 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003dc2:	f7ff fa33 	bl	800322c <xTaskResumeAll>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003dcc:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <prvProcessTimerOrBlockTask+0x98>)
 8003dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	f3bf 8f6f 	isb	sy
    }
 8003ddc:	e001      	b.n	8003de2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003dde:	f7ff fa25 	bl	800322c <xTaskResumeAll>
    }
 8003de2:	bf00      	nop
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000260 	.word	0x20000260
 8003df0:	20000264 	.word	0x20000264
 8003df4:	e000ed04 	.word	0xe000ed04

08003df8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e00:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <prvGetNextExpireTime+0x44>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <prvGetNextExpireTime+0x16>
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	e000      	b.n	8003e10 <prvGetNextExpireTime+0x18>
 8003e0e:	2200      	movs	r2, #0
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d105      	bne.n	8003e28 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e1c:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <prvGetNextExpireTime+0x44>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	e001      	b.n	8003e2c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
    }
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	2000025c 	.word	0x2000025c

08003e40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003e48:	f7ff fa82 	bl	8003350 <xTaskGetTickCount>
 8003e4c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003e4e:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <prvSampleTimeNow+0x3c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d205      	bcs.n	8003e64 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003e58:	f000 f91a 	bl	8004090 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	e002      	b.n	8003e6a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003e6a:	4a04      	ldr	r2, [pc, #16]	; (8003e7c <prvSampleTimeNow+0x3c>)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003e70:	68fb      	ldr	r3, [r7, #12]
    }
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	2000026c 	.word	0x2000026c

08003e80 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d812      	bhi.n	8003ecc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	1ad2      	subs	r2, r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d302      	bcc.n	8003eba <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	e01b      	b.n	8003ef2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003eba:	4b10      	ldr	r3, [pc, #64]	; (8003efc <prvInsertTimerInActiveList+0x7c>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	f7fe fa5c 	bl	8002382 <vListInsert>
 8003eca:	e012      	b.n	8003ef2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d206      	bcs.n	8003ee2 <prvInsertTimerInActiveList+0x62>
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d302      	bcc.n	8003ee2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003edc:	2301      	movs	r3, #1
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	e007      	b.n	8003ef2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ee2:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <prvInsertTimerInActiveList+0x80>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3304      	adds	r3, #4
 8003eea:	4619      	mov	r1, r3
 8003eec:	4610      	mov	r0, r2
 8003eee:	f7fe fa48 	bl	8002382 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003ef2:	697b      	ldr	r3, [r7, #20]
    }
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	20000260 	.word	0x20000260
 8003f00:	2000025c 	.word	0x2000025c

08003f04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08c      	sub	sp, #48	; 0x30
 8003f08:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f0a:	e0ae      	b.n	800406a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f2c0 80aa 	blt.w	8004068 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d004      	beq.n	8003f2a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	3304      	adds	r3, #4
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fe fa65 	bl	80023f4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f2a:	1d3b      	adds	r3, r7, #4
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff ff87 	bl	8003e40 <prvSampleTimeNow>
 8003f32:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b09      	cmp	r3, #9
 8003f38:	f200 8097 	bhi.w	800406a <prvProcessReceivedCommands+0x166>
 8003f3c:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <prvProcessReceivedCommands+0x40>)
 8003f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f42:	bf00      	nop
 8003f44:	08003f6d 	.word	0x08003f6d
 8003f48:	08003f6d 	.word	0x08003f6d
 8003f4c:	08003f6d 	.word	0x08003f6d
 8003f50:	08003fe1 	.word	0x08003fe1
 8003f54:	08003ff5 	.word	0x08003ff5
 8003f58:	0800403f 	.word	0x0800403f
 8003f5c:	08003f6d 	.word	0x08003f6d
 8003f60:	08003f6d 	.word	0x08003f6d
 8003f64:	08003fe1 	.word	0x08003fe1
 8003f68:	08003ff5 	.word	0x08003ff5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	18d1      	adds	r1, r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a3a      	ldr	r2, [r7, #32]
 8003f8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f8c:	f7ff ff78 	bl	8003e80 <prvInsertTimerInActiveList>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d069      	beq.n	800406a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f9c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d05e      	beq.n	800406a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	441a      	add	r2, r3
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2100      	movs	r1, #0
 8003fbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fbe:	f7ff fe21 	bl	8003c04 <xTimerGenericCommand>
 8003fc2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d14f      	bne.n	800406a <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	61bb      	str	r3, [r7, #24]
    }
 8003fdc:	bf00      	nop
 8003fde:	e7fe      	b.n	8003fde <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fe6:	f023 0301 	bic.w	r3, r3, #1
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003ff2:	e03a      	b.n	800406a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10a      	bne.n	800402a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	617b      	str	r3, [r7, #20]
    }
 8004026:	bf00      	nop
 8004028:	e7fe      	b.n	8004028 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	699a      	ldr	r2, [r3, #24]
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	18d1      	adds	r1, r2, r3
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	6a3a      	ldr	r2, [r7, #32]
 8004036:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004038:	f7ff ff22 	bl	8003e80 <prvInsertTimerInActiveList>
                        break;
 800403c:	e015      	b.n	800406a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d103      	bne.n	8004054 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800404c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800404e:	f000 fc75 	bl	800493c <vPortFree>
 8004052:	e00a      	b.n	800406a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800405a:	f023 0301 	bic.w	r3, r3, #1
 800405e:	b2da      	uxtb	r2, r3
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004066:	e000      	b.n	800406a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004068:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800406a:	4b08      	ldr	r3, [pc, #32]	; (800408c <prvProcessReceivedCommands+0x188>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f107 0108 	add.w	r1, r7, #8
 8004072:	2200      	movs	r2, #0
 8004074:	4618      	mov	r0, r3
 8004076:	f7fe fc97 	bl	80029a8 <xQueueReceive>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	f47f af45 	bne.w	8003f0c <prvProcessReceivedCommands+0x8>
        }
    }
 8004082:	bf00      	nop
 8004084:	bf00      	nop
 8004086:	3728      	adds	r7, #40	; 0x28
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20000264 	.word	0x20000264

08004090 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004096:	e048      	b.n	800412a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004098:	4b2d      	ldr	r3, [pc, #180]	; (8004150 <prvSwitchTimerLists+0xc0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040a2:	4b2b      	ldr	r3, [pc, #172]	; (8004150 <prvSwitchTimerLists+0xc0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3304      	adds	r3, #4
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fe f99f 	bl	80023f4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d02e      	beq.n	800412a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4413      	add	r3, r2
 80040d4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d90e      	bls.n	80040fc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040ea:	4b19      	ldr	r3, [pc, #100]	; (8004150 <prvSwitchTimerLists+0xc0>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3304      	adds	r3, #4
 80040f2:	4619      	mov	r1, r3
 80040f4:	4610      	mov	r0, r2
 80040f6:	f7fe f944 	bl	8002382 <vListInsert>
 80040fa:	e016      	b.n	800412a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040fc:	2300      	movs	r3, #0
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	2300      	movs	r3, #0
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	2100      	movs	r1, #0
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f7ff fd7c 	bl	8003c04 <xTimerGenericCommand>
 800410c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	603b      	str	r3, [r7, #0]
    }
 8004126:	bf00      	nop
 8004128:	e7fe      	b.n	8004128 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800412a:	4b09      	ldr	r3, [pc, #36]	; (8004150 <prvSwitchTimerLists+0xc0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1b1      	bne.n	8004098 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <prvSwitchTimerLists+0xc0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <prvSwitchTimerLists+0xc4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a04      	ldr	r2, [pc, #16]	; (8004150 <prvSwitchTimerLists+0xc0>)
 8004140:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004142:	4a04      	ldr	r2, [pc, #16]	; (8004154 <prvSwitchTimerLists+0xc4>)
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	6013      	str	r3, [r2, #0]
    }
 8004148:	bf00      	nop
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	2000025c 	.word	0x2000025c
 8004154:	20000260 	.word	0x20000260

08004158 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800415c:	f000 f9e2 	bl	8004524 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004160:	4b12      	ldr	r3, [pc, #72]	; (80041ac <prvCheckForValidListAndQueue+0x54>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d11d      	bne.n	80041a4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004168:	4811      	ldr	r0, [pc, #68]	; (80041b0 <prvCheckForValidListAndQueue+0x58>)
 800416a:	f7fe f8b9 	bl	80022e0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800416e:	4811      	ldr	r0, [pc, #68]	; (80041b4 <prvCheckForValidListAndQueue+0x5c>)
 8004170:	f7fe f8b6 	bl	80022e0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004174:	4b10      	ldr	r3, [pc, #64]	; (80041b8 <prvCheckForValidListAndQueue+0x60>)
 8004176:	4a0e      	ldr	r2, [pc, #56]	; (80041b0 <prvCheckForValidListAndQueue+0x58>)
 8004178:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800417a:	4b10      	ldr	r3, [pc, #64]	; (80041bc <prvCheckForValidListAndQueue+0x64>)
 800417c:	4a0d      	ldr	r2, [pc, #52]	; (80041b4 <prvCheckForValidListAndQueue+0x5c>)
 800417e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004180:	2200      	movs	r2, #0
 8004182:	210c      	movs	r1, #12
 8004184:	200a      	movs	r0, #10
 8004186:	f7fe f9ba 	bl	80024fe <xQueueGenericCreate>
 800418a:	4603      	mov	r3, r0
 800418c:	4a07      	ldr	r2, [pc, #28]	; (80041ac <prvCheckForValidListAndQueue+0x54>)
 800418e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004190:	4b06      	ldr	r3, [pc, #24]	; (80041ac <prvCheckForValidListAndQueue+0x54>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <prvCheckForValidListAndQueue+0x54>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4908      	ldr	r1, [pc, #32]	; (80041c0 <prvCheckForValidListAndQueue+0x68>)
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fe18 	bl	8002dd4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80041a4:	f000 f9ee 	bl	8004584 <vPortExitCritical>
    }
 80041a8:	bf00      	nop
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	20000264 	.word	0x20000264
 80041b0:	20000234 	.word	0x20000234
 80041b4:	20000248 	.word	0x20000248
 80041b8:	2000025c 	.word	0x2000025c
 80041bc:	20000260 	.word	0x20000260
 80041c0:	08007940 	.word	0x08007940

080041c4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3b04      	subs	r3, #4
 80041d4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3b04      	subs	r3, #4
 80041e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f023 0201 	bic.w	r2, r3, #1
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3b04      	subs	r3, #4
 80041f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80041f4:	4a0c      	ldr	r2, [pc, #48]	; (8004228 <pxPortInitialiseStack+0x64>)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3b14      	subs	r3, #20
 80041fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	3b04      	subs	r3, #4
 800420a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f06f 0202 	mvn.w	r2, #2
 8004212:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3b20      	subs	r3, #32
 8004218:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800421a:	68fb      	ldr	r3, [r7, #12]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	0800422d 	.word	0x0800422d

0800422c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004232:	2300      	movs	r3, #0
 8004234:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004236:	4b12      	ldr	r3, [pc, #72]	; (8004280 <prvTaskExitError+0x54>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d00a      	beq.n	8004256 <prvTaskExitError+0x2a>
        __asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	60fb      	str	r3, [r7, #12]
    }
 8004252:	bf00      	nop
 8004254:	e7fe      	b.n	8004254 <prvTaskExitError+0x28>
        __asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	60bb      	str	r3, [r7, #8]
    }
 8004268:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800426a:	bf00      	nop
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0fc      	beq.n	800426c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004272:	bf00      	nop
 8004274:	bf00      	nop
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	20000010 	.word	0x20000010
	...

08004290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004290:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <pxCurrentTCBConst2>)
 8004292:	6819      	ldr	r1, [r3, #0]
 8004294:	6808      	ldr	r0, [r1, #0]
 8004296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800429a:	f380 8809 	msr	PSP, r0
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f04f 0000 	mov.w	r0, #0
 80042a6:	f380 8811 	msr	BASEPRI, r0
 80042aa:	4770      	bx	lr
 80042ac:	f3af 8000 	nop.w

080042b0 <pxCurrentTCBConst2>:
 80042b0:	20000130 	.word	0x20000130
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop

080042b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80042b8:	4808      	ldr	r0, [pc, #32]	; (80042dc <prvPortStartFirstTask+0x24>)
 80042ba:	6800      	ldr	r0, [r0, #0]
 80042bc:	6800      	ldr	r0, [r0, #0]
 80042be:	f380 8808 	msr	MSP, r0
 80042c2:	f04f 0000 	mov.w	r0, #0
 80042c6:	f380 8814 	msr	CONTROL, r0
 80042ca:	b662      	cpsie	i
 80042cc:	b661      	cpsie	f
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	df00      	svc	0
 80042d8:	bf00      	nop
 80042da:	0000      	.short	0x0000
 80042dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80042e0:	bf00      	nop
 80042e2:	bf00      	nop

080042e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042ea:	4b46      	ldr	r3, [pc, #280]	; (8004404 <xPortStartScheduler+0x120>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a46      	ldr	r2, [pc, #280]	; (8004408 <xPortStartScheduler+0x124>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d10a      	bne.n	800430a <xPortStartScheduler+0x26>
        __asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	613b      	str	r3, [r7, #16]
    }
 8004306:	bf00      	nop
 8004308:	e7fe      	b.n	8004308 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800430a:	4b3e      	ldr	r3, [pc, #248]	; (8004404 <xPortStartScheduler+0x120>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a3f      	ldr	r2, [pc, #252]	; (800440c <xPortStartScheduler+0x128>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d10a      	bne.n	800432a <xPortStartScheduler+0x46>
        __asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	60fb      	str	r3, [r7, #12]
    }
 8004326:	bf00      	nop
 8004328:	e7fe      	b.n	8004328 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800432a:	4b39      	ldr	r3, [pc, #228]	; (8004410 <xPortStartScheduler+0x12c>)
 800432c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	22ff      	movs	r2, #255	; 0xff
 800433a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800434c:	b2da      	uxtb	r2, r3
 800434e:	4b31      	ldr	r3, [pc, #196]	; (8004414 <xPortStartScheduler+0x130>)
 8004350:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004352:	4b31      	ldr	r3, [pc, #196]	; (8004418 <xPortStartScheduler+0x134>)
 8004354:	2207      	movs	r2, #7
 8004356:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004358:	e009      	b.n	800436e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800435a:	4b2f      	ldr	r3, [pc, #188]	; (8004418 <xPortStartScheduler+0x134>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3b01      	subs	r3, #1
 8004360:	4a2d      	ldr	r2, [pc, #180]	; (8004418 <xPortStartScheduler+0x134>)
 8004362:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	b2db      	uxtb	r3, r3
 800436c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800436e:	78fb      	ldrb	r3, [r7, #3]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004376:	2b80      	cmp	r3, #128	; 0x80
 8004378:	d0ef      	beq.n	800435a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800437a:	4b27      	ldr	r3, [pc, #156]	; (8004418 <xPortStartScheduler+0x134>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f1c3 0307 	rsb	r3, r3, #7
 8004382:	2b04      	cmp	r3, #4
 8004384:	d00a      	beq.n	800439c <xPortStartScheduler+0xb8>
        __asm volatile
 8004386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	60bb      	str	r3, [r7, #8]
    }
 8004398:	bf00      	nop
 800439a:	e7fe      	b.n	800439a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800439c:	4b1e      	ldr	r3, [pc, #120]	; (8004418 <xPortStartScheduler+0x134>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	021b      	lsls	r3, r3, #8
 80043a2:	4a1d      	ldr	r2, [pc, #116]	; (8004418 <xPortStartScheduler+0x134>)
 80043a4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043a6:	4b1c      	ldr	r3, [pc, #112]	; (8004418 <xPortStartScheduler+0x134>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043ae:	4a1a      	ldr	r2, [pc, #104]	; (8004418 <xPortStartScheduler+0x134>)
 80043b0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80043ba:	4b18      	ldr	r3, [pc, #96]	; (800441c <xPortStartScheduler+0x138>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a17      	ldr	r2, [pc, #92]	; (800441c <xPortStartScheduler+0x138>)
 80043c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043c4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80043c6:	4b15      	ldr	r3, [pc, #84]	; (800441c <xPortStartScheduler+0x138>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a14      	ldr	r2, [pc, #80]	; (800441c <xPortStartScheduler+0x138>)
 80043cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043d0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80043d2:	f000 f963 	bl	800469c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80043d6:	4b12      	ldr	r3, [pc, #72]	; (8004420 <xPortStartScheduler+0x13c>)
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80043dc:	f000 f982 	bl	80046e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043e0:	4b10      	ldr	r3, [pc, #64]	; (8004424 <xPortStartScheduler+0x140>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a0f      	ldr	r2, [pc, #60]	; (8004424 <xPortStartScheduler+0x140>)
 80043e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80043ea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80043ec:	f7ff ff64 	bl	80042b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80043f0:	f7ff f86a 	bl	80034c8 <vTaskSwitchContext>
    prvTaskExitError();
 80043f4:	f7ff ff1a 	bl	800422c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	e000ed00 	.word	0xe000ed00
 8004408:	410fc271 	.word	0x410fc271
 800440c:	410fc270 	.word	0x410fc270
 8004410:	e000e400 	.word	0xe000e400
 8004414:	20000270 	.word	0x20000270
 8004418:	20000274 	.word	0x20000274
 800441c:	e000ed20 	.word	0xe000ed20
 8004420:	20000010 	.word	0x20000010
 8004424:	e000ef34 	.word	0xe000ef34

08004428 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800442e:	4b37      	ldr	r3, [pc, #220]	; (800450c <vInitPrioGroupValue+0xe4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a37      	ldr	r2, [pc, #220]	; (8004510 <vInitPrioGroupValue+0xe8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d10a      	bne.n	800444e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	613b      	str	r3, [r7, #16]
    }
 800444a:	bf00      	nop
 800444c:	e7fe      	b.n	800444c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800444e:	4b2f      	ldr	r3, [pc, #188]	; (800450c <vInitPrioGroupValue+0xe4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a30      	ldr	r2, [pc, #192]	; (8004514 <vInitPrioGroupValue+0xec>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d10a      	bne.n	800446e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	60fb      	str	r3, [r7, #12]
    }
 800446a:	bf00      	nop
 800446c:	e7fe      	b.n	800446c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800446e:	4b2a      	ldr	r3, [pc, #168]	; (8004518 <vInitPrioGroupValue+0xf0>)
 8004470:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	22ff      	movs	r2, #255	; 0xff
 800447e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004490:	b2da      	uxtb	r2, r3
 8004492:	4b22      	ldr	r3, [pc, #136]	; (800451c <vInitPrioGroupValue+0xf4>)
 8004494:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004496:	4b22      	ldr	r3, [pc, #136]	; (8004520 <vInitPrioGroupValue+0xf8>)
 8004498:	2207      	movs	r2, #7
 800449a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800449c:	e009      	b.n	80044b2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800449e:	4b20      	ldr	r3, [pc, #128]	; (8004520 <vInitPrioGroupValue+0xf8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	4a1e      	ldr	r2, [pc, #120]	; (8004520 <vInitPrioGroupValue+0xf8>)
 80044a6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044a8:	78fb      	ldrb	r3, [r7, #3]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044b2:	78fb      	ldrb	r3, [r7, #3]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ba:	2b80      	cmp	r3, #128	; 0x80
 80044bc:	d0ef      	beq.n	800449e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044be:	4b18      	ldr	r3, [pc, #96]	; (8004520 <vInitPrioGroupValue+0xf8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f1c3 0307 	rsb	r3, r3, #7
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d00a      	beq.n	80044e0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	60bb      	str	r3, [r7, #8]
    }
 80044dc:	bf00      	nop
 80044de:	e7fe      	b.n	80044de <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044e0:	4b0f      	ldr	r3, [pc, #60]	; (8004520 <vInitPrioGroupValue+0xf8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	021b      	lsls	r3, r3, #8
 80044e6:	4a0e      	ldr	r2, [pc, #56]	; (8004520 <vInitPrioGroupValue+0xf8>)
 80044e8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044ea:	4b0d      	ldr	r3, [pc, #52]	; (8004520 <vInitPrioGroupValue+0xf8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044f2:	4a0b      	ldr	r2, [pc, #44]	; (8004520 <vInitPrioGroupValue+0xf8>)
 80044f4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80044fe:	bf00      	nop
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	e000ed00 	.word	0xe000ed00
 8004510:	410fc271 	.word	0x410fc271
 8004514:	410fc270 	.word	0x410fc270
 8004518:	e000e400 	.word	0xe000e400
 800451c:	20000270 	.word	0x20000270
 8004520:	20000274 	.word	0x20000274

08004524 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
        __asm volatile
 800452a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	607b      	str	r3, [r7, #4]
    }
 800453c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800453e:	4b0f      	ldr	r3, [pc, #60]	; (800457c <vPortEnterCritical+0x58>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3301      	adds	r3, #1
 8004544:	4a0d      	ldr	r2, [pc, #52]	; (800457c <vPortEnterCritical+0x58>)
 8004546:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004548:	4b0c      	ldr	r3, [pc, #48]	; (800457c <vPortEnterCritical+0x58>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d10f      	bne.n	8004570 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <vPortEnterCritical+0x5c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <vPortEnterCritical+0x4c>
        __asm volatile
 800455a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	603b      	str	r3, [r7, #0]
    }
 800456c:	bf00      	nop
 800456e:	e7fe      	b.n	800456e <vPortEnterCritical+0x4a>
    }
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	20000010 	.word	0x20000010
 8004580:	e000ed04 	.word	0xe000ed04

08004584 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800458a:	4b12      	ldr	r3, [pc, #72]	; (80045d4 <vPortExitCritical+0x50>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10a      	bne.n	80045a8 <vPortExitCritical+0x24>
        __asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	607b      	str	r3, [r7, #4]
    }
 80045a4:	bf00      	nop
 80045a6:	e7fe      	b.n	80045a6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80045a8:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <vPortExitCritical+0x50>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3b01      	subs	r3, #1
 80045ae:	4a09      	ldr	r2, [pc, #36]	; (80045d4 <vPortExitCritical+0x50>)
 80045b0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80045b2:	4b08      	ldr	r3, [pc, #32]	; (80045d4 <vPortExitCritical+0x50>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d105      	bne.n	80045c6 <vPortExitCritical+0x42>
 80045ba:	2300      	movs	r3, #0
 80045bc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	f383 8811 	msr	BASEPRI, r3
    }
 80045c4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	20000010 	.word	0x20000010
	...

080045e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80045e0:	f3ef 8009 	mrs	r0, PSP
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	4b15      	ldr	r3, [pc, #84]	; (8004640 <pxCurrentTCBConst>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	f01e 0f10 	tst.w	lr, #16
 80045f0:	bf08      	it	eq
 80045f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fa:	6010      	str	r0, [r2, #0]
 80045fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004600:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004604:	f380 8811 	msr	BASEPRI, r0
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f7fe ff5a 	bl	80034c8 <vTaskSwitchContext>
 8004614:	f04f 0000 	mov.w	r0, #0
 8004618:	f380 8811 	msr	BASEPRI, r0
 800461c:	bc09      	pop	{r0, r3}
 800461e:	6819      	ldr	r1, [r3, #0]
 8004620:	6808      	ldr	r0, [r1, #0]
 8004622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004626:	f01e 0f10 	tst.w	lr, #16
 800462a:	bf08      	it	eq
 800462c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004630:	f380 8809 	msr	PSP, r0
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	f3af 8000 	nop.w

08004640 <pxCurrentTCBConst>:
 8004640:	20000130 	.word	0x20000130
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop

08004648 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
        __asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	607b      	str	r3, [r7, #4]
    }
 8004660:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004662:	f002 f8b3 	bl	80067cc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004666:	f7fe fe95 	bl	8003394 <xTaskIncrementTick>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d006      	beq.n	800467e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004670:	f002 f90a 	bl	8006888 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004674:	4b08      	ldr	r3, [pc, #32]	; (8004698 <SysTick_Handler+0x50>)
 8004676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	e001      	b.n	8004682 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800467e:	f002 f8e7 	bl	8006850 <SEGGER_SYSVIEW_RecordExitISR>
 8004682:	2300      	movs	r3, #0
 8004684:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f383 8811 	msr	BASEPRI, r3
    }
 800468c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	e000ed04 	.word	0xe000ed04

0800469c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046a0:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <vPortSetupTimerInterrupt+0x34>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046a6:	4b0b      	ldr	r3, [pc, #44]	; (80046d4 <vPortSetupTimerInterrupt+0x38>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046ac:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <vPortSetupTimerInterrupt+0x3c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a0a      	ldr	r2, [pc, #40]	; (80046dc <vPortSetupTimerInterrupt+0x40>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	099b      	lsrs	r3, r3, #6
 80046b8:	4a09      	ldr	r2, [pc, #36]	; (80046e0 <vPortSetupTimerInterrupt+0x44>)
 80046ba:	3b01      	subs	r3, #1
 80046bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046be:	4b04      	ldr	r3, [pc, #16]	; (80046d0 <vPortSetupTimerInterrupt+0x34>)
 80046c0:	2207      	movs	r2, #7
 80046c2:	601a      	str	r2, [r3, #0]
}
 80046c4:	bf00      	nop
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	e000e010 	.word	0xe000e010
 80046d4:	e000e018 	.word	0xe000e018
 80046d8:	20000000 	.word	0x20000000
 80046dc:	10624dd3 	.word	0x10624dd3
 80046e0:	e000e014 	.word	0xe000e014

080046e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80046e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80046f4 <vPortEnableVFP+0x10>
 80046e8:	6801      	ldr	r1, [r0, #0]
 80046ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80046ee:	6001      	str	r1, [r0, #0]
 80046f0:	4770      	bx	lr
 80046f2:	0000      	.short	0x0000
 80046f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80046f8:	bf00      	nop
 80046fa:	bf00      	nop

080046fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004702:	f3ef 8305 	mrs	r3, IPSR
 8004706:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b0f      	cmp	r3, #15
 800470c:	d914      	bls.n	8004738 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800470e:	4a17      	ldr	r2, [pc, #92]	; (800476c <vPortValidateInterruptPriority+0x70>)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004718:	4b15      	ldr	r3, [pc, #84]	; (8004770 <vPortValidateInterruptPriority+0x74>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	7afa      	ldrb	r2, [r7, #11]
 800471e:	429a      	cmp	r2, r3
 8004720:	d20a      	bcs.n	8004738 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	607b      	str	r3, [r7, #4]
    }
 8004734:	bf00      	nop
 8004736:	e7fe      	b.n	8004736 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004738:	4b0e      	ldr	r3, [pc, #56]	; (8004774 <vPortValidateInterruptPriority+0x78>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004740:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <vPortValidateInterruptPriority+0x7c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d90a      	bls.n	800475e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	603b      	str	r3, [r7, #0]
    }
 800475a:	bf00      	nop
 800475c:	e7fe      	b.n	800475c <vPortValidateInterruptPriority+0x60>
    }
 800475e:	bf00      	nop
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	e000e3f0 	.word	0xe000e3f0
 8004770:	20000270 	.word	0x20000270
 8004774:	e000ed0c 	.word	0xe000ed0c
 8004778:	20000274 	.word	0x20000274

0800477c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08a      	sub	sp, #40	; 0x28
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004784:	2300      	movs	r3, #0
 8004786:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004788:	f7fe fd42 	bl	8003210 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800478c:	4b65      	ldr	r3, [pc, #404]	; (8004924 <pvPortMalloc+0x1a8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004794:	f000 f934 	bl	8004a00 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004798:	4b63      	ldr	r3, [pc, #396]	; (8004928 <pvPortMalloc+0x1ac>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4013      	ands	r3, r2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f040 80a7 	bne.w	80048f4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d02d      	beq.n	8004808 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80047ac:	2208      	movs	r2, #8
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d227      	bcs.n	8004808 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80047b8:	2208      	movs	r2, #8
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4413      	add	r3, r2
 80047be:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d021      	beq.n	800480e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f023 0307 	bic.w	r3, r3, #7
 80047d0:	3308      	adds	r3, #8
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d214      	bcs.n	8004802 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f023 0307 	bic.w	r3, r3, #7
 80047de:	3308      	adds	r3, #8
 80047e0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d010      	beq.n	800480e <pvPortMalloc+0x92>
        __asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	617b      	str	r3, [r7, #20]
    }
 80047fe:	bf00      	nop
 8004800:	e7fe      	b.n	8004800 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004802:	2300      	movs	r3, #0
 8004804:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004806:	e002      	b.n	800480e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004808:	2300      	movs	r3, #0
 800480a:	607b      	str	r3, [r7, #4]
 800480c:	e000      	b.n	8004810 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800480e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d06e      	beq.n	80048f4 <pvPortMalloc+0x178>
 8004816:	4b45      	ldr	r3, [pc, #276]	; (800492c <pvPortMalloc+0x1b0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	429a      	cmp	r2, r3
 800481e:	d869      	bhi.n	80048f4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004820:	4b43      	ldr	r3, [pc, #268]	; (8004930 <pvPortMalloc+0x1b4>)
 8004822:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004824:	4b42      	ldr	r3, [pc, #264]	; (8004930 <pvPortMalloc+0x1b4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800482a:	e004      	b.n	8004836 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	429a      	cmp	r2, r3
 800483e:	d903      	bls.n	8004848 <pvPortMalloc+0xcc>
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1f1      	bne.n	800482c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004848:	4b36      	ldr	r3, [pc, #216]	; (8004924 <pvPortMalloc+0x1a8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484e:	429a      	cmp	r2, r3
 8004850:	d050      	beq.n	80048f4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2208      	movs	r2, #8
 8004858:	4413      	add	r3, r2
 800485a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	1ad2      	subs	r2, r2, r3
 800486c:	2308      	movs	r3, #8
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	429a      	cmp	r2, r3
 8004872:	d91f      	bls.n	80048b4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4413      	add	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <pvPortMalloc+0x120>
        __asm volatile
 8004886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	613b      	str	r3, [r7, #16]
    }
 8004898:	bf00      	nop
 800489a:	e7fe      	b.n	800489a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	1ad2      	subs	r2, r2, r3
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048ae:	69b8      	ldr	r0, [r7, #24]
 80048b0:	f000 f908 	bl	8004ac4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048b4:	4b1d      	ldr	r3, [pc, #116]	; (800492c <pvPortMalloc+0x1b0>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	4a1b      	ldr	r2, [pc, #108]	; (800492c <pvPortMalloc+0x1b0>)
 80048c0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048c2:	4b1a      	ldr	r3, [pc, #104]	; (800492c <pvPortMalloc+0x1b0>)
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	4b1b      	ldr	r3, [pc, #108]	; (8004934 <pvPortMalloc+0x1b8>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d203      	bcs.n	80048d6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048ce:	4b17      	ldr	r3, [pc, #92]	; (800492c <pvPortMalloc+0x1b0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a18      	ldr	r2, [pc, #96]	; (8004934 <pvPortMalloc+0x1b8>)
 80048d4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	4b13      	ldr	r3, [pc, #76]	; (8004928 <pvPortMalloc+0x1ac>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	431a      	orrs	r2, r3
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80048ea:	4b13      	ldr	r3, [pc, #76]	; (8004938 <pvPortMalloc+0x1bc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3301      	adds	r3, #1
 80048f0:	4a11      	ldr	r2, [pc, #68]	; (8004938 <pvPortMalloc+0x1bc>)
 80048f2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80048f4:	f7fe fc9a 	bl	800322c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <pvPortMalloc+0x19c>
        __asm volatile
 8004902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	60fb      	str	r3, [r7, #12]
    }
 8004914:	bf00      	nop
 8004916:	e7fe      	b.n	8004916 <pvPortMalloc+0x19a>
    return pvReturn;
 8004918:	69fb      	ldr	r3, [r7, #28]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3728      	adds	r7, #40	; 0x28
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20012e80 	.word	0x20012e80
 8004928:	20012e94 	.word	0x20012e94
 800492c:	20012e84 	.word	0x20012e84
 8004930:	20012e78 	.word	0x20012e78
 8004934:	20012e88 	.word	0x20012e88
 8004938:	20012e8c 	.word	0x20012e8c

0800493c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d04d      	beq.n	80049ea <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800494e:	2308      	movs	r3, #8
 8004950:	425b      	negs	r3, r3
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	4413      	add	r3, r2
 8004956:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	4b24      	ldr	r3, [pc, #144]	; (80049f4 <vPortFree+0xb8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4013      	ands	r3, r2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10a      	bne.n	8004980 <vPortFree+0x44>
        __asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	60fb      	str	r3, [r7, #12]
    }
 800497c:	bf00      	nop
 800497e:	e7fe      	b.n	800497e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <vPortFree+0x62>
        __asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	60bb      	str	r3, [r7, #8]
    }
 800499a:	bf00      	nop
 800499c:	e7fe      	b.n	800499c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	4b14      	ldr	r3, [pc, #80]	; (80049f4 <vPortFree+0xb8>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01e      	beq.n	80049ea <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d11a      	bne.n	80049ea <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	4b0e      	ldr	r3, [pc, #56]	; (80049f4 <vPortFree+0xb8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	43db      	mvns	r3, r3
 80049be:	401a      	ands	r2, r3
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80049c4:	f7fe fc24 	bl	8003210 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <vPortFree+0xbc>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4413      	add	r3, r2
 80049d2:	4a09      	ldr	r2, [pc, #36]	; (80049f8 <vPortFree+0xbc>)
 80049d4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049d6:	6938      	ldr	r0, [r7, #16]
 80049d8:	f000 f874 	bl	8004ac4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80049dc:	4b07      	ldr	r3, [pc, #28]	; (80049fc <vPortFree+0xc0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3301      	adds	r3, #1
 80049e2:	4a06      	ldr	r2, [pc, #24]	; (80049fc <vPortFree+0xc0>)
 80049e4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80049e6:	f7fe fc21 	bl	800322c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80049ea:	bf00      	nop
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20012e94 	.word	0x20012e94
 80049f8:	20012e84 	.word	0x20012e84
 80049fc:	20012e90 	.word	0x20012e90

08004a00 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a06:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004a0a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004a0c:	4b27      	ldr	r3, [pc, #156]	; (8004aac <prvHeapInit+0xac>)
 8004a0e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00c      	beq.n	8004a34 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3307      	adds	r3, #7
 8004a1e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0307 	bic.w	r3, r3, #7
 8004a26:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	4a1f      	ldr	r2, [pc, #124]	; (8004aac <prvHeapInit+0xac>)
 8004a30:	4413      	add	r3, r2
 8004a32:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a38:	4a1d      	ldr	r2, [pc, #116]	; (8004ab0 <prvHeapInit+0xb0>)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004a3e:	4b1c      	ldr	r3, [pc, #112]	; (8004ab0 <prvHeapInit+0xb0>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	4413      	add	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1a9b      	subs	r3, r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0307 	bic.w	r3, r3, #7
 8004a5a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4a15      	ldr	r2, [pc, #84]	; (8004ab4 <prvHeapInit+0xb4>)
 8004a60:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004a62:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <prvHeapInit+0xb4>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2200      	movs	r2, #0
 8004a68:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004a6a:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <prvHeapInit+0xb4>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	1ad2      	subs	r2, r2, r3
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a80:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <prvHeapInit+0xb4>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	4a0a      	ldr	r2, [pc, #40]	; (8004ab8 <prvHeapInit+0xb8>)
 8004a8e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	4a09      	ldr	r2, [pc, #36]	; (8004abc <prvHeapInit+0xbc>)
 8004a96:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a98:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <prvHeapInit+0xc0>)
 8004a9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a9e:	601a      	str	r2, [r3, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	20000278 	.word	0x20000278
 8004ab0:	20012e78 	.word	0x20012e78
 8004ab4:	20012e80 	.word	0x20012e80
 8004ab8:	20012e88 	.word	0x20012e88
 8004abc:	20012e84 	.word	0x20012e84
 8004ac0:	20012e94 	.word	0x20012e94

08004ac4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004acc:	4b28      	ldr	r3, [pc, #160]	; (8004b70 <prvInsertBlockIntoFreeList+0xac>)
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	e002      	b.n	8004ad8 <prvInsertBlockIntoFreeList+0x14>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d8f7      	bhi.n	8004ad2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	4413      	add	r3, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d108      	bne.n	8004b06 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	441a      	add	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	441a      	add	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d118      	bne.n	8004b4c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4b15      	ldr	r3, [pc, #84]	; (8004b74 <prvInsertBlockIntoFreeList+0xb0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d00d      	beq.n	8004b42 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	441a      	add	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	e008      	b.n	8004b54 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b42:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <prvInsertBlockIntoFreeList+0xb0>)
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	e003      	b.n	8004b54 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d002      	beq.n	8004b62 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b62:	bf00      	nop
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	20012e78 	.word	0x20012e78
 8004b74:	20012e80 	.word	0x20012e80

08004b78 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004b7c:	4803      	ldr	r0, [pc, #12]	; (8004b8c <_cbSendSystemDesc+0x14>)
 8004b7e:	f001 fdcf 	bl	8006720 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004b82:	4803      	ldr	r0, [pc, #12]	; (8004b90 <_cbSendSystemDesc+0x18>)
 8004b84:	f001 fdcc 	bl	8006720 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004b88:	bf00      	nop
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	08007948 	.word	0x08007948
 8004b90:	08007984 	.word	0x08007984

08004b94 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004b98:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b9a:	6818      	ldr	r0, [r3, #0]
 8004b9c:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b9e:	6819      	ldr	r1, [r3, #0]
 8004ba0:	4b05      	ldr	r3, [pc, #20]	; (8004bb8 <SEGGER_SYSVIEW_Conf+0x24>)
 8004ba2:	4a06      	ldr	r2, [pc, #24]	; (8004bbc <SEGGER_SYSVIEW_Conf+0x28>)
 8004ba4:	f001 f938 	bl	8005e18 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004ba8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004bac:	f001 f978 	bl	8005ea0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004bb0:	bf00      	nop
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20000000 	.word	0x20000000
 8004bb8:	08004b79 	.word	0x08004b79
 8004bbc:	08007a20 	.word	0x08007a20

08004bc0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	607b      	str	r3, [r7, #4]
 8004bca:	e033      	b.n	8004c34 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004bcc:	491e      	ldr	r1, [pc, #120]	; (8004c48 <_cbSendTaskList+0x88>)
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	491a      	ldr	r1, [pc, #104]	; (8004c48 <_cbSendTaskList+0x88>)
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	3304      	adds	r3, #4
 8004bec:	6819      	ldr	r1, [r3, #0]
 8004bee:	4c16      	ldr	r4, [pc, #88]	; (8004c48 <_cbSendTaskList+0x88>)
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4423      	add	r3, r4
 8004bfc:	3308      	adds	r3, #8
 8004bfe:	681c      	ldr	r4, [r3, #0]
 8004c00:	4d11      	ldr	r5, [pc, #68]	; (8004c48 <_cbSendTaskList+0x88>)
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	4613      	mov	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	442b      	add	r3, r5
 8004c0e:	330c      	adds	r3, #12
 8004c10:	681d      	ldr	r5, [r3, #0]
 8004c12:	4e0d      	ldr	r6, [pc, #52]	; (8004c48 <_cbSendTaskList+0x88>)
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4433      	add	r3, r6
 8004c20:	3310      	adds	r3, #16
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	462b      	mov	r3, r5
 8004c28:	4622      	mov	r2, r4
 8004c2a:	f000 f8bd 	bl	8004da8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	3301      	adds	r3, #1
 8004c32:	607b      	str	r3, [r7, #4]
 8004c34:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <_cbSendTaskList+0x8c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d3c6      	bcc.n	8004bcc <_cbSendTaskList+0xc>
  }
}
 8004c3e:	bf00      	nop
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c48:	20012e98 	.word	0x20012e98
 8004c4c:	20012f38 	.word	0x20012f38

08004c50 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004c58:	f7fe fb8a 	bl	8003370 <xTaskGetTickCountFromISR>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2200      	movs	r2, #0
 8004c60:	469a      	mov	sl, r3
 8004c62:	4693      	mov	fp, r2
 8004c64:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	f04f 0a00 	mov.w	sl, #0
 8004c74:	f04f 0b00 	mov.w	fp, #0
 8004c78:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004c7c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004c80:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004c84:	4652      	mov	r2, sl
 8004c86:	465b      	mov	r3, fp
 8004c88:	1a14      	subs	r4, r2, r0
 8004c8a:	eb63 0501 	sbc.w	r5, r3, r1
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	00ab      	lsls	r3, r5, #2
 8004c98:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004c9c:	00a2      	lsls	r2, r4, #2
 8004c9e:	4614      	mov	r4, r2
 8004ca0:	461d      	mov	r5, r3
 8004ca2:	eb14 0800 	adds.w	r8, r4, r0
 8004ca6:	eb45 0901 	adc.w	r9, r5, r1
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	f04f 0300 	mov.w	r3, #0
 8004cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cbe:	4690      	mov	r8, r2
 8004cc0:	4699      	mov	r9, r3
 8004cc2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004cca:	4610      	mov	r0, r2
 8004ccc:	4619      	mov	r1, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004cd8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af02      	add	r7, sp, #8
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004ce6:	2205      	movs	r2, #5
 8004ce8:	492b      	ldr	r1, [pc, #172]	; (8004d98 <SYSVIEW_AddTask+0xc0>)
 8004cea:	68b8      	ldr	r0, [r7, #8]
 8004cec:	f002 f8e6 	bl	8006ebc <memcmp>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d04b      	beq.n	8004d8e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004cf6:	4b29      	ldr	r3, [pc, #164]	; (8004d9c <SYSVIEW_AddTask+0xc4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b07      	cmp	r3, #7
 8004cfc:	d903      	bls.n	8004d06 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004cfe:	4828      	ldr	r0, [pc, #160]	; (8004da0 <SYSVIEW_AddTask+0xc8>)
 8004d00:	f002 f816 	bl	8006d30 <SEGGER_SYSVIEW_Warn>
    return;
 8004d04:	e044      	b.n	8004d90 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004d06:	4b25      	ldr	r3, [pc, #148]	; (8004d9c <SYSVIEW_AddTask+0xc4>)
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	4926      	ldr	r1, [pc, #152]	; (8004da4 <SYSVIEW_AddTask+0xcc>)
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004d1a:	4b20      	ldr	r3, [pc, #128]	; (8004d9c <SYSVIEW_AddTask+0xc4>)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4921      	ldr	r1, [pc, #132]	; (8004da4 <SYSVIEW_AddTask+0xcc>)
 8004d20:	4613      	mov	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	440b      	add	r3, r1
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004d30:	4b1a      	ldr	r3, [pc, #104]	; (8004d9c <SYSVIEW_AddTask+0xc4>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	491b      	ldr	r1, [pc, #108]	; (8004da4 <SYSVIEW_AddTask+0xcc>)
 8004d36:	4613      	mov	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	3308      	adds	r3, #8
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004d46:	4b15      	ldr	r3, [pc, #84]	; (8004d9c <SYSVIEW_AddTask+0xc4>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4916      	ldr	r1, [pc, #88]	; (8004da4 <SYSVIEW_AddTask+0xcc>)
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	330c      	adds	r3, #12
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004d5c:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <SYSVIEW_AddTask+0xc4>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	4910      	ldr	r1, [pc, #64]	; (8004da4 <SYSVIEW_AddTask+0xcc>)
 8004d62:	4613      	mov	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	440b      	add	r3, r1
 8004d6c:	3310      	adds	r3, #16
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004d72:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <SYSVIEW_AddTask+0xc4>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3301      	adds	r3, #1
 8004d78:	4a08      	ldr	r2, [pc, #32]	; (8004d9c <SYSVIEW_AddTask+0xc4>)
 8004d7a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 f80e 	bl	8004da8 <SYSVIEW_SendTaskInfo>
 8004d8c:	e000      	b.n	8004d90 <SYSVIEW_AddTask+0xb8>
    return;
 8004d8e:	bf00      	nop

}
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	08007994 	.word	0x08007994
 8004d9c:	20012f38 	.word	0x20012f38
 8004da0:	0800799c 	.word	0x0800799c
 8004da4:	20012e98 	.word	0x20012e98

08004da8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08a      	sub	sp, #40	; 0x28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004db6:	f107 0310 	add.w	r3, r7, #16
 8004dba:	2218      	movs	r2, #24
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f002 f89a 	bl	8006ef8 <memset>
  TaskInfo.TaskID     = TaskID;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004dd8:	f107 0310 	add.w	r3, r7, #16
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f001 fba7 	bl	8006530 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004de2:	bf00      	nop
 8004de4:	3728      	adds	r7, #40	; 0x28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <__NVIC_EnableIRQ>:
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	4603      	mov	r3, r0
 8004df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	db0b      	blt.n	8004e16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dfe:	79fb      	ldrb	r3, [r7, #7]
 8004e00:	f003 021f 	and.w	r2, r3, #31
 8004e04:	4907      	ldr	r1, [pc, #28]	; (8004e24 <__NVIC_EnableIRQ+0x38>)
 8004e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	2001      	movs	r0, #1
 8004e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	e000e100 	.word	0xe000e100

08004e28 <__NVIC_SetPriority>:
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	6039      	str	r1, [r7, #0]
 8004e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	db0a      	blt.n	8004e52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	490c      	ldr	r1, [pc, #48]	; (8004e74 <__NVIC_SetPriority+0x4c>)
 8004e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e46:	0112      	lsls	r2, r2, #4
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e50:	e00a      	b.n	8004e68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	4908      	ldr	r1, [pc, #32]	; (8004e78 <__NVIC_SetPriority+0x50>)
 8004e58:	79fb      	ldrb	r3, [r7, #7]
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	3b04      	subs	r3, #4
 8004e60:	0112      	lsls	r2, r2, #4
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	440b      	add	r3, r1
 8004e66:	761a      	strb	r2, [r3, #24]
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	e000e100 	.word	0xe000e100
 8004e78:	e000ed00 	.word	0xe000ed00

08004e7c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004e82:	f001 ffb1 	bl	8006de8 <SEGGER_SYSVIEW_IsStarted>
 8004e86:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004e8e:	f001 f9d3 	bl	8006238 <SEGGER_SYSVIEW_Start>
  }
}
 8004e92:	bf00      	nop
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004ea6:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <_cbOnUARTRx+0x3c>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d806      	bhi.n	8004ebc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004eae:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <_cbOnUARTRx+0x3c>)
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	4b08      	ldr	r3, [pc, #32]	; (8004ed8 <_cbOnUARTRx+0x3c>)
 8004eb8:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004eba:	e009      	b.n	8004ed0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004ebc:	f7ff ffde 	bl	8004e7c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004ec0:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <_cbOnUARTRx+0x3c>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	1dfb      	adds	r3, r7, #7
 8004ec8:	2201      	movs	r2, #1
 8004eca:	4619      	mov	r1, r3
 8004ecc:	f000 fbee 	bl	80056ac <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004ed0:	bf00      	nop
}
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	20000014 	.word	0x20000014

08004edc <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004ee4:	4b14      	ldr	r3, [pc, #80]	; (8004f38 <_cbOnUARTTx+0x5c>)
 8004ee6:	785b      	ldrb	r3, [r3, #1]
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d80f      	bhi.n	8004f0c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004eec:	4b12      	ldr	r3, [pc, #72]	; (8004f38 <_cbOnUARTTx+0x5c>)
 8004eee:	785b      	ldrb	r3, [r3, #1]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4b12      	ldr	r3, [pc, #72]	; (8004f3c <_cbOnUARTTx+0x60>)
 8004ef4:	5c9a      	ldrb	r2, [r3, r2]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004efa:	4b0f      	ldr	r3, [pc, #60]	; (8004f38 <_cbOnUARTTx+0x5c>)
 8004efc:	785b      	ldrb	r3, [r3, #1]
 8004efe:	3301      	adds	r3, #1
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	4b0d      	ldr	r3, [pc, #52]	; (8004f38 <_cbOnUARTTx+0x5c>)
 8004f04:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004f06:	2301      	movs	r3, #1
 8004f08:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004f0a:	e00f      	b.n	8004f2c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004f0c:	4b0a      	ldr	r3, [pc, #40]	; (8004f38 <_cbOnUARTTx+0x5c>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 fa1d 	bl	8005354 <SEGGER_RTT_ReadUpBufferNoLock>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	da02      	bge.n	8004f2a <_cbOnUARTTx+0x4e>
    r = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	e000      	b.n	8004f2c <_cbOnUARTTx+0x50>
  }
Done:
 8004f2a:	bf00      	nop
  return r;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20000014 	.word	0x20000014
 8004f3c:	08007a28 	.word	0x08007a28

08004f40 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004f48:	4a04      	ldr	r2, [pc, #16]	; (8004f5c <SEGGER_UART_init+0x1c>)
 8004f4a:	4905      	ldr	r1, [pc, #20]	; (8004f60 <SEGGER_UART_init+0x20>)
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f865 	bl	800501c <HIF_UART_Init>
}
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	08004e9d 	.word	0x08004e9d
 8004f60:	08004edd 	.word	0x08004edd

08004f64 <USART3_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART3_IRQHandler(void);
void USART3_IRQHandler(void) {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004f6a:	4b1e      	ldr	r3, [pc, #120]	; (8004fe4 <USART3_IRQHandler+0x80>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f003 0320 	and.w	r3, r3, #32
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d011      	beq.n	8004f9e <USART3_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 8004f7a:	4b1b      	ldr	r3, [pc, #108]	; (8004fe8 <USART3_IRQHandler+0x84>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f003 030b 	and.w	r3, r3, #11
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d108      	bne.n	8004f9e <USART3_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004f8c:	4b17      	ldr	r3, [pc, #92]	; (8004fec <USART3_IRQHandler+0x88>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d004      	beq.n	8004f9e <USART3_IRQHandler+0x3a>
        _cbOnRx(v);
 8004f94:	4b15      	ldr	r3, [pc, #84]	; (8004fec <USART3_IRQHandler+0x88>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	79fa      	ldrb	r2, [r7, #7]
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01a      	beq.n	8004fde <USART3_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004fa8:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <USART3_IRQHandler+0x8c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d015      	beq.n	8004fdc <USART3_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004fb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ff0 <USART3_IRQHandler+0x8c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	1dfa      	adds	r2, r7, #7
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	4798      	blx	r3
 8004fba:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <USART3_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004fc2:	4b0c      	ldr	r3, [pc, #48]	; (8004ff4 <USART3_IRQHandler+0x90>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a0b      	ldr	r2, [pc, #44]	; (8004ff4 <USART3_IRQHandler+0x90>)
 8004fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	e006      	b.n	8004fde <USART3_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004fd0:	4b04      	ldr	r3, [pc, #16]	; (8004fe4 <USART3_IRQHandler+0x80>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 8004fd4:	79fa      	ldrb	r2, [r7, #7]
 8004fd6:	4b08      	ldr	r3, [pc, #32]	; (8004ff8 <USART3_IRQHandler+0x94>)
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	e000      	b.n	8004fde <USART3_IRQHandler+0x7a>
      return;
 8004fdc:	bf00      	nop
    }
  }
}
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	4000481c 	.word	0x4000481c
 8004fe8:	40004824 	.word	0x40004824
 8004fec:	20012f3c 	.word	0x20012f3c
 8004ff0:	20012f40 	.word	0x20012f40
 8004ff4:	40004800 	.word	0x40004800
 8004ff8:	40004828 	.word	0x40004828

08004ffc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005000:	4b05      	ldr	r3, [pc, #20]	; (8005018 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a04      	ldr	r2, [pc, #16]	; (8005018 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500a:	6013      	str	r3, [r2, #0]
}
 800500c:	bf00      	nop
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40004800 	.word	0x40004800

0800501c <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  // Habilitar reloj de USART3 y puerto D
  RCC_APB1ENR |= (1 << 18);       // Habilitar reloj USART3 (APB1)
 8005028:	4b2e      	ldr	r3, [pc, #184]	; (80050e4 <HIF_UART_Init+0xc8>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a2d      	ldr	r2, [pc, #180]	; (80050e4 <HIF_UART_Init+0xc8>)
 800502e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005032:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 << 3);        // Habilitar reloj GPIO D
 8005034:	4b2c      	ldr	r3, [pc, #176]	; (80050e8 <HIF_UART_Init+0xcc>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a2b      	ldr	r2, [pc, #172]	; (80050e8 <HIF_UART_Init+0xcc>)
 800503a:	f043 0308 	orr.w	r3, r3, #8
 800503e:	6013      	str	r3, [r2, #0]

  // Configurar los pines PD8 y PD9 para función alternativa AF7 (USART3)
  v  = GPIO_AFRH;
 8005040:	4b2a      	ldr	r3, [pc, #168]	; (80050ec <HIF_UART_Init+0xd0>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (15UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800504c:	613b      	str	r3, [r7, #16]
  v |=  ((7UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (7UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005054:	613b      	str	r3, [r7, #16]
  GPIO_AFRH = v;
 8005056:	4a25      	ldr	r2, [pc, #148]	; (80050ec <HIF_UART_Init+0xd0>)
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	6013      	str	r3, [r2, #0]

  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 800505c:	4b24      	ldr	r3, [pc, #144]	; (80050f0 <HIF_UART_Init+0xd4>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005068:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8005070:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8005072:	4a1f      	ldr	r2, [pc, #124]	; (80050f0 <HIF_UART_Init+0xd4>)
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	6013      	str	r3, [r2, #0]

  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800507e:	4a1d      	ldr	r2, [pc, #116]	; (80050f4 <HIF_UART_Init+0xd8>)
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	fbb2 f3f3 	udiv	r3, r2, r3
 8005086:	3301      	adds	r3, #1
 8005088:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	085b      	lsrs	r3, r3, #1
 800508e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005096:	d302      	bcc.n	800509e <HIF_UART_Init+0x82>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005098:	f640 73ff 	movw	r3, #4095	; 0xfff
 800509c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d004      	beq.n	80050ae <HIF_UART_Init+0x92>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	4a13      	ldr	r2, [pc, #76]	; (80050f8 <HIF_UART_Init+0xdc>)
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	6013      	str	r3, [r2, #0]
  }

  //
  // Initialize USART
  //
  USART_CR1 = 0
 80050ae:	4b13      	ldr	r3, [pc, #76]	; (80050fc <HIF_UART_Init+0xe0>)
 80050b0:	f248 022d 	movw	r2, #32813	; 0x802d
 80050b4:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80050b6:	4b12      	ldr	r3, [pc, #72]	; (8005100 <HIF_UART_Init+0xe4>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80050bc:	4b11      	ldr	r3, [pc, #68]	; (8005104 <HIF_UART_Init+0xe8>)
 80050be:	2280      	movs	r2, #128	; 0x80
 80050c0:	601a      	str	r2, [r3, #0]
            ;

  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80050c2:	4a11      	ldr	r2, [pc, #68]	; (8005108 <HIF_UART_Init+0xec>)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80050c8:	4a10      	ldr	r2, [pc, #64]	; (800510c <HIF_UART_Init+0xf0>)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80050ce:	2106      	movs	r1, #6
 80050d0:	2027      	movs	r0, #39	; 0x27
 80050d2:	f7ff fea9 	bl	8004e28 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80050d6:	2027      	movs	r0, #39	; 0x27
 80050d8:	f7ff fe88 	bl	8004dec <__NVIC_EnableIRQ>
}
 80050dc:	bf00      	nop
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40023840 	.word	0x40023840
 80050e8:	40023830 	.word	0x40023830
 80050ec:	40020c24 	.word	0x40020c24
 80050f0:	40020c00 	.word	0x40020c00
 80050f4:	066ff300 	.word	0x066ff300
 80050f8:	4000480c 	.word	0x4000480c
 80050fc:	40004800 	.word	0x40004800
 8005100:	40004804 	.word	0x40004804
 8005104:	40004808 	.word	0x40004808
 8005108:	20012f3c 	.word	0x20012f3c
 800510c:	20012f40 	.word	0x20012f40

08005110 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005116:	4b26      	ldr	r3, [pc, #152]	; (80051b0 <_DoInit+0xa0>)
 8005118:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800511a:	22a8      	movs	r2, #168	; 0xa8
 800511c:	2100      	movs	r1, #0
 800511e:	6838      	ldr	r0, [r7, #0]
 8005120:	f001 feea 	bl	8006ef8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2203      	movs	r2, #3
 8005128:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2203      	movs	r2, #3
 800512e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	4a20      	ldr	r2, [pc, #128]	; (80051b4 <_DoInit+0xa4>)
 8005134:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	4a1f      	ldr	r2, [pc, #124]	; (80051b8 <_DoInit+0xa8>)
 800513a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005142:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2200      	movs	r2, #0
 8005148:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2200      	movs	r2, #0
 800514e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2200      	movs	r2, #0
 8005154:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	4a16      	ldr	r2, [pc, #88]	; (80051b4 <_DoInit+0xa4>)
 800515a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	4a17      	ldr	r2, [pc, #92]	; (80051bc <_DoInit+0xac>)
 8005160:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2210      	movs	r2, #16
 8005166:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2200      	movs	r2, #0
 800516c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2200      	movs	r2, #0
 8005172:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	2200      	movs	r2, #0
 8005178:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800517a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800517e:	2300      	movs	r3, #0
 8005180:	607b      	str	r3, [r7, #4]
 8005182:	e00c      	b.n	800519e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f1c3 030f 	rsb	r3, r3, #15
 800518a:	4a0d      	ldr	r2, [pc, #52]	; (80051c0 <_DoInit+0xb0>)
 800518c:	5cd1      	ldrb	r1, [r2, r3]
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4413      	add	r3, r2
 8005194:	460a      	mov	r2, r1
 8005196:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3301      	adds	r3, #1
 800519c:	607b      	str	r3, [r7, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b0f      	cmp	r3, #15
 80051a2:	d9ef      	bls.n	8005184 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80051a4:	f3bf 8f5f 	dmb	sy
}
 80051a8:	bf00      	nop
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	20012f44 	.word	0x20012f44
 80051b4:	080079ec 	.word	0x080079ec
 80051b8:	20012fec 	.word	0x20012fec
 80051bc:	200133ec 	.word	0x200133ec
 80051c0:	08007a2c 	.word	0x08007a2c

080051c4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08a      	sub	sp, #40	; 0x28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80051d0:	2300      	movs	r3, #0
 80051d2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d905      	bls.n	80051f4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
 80051f2:	e007      	b.n	8005204 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	69b9      	ldr	r1, [r7, #24]
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	1acb      	subs	r3, r1, r3
 80051fe:	4413      	add	r3, r2
 8005200:	3b01      	subs	r3, #1
 8005202:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520e:	4293      	cmp	r3, r2
 8005210:	bf28      	it	cs
 8005212:	4613      	movcs	r3, r2
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4293      	cmp	r3, r2
 800521c:	bf28      	it	cs
 800521e:	4613      	movcs	r3, r2
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	4413      	add	r3, r2
 800522a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800522c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522e:	68b9      	ldr	r1, [r7, #8]
 8005230:	6978      	ldr	r0, [r7, #20]
 8005232:	f001 fe53 	bl	8006edc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005236:	6a3a      	ldr	r2, [r7, #32]
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	4413      	add	r3, r2
 800523c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	4413      	add	r3, r2
 8005244:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	4413      	add	r3, r2
 8005254:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	429a      	cmp	r2, r3
 800525e:	d101      	bne.n	8005264 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005264:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	69fa      	ldr	r2, [r7, #28]
 800526c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1b2      	bne.n	80051da <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005274:	6a3b      	ldr	r3, [r7, #32]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3728      	adds	r7, #40	; 0x28
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800527e:	b580      	push	{r7, lr}
 8005280:	b088      	sub	sp, #32
 8005282:	af00      	add	r7, sp, #0
 8005284:	60f8      	str	r0, [r7, #12]
 8005286:	60b9      	str	r1, [r7, #8]
 8005288:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d911      	bls.n	80052c6 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	4413      	add	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	68b9      	ldr	r1, [r7, #8]
 80052b0:	6938      	ldr	r0, [r7, #16]
 80052b2:	f001 fe13 	bl	8006edc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052b6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80052ba:	69fa      	ldr	r2, [r7, #28]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	441a      	add	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80052c4:	e01f      	b.n	8005306 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	4413      	add	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	68b9      	ldr	r1, [r7, #8]
 80052d8:	6938      	ldr	r0, [r7, #16]
 80052da:	f001 fdff 	bl	8006edc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	4413      	add	r3, r2
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	4619      	mov	r1, r3
 80052f6:	6938      	ldr	r0, [r7, #16]
 80052f8:	f001 fdf0 	bl	8006edc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052fc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	60da      	str	r2, [r3, #12]
}
 8005306:	bf00      	nop
 8005308:	3720      	adds	r7, #32
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800530e:	b480      	push	{r7}
 8005310:	b087      	sub	sp, #28
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	429a      	cmp	r2, r3
 8005328:	d808      	bhi.n	800533c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1ad2      	subs	r2, r2, r3
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	4413      	add	r3, r2
 8005336:	3b01      	subs	r3, #1
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	e004      	b.n	8005346 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	3b01      	subs	r3, #1
 8005344:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005346:	697b      	ldr	r3, [r7, #20]
}
 8005348:	4618      	mov	r0, r3
 800534a:	371c      	adds	r7, #28
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005354:	b580      	push	{r7, lr}
 8005356:	b08c      	sub	sp, #48	; 0x30
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005360:	4b3e      	ldr	r3, [pc, #248]	; (800545c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005362:	623b      	str	r3, [r7, #32]
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b53      	cmp	r3, #83	; 0x53
 800536c:	d001      	beq.n	8005372 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800536e:	f7ff fecf 	bl	8005110 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	4613      	mov	r3, r2
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	4413      	add	r3, r2
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	4a37      	ldr	r2, [pc, #220]	; (800545c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005380:	4413      	add	r3, r2
 8005382:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005394:	2300      	movs	r3, #0
 8005396:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	429a      	cmp	r2, r3
 800539e:	d92b      	bls.n	80053f8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4293      	cmp	r3, r2
 80053b0:	bf28      	it	cs
 80053b2:	4613      	movcs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	4413      	add	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	6939      	ldr	r1, [r7, #16]
 80053c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053c6:	f001 fd89 	bl	8006edc <memcpy>
    NumBytesRead += NumBytesRem;
 80053ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	4413      	add	r3, r2
 80053d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80053d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	4413      	add	r3, r2
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	4413      	add	r3, r2
 80053e8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d101      	bne.n	80053f8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80053f4:	2300      	movs	r3, #0
 80053f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4293      	cmp	r3, r2
 8005406:	bf28      	it	cs
 8005408:	4613      	movcs	r3, r2
 800540a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d019      	beq.n	8005446 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005418:	4413      	add	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	6939      	ldr	r1, [r7, #16]
 8005420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005422:	f001 fd5b 	bl	8006edc <memcpy>
    NumBytesRead += NumBytesRem;
 8005426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	4413      	add	r3, r2
 800542c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800542e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	4413      	add	r3, r2
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800543e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	4413      	add	r3, r2
 8005444:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005450:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005454:	4618      	mov	r0, r3
 8005456:	3730      	adds	r7, #48	; 0x30
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	20012f44 	.word	0x20012f44

08005460 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005460:	b580      	push	{r7, lr}
 8005462:	b08c      	sub	sp, #48	; 0x30
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800546c:	4b3e      	ldr	r3, [pc, #248]	; (8005568 <SEGGER_RTT_ReadNoLock+0x108>)
 800546e:	623b      	str	r3, [r7, #32]
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b53      	cmp	r3, #83	; 0x53
 8005478:	d001      	beq.n	800547e <SEGGER_RTT_ReadNoLock+0x1e>
 800547a:	f7ff fe49 	bl	8005110 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4613      	mov	r3, r2
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	4413      	add	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	3360      	adds	r3, #96	; 0x60
 800548a:	4a37      	ldr	r2, [pc, #220]	; (8005568 <SEGGER_RTT_ReadNoLock+0x108>)
 800548c:	4413      	add	r3, r2
 800548e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80054a0:	2300      	movs	r3, #0
 80054a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80054a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d92b      	bls.n	8005504 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4293      	cmp	r3, r2
 80054bc:	bf28      	it	cs
 80054be:	4613      	movcs	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	4413      	add	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	6939      	ldr	r1, [r7, #16]
 80054d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054d2:	f001 fd03 	bl	8006edc <memcpy>
    NumBytesRead += NumBytesRem;
 80054d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	4413      	add	r3, r2
 80054dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80054de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	4413      	add	r3, r2
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80054ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	4413      	add	r3, r2
 80054f4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d101      	bne.n	8005504 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005500:	2300      	movs	r3, #0
 8005502:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4293      	cmp	r3, r2
 8005512:	bf28      	it	cs
 8005514:	4613      	movcs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d019      	beq.n	8005552 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005524:	4413      	add	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	6939      	ldr	r1, [r7, #16]
 800552c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800552e:	f001 fcd5 	bl	8006edc <memcpy>
    NumBytesRead += NumBytesRem;
 8005532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	4413      	add	r3, r2
 8005538:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800553a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	4413      	add	r3, r2
 8005540:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800554a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	4413      	add	r3, r2
 8005550:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800555c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800555e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005560:	4618      	mov	r0, r3
 8005562:	3730      	adds	r7, #48	; 0x30
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	20012f44 	.word	0x20012f44

0800556c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4613      	mov	r3, r2
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	4413      	add	r3, r2
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	3360      	adds	r3, #96	; 0x60
 8005588:	4a1f      	ldr	r2, [pc, #124]	; (8005608 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800558a:	4413      	add	r3, r2
 800558c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	2b02      	cmp	r3, #2
 8005594:	d029      	beq.n	80055ea <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005596:	2b02      	cmp	r3, #2
 8005598:	d82e      	bhi.n	80055f8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d013      	beq.n	80055ca <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80055a2:	e029      	b.n	80055f8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80055a4:	6978      	ldr	r0, [r7, #20]
 80055a6:	f7ff feb2 	bl	800530e <_GetAvailWriteSpace>
 80055aa:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d202      	bcs.n	80055ba <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80055b4:	2300      	movs	r3, #0
 80055b6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80055b8:	e021      	b.n	80055fe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	69b9      	ldr	r1, [r7, #24]
 80055c2:	6978      	ldr	r0, [r7, #20]
 80055c4:	f7ff fe5b 	bl	800527e <_WriteNoCheck>
    break;
 80055c8:	e019      	b.n	80055fe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80055ca:	6978      	ldr	r0, [r7, #20]
 80055cc:	f7ff fe9f 	bl	800530e <_GetAvailWriteSpace>
 80055d0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	4293      	cmp	r3, r2
 80055d8:	bf28      	it	cs
 80055da:	4613      	movcs	r3, r2
 80055dc:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80055de:	69fa      	ldr	r2, [r7, #28]
 80055e0:	69b9      	ldr	r1, [r7, #24]
 80055e2:	6978      	ldr	r0, [r7, #20]
 80055e4:	f7ff fe4b 	bl	800527e <_WriteNoCheck>
    break;
 80055e8:	e009      	b.n	80055fe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	69b9      	ldr	r1, [r7, #24]
 80055ee:	6978      	ldr	r0, [r7, #20]
 80055f0:	f7ff fde8 	bl	80051c4 <_WriteBlocking>
 80055f4:	61f8      	str	r0, [r7, #28]
    break;
 80055f6:	e002      	b.n	80055fe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80055f8:	2300      	movs	r3, #0
 80055fa:	61fb      	str	r3, [r7, #28]
    break;
 80055fc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80055fe:	69fb      	ldr	r3, [r7, #28]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3720      	adds	r7, #32
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20012f44 	.word	0x20012f44

0800560c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	4613      	mov	r3, r2
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	4413      	add	r3, r2
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	4a1f      	ldr	r2, [pc, #124]	; (80056a8 <SEGGER_RTT_WriteNoLock+0x9c>)
 800562a:	4413      	add	r3, r2
 800562c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	2b02      	cmp	r3, #2
 8005634:	d029      	beq.n	800568a <SEGGER_RTT_WriteNoLock+0x7e>
 8005636:	2b02      	cmp	r3, #2
 8005638:	d82e      	bhi.n	8005698 <SEGGER_RTT_WriteNoLock+0x8c>
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <SEGGER_RTT_WriteNoLock+0x38>
 800563e:	2b01      	cmp	r3, #1
 8005640:	d013      	beq.n	800566a <SEGGER_RTT_WriteNoLock+0x5e>
 8005642:	e029      	b.n	8005698 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005644:	6978      	ldr	r0, [r7, #20]
 8005646:	f7ff fe62 	bl	800530e <_GetAvailWriteSpace>
 800564a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	429a      	cmp	r2, r3
 8005652:	d202      	bcs.n	800565a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005654:	2300      	movs	r3, #0
 8005656:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005658:	e021      	b.n	800569e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	69b9      	ldr	r1, [r7, #24]
 8005662:	6978      	ldr	r0, [r7, #20]
 8005664:	f7ff fe0b 	bl	800527e <_WriteNoCheck>
    break;
 8005668:	e019      	b.n	800569e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800566a:	6978      	ldr	r0, [r7, #20]
 800566c:	f7ff fe4f 	bl	800530e <_GetAvailWriteSpace>
 8005670:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	4293      	cmp	r3, r2
 8005678:	bf28      	it	cs
 800567a:	4613      	movcs	r3, r2
 800567c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800567e:	69fa      	ldr	r2, [r7, #28]
 8005680:	69b9      	ldr	r1, [r7, #24]
 8005682:	6978      	ldr	r0, [r7, #20]
 8005684:	f7ff fdfb 	bl	800527e <_WriteNoCheck>
    break;
 8005688:	e009      	b.n	800569e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	69b9      	ldr	r1, [r7, #24]
 800568e:	6978      	ldr	r0, [r7, #20]
 8005690:	f7ff fd98 	bl	80051c4 <_WriteBlocking>
 8005694:	61f8      	str	r0, [r7, #28]
    break;
 8005696:	e002      	b.n	800569e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005698:	2300      	movs	r3, #0
 800569a:	61fb      	str	r3, [r7, #28]
    break;
 800569c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800569e:	69fb      	ldr	r3, [r7, #28]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3720      	adds	r7, #32
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	20012f44 	.word	0x20012f44

080056ac <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80056b8:	4b0e      	ldr	r3, [pc, #56]	; (80056f4 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80056ba:	61fb      	str	r3, [r7, #28]
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b53      	cmp	r3, #83	; 0x53
 80056c4:	d001      	beq.n	80056ca <SEGGER_RTT_WriteDownBuffer+0x1e>
 80056c6:	f7ff fd23 	bl	8005110 <_DoInit>
  SEGGER_RTT_LOCK();
 80056ca:	f3ef 8311 	mrs	r3, BASEPRI
 80056ce:	f04f 0120 	mov.w	r1, #32
 80056d2:	f381 8811 	msr	BASEPRI, r1
 80056d6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	68b9      	ldr	r1, [r7, #8]
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f7ff ff45 	bl	800556c <SEGGER_RTT_WriteDownBufferNoLock>
 80056e2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80056ea:	697b      	ldr	r3, [r7, #20]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3720      	adds	r7, #32
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20012f44 	.word	0x20012f44

080056f8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005704:	4b0e      	ldr	r3, [pc, #56]	; (8005740 <SEGGER_RTT_Write+0x48>)
 8005706:	61fb      	str	r3, [r7, #28]
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b53      	cmp	r3, #83	; 0x53
 8005710:	d001      	beq.n	8005716 <SEGGER_RTT_Write+0x1e>
 8005712:	f7ff fcfd 	bl	8005110 <_DoInit>
  SEGGER_RTT_LOCK();
 8005716:	f3ef 8311 	mrs	r3, BASEPRI
 800571a:	f04f 0120 	mov.w	r1, #32
 800571e:	f381 8811 	msr	BASEPRI, r1
 8005722:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f7ff ff6f 	bl	800560c <SEGGER_RTT_WriteNoLock>
 800572e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005736:	697b      	ldr	r3, [r7, #20]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3720      	adds	r7, #32
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	20012f44 	.word	0x20012f44

08005744 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005752:	4b3d      	ldr	r3, [pc, #244]	; (8005848 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005754:	61bb      	str	r3, [r7, #24]
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b53      	cmp	r3, #83	; 0x53
 800575e:	d001      	beq.n	8005764 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005760:	f7ff fcd6 	bl	8005110 <_DoInit>
  SEGGER_RTT_LOCK();
 8005764:	f3ef 8311 	mrs	r3, BASEPRI
 8005768:	f04f 0120 	mov.w	r1, #32
 800576c:	f381 8811 	msr	BASEPRI, r1
 8005770:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005772:	4b35      	ldr	r3, [pc, #212]	; (8005848 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005774:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005776:	2300      	movs	r3, #0
 8005778:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800577a:	6939      	ldr	r1, [r7, #16]
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	4613      	mov	r3, r2
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	4413      	add	r3, r2
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	440b      	add	r3, r1
 800578a:	3304      	adds	r3, #4
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d008      	beq.n	80057a4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	3301      	adds	r3, #1
 8005796:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	69fa      	ldr	r2, [r7, #28]
 800579e:	429a      	cmp	r2, r3
 80057a0:	dbeb      	blt.n	800577a <SEGGER_RTT_AllocUpBuffer+0x36>
 80057a2:	e000      	b.n	80057a6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80057a4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	da3f      	bge.n	8005830 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80057b0:	6939      	ldr	r1, [r7, #16]
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	4613      	mov	r3, r2
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	4413      	add	r3, r2
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	440b      	add	r3, r1
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80057c4:	6939      	ldr	r1, [r7, #16]
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	4613      	mov	r3, r2
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	4413      	add	r3, r2
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	440b      	add	r3, r1
 80057d4:	3304      	adds	r3, #4
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80057da:	6939      	ldr	r1, [r7, #16]
 80057dc:	69fa      	ldr	r2, [r7, #28]
 80057de:	4613      	mov	r3, r2
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	4413      	add	r3, r2
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	440b      	add	r3, r1
 80057e8:	3320      	adds	r3, #32
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80057ee:	6939      	ldr	r1, [r7, #16]
 80057f0:	69fa      	ldr	r2, [r7, #28]
 80057f2:	4613      	mov	r3, r2
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	4413      	add	r3, r2
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	440b      	add	r3, r1
 80057fc:	3328      	adds	r3, #40	; 0x28
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005802:	6939      	ldr	r1, [r7, #16]
 8005804:	69fa      	ldr	r2, [r7, #28]
 8005806:	4613      	mov	r3, r2
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	4413      	add	r3, r2
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	440b      	add	r3, r1
 8005810:	3324      	adds	r3, #36	; 0x24
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005816:	6939      	ldr	r1, [r7, #16]
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	4613      	mov	r3, r2
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	4413      	add	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	440b      	add	r3, r1
 8005824:	332c      	adds	r3, #44	; 0x2c
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800582a:	f3bf 8f5f 	dmb	sy
 800582e:	e002      	b.n	8005836 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005830:	f04f 33ff 	mov.w	r3, #4294967295
 8005834:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800583c:	69fb      	ldr	r3, [r7, #28]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3720      	adds	r7, #32
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20012f44 	.word	0x20012f44

0800584c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800584c:	b580      	push	{r7, lr}
 800584e:	b08a      	sub	sp, #40	; 0x28
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800585a:	4b21      	ldr	r3, [pc, #132]	; (80058e0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800585c:	623b      	str	r3, [r7, #32]
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b53      	cmp	r3, #83	; 0x53
 8005866:	d001      	beq.n	800586c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005868:	f7ff fc52 	bl	8005110 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800586c:	4b1c      	ldr	r3, [pc, #112]	; (80058e0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800586e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d82c      	bhi.n	80058d0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005876:	f3ef 8311 	mrs	r3, BASEPRI
 800587a:	f04f 0120 	mov.w	r1, #32
 800587e:	f381 8811 	msr	BASEPRI, r1
 8005882:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4613      	mov	r3, r2
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	4413      	add	r3, r2
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	3360      	adds	r3, #96	; 0x60
 8005890:	69fa      	ldr	r2, [r7, #28]
 8005892:	4413      	add	r3, r2
 8005894:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00e      	beq.n	80058ba <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2200      	movs	r2, #0
 80058b2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2200      	movs	r2, #0
 80058b8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058be:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80058c0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	627b      	str	r3, [r7, #36]	; 0x24
 80058ce:	e002      	b.n	80058d6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80058d0:	f04f 33ff 	mov.w	r3, #4294967295
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3728      	adds	r7, #40	; 0x28
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	20012f44 	.word	0x20012f44

080058e4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d105      	bne.n	8005902 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	60fa      	str	r2, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	e022      	b.n	8005948 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	60fa      	str	r2, [r7, #12]
 800590c:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b80      	cmp	r3, #128	; 0x80
 8005912:	d90a      	bls.n	800592a <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005914:	2380      	movs	r3, #128	; 0x80
 8005916:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005918:	e007      	b.n	800592a <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	1c53      	adds	r3, r2, #1
 800591e:	60bb      	str	r3, [r7, #8]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	1c59      	adds	r1, r3, #1
 8005924:	60f9      	str	r1, [r7, #12]
 8005926:	7812      	ldrb	r2, [r2, #0]
 8005928:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	1e5a      	subs	r2, r3, #1
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <_EncodeStr+0x58>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1ee      	bne.n	800591a <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	b2da      	uxtb	r2, r3
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8005948:	68fb      	ldr	r3, [r7, #12]
}
 800594a:	4618      	mov	r0, r3
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005956:	b480      	push	{r7}
 8005958:	b083      	sub	sp, #12
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3307      	adds	r3, #7
}
 8005962:	4618      	mov	r0, r3
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
	...

08005970 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005976:	4b35      	ldr	r3, [pc, #212]	; (8005a4c <_HandleIncomingPacket+0xdc>)
 8005978:	7e1b      	ldrb	r3, [r3, #24]
 800597a:	4618      	mov	r0, r3
 800597c:	1cfb      	adds	r3, r7, #3
 800597e:	2201      	movs	r2, #1
 8005980:	4619      	mov	r1, r3
 8005982:	f7ff fd6d 	bl	8005460 <SEGGER_RTT_ReadNoLock>
 8005986:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d052      	beq.n	8005a34 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800598e:	78fb      	ldrb	r3, [r7, #3]
 8005990:	2b80      	cmp	r3, #128	; 0x80
 8005992:	d031      	beq.n	80059f8 <_HandleIncomingPacket+0x88>
 8005994:	2b80      	cmp	r3, #128	; 0x80
 8005996:	dc40      	bgt.n	8005a1a <_HandleIncomingPacket+0xaa>
 8005998:	2b07      	cmp	r3, #7
 800599a:	dc15      	bgt.n	80059c8 <_HandleIncomingPacket+0x58>
 800599c:	2b00      	cmp	r3, #0
 800599e:	dd3c      	ble.n	8005a1a <_HandleIncomingPacket+0xaa>
 80059a0:	3b01      	subs	r3, #1
 80059a2:	2b06      	cmp	r3, #6
 80059a4:	d839      	bhi.n	8005a1a <_HandleIncomingPacket+0xaa>
 80059a6:	a201      	add	r2, pc, #4	; (adr r2, 80059ac <_HandleIncomingPacket+0x3c>)
 80059a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ac:	080059cf 	.word	0x080059cf
 80059b0:	080059d5 	.word	0x080059d5
 80059b4:	080059db 	.word	0x080059db
 80059b8:	080059e1 	.word	0x080059e1
 80059bc:	080059e7 	.word	0x080059e7
 80059c0:	080059ed 	.word	0x080059ed
 80059c4:	080059f3 	.word	0x080059f3
 80059c8:	2b7f      	cmp	r3, #127	; 0x7f
 80059ca:	d035      	beq.n	8005a38 <_HandleIncomingPacket+0xc8>
 80059cc:	e025      	b.n	8005a1a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80059ce:	f000 fc33 	bl	8006238 <SEGGER_SYSVIEW_Start>
      break;
 80059d2:	e036      	b.n	8005a42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80059d4:	f000 fcec 	bl	80063b0 <SEGGER_SYSVIEW_Stop>
      break;
 80059d8:	e033      	b.n	8005a42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80059da:	f000 fec5 	bl	8006768 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80059de:	e030      	b.n	8005a42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80059e0:	f000 fe8a 	bl	80066f8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80059e4:	e02d      	b.n	8005a42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80059e6:	f000 fd09 	bl	80063fc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80059ea:	e02a      	b.n	8005a42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80059ec:	f001 f962 	bl	8006cb4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80059f0:	e027      	b.n	8005a42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80059f2:	f001 f941 	bl	8006c78 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80059f6:	e024      	b.n	8005a42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80059f8:	4b14      	ldr	r3, [pc, #80]	; (8005a4c <_HandleIncomingPacket+0xdc>)
 80059fa:	7e1b      	ldrb	r3, [r3, #24]
 80059fc:	4618      	mov	r0, r3
 80059fe:	1cfb      	adds	r3, r7, #3
 8005a00:	2201      	movs	r2, #1
 8005a02:	4619      	mov	r1, r3
 8005a04:	f7ff fd2c 	bl	8005460 <SEGGER_RTT_ReadNoLock>
 8005a08:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d015      	beq.n	8005a3c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005a10:	78fb      	ldrb	r3, [r7, #3]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f001 f8a6 	bl	8006b64 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005a18:	e010      	b.n	8005a3c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005a1a:	78fb      	ldrb	r3, [r7, #3]
 8005a1c:	b25b      	sxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	da0e      	bge.n	8005a40 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005a22:	4b0a      	ldr	r3, [pc, #40]	; (8005a4c <_HandleIncomingPacket+0xdc>)
 8005a24:	7e1b      	ldrb	r3, [r3, #24]
 8005a26:	4618      	mov	r0, r3
 8005a28:	1cfb      	adds	r3, r7, #3
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	f7ff fd17 	bl	8005460 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005a32:	e005      	b.n	8005a40 <_HandleIncomingPacket+0xd0>
    }
  }
 8005a34:	bf00      	nop
 8005a36:	e004      	b.n	8005a42 <_HandleIncomingPacket+0xd2>
      break;
 8005a38:	bf00      	nop
 8005a3a:	e002      	b.n	8005a42 <_HandleIncomingPacket+0xd2>
      break;
 8005a3c:	bf00      	nop
 8005a3e:	e000      	b.n	8005a42 <_HandleIncomingPacket+0xd2>
      break;
 8005a40:	bf00      	nop
}
 8005a42:	bf00      	nop
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20014404 	.word	0x20014404

08005a50 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08c      	sub	sp, #48	; 0x30
 8005a54:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005a56:	2301      	movs	r3, #1
 8005a58:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005a5a:	1d3b      	adds	r3, r7, #4
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a64:	4b32      	ldr	r3, [pc, #200]	; (8005b30 <_TrySendOverflowPacket+0xe0>)
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a6a:	e00b      	b.n	8005a84 <_TrySendOverflowPacket+0x34>
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a72:	1c59      	adds	r1, r3, #1
 8005a74:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a80:	09db      	lsrs	r3, r3, #7
 8005a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a86:	2b7f      	cmp	r3, #127	; 0x7f
 8005a88:	d8f0      	bhi.n	8005a6c <_TrySendOverflowPacket+0x1c>
 8005a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a98:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a9a:	4b26      	ldr	r3, [pc, #152]	; (8005b34 <_TrySendOverflowPacket+0xe4>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8005aa0:	4b23      	ldr	r3, [pc, #140]	; (8005b30 <_TrySendOverflowPacket+0xe0>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	623b      	str	r3, [r7, #32]
 8005ab2:	e00b      	b.n	8005acc <_TrySendOverflowPacket+0x7c>
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	1c59      	adds	r1, r3, #1
 8005abc:	6279      	str	r1, [r7, #36]	; 0x24
 8005abe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	701a      	strb	r2, [r3, #0]
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	09db      	lsrs	r3, r3, #7
 8005aca:	623b      	str	r3, [r7, #32]
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	2b7f      	cmp	r3, #127	; 0x7f
 8005ad0:	d8f0      	bhi.n	8005ab4 <_TrySendOverflowPacket+0x64>
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	627a      	str	r2, [r7, #36]	; 0x24
 8005ad8:	6a3a      	ldr	r2, [r7, #32]
 8005ada:	b2d2      	uxtb	r2, r2
 8005adc:	701a      	strb	r2, [r3, #0]
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005ae2:	4b13      	ldr	r3, [pc, #76]	; (8005b30 <_TrySendOverflowPacket+0xe0>)
 8005ae4:	785b      	ldrb	r3, [r3, #1]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	1d3b      	adds	r3, r7, #4
 8005aea:	69fa      	ldr	r2, [r7, #28]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	1d3b      	adds	r3, r7, #4
 8005af2:	4619      	mov	r1, r3
 8005af4:	f7fa fba4 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005af8:	4603      	mov	r3, r0
 8005afa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005afc:	f7ff fa7e 	bl	8004ffc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d009      	beq.n	8005b1a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005b06:	4a0a      	ldr	r2, [pc, #40]	; (8005b30 <_TrySendOverflowPacket+0xe0>)
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005b0c:	4b08      	ldr	r3, [pc, #32]	; (8005b30 <_TrySendOverflowPacket+0xe0>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	4b06      	ldr	r3, [pc, #24]	; (8005b30 <_TrySendOverflowPacket+0xe0>)
 8005b16:	701a      	strb	r2, [r3, #0]
 8005b18:	e004      	b.n	8005b24 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005b1a:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <_TrySendOverflowPacket+0xe0>)
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	4a03      	ldr	r2, [pc, #12]	; (8005b30 <_TrySendOverflowPacket+0xe0>)
 8005b22:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005b24:	693b      	ldr	r3, [r7, #16]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3730      	adds	r7, #48	; 0x30
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20014404 	.word	0x20014404
 8005b34:	e0001004 	.word	0xe0001004

08005b38 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08a      	sub	sp, #40	; 0x28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005b44:	4b96      	ldr	r3, [pc, #600]	; (8005da0 <_SendPacket+0x268>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d010      	beq.n	8005b6e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005b4c:	4b94      	ldr	r3, [pc, #592]	; (8005da0 <_SendPacket+0x268>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 8130 	beq.w	8005db6 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005b56:	4b92      	ldr	r3, [pc, #584]	; (8005da0 <_SendPacket+0x268>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d109      	bne.n	8005b72 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005b5e:	f7ff ff77 	bl	8005a50 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005b62:	4b8f      	ldr	r3, [pc, #572]	; (8005da0 <_SendPacket+0x268>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	f040 8127 	bne.w	8005dba <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005b6c:	e001      	b.n	8005b72 <_SendPacket+0x3a>
    goto Send;
 8005b6e:	bf00      	nop
 8005b70:	e000      	b.n	8005b74 <_SendPacket+0x3c>
Send:
 8005b72:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b1f      	cmp	r3, #31
 8005b78:	d809      	bhi.n	8005b8e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005b7a:	4b89      	ldr	r3, [pc, #548]	; (8005da0 <_SendPacket+0x268>)
 8005b7c:	69da      	ldr	r2, [r3, #28]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	fa22 f303 	lsr.w	r3, r2, r3
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f040 8118 	bne.w	8005dbe <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b17      	cmp	r3, #23
 8005b92:	d807      	bhi.n	8005ba4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	701a      	strb	r2, [r3, #0]
 8005ba2:	e0c4      	b.n	8005d2e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	2b7f      	cmp	r3, #127	; 0x7f
 8005bb0:	d912      	bls.n	8005bd8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	09da      	lsrs	r2, r3, #7
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	3a01      	subs	r2, #1
 8005bca:	60fa      	str	r2, [r7, #12]
 8005bcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	701a      	strb	r2, [r3, #0]
 8005bd6:	e006      	b.n	8005be6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b7e      	cmp	r3, #126	; 0x7e
 8005bea:	d807      	bhi.n	8005bfc <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	701a      	strb	r2, [r3, #0]
 8005bfa:	e098      	b.n	8005d2e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c02:	d212      	bcs.n	8005c2a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	09da      	lsrs	r2, r3, #7
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	3a01      	subs	r2, #1
 8005c1c:	60fa      	str	r2, [r7, #12]
 8005c1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	e081      	b.n	8005d2e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c30:	d21d      	bcs.n	8005c6e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	0b9a      	lsrs	r2, r3, #14
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	09db      	lsrs	r3, r3, #7
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	3a01      	subs	r2, #1
 8005c4c:	60fa      	str	r2, [r7, #12]
 8005c4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	3a01      	subs	r2, #1
 8005c60:	60fa      	str	r2, [r7, #12]
 8005c62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	701a      	strb	r2, [r3, #0]
 8005c6c:	e05f      	b.n	8005d2e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c74:	d228      	bcs.n	8005cc8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	0d5a      	lsrs	r2, r3, #21
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	b2d2      	uxtb	r2, r2
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	0b9b      	lsrs	r3, r3, #14
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	3a01      	subs	r2, #1
 8005c90:	60fa      	str	r2, [r7, #12]
 8005c92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	09db      	lsrs	r3, r3, #7
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	3a01      	subs	r2, #1
 8005ca6:	60fa      	str	r2, [r7, #12]
 8005ca8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	3a01      	subs	r2, #1
 8005cba:	60fa      	str	r2, [r7, #12]
 8005cbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	701a      	strb	r2, [r3, #0]
 8005cc6:	e032      	b.n	8005d2e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	0f1a      	lsrs	r2, r3, #28
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	0d5b      	lsrs	r3, r3, #21
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	3a01      	subs	r2, #1
 8005ce2:	60fa      	str	r2, [r7, #12]
 8005ce4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	0b9b      	lsrs	r3, r3, #14
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	3a01      	subs	r2, #1
 8005cf8:	60fa      	str	r2, [r7, #12]
 8005cfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	09db      	lsrs	r3, r3, #7
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	3a01      	subs	r2, #1
 8005d0e:	60fa      	str	r2, [r7, #12]
 8005d10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	3a01      	subs	r2, #1
 8005d22:	60fa      	str	r2, [r7, #12]
 8005d24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d2e:	4b1d      	ldr	r3, [pc, #116]	; (8005da4 <_SendPacket+0x26c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d34:	4b1a      	ldr	r3, [pc, #104]	; (8005da0 <_SendPacket+0x268>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	623b      	str	r3, [r7, #32]
 8005d46:	e00b      	b.n	8005d60 <_SendPacket+0x228>
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	1c59      	adds	r1, r3, #1
 8005d50:	6279      	str	r1, [r7, #36]	; 0x24
 8005d52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	09db      	lsrs	r3, r3, #7
 8005d5e:	623b      	str	r3, [r7, #32]
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	2b7f      	cmp	r3, #127	; 0x7f
 8005d64:	d8f0      	bhi.n	8005d48 <_SendPacket+0x210>
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	627a      	str	r2, [r7, #36]	; 0x24
 8005d6c:	6a3a      	ldr	r2, [r7, #32]
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005d76:	4b0a      	ldr	r3, [pc, #40]	; (8005da0 <_SendPacket+0x268>)
 8005d78:	785b      	ldrb	r3, [r3, #1]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	461a      	mov	r2, r3
 8005d84:	68f9      	ldr	r1, [r7, #12]
 8005d86:	f7fa fa5b 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005d8a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005d8c:	f7ff f936 	bl	8004ffc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d008      	beq.n	8005da8 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005d96:	4a02      	ldr	r2, [pc, #8]	; (8005da0 <_SendPacket+0x268>)
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	60d3      	str	r3, [r2, #12]
 8005d9c:	e010      	b.n	8005dc0 <_SendPacket+0x288>
 8005d9e:	bf00      	nop
 8005da0:	20014404 	.word	0x20014404
 8005da4:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005da8:	4b19      	ldr	r3, [pc, #100]	; (8005e10 <_SendPacket+0x2d8>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	3301      	adds	r3, #1
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	4b17      	ldr	r3, [pc, #92]	; (8005e10 <_SendPacket+0x2d8>)
 8005db2:	701a      	strb	r2, [r3, #0]
 8005db4:	e004      	b.n	8005dc0 <_SendPacket+0x288>
    goto SendDone;
 8005db6:	bf00      	nop
 8005db8:	e002      	b.n	8005dc0 <_SendPacket+0x288>
      goto SendDone;
 8005dba:	bf00      	nop
 8005dbc:	e000      	b.n	8005dc0 <_SendPacket+0x288>
      goto SendDone;
 8005dbe:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005dc0:	4b13      	ldr	r3, [pc, #76]	; (8005e10 <_SendPacket+0x2d8>)
 8005dc2:	7e1b      	ldrb	r3, [r3, #24]
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4a13      	ldr	r2, [pc, #76]	; (8005e14 <_SendPacket+0x2dc>)
 8005dc8:	460b      	mov	r3, r1
 8005dca:	005b      	lsls	r3, r3, #1
 8005dcc:	440b      	add	r3, r1
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	4413      	add	r3, r2
 8005dd2:	336c      	adds	r3, #108	; 0x6c
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4b0e      	ldr	r3, [pc, #56]	; (8005e10 <_SendPacket+0x2d8>)
 8005dd8:	7e1b      	ldrb	r3, [r3, #24]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	490d      	ldr	r1, [pc, #52]	; (8005e14 <_SendPacket+0x2dc>)
 8005dde:	4603      	mov	r3, r0
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	4403      	add	r3, r0
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	440b      	add	r3, r1
 8005de8:	3370      	adds	r3, #112	; 0x70
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d00b      	beq.n	8005e08 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005df0:	4b07      	ldr	r3, [pc, #28]	; (8005e10 <_SendPacket+0x2d8>)
 8005df2:	789b      	ldrb	r3, [r3, #2]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d107      	bne.n	8005e08 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005df8:	4b05      	ldr	r3, [pc, #20]	; (8005e10 <_SendPacket+0x2d8>)
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005dfe:	f7ff fdb7 	bl	8005970 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005e02:	4b03      	ldr	r3, [pc, #12]	; (8005e10 <_SendPacket+0x2d8>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005e08:	bf00      	nop
 8005e0a:	3728      	adds	r7, #40	; 0x28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	20014404 	.word	0x20014404
 8005e14:	20012f44 	.word	0x20012f44

08005e18 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af02      	add	r7, sp, #8
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e26:	2300      	movs	r3, #0
 8005e28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e2c:	4917      	ldr	r1, [pc, #92]	; (8005e8c <SEGGER_SYSVIEW_Init+0x74>)
 8005e2e:	4818      	ldr	r0, [pc, #96]	; (8005e90 <SEGGER_SYSVIEW_Init+0x78>)
 8005e30:	f7ff fc88 	bl	8005744 <SEGGER_RTT_AllocUpBuffer>
 8005e34:	4603      	mov	r3, r0
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	4b16      	ldr	r3, [pc, #88]	; (8005e94 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e3a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005e3c:	4b15      	ldr	r3, [pc, #84]	; (8005e94 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e3e:	785a      	ldrb	r2, [r3, #1]
 8005e40:	4b14      	ldr	r3, [pc, #80]	; (8005e94 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e42:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e44:	4b13      	ldr	r3, [pc, #76]	; (8005e94 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e46:	7e1b      	ldrb	r3, [r3, #24]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	2308      	movs	r3, #8
 8005e50:	4a11      	ldr	r2, [pc, #68]	; (8005e98 <SEGGER_SYSVIEW_Init+0x80>)
 8005e52:	490f      	ldr	r1, [pc, #60]	; (8005e90 <SEGGER_SYSVIEW_Init+0x78>)
 8005e54:	f7ff fcfa 	bl	800584c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005e58:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005e5e:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <SEGGER_SYSVIEW_Init+0x84>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a0c      	ldr	r2, [pc, #48]	; (8005e94 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e64:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005e66:	4a0b      	ldr	r2, [pc, #44]	; (8005e94 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005e6c:	4a09      	ldr	r2, [pc, #36]	; (8005e94 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005e72:	4a08      	ldr	r2, [pc, #32]	; (8005e94 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005e78:	4a06      	ldr	r2, [pc, #24]	; (8005e94 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005e7e:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005e84:	bf00      	nop
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	200133fc 	.word	0x200133fc
 8005e90:	08007a00 	.word	0x08007a00
 8005e94:	20014404 	.word	0x20014404
 8005e98:	200143fc 	.word	0x200143fc
 8005e9c:	e0001004 	.word	0xe0001004

08005ea0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005ea8:	4a04      	ldr	r2, [pc, #16]	; (8005ebc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6113      	str	r3, [r2, #16]
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	20014404 	.word	0x20014404

08005ec0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ec8:	f3ef 8311 	mrs	r3, BASEPRI
 8005ecc:	f04f 0120 	mov.w	r1, #32
 8005ed0:	f381 8811 	msr	BASEPRI, r1
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	4808      	ldr	r0, [pc, #32]	; (8005ef8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005ed8:	f7ff fd3d 	bl	8005956 <_PreparePacket>
 8005edc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	68b8      	ldr	r0, [r7, #8]
 8005ee4:	f7ff fe28 	bl	8005b38 <_SendPacket>
  RECORD_END();
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f383 8811 	msr	BASEPRI, r3
}
 8005eee:	bf00      	nop
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20014434 	.word	0x20014434

08005efc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b088      	sub	sp, #32
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f06:	f3ef 8311 	mrs	r3, BASEPRI
 8005f0a:	f04f 0120 	mov.w	r1, #32
 8005f0e:	f381 8811 	msr	BASEPRI, r1
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	4816      	ldr	r0, [pc, #88]	; (8005f70 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005f16:	f7ff fd1e 	bl	8005956 <_PreparePacket>
 8005f1a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	61fb      	str	r3, [r7, #28]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	61bb      	str	r3, [r7, #24]
 8005f28:	e00b      	b.n	8005f42 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	1c59      	adds	r1, r3, #1
 8005f32:	61f9      	str	r1, [r7, #28]
 8005f34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	701a      	strb	r2, [r3, #0]
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	09db      	lsrs	r3, r3, #7
 8005f40:	61bb      	str	r3, [r7, #24]
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	2b7f      	cmp	r3, #127	; 0x7f
 8005f46:	d8f0      	bhi.n	8005f2a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	61fa      	str	r2, [r7, #28]
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	68f9      	ldr	r1, [r7, #12]
 8005f5c:	6938      	ldr	r0, [r7, #16]
 8005f5e:	f7ff fdeb 	bl	8005b38 <_SendPacket>
  RECORD_END();
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f383 8811 	msr	BASEPRI, r3
}
 8005f68:	bf00      	nop
 8005f6a:	3720      	adds	r7, #32
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	20014434 	.word	0x20014434

08005f74 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08c      	sub	sp, #48	; 0x30
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f80:	f3ef 8311 	mrs	r3, BASEPRI
 8005f84:	f04f 0120 	mov.w	r1, #32
 8005f88:	f381 8811 	msr	BASEPRI, r1
 8005f8c:	61fb      	str	r3, [r7, #28]
 8005f8e:	4825      	ldr	r0, [pc, #148]	; (8006024 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005f90:	f7ff fce1 	bl	8005956 <_PreparePacket>
 8005f94:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fa2:	e00b      	b.n	8005fbc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005faa:	1c59      	adds	r1, r3, #1
 8005fac:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005fae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fb2:	b2d2      	uxtb	r2, r2
 8005fb4:	701a      	strb	r2, [r3, #0]
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	09db      	lsrs	r3, r3, #7
 8005fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8005fc0:	d8f0      	bhi.n	8005fa4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fca:	b2d2      	uxtb	r2, r2
 8005fcc:	701a      	strb	r2, [r3, #0]
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	623b      	str	r3, [r7, #32]
 8005fda:	e00b      	b.n	8005ff4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	1c59      	adds	r1, r3, #1
 8005fe4:	6279      	str	r1, [r7, #36]	; 0x24
 8005fe6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fea:	b2d2      	uxtb	r2, r2
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	09db      	lsrs	r3, r3, #7
 8005ff2:	623b      	str	r3, [r7, #32]
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ff8:	d8f0      	bhi.n	8005fdc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	627a      	str	r2, [r7, #36]	; 0x24
 8006000:	6a3a      	ldr	r2, [r7, #32]
 8006002:	b2d2      	uxtb	r2, r2
 8006004:	701a      	strb	r2, [r3, #0]
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	6979      	ldr	r1, [r7, #20]
 800600e:	69b8      	ldr	r0, [r7, #24]
 8006010:	f7ff fd92 	bl	8005b38 <_SendPacket>
  RECORD_END();
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	f383 8811 	msr	BASEPRI, r3
}
 800601a:	bf00      	nop
 800601c:	3730      	adds	r7, #48	; 0x30
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20014434 	.word	0x20014434

08006028 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006028:	b580      	push	{r7, lr}
 800602a:	b08e      	sub	sp, #56	; 0x38
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006036:	f3ef 8311 	mrs	r3, BASEPRI
 800603a:	f04f 0120 	mov.w	r1, #32
 800603e:	f381 8811 	msr	BASEPRI, r1
 8006042:	61fb      	str	r3, [r7, #28]
 8006044:	4832      	ldr	r0, [pc, #200]	; (8006110 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006046:	f7ff fc86 	bl	8005956 <_PreparePacket>
 800604a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	637b      	str	r3, [r7, #52]	; 0x34
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	633b      	str	r3, [r7, #48]	; 0x30
 8006058:	e00b      	b.n	8006072 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	b2da      	uxtb	r2, r3
 800605e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006060:	1c59      	adds	r1, r3, #1
 8006062:	6379      	str	r1, [r7, #52]	; 0x34
 8006064:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	701a      	strb	r2, [r3, #0]
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	09db      	lsrs	r3, r3, #7
 8006070:	633b      	str	r3, [r7, #48]	; 0x30
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	2b7f      	cmp	r3, #127	; 0x7f
 8006076:	d8f0      	bhi.n	800605a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	637a      	str	r2, [r7, #52]	; 0x34
 800607e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006086:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006090:	e00b      	b.n	80060aa <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	b2da      	uxtb	r2, r3
 8006096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006098:	1c59      	adds	r1, r3, #1
 800609a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800609c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	701a      	strb	r2, [r3, #0]
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	09db      	lsrs	r3, r3, #7
 80060a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ac:	2b7f      	cmp	r3, #127	; 0x7f
 80060ae:	d8f0      	bhi.n	8006092 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80060b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060b8:	b2d2      	uxtb	r2, r2
 80060ba:	701a      	strb	r2, [r3, #0]
 80060bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	627b      	str	r3, [r7, #36]	; 0x24
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	623b      	str	r3, [r7, #32]
 80060c8:	e00b      	b.n	80060e2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	1c59      	adds	r1, r3, #1
 80060d2:	6279      	str	r1, [r7, #36]	; 0x24
 80060d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060d8:	b2d2      	uxtb	r2, r2
 80060da:	701a      	strb	r2, [r3, #0]
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	09db      	lsrs	r3, r3, #7
 80060e0:	623b      	str	r3, [r7, #32]
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	2b7f      	cmp	r3, #127	; 0x7f
 80060e6:	d8f0      	bhi.n	80060ca <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	627a      	str	r2, [r7, #36]	; 0x24
 80060ee:	6a3a      	ldr	r2, [r7, #32]
 80060f0:	b2d2      	uxtb	r2, r2
 80060f2:	701a      	strb	r2, [r3, #0]
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	6979      	ldr	r1, [r7, #20]
 80060fc:	69b8      	ldr	r0, [r7, #24]
 80060fe:	f7ff fd1b 	bl	8005b38 <_SendPacket>
  RECORD_END();
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	f383 8811 	msr	BASEPRI, r3
}
 8006108:	bf00      	nop
 800610a:	3738      	adds	r7, #56	; 0x38
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	20014434 	.word	0x20014434

08006114 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006114:	b580      	push	{r7, lr}
 8006116:	b090      	sub	sp, #64	; 0x40
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006122:	f3ef 8311 	mrs	r3, BASEPRI
 8006126:	f04f 0120 	mov.w	r1, #32
 800612a:	f381 8811 	msr	BASEPRI, r1
 800612e:	61fb      	str	r3, [r7, #28]
 8006130:	4840      	ldr	r0, [pc, #256]	; (8006234 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006132:	f7ff fc10 	bl	8005956 <_PreparePacket>
 8006136:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	63bb      	str	r3, [r7, #56]	; 0x38
 8006144:	e00b      	b.n	800615e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	b2da      	uxtb	r2, r3
 800614a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614c:	1c59      	adds	r1, r3, #1
 800614e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006150:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	701a      	strb	r2, [r3, #0]
 8006158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615a:	09db      	lsrs	r3, r3, #7
 800615c:	63bb      	str	r3, [r7, #56]	; 0x38
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	2b7f      	cmp	r3, #127	; 0x7f
 8006162:	d8f0      	bhi.n	8006146 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	63fa      	str	r2, [r7, #60]	; 0x3c
 800616a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800616c:	b2d2      	uxtb	r2, r2
 800616e:	701a      	strb	r2, [r3, #0]
 8006170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006172:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	637b      	str	r3, [r7, #52]	; 0x34
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	633b      	str	r3, [r7, #48]	; 0x30
 800617c:	e00b      	b.n	8006196 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	b2da      	uxtb	r2, r3
 8006182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006184:	1c59      	adds	r1, r3, #1
 8006186:	6379      	str	r1, [r7, #52]	; 0x34
 8006188:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	09db      	lsrs	r3, r3, #7
 8006194:	633b      	str	r3, [r7, #48]	; 0x30
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	2b7f      	cmp	r3, #127	; 0x7f
 800619a:	d8f0      	bhi.n	800617e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800619c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	637a      	str	r2, [r7, #52]	; 0x34
 80061a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	701a      	strb	r2, [r3, #0]
 80061a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80061b4:	e00b      	b.n	80061ce <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80061b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061bc:	1c59      	adds	r1, r3, #1
 80061be:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	09db      	lsrs	r3, r3, #7
 80061cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d0:	2b7f      	cmp	r3, #127	; 0x7f
 80061d2:	d8f0      	bhi.n	80061b6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
 80061e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ea:	623b      	str	r3, [r7, #32]
 80061ec:	e00b      	b.n	8006206 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	1c59      	adds	r1, r3, #1
 80061f6:	6279      	str	r1, [r7, #36]	; 0x24
 80061f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	701a      	strb	r2, [r3, #0]
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	09db      	lsrs	r3, r3, #7
 8006204:	623b      	str	r3, [r7, #32]
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	2b7f      	cmp	r3, #127	; 0x7f
 800620a:	d8f0      	bhi.n	80061ee <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	627a      	str	r2, [r7, #36]	; 0x24
 8006212:	6a3a      	ldr	r2, [r7, #32]
 8006214:	b2d2      	uxtb	r2, r2
 8006216:	701a      	strb	r2, [r3, #0]
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	6979      	ldr	r1, [r7, #20]
 8006220:	69b8      	ldr	r0, [r7, #24]
 8006222:	f7ff fc89 	bl	8005b38 <_SendPacket>
  RECORD_END();
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	f383 8811 	msr	BASEPRI, r3
}
 800622c:	bf00      	nop
 800622e:	3740      	adds	r7, #64	; 0x40
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	20014434 	.word	0x20014434

08006238 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006238:	b580      	push	{r7, lr}
 800623a:	b08c      	sub	sp, #48	; 0x30
 800623c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800623e:	4b59      	ldr	r3, [pc, #356]	; (80063a4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006240:	2201      	movs	r2, #1
 8006242:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006244:	f3ef 8311 	mrs	r3, BASEPRI
 8006248:	f04f 0120 	mov.w	r1, #32
 800624c:	f381 8811 	msr	BASEPRI, r1
 8006250:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006252:	4b54      	ldr	r3, [pc, #336]	; (80063a4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006254:	785b      	ldrb	r3, [r3, #1]
 8006256:	220a      	movs	r2, #10
 8006258:	4953      	ldr	r1, [pc, #332]	; (80063a8 <SEGGER_SYSVIEW_Start+0x170>)
 800625a:	4618      	mov	r0, r3
 800625c:	f7f9 fff0 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006266:	f7fe fec9 	bl	8004ffc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800626a:	200a      	movs	r0, #10
 800626c:	f7ff fe28 	bl	8005ec0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006270:	f3ef 8311 	mrs	r3, BASEPRI
 8006274:	f04f 0120 	mov.w	r1, #32
 8006278:	f381 8811 	msr	BASEPRI, r1
 800627c:	60bb      	str	r3, [r7, #8]
 800627e:	484b      	ldr	r0, [pc, #300]	; (80063ac <SEGGER_SYSVIEW_Start+0x174>)
 8006280:	f7ff fb69 	bl	8005956 <_PreparePacket>
 8006284:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800628e:	4b45      	ldr	r3, [pc, #276]	; (80063a4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	62bb      	str	r3, [r7, #40]	; 0x28
 8006294:	e00b      	b.n	80062ae <SEGGER_SYSVIEW_Start+0x76>
 8006296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006298:	b2da      	uxtb	r2, r3
 800629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629c:	1c59      	adds	r1, r3, #1
 800629e:	62f9      	str	r1, [r7, #44]	; 0x2c
 80062a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	701a      	strb	r2, [r3, #0]
 80062a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062aa:	09db      	lsrs	r3, r3, #7
 80062ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	2b7f      	cmp	r3, #127	; 0x7f
 80062b2:	d8f0      	bhi.n	8006296 <SEGGER_SYSVIEW_Start+0x5e>
 80062b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	701a      	strb	r2, [r3, #0]
 80062c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
 80062c8:	4b36      	ldr	r3, [pc, #216]	; (80063a4 <SEGGER_SYSVIEW_Start+0x16c>)
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	623b      	str	r3, [r7, #32]
 80062ce:	e00b      	b.n	80062e8 <SEGGER_SYSVIEW_Start+0xb0>
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	1c59      	adds	r1, r3, #1
 80062d8:	6279      	str	r1, [r7, #36]	; 0x24
 80062da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	09db      	lsrs	r3, r3, #7
 80062e6:	623b      	str	r3, [r7, #32]
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	2b7f      	cmp	r3, #127	; 0x7f
 80062ec:	d8f0      	bhi.n	80062d0 <SEGGER_SYSVIEW_Start+0x98>
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	1c5a      	adds	r2, r3, #1
 80062f2:	627a      	str	r2, [r7, #36]	; 0x24
 80062f4:	6a3a      	ldr	r2, [r7, #32]
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	61fb      	str	r3, [r7, #28]
 8006302:	4b28      	ldr	r3, [pc, #160]	; (80063a4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	61bb      	str	r3, [r7, #24]
 8006308:	e00b      	b.n	8006322 <SEGGER_SYSVIEW_Start+0xea>
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	b2da      	uxtb	r2, r3
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	1c59      	adds	r1, r3, #1
 8006312:	61f9      	str	r1, [r7, #28]
 8006314:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	701a      	strb	r2, [r3, #0]
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	09db      	lsrs	r3, r3, #7
 8006320:	61bb      	str	r3, [r7, #24]
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	2b7f      	cmp	r3, #127	; 0x7f
 8006326:	d8f0      	bhi.n	800630a <SEGGER_SYSVIEW_Start+0xd2>
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	61fa      	str	r2, [r7, #28]
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	701a      	strb	r2, [r3, #0]
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	617b      	str	r3, [r7, #20]
 800633c:	2300      	movs	r3, #0
 800633e:	613b      	str	r3, [r7, #16]
 8006340:	e00b      	b.n	800635a <SEGGER_SYSVIEW_Start+0x122>
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	b2da      	uxtb	r2, r3
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	1c59      	adds	r1, r3, #1
 800634a:	6179      	str	r1, [r7, #20]
 800634c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	701a      	strb	r2, [r3, #0]
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	09db      	lsrs	r3, r3, #7
 8006358:	613b      	str	r3, [r7, #16]
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	2b7f      	cmp	r3, #127	; 0x7f
 800635e:	d8f0      	bhi.n	8006342 <SEGGER_SYSVIEW_Start+0x10a>
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	617a      	str	r2, [r7, #20]
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	701a      	strb	r2, [r3, #0]
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006370:	2218      	movs	r2, #24
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f7ff fbdf 	bl	8005b38 <_SendPacket>
      RECORD_END();
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006380:	4b08      	ldr	r3, [pc, #32]	; (80063a4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006388:	4b06      	ldr	r3, [pc, #24]	; (80063a4 <SEGGER_SYSVIEW_Start+0x16c>)
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800638e:	f000 f9eb 	bl	8006768 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006392:	f000 f9b1 	bl	80066f8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006396:	f000 fc8d 	bl	8006cb4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800639a:	bf00      	nop
 800639c:	3730      	adds	r7, #48	; 0x30
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20014404 	.word	0x20014404
 80063a8:	08007a40 	.word	0x08007a40
 80063ac:	20014434 	.word	0x20014434

080063b0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063b6:	f3ef 8311 	mrs	r3, BASEPRI
 80063ba:	f04f 0120 	mov.w	r1, #32
 80063be:	f381 8811 	msr	BASEPRI, r1
 80063c2:	607b      	str	r3, [r7, #4]
 80063c4:	480b      	ldr	r0, [pc, #44]	; (80063f4 <SEGGER_SYSVIEW_Stop+0x44>)
 80063c6:	f7ff fac6 	bl	8005956 <_PreparePacket>
 80063ca:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80063cc:	4b0a      	ldr	r3, [pc, #40]	; (80063f8 <SEGGER_SYSVIEW_Stop+0x48>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d007      	beq.n	80063e4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80063d4:	220b      	movs	r2, #11
 80063d6:	6839      	ldr	r1, [r7, #0]
 80063d8:	6838      	ldr	r0, [r7, #0]
 80063da:	f7ff fbad 	bl	8005b38 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80063de:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <SEGGER_SYSVIEW_Stop+0x48>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f383 8811 	msr	BASEPRI, r3
}
 80063ea:	bf00      	nop
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	20014434 	.word	0x20014434
 80063f8:	20014404 	.word	0x20014404

080063fc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b08c      	sub	sp, #48	; 0x30
 8006400:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006402:	f3ef 8311 	mrs	r3, BASEPRI
 8006406:	f04f 0120 	mov.w	r1, #32
 800640a:	f381 8811 	msr	BASEPRI, r1
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	4845      	ldr	r0, [pc, #276]	; (8006528 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006412:	f7ff faa0 	bl	8005956 <_PreparePacket>
 8006416:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006420:	4b42      	ldr	r3, [pc, #264]	; (800652c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	62bb      	str	r3, [r7, #40]	; 0x28
 8006426:	e00b      	b.n	8006440 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	b2da      	uxtb	r2, r3
 800642c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642e:	1c59      	adds	r1, r3, #1
 8006430:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006432:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006436:	b2d2      	uxtb	r2, r2
 8006438:	701a      	strb	r2, [r3, #0]
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	09db      	lsrs	r3, r3, #7
 800643e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006442:	2b7f      	cmp	r3, #127	; 0x7f
 8006444:	d8f0      	bhi.n	8006428 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800644c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800644e:	b2d2      	uxtb	r2, r2
 8006450:	701a      	strb	r2, [r3, #0]
 8006452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006454:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	627b      	str	r3, [r7, #36]	; 0x24
 800645a:	4b34      	ldr	r3, [pc, #208]	; (800652c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	623b      	str	r3, [r7, #32]
 8006460:	e00b      	b.n	800647a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	b2da      	uxtb	r2, r3
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	1c59      	adds	r1, r3, #1
 800646a:	6279      	str	r1, [r7, #36]	; 0x24
 800646c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006470:	b2d2      	uxtb	r2, r2
 8006472:	701a      	strb	r2, [r3, #0]
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	09db      	lsrs	r3, r3, #7
 8006478:	623b      	str	r3, [r7, #32]
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	2b7f      	cmp	r3, #127	; 0x7f
 800647e:	d8f0      	bhi.n	8006462 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	627a      	str	r2, [r7, #36]	; 0x24
 8006486:	6a3a      	ldr	r2, [r7, #32]
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	61fb      	str	r3, [r7, #28]
 8006494:	4b25      	ldr	r3, [pc, #148]	; (800652c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	61bb      	str	r3, [r7, #24]
 800649a:	e00b      	b.n	80064b4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	1c59      	adds	r1, r3, #1
 80064a4:	61f9      	str	r1, [r7, #28]
 80064a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064aa:	b2d2      	uxtb	r2, r2
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	09db      	lsrs	r3, r3, #7
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	2b7f      	cmp	r3, #127	; 0x7f
 80064b8:	d8f0      	bhi.n	800649c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	1c5a      	adds	r2, r3, #1
 80064be:	61fa      	str	r2, [r7, #28]
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	b2d2      	uxtb	r2, r2
 80064c4:	701a      	strb	r2, [r3, #0]
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	617b      	str	r3, [r7, #20]
 80064ce:	2300      	movs	r3, #0
 80064d0:	613b      	str	r3, [r7, #16]
 80064d2:	e00b      	b.n	80064ec <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	1c59      	adds	r1, r3, #1
 80064dc:	6179      	str	r1, [r7, #20]
 80064de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	09db      	lsrs	r3, r3, #7
 80064ea:	613b      	str	r3, [r7, #16]
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	2b7f      	cmp	r3, #127	; 0x7f
 80064f0:	d8f0      	bhi.n	80064d4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	617a      	str	r2, [r7, #20]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	701a      	strb	r2, [r3, #0]
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006502:	2218      	movs	r2, #24
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	68b8      	ldr	r0, [r7, #8]
 8006508:	f7ff fb16 	bl	8005b38 <_SendPacket>
  RECORD_END();
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006512:	4b06      	ldr	r3, [pc, #24]	; (800652c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800651a:	4b04      	ldr	r3, [pc, #16]	; (800652c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	4798      	blx	r3
  }
}
 8006520:	bf00      	nop
 8006522:	3730      	adds	r7, #48	; 0x30
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	20014434 	.word	0x20014434
 800652c:	20014404 	.word	0x20014404

08006530 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006530:	b580      	push	{r7, lr}
 8006532:	b092      	sub	sp, #72	; 0x48
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006538:	f3ef 8311 	mrs	r3, BASEPRI
 800653c:	f04f 0120 	mov.w	r1, #32
 8006540:	f381 8811 	msr	BASEPRI, r1
 8006544:	617b      	str	r3, [r7, #20]
 8006546:	486a      	ldr	r0, [pc, #424]	; (80066f0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006548:	f7ff fa05 	bl	8005956 <_PreparePacket>
 800654c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	647b      	str	r3, [r7, #68]	; 0x44
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	4b66      	ldr	r3, [pc, #408]	; (80066f4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	643b      	str	r3, [r7, #64]	; 0x40
 8006562:	e00b      	b.n	800657c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006566:	b2da      	uxtb	r2, r3
 8006568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800656a:	1c59      	adds	r1, r3, #1
 800656c:	6479      	str	r1, [r7, #68]	; 0x44
 800656e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	701a      	strb	r2, [r3, #0]
 8006576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006578:	09db      	lsrs	r3, r3, #7
 800657a:	643b      	str	r3, [r7, #64]	; 0x40
 800657c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800657e:	2b7f      	cmp	r3, #127	; 0x7f
 8006580:	d8f0      	bhi.n	8006564 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	647a      	str	r2, [r7, #68]	; 0x44
 8006588:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006590:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	63bb      	str	r3, [r7, #56]	; 0x38
 800659c:	e00b      	b.n	80065b6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800659e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a4:	1c59      	adds	r1, r3, #1
 80065a6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80065a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	701a      	strb	r2, [r3, #0]
 80065b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b2:	09db      	lsrs	r3, r3, #7
 80065b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	2b7f      	cmp	r3, #127	; 0x7f
 80065ba:	d8f0      	bhi.n	800659e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80065bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065c4:	b2d2      	uxtb	r2, r2
 80065c6:	701a      	strb	r2, [r3, #0]
 80065c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ca:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	4619      	mov	r1, r3
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f7ff f985 	bl	80058e4 <_EncodeStr>
 80065da:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80065dc:	2209      	movs	r2, #9
 80065de:	68f9      	ldr	r1, [r7, #12]
 80065e0:	6938      	ldr	r0, [r7, #16]
 80065e2:	f7ff faa9 	bl	8005b38 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	637b      	str	r3, [r7, #52]	; 0x34
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	4b40      	ldr	r3, [pc, #256]	; (80066f4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	633b      	str	r3, [r7, #48]	; 0x30
 80065fa:	e00b      	b.n	8006614 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80065fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006602:	1c59      	adds	r1, r3, #1
 8006604:	6379      	str	r1, [r7, #52]	; 0x34
 8006606:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	09db      	lsrs	r3, r3, #7
 8006612:	633b      	str	r3, [r7, #48]	; 0x30
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	2b7f      	cmp	r3, #127	; 0x7f
 8006618:	d8f0      	bhi.n	80065fc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800661a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	637a      	str	r2, [r7, #52]	; 0x34
 8006620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006622:	b2d2      	uxtb	r2, r2
 8006624:	701a      	strb	r2, [r3, #0]
 8006626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006628:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	62bb      	str	r3, [r7, #40]	; 0x28
 8006634:	e00b      	b.n	800664e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	b2da      	uxtb	r2, r3
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	1c59      	adds	r1, r3, #1
 800663e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006640:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006644:	b2d2      	uxtb	r2, r2
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	09db      	lsrs	r3, r3, #7
 800664c:	62bb      	str	r3, [r7, #40]	; 0x28
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006650:	2b7f      	cmp	r3, #127	; 0x7f
 8006652:	d8f0      	bhi.n	8006636 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	62fa      	str	r2, [r7, #44]	; 0x2c
 800665a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800665c:	b2d2      	uxtb	r2, r2
 800665e:	701a      	strb	r2, [r3, #0]
 8006660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006662:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	623b      	str	r3, [r7, #32]
 800666e:	e00b      	b.n	8006688 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	b2da      	uxtb	r2, r3
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	1c59      	adds	r1, r3, #1
 8006678:	6279      	str	r1, [r7, #36]	; 0x24
 800667a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800667e:	b2d2      	uxtb	r2, r2
 8006680:	701a      	strb	r2, [r3, #0]
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	09db      	lsrs	r3, r3, #7
 8006686:	623b      	str	r3, [r7, #32]
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	2b7f      	cmp	r3, #127	; 0x7f
 800668c:	d8f0      	bhi.n	8006670 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	1c5a      	adds	r2, r3, #1
 8006692:	627a      	str	r2, [r7, #36]	; 0x24
 8006694:	6a3a      	ldr	r2, [r7, #32]
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	61fb      	str	r3, [r7, #28]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	61bb      	str	r3, [r7, #24]
 80066a8:	e00b      	b.n	80066c2 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	1c59      	adds	r1, r3, #1
 80066b2:	61f9      	str	r1, [r7, #28]
 80066b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066b8:	b2d2      	uxtb	r2, r2
 80066ba:	701a      	strb	r2, [r3, #0]
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	09db      	lsrs	r3, r3, #7
 80066c0:	61bb      	str	r3, [r7, #24]
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	2b7f      	cmp	r3, #127	; 0x7f
 80066c6:	d8f0      	bhi.n	80066aa <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	61fa      	str	r2, [r7, #28]
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	b2d2      	uxtb	r2, r2
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80066d8:	2215      	movs	r2, #21
 80066da:	68f9      	ldr	r1, [r7, #12]
 80066dc:	6938      	ldr	r0, [r7, #16]
 80066de:	f7ff fa2b 	bl	8005b38 <_SendPacket>
  RECORD_END();
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f383 8811 	msr	BASEPRI, r3
}
 80066e8:	bf00      	nop
 80066ea:	3748      	adds	r7, #72	; 0x48
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	20014434 	.word	0x20014434
 80066f4:	20014404 	.word	0x20014404

080066f8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80066fc:	4b07      	ldr	r3, [pc, #28]	; (800671c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d008      	beq.n	8006716 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006704:	4b05      	ldr	r3, [pc, #20]	; (800671c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800670e:	4b03      	ldr	r3, [pc, #12]	; (800671c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	4798      	blx	r3
  }
}
 8006716:	bf00      	nop
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	20014404 	.word	0x20014404

08006720 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006728:	f3ef 8311 	mrs	r3, BASEPRI
 800672c:	f04f 0120 	mov.w	r1, #32
 8006730:	f381 8811 	msr	BASEPRI, r1
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	480b      	ldr	r0, [pc, #44]	; (8006764 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006738:	f7ff f90d 	bl	8005956 <_PreparePacket>
 800673c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800673e:	2280      	movs	r2, #128	; 0x80
 8006740:	6879      	ldr	r1, [r7, #4]
 8006742:	6938      	ldr	r0, [r7, #16]
 8006744:	f7ff f8ce 	bl	80058e4 <_EncodeStr>
 8006748:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800674a:	220e      	movs	r2, #14
 800674c:	68f9      	ldr	r1, [r7, #12]
 800674e:	6938      	ldr	r0, [r7, #16]
 8006750:	f7ff f9f2 	bl	8005b38 <_SendPacket>
  RECORD_END();
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f383 8811 	msr	BASEPRI, r3
}
 800675a:	bf00      	nop
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20014434 	.word	0x20014434

08006768 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006768:	b590      	push	{r4, r7, lr}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800676e:	4b15      	ldr	r3, [pc, #84]	; (80067c4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d01a      	beq.n	80067ac <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006776:	4b13      	ldr	r3, [pc, #76]	; (80067c4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d015      	beq.n	80067ac <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006780:	4b10      	ldr	r3, [pc, #64]	; (80067c4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4798      	blx	r3
 8006788:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800678c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800678e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006792:	f04f 0200 	mov.w	r2, #0
 8006796:	f04f 0300 	mov.w	r3, #0
 800679a:	000a      	movs	r2, r1
 800679c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800679e:	4613      	mov	r3, r2
 80067a0:	461a      	mov	r2, r3
 80067a2:	4621      	mov	r1, r4
 80067a4:	200d      	movs	r0, #13
 80067a6:	f7ff fbe5 	bl	8005f74 <SEGGER_SYSVIEW_RecordU32x2>
 80067aa:	e006      	b.n	80067ba <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80067ac:	4b06      	ldr	r3, [pc, #24]	; (80067c8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4619      	mov	r1, r3
 80067b2:	200c      	movs	r0, #12
 80067b4:	f7ff fba2 	bl	8005efc <SEGGER_SYSVIEW_RecordU32>
  }
}
 80067b8:	bf00      	nop
 80067ba:	bf00      	nop
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd90      	pop	{r4, r7, pc}
 80067c2:	bf00      	nop
 80067c4:	20014404 	.word	0x20014404
 80067c8:	e0001004 	.word	0xe0001004

080067cc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067d2:	f3ef 8311 	mrs	r3, BASEPRI
 80067d6:	f04f 0120 	mov.w	r1, #32
 80067da:	f381 8811 	msr	BASEPRI, r1
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	4819      	ldr	r0, [pc, #100]	; (8006848 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80067e2:	f7ff f8b8 	bl	8005956 <_PreparePacket>
 80067e6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80067ec:	4b17      	ldr	r3, [pc, #92]	; (800684c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	617b      	str	r3, [r7, #20]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	613b      	str	r3, [r7, #16]
 80067fe:	e00b      	b.n	8006818 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	b2da      	uxtb	r2, r3
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	1c59      	adds	r1, r3, #1
 8006808:	6179      	str	r1, [r7, #20]
 800680a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800680e:	b2d2      	uxtb	r2, r2
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	09db      	lsrs	r3, r3, #7
 8006816:	613b      	str	r3, [r7, #16]
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	2b7f      	cmp	r3, #127	; 0x7f
 800681c:	d8f0      	bhi.n	8006800 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	617a      	str	r2, [r7, #20]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800682e:	2202      	movs	r2, #2
 8006830:	6879      	ldr	r1, [r7, #4]
 8006832:	68b8      	ldr	r0, [r7, #8]
 8006834:	f7ff f980 	bl	8005b38 <_SendPacket>
  RECORD_END();
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f383 8811 	msr	BASEPRI, r3
}
 800683e:	bf00      	nop
 8006840:	3718      	adds	r7, #24
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	20014434 	.word	0x20014434
 800684c:	e000ed04 	.word	0xe000ed04

08006850 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006856:	f3ef 8311 	mrs	r3, BASEPRI
 800685a:	f04f 0120 	mov.w	r1, #32
 800685e:	f381 8811 	msr	BASEPRI, r1
 8006862:	607b      	str	r3, [r7, #4]
 8006864:	4807      	ldr	r0, [pc, #28]	; (8006884 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006866:	f7ff f876 	bl	8005956 <_PreparePacket>
 800686a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800686c:	2203      	movs	r2, #3
 800686e:	6839      	ldr	r1, [r7, #0]
 8006870:	6838      	ldr	r0, [r7, #0]
 8006872:	f7ff f961 	bl	8005b38 <_SendPacket>
  RECORD_END();
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f383 8811 	msr	BASEPRI, r3
}
 800687c:	bf00      	nop
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	20014434 	.word	0x20014434

08006888 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800688e:	f3ef 8311 	mrs	r3, BASEPRI
 8006892:	f04f 0120 	mov.w	r1, #32
 8006896:	f381 8811 	msr	BASEPRI, r1
 800689a:	607b      	str	r3, [r7, #4]
 800689c:	4807      	ldr	r0, [pc, #28]	; (80068bc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800689e:	f7ff f85a 	bl	8005956 <_PreparePacket>
 80068a2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80068a4:	2212      	movs	r2, #18
 80068a6:	6839      	ldr	r1, [r7, #0]
 80068a8:	6838      	ldr	r0, [r7, #0]
 80068aa:	f7ff f945 	bl	8005b38 <_SendPacket>
  RECORD_END();
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f383 8811 	msr	BASEPRI, r3
}
 80068b4:	bf00      	nop
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	20014434 	.word	0x20014434

080068c0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80068c6:	f3ef 8311 	mrs	r3, BASEPRI
 80068ca:	f04f 0120 	mov.w	r1, #32
 80068ce:	f381 8811 	msr	BASEPRI, r1
 80068d2:	607b      	str	r3, [r7, #4]
 80068d4:	4807      	ldr	r0, [pc, #28]	; (80068f4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80068d6:	f7ff f83e 	bl	8005956 <_PreparePacket>
 80068da:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80068dc:	2211      	movs	r2, #17
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6838      	ldr	r0, [r7, #0]
 80068e2:	f7ff f929 	bl	8005b38 <_SendPacket>
  RECORD_END();
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f383 8811 	msr	BASEPRI, r3
}
 80068ec:	bf00      	nop
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	20014434 	.word	0x20014434

080068f8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006900:	f3ef 8311 	mrs	r3, BASEPRI
 8006904:	f04f 0120 	mov.w	r1, #32
 8006908:	f381 8811 	msr	BASEPRI, r1
 800690c:	617b      	str	r3, [r7, #20]
 800690e:	4819      	ldr	r0, [pc, #100]	; (8006974 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006910:	f7ff f821 	bl	8005956 <_PreparePacket>
 8006914:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800691a:	4b17      	ldr	r3, [pc, #92]	; (8006978 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	61fb      	str	r3, [r7, #28]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	61bb      	str	r3, [r7, #24]
 800692c:	e00b      	b.n	8006946 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	b2da      	uxtb	r2, r3
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	1c59      	adds	r1, r3, #1
 8006936:	61f9      	str	r1, [r7, #28]
 8006938:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800693c:	b2d2      	uxtb	r2, r2
 800693e:	701a      	strb	r2, [r3, #0]
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	09db      	lsrs	r3, r3, #7
 8006944:	61bb      	str	r3, [r7, #24]
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	2b7f      	cmp	r3, #127	; 0x7f
 800694a:	d8f0      	bhi.n	800692e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	1c5a      	adds	r2, r3, #1
 8006950:	61fa      	str	r2, [r7, #28]
 8006952:	69ba      	ldr	r2, [r7, #24]
 8006954:	b2d2      	uxtb	r2, r2
 8006956:	701a      	strb	r2, [r3, #0]
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800695c:	2208      	movs	r2, #8
 800695e:	68f9      	ldr	r1, [r7, #12]
 8006960:	6938      	ldr	r0, [r7, #16]
 8006962:	f7ff f8e9 	bl	8005b38 <_SendPacket>
  RECORD_END();
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f383 8811 	msr	BASEPRI, r3
}
 800696c:	bf00      	nop
 800696e:	3720      	adds	r7, #32
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	20014434 	.word	0x20014434
 8006978:	20014404 	.word	0x20014404

0800697c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006984:	f3ef 8311 	mrs	r3, BASEPRI
 8006988:	f04f 0120 	mov.w	r1, #32
 800698c:	f381 8811 	msr	BASEPRI, r1
 8006990:	617b      	str	r3, [r7, #20]
 8006992:	4819      	ldr	r0, [pc, #100]	; (80069f8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006994:	f7fe ffdf 	bl	8005956 <_PreparePacket>
 8006998:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800699e:	4b17      	ldr	r3, [pc, #92]	; (80069fc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	61fb      	str	r3, [r7, #28]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	61bb      	str	r3, [r7, #24]
 80069b0:	e00b      	b.n	80069ca <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	1c59      	adds	r1, r3, #1
 80069ba:	61f9      	str	r1, [r7, #28]
 80069bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	701a      	strb	r2, [r3, #0]
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	09db      	lsrs	r3, r3, #7
 80069c8:	61bb      	str	r3, [r7, #24]
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	2b7f      	cmp	r3, #127	; 0x7f
 80069ce:	d8f0      	bhi.n	80069b2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	61fa      	str	r2, [r7, #28]
 80069d6:	69ba      	ldr	r2, [r7, #24]
 80069d8:	b2d2      	uxtb	r2, r2
 80069da:	701a      	strb	r2, [r3, #0]
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80069e0:	2204      	movs	r2, #4
 80069e2:	68f9      	ldr	r1, [r7, #12]
 80069e4:	6938      	ldr	r0, [r7, #16]
 80069e6:	f7ff f8a7 	bl	8005b38 <_SendPacket>
  RECORD_END();
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f383 8811 	msr	BASEPRI, r3
}
 80069f0:	bf00      	nop
 80069f2:	3720      	adds	r7, #32
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20014434 	.word	0x20014434
 80069fc:	20014404 	.word	0x20014404

08006a00 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b088      	sub	sp, #32
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a08:	f3ef 8311 	mrs	r3, BASEPRI
 8006a0c:	f04f 0120 	mov.w	r1, #32
 8006a10:	f381 8811 	msr	BASEPRI, r1
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	4819      	ldr	r0, [pc, #100]	; (8006a7c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006a18:	f7fe ff9d 	bl	8005956 <_PreparePacket>
 8006a1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a22:	4b17      	ldr	r3, [pc, #92]	; (8006a80 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	61fb      	str	r3, [r7, #28]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	61bb      	str	r3, [r7, #24]
 8006a34:	e00b      	b.n	8006a4e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	1c59      	adds	r1, r3, #1
 8006a3e:	61f9      	str	r1, [r7, #28]
 8006a40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	701a      	strb	r2, [r3, #0]
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	09db      	lsrs	r3, r3, #7
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	2b7f      	cmp	r3, #127	; 0x7f
 8006a52:	d8f0      	bhi.n	8006a36 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	61fa      	str	r2, [r7, #28]
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	b2d2      	uxtb	r2, r2
 8006a5e:	701a      	strb	r2, [r3, #0]
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006a64:	2206      	movs	r2, #6
 8006a66:	68f9      	ldr	r1, [r7, #12]
 8006a68:	6938      	ldr	r0, [r7, #16]
 8006a6a:	f7ff f865 	bl	8005b38 <_SendPacket>
  RECORD_END();
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f383 8811 	msr	BASEPRI, r3
}
 8006a74:	bf00      	nop
 8006a76:	3720      	adds	r7, #32
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	20014434 	.word	0x20014434
 8006a80:	20014404 	.word	0x20014404

08006a84 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08a      	sub	sp, #40	; 0x28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a8e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a92:	f04f 0120 	mov.w	r1, #32
 8006a96:	f381 8811 	msr	BASEPRI, r1
 8006a9a:	617b      	str	r3, [r7, #20]
 8006a9c:	4827      	ldr	r0, [pc, #156]	; (8006b3c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006a9e:	f7fe ff5a 	bl	8005956 <_PreparePacket>
 8006aa2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006aa8:	4b25      	ldr	r3, [pc, #148]	; (8006b40 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	623b      	str	r3, [r7, #32]
 8006aba:	e00b      	b.n	8006ad4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	1c59      	adds	r1, r3, #1
 8006ac4:	6279      	str	r1, [r7, #36]	; 0x24
 8006ac6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	09db      	lsrs	r3, r3, #7
 8006ad2:	623b      	str	r3, [r7, #32]
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ad8:	d8f0      	bhi.n	8006abc <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	627a      	str	r2, [r7, #36]	; 0x24
 8006ae0:	6a3a      	ldr	r2, [r7, #32]
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	61fb      	str	r3, [r7, #28]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	61bb      	str	r3, [r7, #24]
 8006af2:	e00b      	b.n	8006b0c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	1c59      	adds	r1, r3, #1
 8006afc:	61f9      	str	r1, [r7, #28]
 8006afe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b02:	b2d2      	uxtb	r2, r2
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	09db      	lsrs	r3, r3, #7
 8006b0a:	61bb      	str	r3, [r7, #24]
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b10:	d8f0      	bhi.n	8006af4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	61fa      	str	r2, [r7, #28]
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	b2d2      	uxtb	r2, r2
 8006b1c:	701a      	strb	r2, [r3, #0]
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006b22:	2207      	movs	r2, #7
 8006b24:	68f9      	ldr	r1, [r7, #12]
 8006b26:	6938      	ldr	r0, [r7, #16]
 8006b28:	f7ff f806 	bl	8005b38 <_SendPacket>
  RECORD_END();
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	f383 8811 	msr	BASEPRI, r3
}
 8006b32:	bf00      	nop
 8006b34:	3728      	adds	r7, #40	; 0x28
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20014434 	.word	0x20014434
 8006b40:	20014404 	.word	0x20014404

08006b44 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006b4c:	4b04      	ldr	r3, [pc, #16]	; (8006b60 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	1ad3      	subs	r3, r2, r3
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	20014404 	.word	0x20014404

08006b64 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08c      	sub	sp, #48	; 0x30
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006b6e:	4b40      	ldr	r3, [pc, #256]	; (8006c70 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d077      	beq.n	8006c66 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006b76:	4b3e      	ldr	r3, [pc, #248]	; (8006c70 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b80:	e008      	b.n	8006b94 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d007      	beq.n	8006b9e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	3301      	adds	r3, #1
 8006b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b94:	79fb      	ldrb	r3, [r7, #7]
 8006b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d3f2      	bcc.n	8006b82 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006b9c:	e000      	b.n	8006ba0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006b9e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d055      	beq.n	8006c52 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ba6:	f3ef 8311 	mrs	r3, BASEPRI
 8006baa:	f04f 0120 	mov.w	r1, #32
 8006bae:	f381 8811 	msr	BASEPRI, r1
 8006bb2:	617b      	str	r3, [r7, #20]
 8006bb4:	482f      	ldr	r0, [pc, #188]	; (8006c74 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006bb6:	f7fe fece 	bl	8005956 <_PreparePacket>
 8006bba:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc4:	79fb      	ldrb	r3, [r7, #7]
 8006bc6:	623b      	str	r3, [r7, #32]
 8006bc8:	e00b      	b.n	8006be2 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	1c59      	adds	r1, r3, #1
 8006bd2:	6279      	str	r1, [r7, #36]	; 0x24
 8006bd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bd8:	b2d2      	uxtb	r2, r2
 8006bda:	701a      	strb	r2, [r3, #0]
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	09db      	lsrs	r3, r3, #7
 8006be0:	623b      	str	r3, [r7, #32]
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	2b7f      	cmp	r3, #127	; 0x7f
 8006be6:	d8f0      	bhi.n	8006bca <SEGGER_SYSVIEW_SendModule+0x66>
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	627a      	str	r2, [r7, #36]	; 0x24
 8006bee:	6a3a      	ldr	r2, [r7, #32]
 8006bf0:	b2d2      	uxtb	r2, r2
 8006bf2:	701a      	strb	r2, [r3, #0]
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	61fb      	str	r3, [r7, #28]
 8006bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	61bb      	str	r3, [r7, #24]
 8006c02:	e00b      	b.n	8006c1c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	1c59      	adds	r1, r3, #1
 8006c0c:	61f9      	str	r1, [r7, #28]
 8006c0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	701a      	strb	r2, [r3, #0]
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	09db      	lsrs	r3, r3, #7
 8006c1a:	61bb      	str	r3, [r7, #24]
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c20:	d8f0      	bhi.n	8006c04 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	61fa      	str	r2, [r7, #28]
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	b2d2      	uxtb	r2, r2
 8006c2c:	701a      	strb	r2, [r3, #0]
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2280      	movs	r2, #128	; 0x80
 8006c38:	4619      	mov	r1, r3
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f7fe fe52 	bl	80058e4 <_EncodeStr>
 8006c40:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006c42:	2216      	movs	r2, #22
 8006c44:	68f9      	ldr	r1, [r7, #12]
 8006c46:	6938      	ldr	r0, [r7, #16]
 8006c48:	f7fe ff76 	bl	8005b38 <_SendPacket>
      RECORD_END();
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d006      	beq.n	8006c66 <SEGGER_SYSVIEW_SendModule+0x102>
 8006c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	4798      	blx	r3
    }
  }
}
 8006c66:	bf00      	nop
 8006c68:	3730      	adds	r7, #48	; 0x30
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	2001442c 	.word	0x2001442c
 8006c74:	20014434 	.word	0x20014434

08006c78 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006c7e:	4b0c      	ldr	r3, [pc, #48]	; (8006cb0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00f      	beq.n	8006ca6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006c86:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1f2      	bne.n	8006c8c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006ca6:	bf00      	nop
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	2001442c 	.word	0x2001442c

08006cb4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006cba:	f3ef 8311 	mrs	r3, BASEPRI
 8006cbe:	f04f 0120 	mov.w	r1, #32
 8006cc2:	f381 8811 	msr	BASEPRI, r1
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	4817      	ldr	r0, [pc, #92]	; (8006d28 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006cca:	f7fe fe44 	bl	8005956 <_PreparePacket>
 8006cce:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	4b14      	ldr	r3, [pc, #80]	; (8006d2c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	613b      	str	r3, [r7, #16]
 8006cde:	e00b      	b.n	8006cf8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	1c59      	adds	r1, r3, #1
 8006ce8:	6179      	str	r1, [r7, #20]
 8006cea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	701a      	strb	r2, [r3, #0]
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	09db      	lsrs	r3, r3, #7
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8006cfc:	d8f0      	bhi.n	8006ce0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	617a      	str	r2, [r7, #20]
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	701a      	strb	r2, [r3, #0]
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006d0e:	221b      	movs	r2, #27
 8006d10:	6879      	ldr	r1, [r7, #4]
 8006d12:	68b8      	ldr	r0, [r7, #8]
 8006d14:	f7fe ff10 	bl	8005b38 <_SendPacket>
  RECORD_END();
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f383 8811 	msr	BASEPRI, r3
}
 8006d1e:	bf00      	nop
 8006d20:	3718      	adds	r7, #24
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	20014434 	.word	0x20014434
 8006d2c:	20014430 	.word	0x20014430

08006d30 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08a      	sub	sp, #40	; 0x28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d38:	f3ef 8311 	mrs	r3, BASEPRI
 8006d3c:	f04f 0120 	mov.w	r1, #32
 8006d40:	f381 8811 	msr	BASEPRI, r1
 8006d44:	617b      	str	r3, [r7, #20]
 8006d46:	4827      	ldr	r0, [pc, #156]	; (8006de4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006d48:	f7fe fe05 	bl	8005956 <_PreparePacket>
 8006d4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d4e:	2280      	movs	r2, #128	; 0x80
 8006d50:	6879      	ldr	r1, [r7, #4]
 8006d52:	6938      	ldr	r0, [r7, #16]
 8006d54:	f7fe fdc6 	bl	80058e4 <_EncodeStr>
 8006d58:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d5e:	2301      	movs	r3, #1
 8006d60:	623b      	str	r3, [r7, #32]
 8006d62:	e00b      	b.n	8006d7c <SEGGER_SYSVIEW_Warn+0x4c>
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	1c59      	adds	r1, r3, #1
 8006d6c:	6279      	str	r1, [r7, #36]	; 0x24
 8006d6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	09db      	lsrs	r3, r3, #7
 8006d7a:	623b      	str	r3, [r7, #32]
 8006d7c:	6a3b      	ldr	r3, [r7, #32]
 8006d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d80:	d8f0      	bhi.n	8006d64 <SEGGER_SYSVIEW_Warn+0x34>
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	627a      	str	r2, [r7, #36]	; 0x24
 8006d88:	6a3a      	ldr	r2, [r7, #32]
 8006d8a:	b2d2      	uxtb	r2, r2
 8006d8c:	701a      	strb	r2, [r3, #0]
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	61fb      	str	r3, [r7, #28]
 8006d96:	2300      	movs	r3, #0
 8006d98:	61bb      	str	r3, [r7, #24]
 8006d9a:	e00b      	b.n	8006db4 <SEGGER_SYSVIEW_Warn+0x84>
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	1c59      	adds	r1, r3, #1
 8006da4:	61f9      	str	r1, [r7, #28]
 8006da6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	701a      	strb	r2, [r3, #0]
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	09db      	lsrs	r3, r3, #7
 8006db2:	61bb      	str	r3, [r7, #24]
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	2b7f      	cmp	r3, #127	; 0x7f
 8006db8:	d8f0      	bhi.n	8006d9c <SEGGER_SYSVIEW_Warn+0x6c>
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	61fa      	str	r2, [r7, #28]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006dca:	221a      	movs	r2, #26
 8006dcc:	68f9      	ldr	r1, [r7, #12]
 8006dce:	6938      	ldr	r0, [r7, #16]
 8006dd0:	f7fe feb2 	bl	8005b38 <_SendPacket>
  RECORD_END();
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f383 8811 	msr	BASEPRI, r3
}
 8006dda:	bf00      	nop
 8006ddc:	3728      	adds	r7, #40	; 0x28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	20014434 	.word	0x20014434

08006de8 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006dec:	4b13      	ldr	r3, [pc, #76]	; (8006e3c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006dee:	7e1b      	ldrb	r3, [r3, #24]
 8006df0:	4619      	mov	r1, r3
 8006df2:	4a13      	ldr	r2, [pc, #76]	; (8006e40 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006df4:	460b      	mov	r3, r1
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	440b      	add	r3, r1
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	4413      	add	r3, r2
 8006dfe:	336c      	adds	r3, #108	; 0x6c
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	4b0e      	ldr	r3, [pc, #56]	; (8006e3c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e04:	7e1b      	ldrb	r3, [r3, #24]
 8006e06:	4618      	mov	r0, r3
 8006e08:	490d      	ldr	r1, [pc, #52]	; (8006e40 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	4403      	add	r3, r0
 8006e10:	00db      	lsls	r3, r3, #3
 8006e12:	440b      	add	r3, r1
 8006e14:	3370      	adds	r3, #112	; 0x70
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d00b      	beq.n	8006e34 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006e1c:	4b07      	ldr	r3, [pc, #28]	; (8006e3c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e1e:	789b      	ldrb	r3, [r3, #2]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d107      	bne.n	8006e34 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006e24:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e26:	2201      	movs	r2, #1
 8006e28:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006e2a:	f7fe fda1 	bl	8005970 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006e2e:	4b03      	ldr	r3, [pc, #12]	; (8006e3c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006e34:	4b01      	ldr	r3, [pc, #4]	; (8006e3c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e36:	781b      	ldrb	r3, [r3, #0]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	20014404 	.word	0x20014404
 8006e40:	20012f44 	.word	0x20012f44

08006e44 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	2000      	movs	r0, #0
 8006e58:	f7fe fc4e 	bl	80056f8 <SEGGER_RTT_Write>
  return len;
 8006e5c:	683b      	ldr	r3, [r7, #0]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <__errno>:
 8006e68:	4b01      	ldr	r3, [pc, #4]	; (8006e70 <__errno+0x8>)
 8006e6a:	6818      	ldr	r0, [r3, #0]
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	2000001c 	.word	0x2000001c

08006e74 <__libc_init_array>:
 8006e74:	b570      	push	{r4, r5, r6, lr}
 8006e76:	4d0d      	ldr	r5, [pc, #52]	; (8006eac <__libc_init_array+0x38>)
 8006e78:	4c0d      	ldr	r4, [pc, #52]	; (8006eb0 <__libc_init_array+0x3c>)
 8006e7a:	1b64      	subs	r4, r4, r5
 8006e7c:	10a4      	asrs	r4, r4, #2
 8006e7e:	2600      	movs	r6, #0
 8006e80:	42a6      	cmp	r6, r4
 8006e82:	d109      	bne.n	8006e98 <__libc_init_array+0x24>
 8006e84:	4d0b      	ldr	r5, [pc, #44]	; (8006eb4 <__libc_init_array+0x40>)
 8006e86:	4c0c      	ldr	r4, [pc, #48]	; (8006eb8 <__libc_init_array+0x44>)
 8006e88:	f000 fd2a 	bl	80078e0 <_init>
 8006e8c:	1b64      	subs	r4, r4, r5
 8006e8e:	10a4      	asrs	r4, r4, #2
 8006e90:	2600      	movs	r6, #0
 8006e92:	42a6      	cmp	r6, r4
 8006e94:	d105      	bne.n	8006ea2 <__libc_init_array+0x2e>
 8006e96:	bd70      	pop	{r4, r5, r6, pc}
 8006e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e9c:	4798      	blx	r3
 8006e9e:	3601      	adds	r6, #1
 8006ea0:	e7ee      	b.n	8006e80 <__libc_init_array+0xc>
 8006ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea6:	4798      	blx	r3
 8006ea8:	3601      	adds	r6, #1
 8006eaa:	e7f2      	b.n	8006e92 <__libc_init_array+0x1e>
 8006eac:	08007ab8 	.word	0x08007ab8
 8006eb0:	08007ab8 	.word	0x08007ab8
 8006eb4:	08007ab8 	.word	0x08007ab8
 8006eb8:	08007abc 	.word	0x08007abc

08006ebc <memcmp>:
 8006ebc:	b510      	push	{r4, lr}
 8006ebe:	3901      	subs	r1, #1
 8006ec0:	4402      	add	r2, r0
 8006ec2:	4290      	cmp	r0, r2
 8006ec4:	d101      	bne.n	8006eca <memcmp+0xe>
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	e005      	b.n	8006ed6 <memcmp+0x1a>
 8006eca:	7803      	ldrb	r3, [r0, #0]
 8006ecc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006ed0:	42a3      	cmp	r3, r4
 8006ed2:	d001      	beq.n	8006ed8 <memcmp+0x1c>
 8006ed4:	1b18      	subs	r0, r3, r4
 8006ed6:	bd10      	pop	{r4, pc}
 8006ed8:	3001      	adds	r0, #1
 8006eda:	e7f2      	b.n	8006ec2 <memcmp+0x6>

08006edc <memcpy>:
 8006edc:	440a      	add	r2, r1
 8006ede:	4291      	cmp	r1, r2
 8006ee0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ee4:	d100      	bne.n	8006ee8 <memcpy+0xc>
 8006ee6:	4770      	bx	lr
 8006ee8:	b510      	push	{r4, lr}
 8006eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ef2:	4291      	cmp	r1, r2
 8006ef4:	d1f9      	bne.n	8006eea <memcpy+0xe>
 8006ef6:	bd10      	pop	{r4, pc}

08006ef8 <memset>:
 8006ef8:	4402      	add	r2, r0
 8006efa:	4603      	mov	r3, r0
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d100      	bne.n	8006f02 <memset+0xa>
 8006f00:	4770      	bx	lr
 8006f02:	f803 1b01 	strb.w	r1, [r3], #1
 8006f06:	e7f9      	b.n	8006efc <memset+0x4>

08006f08 <_puts_r>:
 8006f08:	b570      	push	{r4, r5, r6, lr}
 8006f0a:	460e      	mov	r6, r1
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	b118      	cbz	r0, 8006f18 <_puts_r+0x10>
 8006f10:	6983      	ldr	r3, [r0, #24]
 8006f12:	b90b      	cbnz	r3, 8006f18 <_puts_r+0x10>
 8006f14:	f000 fa48 	bl	80073a8 <__sinit>
 8006f18:	69ab      	ldr	r3, [r5, #24]
 8006f1a:	68ac      	ldr	r4, [r5, #8]
 8006f1c:	b913      	cbnz	r3, 8006f24 <_puts_r+0x1c>
 8006f1e:	4628      	mov	r0, r5
 8006f20:	f000 fa42 	bl	80073a8 <__sinit>
 8006f24:	4b2c      	ldr	r3, [pc, #176]	; (8006fd8 <_puts_r+0xd0>)
 8006f26:	429c      	cmp	r4, r3
 8006f28:	d120      	bne.n	8006f6c <_puts_r+0x64>
 8006f2a:	686c      	ldr	r4, [r5, #4]
 8006f2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f2e:	07db      	lsls	r3, r3, #31
 8006f30:	d405      	bmi.n	8006f3e <_puts_r+0x36>
 8006f32:	89a3      	ldrh	r3, [r4, #12]
 8006f34:	0598      	lsls	r0, r3, #22
 8006f36:	d402      	bmi.n	8006f3e <_puts_r+0x36>
 8006f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f3a:	f000 fad3 	bl	80074e4 <__retarget_lock_acquire_recursive>
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	0719      	lsls	r1, r3, #28
 8006f42:	d51d      	bpl.n	8006f80 <_puts_r+0x78>
 8006f44:	6923      	ldr	r3, [r4, #16]
 8006f46:	b1db      	cbz	r3, 8006f80 <_puts_r+0x78>
 8006f48:	3e01      	subs	r6, #1
 8006f4a:	68a3      	ldr	r3, [r4, #8]
 8006f4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f50:	3b01      	subs	r3, #1
 8006f52:	60a3      	str	r3, [r4, #8]
 8006f54:	bb39      	cbnz	r1, 8006fa6 <_puts_r+0x9e>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	da38      	bge.n	8006fcc <_puts_r+0xc4>
 8006f5a:	4622      	mov	r2, r4
 8006f5c:	210a      	movs	r1, #10
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f000 f848 	bl	8006ff4 <__swbuf_r>
 8006f64:	3001      	adds	r0, #1
 8006f66:	d011      	beq.n	8006f8c <_puts_r+0x84>
 8006f68:	250a      	movs	r5, #10
 8006f6a:	e011      	b.n	8006f90 <_puts_r+0x88>
 8006f6c:	4b1b      	ldr	r3, [pc, #108]	; (8006fdc <_puts_r+0xd4>)
 8006f6e:	429c      	cmp	r4, r3
 8006f70:	d101      	bne.n	8006f76 <_puts_r+0x6e>
 8006f72:	68ac      	ldr	r4, [r5, #8]
 8006f74:	e7da      	b.n	8006f2c <_puts_r+0x24>
 8006f76:	4b1a      	ldr	r3, [pc, #104]	; (8006fe0 <_puts_r+0xd8>)
 8006f78:	429c      	cmp	r4, r3
 8006f7a:	bf08      	it	eq
 8006f7c:	68ec      	ldreq	r4, [r5, #12]
 8006f7e:	e7d5      	b.n	8006f2c <_puts_r+0x24>
 8006f80:	4621      	mov	r1, r4
 8006f82:	4628      	mov	r0, r5
 8006f84:	f000 f888 	bl	8007098 <__swsetup_r>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d0dd      	beq.n	8006f48 <_puts_r+0x40>
 8006f8c:	f04f 35ff 	mov.w	r5, #4294967295
 8006f90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f92:	07da      	lsls	r2, r3, #31
 8006f94:	d405      	bmi.n	8006fa2 <_puts_r+0x9a>
 8006f96:	89a3      	ldrh	r3, [r4, #12]
 8006f98:	059b      	lsls	r3, r3, #22
 8006f9a:	d402      	bmi.n	8006fa2 <_puts_r+0x9a>
 8006f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f9e:	f000 faa2 	bl	80074e6 <__retarget_lock_release_recursive>
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	bd70      	pop	{r4, r5, r6, pc}
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	da04      	bge.n	8006fb4 <_puts_r+0xac>
 8006faa:	69a2      	ldr	r2, [r4, #24]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	dc06      	bgt.n	8006fbe <_puts_r+0xb6>
 8006fb0:	290a      	cmp	r1, #10
 8006fb2:	d004      	beq.n	8006fbe <_puts_r+0xb6>
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	6022      	str	r2, [r4, #0]
 8006fba:	7019      	strb	r1, [r3, #0]
 8006fbc:	e7c5      	b.n	8006f4a <_puts_r+0x42>
 8006fbe:	4622      	mov	r2, r4
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f000 f817 	bl	8006ff4 <__swbuf_r>
 8006fc6:	3001      	adds	r0, #1
 8006fc8:	d1bf      	bne.n	8006f4a <_puts_r+0x42>
 8006fca:	e7df      	b.n	8006f8c <_puts_r+0x84>
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	250a      	movs	r5, #10
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	6022      	str	r2, [r4, #0]
 8006fd4:	701d      	strb	r5, [r3, #0]
 8006fd6:	e7db      	b.n	8006f90 <_puts_r+0x88>
 8006fd8:	08007a70 	.word	0x08007a70
 8006fdc:	08007a90 	.word	0x08007a90
 8006fe0:	08007a50 	.word	0x08007a50

08006fe4 <puts>:
 8006fe4:	4b02      	ldr	r3, [pc, #8]	; (8006ff0 <puts+0xc>)
 8006fe6:	4601      	mov	r1, r0
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	f7ff bf8d 	b.w	8006f08 <_puts_r>
 8006fee:	bf00      	nop
 8006ff0:	2000001c 	.word	0x2000001c

08006ff4 <__swbuf_r>:
 8006ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff6:	460e      	mov	r6, r1
 8006ff8:	4614      	mov	r4, r2
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	b118      	cbz	r0, 8007006 <__swbuf_r+0x12>
 8006ffe:	6983      	ldr	r3, [r0, #24]
 8007000:	b90b      	cbnz	r3, 8007006 <__swbuf_r+0x12>
 8007002:	f000 f9d1 	bl	80073a8 <__sinit>
 8007006:	4b21      	ldr	r3, [pc, #132]	; (800708c <__swbuf_r+0x98>)
 8007008:	429c      	cmp	r4, r3
 800700a:	d12b      	bne.n	8007064 <__swbuf_r+0x70>
 800700c:	686c      	ldr	r4, [r5, #4]
 800700e:	69a3      	ldr	r3, [r4, #24]
 8007010:	60a3      	str	r3, [r4, #8]
 8007012:	89a3      	ldrh	r3, [r4, #12]
 8007014:	071a      	lsls	r2, r3, #28
 8007016:	d52f      	bpl.n	8007078 <__swbuf_r+0x84>
 8007018:	6923      	ldr	r3, [r4, #16]
 800701a:	b36b      	cbz	r3, 8007078 <__swbuf_r+0x84>
 800701c:	6923      	ldr	r3, [r4, #16]
 800701e:	6820      	ldr	r0, [r4, #0]
 8007020:	1ac0      	subs	r0, r0, r3
 8007022:	6963      	ldr	r3, [r4, #20]
 8007024:	b2f6      	uxtb	r6, r6
 8007026:	4283      	cmp	r3, r0
 8007028:	4637      	mov	r7, r6
 800702a:	dc04      	bgt.n	8007036 <__swbuf_r+0x42>
 800702c:	4621      	mov	r1, r4
 800702e:	4628      	mov	r0, r5
 8007030:	f000 f926 	bl	8007280 <_fflush_r>
 8007034:	bb30      	cbnz	r0, 8007084 <__swbuf_r+0x90>
 8007036:	68a3      	ldr	r3, [r4, #8]
 8007038:	3b01      	subs	r3, #1
 800703a:	60a3      	str	r3, [r4, #8]
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	6022      	str	r2, [r4, #0]
 8007042:	701e      	strb	r6, [r3, #0]
 8007044:	6963      	ldr	r3, [r4, #20]
 8007046:	3001      	adds	r0, #1
 8007048:	4283      	cmp	r3, r0
 800704a:	d004      	beq.n	8007056 <__swbuf_r+0x62>
 800704c:	89a3      	ldrh	r3, [r4, #12]
 800704e:	07db      	lsls	r3, r3, #31
 8007050:	d506      	bpl.n	8007060 <__swbuf_r+0x6c>
 8007052:	2e0a      	cmp	r6, #10
 8007054:	d104      	bne.n	8007060 <__swbuf_r+0x6c>
 8007056:	4621      	mov	r1, r4
 8007058:	4628      	mov	r0, r5
 800705a:	f000 f911 	bl	8007280 <_fflush_r>
 800705e:	b988      	cbnz	r0, 8007084 <__swbuf_r+0x90>
 8007060:	4638      	mov	r0, r7
 8007062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007064:	4b0a      	ldr	r3, [pc, #40]	; (8007090 <__swbuf_r+0x9c>)
 8007066:	429c      	cmp	r4, r3
 8007068:	d101      	bne.n	800706e <__swbuf_r+0x7a>
 800706a:	68ac      	ldr	r4, [r5, #8]
 800706c:	e7cf      	b.n	800700e <__swbuf_r+0x1a>
 800706e:	4b09      	ldr	r3, [pc, #36]	; (8007094 <__swbuf_r+0xa0>)
 8007070:	429c      	cmp	r4, r3
 8007072:	bf08      	it	eq
 8007074:	68ec      	ldreq	r4, [r5, #12]
 8007076:	e7ca      	b.n	800700e <__swbuf_r+0x1a>
 8007078:	4621      	mov	r1, r4
 800707a:	4628      	mov	r0, r5
 800707c:	f000 f80c 	bl	8007098 <__swsetup_r>
 8007080:	2800      	cmp	r0, #0
 8007082:	d0cb      	beq.n	800701c <__swbuf_r+0x28>
 8007084:	f04f 37ff 	mov.w	r7, #4294967295
 8007088:	e7ea      	b.n	8007060 <__swbuf_r+0x6c>
 800708a:	bf00      	nop
 800708c:	08007a70 	.word	0x08007a70
 8007090:	08007a90 	.word	0x08007a90
 8007094:	08007a50 	.word	0x08007a50

08007098 <__swsetup_r>:
 8007098:	4b32      	ldr	r3, [pc, #200]	; (8007164 <__swsetup_r+0xcc>)
 800709a:	b570      	push	{r4, r5, r6, lr}
 800709c:	681d      	ldr	r5, [r3, #0]
 800709e:	4606      	mov	r6, r0
 80070a0:	460c      	mov	r4, r1
 80070a2:	b125      	cbz	r5, 80070ae <__swsetup_r+0x16>
 80070a4:	69ab      	ldr	r3, [r5, #24]
 80070a6:	b913      	cbnz	r3, 80070ae <__swsetup_r+0x16>
 80070a8:	4628      	mov	r0, r5
 80070aa:	f000 f97d 	bl	80073a8 <__sinit>
 80070ae:	4b2e      	ldr	r3, [pc, #184]	; (8007168 <__swsetup_r+0xd0>)
 80070b0:	429c      	cmp	r4, r3
 80070b2:	d10f      	bne.n	80070d4 <__swsetup_r+0x3c>
 80070b4:	686c      	ldr	r4, [r5, #4]
 80070b6:	89a3      	ldrh	r3, [r4, #12]
 80070b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070bc:	0719      	lsls	r1, r3, #28
 80070be:	d42c      	bmi.n	800711a <__swsetup_r+0x82>
 80070c0:	06dd      	lsls	r5, r3, #27
 80070c2:	d411      	bmi.n	80070e8 <__swsetup_r+0x50>
 80070c4:	2309      	movs	r3, #9
 80070c6:	6033      	str	r3, [r6, #0]
 80070c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070cc:	81a3      	strh	r3, [r4, #12]
 80070ce:	f04f 30ff 	mov.w	r0, #4294967295
 80070d2:	e03e      	b.n	8007152 <__swsetup_r+0xba>
 80070d4:	4b25      	ldr	r3, [pc, #148]	; (800716c <__swsetup_r+0xd4>)
 80070d6:	429c      	cmp	r4, r3
 80070d8:	d101      	bne.n	80070de <__swsetup_r+0x46>
 80070da:	68ac      	ldr	r4, [r5, #8]
 80070dc:	e7eb      	b.n	80070b6 <__swsetup_r+0x1e>
 80070de:	4b24      	ldr	r3, [pc, #144]	; (8007170 <__swsetup_r+0xd8>)
 80070e0:	429c      	cmp	r4, r3
 80070e2:	bf08      	it	eq
 80070e4:	68ec      	ldreq	r4, [r5, #12]
 80070e6:	e7e6      	b.n	80070b6 <__swsetup_r+0x1e>
 80070e8:	0758      	lsls	r0, r3, #29
 80070ea:	d512      	bpl.n	8007112 <__swsetup_r+0x7a>
 80070ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070ee:	b141      	cbz	r1, 8007102 <__swsetup_r+0x6a>
 80070f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070f4:	4299      	cmp	r1, r3
 80070f6:	d002      	beq.n	80070fe <__swsetup_r+0x66>
 80070f8:	4630      	mov	r0, r6
 80070fa:	f000 fa5b 	bl	80075b4 <_free_r>
 80070fe:	2300      	movs	r3, #0
 8007100:	6363      	str	r3, [r4, #52]	; 0x34
 8007102:	89a3      	ldrh	r3, [r4, #12]
 8007104:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007108:	81a3      	strh	r3, [r4, #12]
 800710a:	2300      	movs	r3, #0
 800710c:	6063      	str	r3, [r4, #4]
 800710e:	6923      	ldr	r3, [r4, #16]
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	89a3      	ldrh	r3, [r4, #12]
 8007114:	f043 0308 	orr.w	r3, r3, #8
 8007118:	81a3      	strh	r3, [r4, #12]
 800711a:	6923      	ldr	r3, [r4, #16]
 800711c:	b94b      	cbnz	r3, 8007132 <__swsetup_r+0x9a>
 800711e:	89a3      	ldrh	r3, [r4, #12]
 8007120:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007128:	d003      	beq.n	8007132 <__swsetup_r+0x9a>
 800712a:	4621      	mov	r1, r4
 800712c:	4630      	mov	r0, r6
 800712e:	f000 fa01 	bl	8007534 <__smakebuf_r>
 8007132:	89a0      	ldrh	r0, [r4, #12]
 8007134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007138:	f010 0301 	ands.w	r3, r0, #1
 800713c:	d00a      	beq.n	8007154 <__swsetup_r+0xbc>
 800713e:	2300      	movs	r3, #0
 8007140:	60a3      	str	r3, [r4, #8]
 8007142:	6963      	ldr	r3, [r4, #20]
 8007144:	425b      	negs	r3, r3
 8007146:	61a3      	str	r3, [r4, #24]
 8007148:	6923      	ldr	r3, [r4, #16]
 800714a:	b943      	cbnz	r3, 800715e <__swsetup_r+0xc6>
 800714c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007150:	d1ba      	bne.n	80070c8 <__swsetup_r+0x30>
 8007152:	bd70      	pop	{r4, r5, r6, pc}
 8007154:	0781      	lsls	r1, r0, #30
 8007156:	bf58      	it	pl
 8007158:	6963      	ldrpl	r3, [r4, #20]
 800715a:	60a3      	str	r3, [r4, #8]
 800715c:	e7f4      	b.n	8007148 <__swsetup_r+0xb0>
 800715e:	2000      	movs	r0, #0
 8007160:	e7f7      	b.n	8007152 <__swsetup_r+0xba>
 8007162:	bf00      	nop
 8007164:	2000001c 	.word	0x2000001c
 8007168:	08007a70 	.word	0x08007a70
 800716c:	08007a90 	.word	0x08007a90
 8007170:	08007a50 	.word	0x08007a50

08007174 <__sflush_r>:
 8007174:	898a      	ldrh	r2, [r1, #12]
 8007176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800717a:	4605      	mov	r5, r0
 800717c:	0710      	lsls	r0, r2, #28
 800717e:	460c      	mov	r4, r1
 8007180:	d458      	bmi.n	8007234 <__sflush_r+0xc0>
 8007182:	684b      	ldr	r3, [r1, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	dc05      	bgt.n	8007194 <__sflush_r+0x20>
 8007188:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800718a:	2b00      	cmp	r3, #0
 800718c:	dc02      	bgt.n	8007194 <__sflush_r+0x20>
 800718e:	2000      	movs	r0, #0
 8007190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007194:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007196:	2e00      	cmp	r6, #0
 8007198:	d0f9      	beq.n	800718e <__sflush_r+0x1a>
 800719a:	2300      	movs	r3, #0
 800719c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071a0:	682f      	ldr	r7, [r5, #0]
 80071a2:	602b      	str	r3, [r5, #0]
 80071a4:	d032      	beq.n	800720c <__sflush_r+0x98>
 80071a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071a8:	89a3      	ldrh	r3, [r4, #12]
 80071aa:	075a      	lsls	r2, r3, #29
 80071ac:	d505      	bpl.n	80071ba <__sflush_r+0x46>
 80071ae:	6863      	ldr	r3, [r4, #4]
 80071b0:	1ac0      	subs	r0, r0, r3
 80071b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071b4:	b10b      	cbz	r3, 80071ba <__sflush_r+0x46>
 80071b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071b8:	1ac0      	subs	r0, r0, r3
 80071ba:	2300      	movs	r3, #0
 80071bc:	4602      	mov	r2, r0
 80071be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071c0:	6a21      	ldr	r1, [r4, #32]
 80071c2:	4628      	mov	r0, r5
 80071c4:	47b0      	blx	r6
 80071c6:	1c43      	adds	r3, r0, #1
 80071c8:	89a3      	ldrh	r3, [r4, #12]
 80071ca:	d106      	bne.n	80071da <__sflush_r+0x66>
 80071cc:	6829      	ldr	r1, [r5, #0]
 80071ce:	291d      	cmp	r1, #29
 80071d0:	d82c      	bhi.n	800722c <__sflush_r+0xb8>
 80071d2:	4a2a      	ldr	r2, [pc, #168]	; (800727c <__sflush_r+0x108>)
 80071d4:	40ca      	lsrs	r2, r1
 80071d6:	07d6      	lsls	r6, r2, #31
 80071d8:	d528      	bpl.n	800722c <__sflush_r+0xb8>
 80071da:	2200      	movs	r2, #0
 80071dc:	6062      	str	r2, [r4, #4]
 80071de:	04d9      	lsls	r1, r3, #19
 80071e0:	6922      	ldr	r2, [r4, #16]
 80071e2:	6022      	str	r2, [r4, #0]
 80071e4:	d504      	bpl.n	80071f0 <__sflush_r+0x7c>
 80071e6:	1c42      	adds	r2, r0, #1
 80071e8:	d101      	bne.n	80071ee <__sflush_r+0x7a>
 80071ea:	682b      	ldr	r3, [r5, #0]
 80071ec:	b903      	cbnz	r3, 80071f0 <__sflush_r+0x7c>
 80071ee:	6560      	str	r0, [r4, #84]	; 0x54
 80071f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071f2:	602f      	str	r7, [r5, #0]
 80071f4:	2900      	cmp	r1, #0
 80071f6:	d0ca      	beq.n	800718e <__sflush_r+0x1a>
 80071f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071fc:	4299      	cmp	r1, r3
 80071fe:	d002      	beq.n	8007206 <__sflush_r+0x92>
 8007200:	4628      	mov	r0, r5
 8007202:	f000 f9d7 	bl	80075b4 <_free_r>
 8007206:	2000      	movs	r0, #0
 8007208:	6360      	str	r0, [r4, #52]	; 0x34
 800720a:	e7c1      	b.n	8007190 <__sflush_r+0x1c>
 800720c:	6a21      	ldr	r1, [r4, #32]
 800720e:	2301      	movs	r3, #1
 8007210:	4628      	mov	r0, r5
 8007212:	47b0      	blx	r6
 8007214:	1c41      	adds	r1, r0, #1
 8007216:	d1c7      	bne.n	80071a8 <__sflush_r+0x34>
 8007218:	682b      	ldr	r3, [r5, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d0c4      	beq.n	80071a8 <__sflush_r+0x34>
 800721e:	2b1d      	cmp	r3, #29
 8007220:	d001      	beq.n	8007226 <__sflush_r+0xb2>
 8007222:	2b16      	cmp	r3, #22
 8007224:	d101      	bne.n	800722a <__sflush_r+0xb6>
 8007226:	602f      	str	r7, [r5, #0]
 8007228:	e7b1      	b.n	800718e <__sflush_r+0x1a>
 800722a:	89a3      	ldrh	r3, [r4, #12]
 800722c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007230:	81a3      	strh	r3, [r4, #12]
 8007232:	e7ad      	b.n	8007190 <__sflush_r+0x1c>
 8007234:	690f      	ldr	r7, [r1, #16]
 8007236:	2f00      	cmp	r7, #0
 8007238:	d0a9      	beq.n	800718e <__sflush_r+0x1a>
 800723a:	0793      	lsls	r3, r2, #30
 800723c:	680e      	ldr	r6, [r1, #0]
 800723e:	bf08      	it	eq
 8007240:	694b      	ldreq	r3, [r1, #20]
 8007242:	600f      	str	r7, [r1, #0]
 8007244:	bf18      	it	ne
 8007246:	2300      	movne	r3, #0
 8007248:	eba6 0807 	sub.w	r8, r6, r7
 800724c:	608b      	str	r3, [r1, #8]
 800724e:	f1b8 0f00 	cmp.w	r8, #0
 8007252:	dd9c      	ble.n	800718e <__sflush_r+0x1a>
 8007254:	6a21      	ldr	r1, [r4, #32]
 8007256:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007258:	4643      	mov	r3, r8
 800725a:	463a      	mov	r2, r7
 800725c:	4628      	mov	r0, r5
 800725e:	47b0      	blx	r6
 8007260:	2800      	cmp	r0, #0
 8007262:	dc06      	bgt.n	8007272 <__sflush_r+0xfe>
 8007264:	89a3      	ldrh	r3, [r4, #12]
 8007266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800726a:	81a3      	strh	r3, [r4, #12]
 800726c:	f04f 30ff 	mov.w	r0, #4294967295
 8007270:	e78e      	b.n	8007190 <__sflush_r+0x1c>
 8007272:	4407      	add	r7, r0
 8007274:	eba8 0800 	sub.w	r8, r8, r0
 8007278:	e7e9      	b.n	800724e <__sflush_r+0xda>
 800727a:	bf00      	nop
 800727c:	20400001 	.word	0x20400001

08007280 <_fflush_r>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	690b      	ldr	r3, [r1, #16]
 8007284:	4605      	mov	r5, r0
 8007286:	460c      	mov	r4, r1
 8007288:	b913      	cbnz	r3, 8007290 <_fflush_r+0x10>
 800728a:	2500      	movs	r5, #0
 800728c:	4628      	mov	r0, r5
 800728e:	bd38      	pop	{r3, r4, r5, pc}
 8007290:	b118      	cbz	r0, 800729a <_fflush_r+0x1a>
 8007292:	6983      	ldr	r3, [r0, #24]
 8007294:	b90b      	cbnz	r3, 800729a <_fflush_r+0x1a>
 8007296:	f000 f887 	bl	80073a8 <__sinit>
 800729a:	4b14      	ldr	r3, [pc, #80]	; (80072ec <_fflush_r+0x6c>)
 800729c:	429c      	cmp	r4, r3
 800729e:	d11b      	bne.n	80072d8 <_fflush_r+0x58>
 80072a0:	686c      	ldr	r4, [r5, #4]
 80072a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d0ef      	beq.n	800728a <_fflush_r+0xa>
 80072aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072ac:	07d0      	lsls	r0, r2, #31
 80072ae:	d404      	bmi.n	80072ba <_fflush_r+0x3a>
 80072b0:	0599      	lsls	r1, r3, #22
 80072b2:	d402      	bmi.n	80072ba <_fflush_r+0x3a>
 80072b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072b6:	f000 f915 	bl	80074e4 <__retarget_lock_acquire_recursive>
 80072ba:	4628      	mov	r0, r5
 80072bc:	4621      	mov	r1, r4
 80072be:	f7ff ff59 	bl	8007174 <__sflush_r>
 80072c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072c4:	07da      	lsls	r2, r3, #31
 80072c6:	4605      	mov	r5, r0
 80072c8:	d4e0      	bmi.n	800728c <_fflush_r+0xc>
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	059b      	lsls	r3, r3, #22
 80072ce:	d4dd      	bmi.n	800728c <_fflush_r+0xc>
 80072d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072d2:	f000 f908 	bl	80074e6 <__retarget_lock_release_recursive>
 80072d6:	e7d9      	b.n	800728c <_fflush_r+0xc>
 80072d8:	4b05      	ldr	r3, [pc, #20]	; (80072f0 <_fflush_r+0x70>)
 80072da:	429c      	cmp	r4, r3
 80072dc:	d101      	bne.n	80072e2 <_fflush_r+0x62>
 80072de:	68ac      	ldr	r4, [r5, #8]
 80072e0:	e7df      	b.n	80072a2 <_fflush_r+0x22>
 80072e2:	4b04      	ldr	r3, [pc, #16]	; (80072f4 <_fflush_r+0x74>)
 80072e4:	429c      	cmp	r4, r3
 80072e6:	bf08      	it	eq
 80072e8:	68ec      	ldreq	r4, [r5, #12]
 80072ea:	e7da      	b.n	80072a2 <_fflush_r+0x22>
 80072ec:	08007a70 	.word	0x08007a70
 80072f0:	08007a90 	.word	0x08007a90
 80072f4:	08007a50 	.word	0x08007a50

080072f8 <std>:
 80072f8:	2300      	movs	r3, #0
 80072fa:	b510      	push	{r4, lr}
 80072fc:	4604      	mov	r4, r0
 80072fe:	e9c0 3300 	strd	r3, r3, [r0]
 8007302:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007306:	6083      	str	r3, [r0, #8]
 8007308:	8181      	strh	r1, [r0, #12]
 800730a:	6643      	str	r3, [r0, #100]	; 0x64
 800730c:	81c2      	strh	r2, [r0, #14]
 800730e:	6183      	str	r3, [r0, #24]
 8007310:	4619      	mov	r1, r3
 8007312:	2208      	movs	r2, #8
 8007314:	305c      	adds	r0, #92	; 0x5c
 8007316:	f7ff fdef 	bl	8006ef8 <memset>
 800731a:	4b05      	ldr	r3, [pc, #20]	; (8007330 <std+0x38>)
 800731c:	6263      	str	r3, [r4, #36]	; 0x24
 800731e:	4b05      	ldr	r3, [pc, #20]	; (8007334 <std+0x3c>)
 8007320:	62a3      	str	r3, [r4, #40]	; 0x28
 8007322:	4b05      	ldr	r3, [pc, #20]	; (8007338 <std+0x40>)
 8007324:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007326:	4b05      	ldr	r3, [pc, #20]	; (800733c <std+0x44>)
 8007328:	6224      	str	r4, [r4, #32]
 800732a:	6323      	str	r3, [r4, #48]	; 0x30
 800732c:	bd10      	pop	{r4, pc}
 800732e:	bf00      	nop
 8007330:	08007795 	.word	0x08007795
 8007334:	080077b7 	.word	0x080077b7
 8007338:	080077ef 	.word	0x080077ef
 800733c:	08007813 	.word	0x08007813

08007340 <_cleanup_r>:
 8007340:	4901      	ldr	r1, [pc, #4]	; (8007348 <_cleanup_r+0x8>)
 8007342:	f000 b8af 	b.w	80074a4 <_fwalk_reent>
 8007346:	bf00      	nop
 8007348:	08007281 	.word	0x08007281

0800734c <__sfmoreglue>:
 800734c:	b570      	push	{r4, r5, r6, lr}
 800734e:	2268      	movs	r2, #104	; 0x68
 8007350:	1e4d      	subs	r5, r1, #1
 8007352:	4355      	muls	r5, r2
 8007354:	460e      	mov	r6, r1
 8007356:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800735a:	f000 f997 	bl	800768c <_malloc_r>
 800735e:	4604      	mov	r4, r0
 8007360:	b140      	cbz	r0, 8007374 <__sfmoreglue+0x28>
 8007362:	2100      	movs	r1, #0
 8007364:	e9c0 1600 	strd	r1, r6, [r0]
 8007368:	300c      	adds	r0, #12
 800736a:	60a0      	str	r0, [r4, #8]
 800736c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007370:	f7ff fdc2 	bl	8006ef8 <memset>
 8007374:	4620      	mov	r0, r4
 8007376:	bd70      	pop	{r4, r5, r6, pc}

08007378 <__sfp_lock_acquire>:
 8007378:	4801      	ldr	r0, [pc, #4]	; (8007380 <__sfp_lock_acquire+0x8>)
 800737a:	f000 b8b3 	b.w	80074e4 <__retarget_lock_acquire_recursive>
 800737e:	bf00      	nop
 8007380:	20014518 	.word	0x20014518

08007384 <__sfp_lock_release>:
 8007384:	4801      	ldr	r0, [pc, #4]	; (800738c <__sfp_lock_release+0x8>)
 8007386:	f000 b8ae 	b.w	80074e6 <__retarget_lock_release_recursive>
 800738a:	bf00      	nop
 800738c:	20014518 	.word	0x20014518

08007390 <__sinit_lock_acquire>:
 8007390:	4801      	ldr	r0, [pc, #4]	; (8007398 <__sinit_lock_acquire+0x8>)
 8007392:	f000 b8a7 	b.w	80074e4 <__retarget_lock_acquire_recursive>
 8007396:	bf00      	nop
 8007398:	20014519 	.word	0x20014519

0800739c <__sinit_lock_release>:
 800739c:	4801      	ldr	r0, [pc, #4]	; (80073a4 <__sinit_lock_release+0x8>)
 800739e:	f000 b8a2 	b.w	80074e6 <__retarget_lock_release_recursive>
 80073a2:	bf00      	nop
 80073a4:	20014519 	.word	0x20014519

080073a8 <__sinit>:
 80073a8:	b510      	push	{r4, lr}
 80073aa:	4604      	mov	r4, r0
 80073ac:	f7ff fff0 	bl	8007390 <__sinit_lock_acquire>
 80073b0:	69a3      	ldr	r3, [r4, #24]
 80073b2:	b11b      	cbz	r3, 80073bc <__sinit+0x14>
 80073b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073b8:	f7ff bff0 	b.w	800739c <__sinit_lock_release>
 80073bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80073c0:	6523      	str	r3, [r4, #80]	; 0x50
 80073c2:	4b13      	ldr	r3, [pc, #76]	; (8007410 <__sinit+0x68>)
 80073c4:	4a13      	ldr	r2, [pc, #76]	; (8007414 <__sinit+0x6c>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80073ca:	42a3      	cmp	r3, r4
 80073cc:	bf04      	itt	eq
 80073ce:	2301      	moveq	r3, #1
 80073d0:	61a3      	streq	r3, [r4, #24]
 80073d2:	4620      	mov	r0, r4
 80073d4:	f000 f820 	bl	8007418 <__sfp>
 80073d8:	6060      	str	r0, [r4, #4]
 80073da:	4620      	mov	r0, r4
 80073dc:	f000 f81c 	bl	8007418 <__sfp>
 80073e0:	60a0      	str	r0, [r4, #8]
 80073e2:	4620      	mov	r0, r4
 80073e4:	f000 f818 	bl	8007418 <__sfp>
 80073e8:	2200      	movs	r2, #0
 80073ea:	60e0      	str	r0, [r4, #12]
 80073ec:	2104      	movs	r1, #4
 80073ee:	6860      	ldr	r0, [r4, #4]
 80073f0:	f7ff ff82 	bl	80072f8 <std>
 80073f4:	68a0      	ldr	r0, [r4, #8]
 80073f6:	2201      	movs	r2, #1
 80073f8:	2109      	movs	r1, #9
 80073fa:	f7ff ff7d 	bl	80072f8 <std>
 80073fe:	68e0      	ldr	r0, [r4, #12]
 8007400:	2202      	movs	r2, #2
 8007402:	2112      	movs	r1, #18
 8007404:	f7ff ff78 	bl	80072f8 <std>
 8007408:	2301      	movs	r3, #1
 800740a:	61a3      	str	r3, [r4, #24]
 800740c:	e7d2      	b.n	80073b4 <__sinit+0xc>
 800740e:	bf00      	nop
 8007410:	08007a4c 	.word	0x08007a4c
 8007414:	08007341 	.word	0x08007341

08007418 <__sfp>:
 8007418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741a:	4607      	mov	r7, r0
 800741c:	f7ff ffac 	bl	8007378 <__sfp_lock_acquire>
 8007420:	4b1e      	ldr	r3, [pc, #120]	; (800749c <__sfp+0x84>)
 8007422:	681e      	ldr	r6, [r3, #0]
 8007424:	69b3      	ldr	r3, [r6, #24]
 8007426:	b913      	cbnz	r3, 800742e <__sfp+0x16>
 8007428:	4630      	mov	r0, r6
 800742a:	f7ff ffbd 	bl	80073a8 <__sinit>
 800742e:	3648      	adds	r6, #72	; 0x48
 8007430:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007434:	3b01      	subs	r3, #1
 8007436:	d503      	bpl.n	8007440 <__sfp+0x28>
 8007438:	6833      	ldr	r3, [r6, #0]
 800743a:	b30b      	cbz	r3, 8007480 <__sfp+0x68>
 800743c:	6836      	ldr	r6, [r6, #0]
 800743e:	e7f7      	b.n	8007430 <__sfp+0x18>
 8007440:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007444:	b9d5      	cbnz	r5, 800747c <__sfp+0x64>
 8007446:	4b16      	ldr	r3, [pc, #88]	; (80074a0 <__sfp+0x88>)
 8007448:	60e3      	str	r3, [r4, #12]
 800744a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800744e:	6665      	str	r5, [r4, #100]	; 0x64
 8007450:	f000 f847 	bl	80074e2 <__retarget_lock_init_recursive>
 8007454:	f7ff ff96 	bl	8007384 <__sfp_lock_release>
 8007458:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800745c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007460:	6025      	str	r5, [r4, #0]
 8007462:	61a5      	str	r5, [r4, #24]
 8007464:	2208      	movs	r2, #8
 8007466:	4629      	mov	r1, r5
 8007468:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800746c:	f7ff fd44 	bl	8006ef8 <memset>
 8007470:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007474:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007478:	4620      	mov	r0, r4
 800747a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800747c:	3468      	adds	r4, #104	; 0x68
 800747e:	e7d9      	b.n	8007434 <__sfp+0x1c>
 8007480:	2104      	movs	r1, #4
 8007482:	4638      	mov	r0, r7
 8007484:	f7ff ff62 	bl	800734c <__sfmoreglue>
 8007488:	4604      	mov	r4, r0
 800748a:	6030      	str	r0, [r6, #0]
 800748c:	2800      	cmp	r0, #0
 800748e:	d1d5      	bne.n	800743c <__sfp+0x24>
 8007490:	f7ff ff78 	bl	8007384 <__sfp_lock_release>
 8007494:	230c      	movs	r3, #12
 8007496:	603b      	str	r3, [r7, #0]
 8007498:	e7ee      	b.n	8007478 <__sfp+0x60>
 800749a:	bf00      	nop
 800749c:	08007a4c 	.word	0x08007a4c
 80074a0:	ffff0001 	.word	0xffff0001

080074a4 <_fwalk_reent>:
 80074a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074a8:	4606      	mov	r6, r0
 80074aa:	4688      	mov	r8, r1
 80074ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80074b0:	2700      	movs	r7, #0
 80074b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074b6:	f1b9 0901 	subs.w	r9, r9, #1
 80074ba:	d505      	bpl.n	80074c8 <_fwalk_reent+0x24>
 80074bc:	6824      	ldr	r4, [r4, #0]
 80074be:	2c00      	cmp	r4, #0
 80074c0:	d1f7      	bne.n	80074b2 <_fwalk_reent+0xe>
 80074c2:	4638      	mov	r0, r7
 80074c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074c8:	89ab      	ldrh	r3, [r5, #12]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d907      	bls.n	80074de <_fwalk_reent+0x3a>
 80074ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074d2:	3301      	adds	r3, #1
 80074d4:	d003      	beq.n	80074de <_fwalk_reent+0x3a>
 80074d6:	4629      	mov	r1, r5
 80074d8:	4630      	mov	r0, r6
 80074da:	47c0      	blx	r8
 80074dc:	4307      	orrs	r7, r0
 80074de:	3568      	adds	r5, #104	; 0x68
 80074e0:	e7e9      	b.n	80074b6 <_fwalk_reent+0x12>

080074e2 <__retarget_lock_init_recursive>:
 80074e2:	4770      	bx	lr

080074e4 <__retarget_lock_acquire_recursive>:
 80074e4:	4770      	bx	lr

080074e6 <__retarget_lock_release_recursive>:
 80074e6:	4770      	bx	lr

080074e8 <__swhatbuf_r>:
 80074e8:	b570      	push	{r4, r5, r6, lr}
 80074ea:	460e      	mov	r6, r1
 80074ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074f0:	2900      	cmp	r1, #0
 80074f2:	b096      	sub	sp, #88	; 0x58
 80074f4:	4614      	mov	r4, r2
 80074f6:	461d      	mov	r5, r3
 80074f8:	da08      	bge.n	800750c <__swhatbuf_r+0x24>
 80074fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	602a      	str	r2, [r5, #0]
 8007502:	061a      	lsls	r2, r3, #24
 8007504:	d410      	bmi.n	8007528 <__swhatbuf_r+0x40>
 8007506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800750a:	e00e      	b.n	800752a <__swhatbuf_r+0x42>
 800750c:	466a      	mov	r2, sp
 800750e:	f000 f995 	bl	800783c <_fstat_r>
 8007512:	2800      	cmp	r0, #0
 8007514:	dbf1      	blt.n	80074fa <__swhatbuf_r+0x12>
 8007516:	9a01      	ldr	r2, [sp, #4]
 8007518:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800751c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007520:	425a      	negs	r2, r3
 8007522:	415a      	adcs	r2, r3
 8007524:	602a      	str	r2, [r5, #0]
 8007526:	e7ee      	b.n	8007506 <__swhatbuf_r+0x1e>
 8007528:	2340      	movs	r3, #64	; 0x40
 800752a:	2000      	movs	r0, #0
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	b016      	add	sp, #88	; 0x58
 8007530:	bd70      	pop	{r4, r5, r6, pc}
	...

08007534 <__smakebuf_r>:
 8007534:	898b      	ldrh	r3, [r1, #12]
 8007536:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007538:	079d      	lsls	r5, r3, #30
 800753a:	4606      	mov	r6, r0
 800753c:	460c      	mov	r4, r1
 800753e:	d507      	bpl.n	8007550 <__smakebuf_r+0x1c>
 8007540:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	6123      	str	r3, [r4, #16]
 8007548:	2301      	movs	r3, #1
 800754a:	6163      	str	r3, [r4, #20]
 800754c:	b002      	add	sp, #8
 800754e:	bd70      	pop	{r4, r5, r6, pc}
 8007550:	ab01      	add	r3, sp, #4
 8007552:	466a      	mov	r2, sp
 8007554:	f7ff ffc8 	bl	80074e8 <__swhatbuf_r>
 8007558:	9900      	ldr	r1, [sp, #0]
 800755a:	4605      	mov	r5, r0
 800755c:	4630      	mov	r0, r6
 800755e:	f000 f895 	bl	800768c <_malloc_r>
 8007562:	b948      	cbnz	r0, 8007578 <__smakebuf_r+0x44>
 8007564:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007568:	059a      	lsls	r2, r3, #22
 800756a:	d4ef      	bmi.n	800754c <__smakebuf_r+0x18>
 800756c:	f023 0303 	bic.w	r3, r3, #3
 8007570:	f043 0302 	orr.w	r3, r3, #2
 8007574:	81a3      	strh	r3, [r4, #12]
 8007576:	e7e3      	b.n	8007540 <__smakebuf_r+0xc>
 8007578:	4b0d      	ldr	r3, [pc, #52]	; (80075b0 <__smakebuf_r+0x7c>)
 800757a:	62b3      	str	r3, [r6, #40]	; 0x28
 800757c:	89a3      	ldrh	r3, [r4, #12]
 800757e:	6020      	str	r0, [r4, #0]
 8007580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007584:	81a3      	strh	r3, [r4, #12]
 8007586:	9b00      	ldr	r3, [sp, #0]
 8007588:	6163      	str	r3, [r4, #20]
 800758a:	9b01      	ldr	r3, [sp, #4]
 800758c:	6120      	str	r0, [r4, #16]
 800758e:	b15b      	cbz	r3, 80075a8 <__smakebuf_r+0x74>
 8007590:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007594:	4630      	mov	r0, r6
 8007596:	f000 f963 	bl	8007860 <_isatty_r>
 800759a:	b128      	cbz	r0, 80075a8 <__smakebuf_r+0x74>
 800759c:	89a3      	ldrh	r3, [r4, #12]
 800759e:	f023 0303 	bic.w	r3, r3, #3
 80075a2:	f043 0301 	orr.w	r3, r3, #1
 80075a6:	81a3      	strh	r3, [r4, #12]
 80075a8:	89a0      	ldrh	r0, [r4, #12]
 80075aa:	4305      	orrs	r5, r0
 80075ac:	81a5      	strh	r5, [r4, #12]
 80075ae:	e7cd      	b.n	800754c <__smakebuf_r+0x18>
 80075b0:	08007341 	.word	0x08007341

080075b4 <_free_r>:
 80075b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075b6:	2900      	cmp	r1, #0
 80075b8:	d044      	beq.n	8007644 <_free_r+0x90>
 80075ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075be:	9001      	str	r0, [sp, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f1a1 0404 	sub.w	r4, r1, #4
 80075c6:	bfb8      	it	lt
 80075c8:	18e4      	addlt	r4, r4, r3
 80075ca:	f000 f96b 	bl	80078a4 <__malloc_lock>
 80075ce:	4a1e      	ldr	r2, [pc, #120]	; (8007648 <_free_r+0x94>)
 80075d0:	9801      	ldr	r0, [sp, #4]
 80075d2:	6813      	ldr	r3, [r2, #0]
 80075d4:	b933      	cbnz	r3, 80075e4 <_free_r+0x30>
 80075d6:	6063      	str	r3, [r4, #4]
 80075d8:	6014      	str	r4, [r2, #0]
 80075da:	b003      	add	sp, #12
 80075dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075e0:	f000 b966 	b.w	80078b0 <__malloc_unlock>
 80075e4:	42a3      	cmp	r3, r4
 80075e6:	d908      	bls.n	80075fa <_free_r+0x46>
 80075e8:	6825      	ldr	r5, [r4, #0]
 80075ea:	1961      	adds	r1, r4, r5
 80075ec:	428b      	cmp	r3, r1
 80075ee:	bf01      	itttt	eq
 80075f0:	6819      	ldreq	r1, [r3, #0]
 80075f2:	685b      	ldreq	r3, [r3, #4]
 80075f4:	1949      	addeq	r1, r1, r5
 80075f6:	6021      	streq	r1, [r4, #0]
 80075f8:	e7ed      	b.n	80075d6 <_free_r+0x22>
 80075fa:	461a      	mov	r2, r3
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	b10b      	cbz	r3, 8007604 <_free_r+0x50>
 8007600:	42a3      	cmp	r3, r4
 8007602:	d9fa      	bls.n	80075fa <_free_r+0x46>
 8007604:	6811      	ldr	r1, [r2, #0]
 8007606:	1855      	adds	r5, r2, r1
 8007608:	42a5      	cmp	r5, r4
 800760a:	d10b      	bne.n	8007624 <_free_r+0x70>
 800760c:	6824      	ldr	r4, [r4, #0]
 800760e:	4421      	add	r1, r4
 8007610:	1854      	adds	r4, r2, r1
 8007612:	42a3      	cmp	r3, r4
 8007614:	6011      	str	r1, [r2, #0]
 8007616:	d1e0      	bne.n	80075da <_free_r+0x26>
 8007618:	681c      	ldr	r4, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	6053      	str	r3, [r2, #4]
 800761e:	4421      	add	r1, r4
 8007620:	6011      	str	r1, [r2, #0]
 8007622:	e7da      	b.n	80075da <_free_r+0x26>
 8007624:	d902      	bls.n	800762c <_free_r+0x78>
 8007626:	230c      	movs	r3, #12
 8007628:	6003      	str	r3, [r0, #0]
 800762a:	e7d6      	b.n	80075da <_free_r+0x26>
 800762c:	6825      	ldr	r5, [r4, #0]
 800762e:	1961      	adds	r1, r4, r5
 8007630:	428b      	cmp	r3, r1
 8007632:	bf04      	itt	eq
 8007634:	6819      	ldreq	r1, [r3, #0]
 8007636:	685b      	ldreq	r3, [r3, #4]
 8007638:	6063      	str	r3, [r4, #4]
 800763a:	bf04      	itt	eq
 800763c:	1949      	addeq	r1, r1, r5
 800763e:	6021      	streq	r1, [r4, #0]
 8007640:	6054      	str	r4, [r2, #4]
 8007642:	e7ca      	b.n	80075da <_free_r+0x26>
 8007644:	b003      	add	sp, #12
 8007646:	bd30      	pop	{r4, r5, pc}
 8007648:	2001451c 	.word	0x2001451c

0800764c <sbrk_aligned>:
 800764c:	b570      	push	{r4, r5, r6, lr}
 800764e:	4e0e      	ldr	r6, [pc, #56]	; (8007688 <sbrk_aligned+0x3c>)
 8007650:	460c      	mov	r4, r1
 8007652:	6831      	ldr	r1, [r6, #0]
 8007654:	4605      	mov	r5, r0
 8007656:	b911      	cbnz	r1, 800765e <sbrk_aligned+0x12>
 8007658:	f000 f88c 	bl	8007774 <_sbrk_r>
 800765c:	6030      	str	r0, [r6, #0]
 800765e:	4621      	mov	r1, r4
 8007660:	4628      	mov	r0, r5
 8007662:	f000 f887 	bl	8007774 <_sbrk_r>
 8007666:	1c43      	adds	r3, r0, #1
 8007668:	d00a      	beq.n	8007680 <sbrk_aligned+0x34>
 800766a:	1cc4      	adds	r4, r0, #3
 800766c:	f024 0403 	bic.w	r4, r4, #3
 8007670:	42a0      	cmp	r0, r4
 8007672:	d007      	beq.n	8007684 <sbrk_aligned+0x38>
 8007674:	1a21      	subs	r1, r4, r0
 8007676:	4628      	mov	r0, r5
 8007678:	f000 f87c 	bl	8007774 <_sbrk_r>
 800767c:	3001      	adds	r0, #1
 800767e:	d101      	bne.n	8007684 <sbrk_aligned+0x38>
 8007680:	f04f 34ff 	mov.w	r4, #4294967295
 8007684:	4620      	mov	r0, r4
 8007686:	bd70      	pop	{r4, r5, r6, pc}
 8007688:	20014520 	.word	0x20014520

0800768c <_malloc_r>:
 800768c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007690:	1ccd      	adds	r5, r1, #3
 8007692:	f025 0503 	bic.w	r5, r5, #3
 8007696:	3508      	adds	r5, #8
 8007698:	2d0c      	cmp	r5, #12
 800769a:	bf38      	it	cc
 800769c:	250c      	movcc	r5, #12
 800769e:	2d00      	cmp	r5, #0
 80076a0:	4607      	mov	r7, r0
 80076a2:	db01      	blt.n	80076a8 <_malloc_r+0x1c>
 80076a4:	42a9      	cmp	r1, r5
 80076a6:	d905      	bls.n	80076b4 <_malloc_r+0x28>
 80076a8:	230c      	movs	r3, #12
 80076aa:	603b      	str	r3, [r7, #0]
 80076ac:	2600      	movs	r6, #0
 80076ae:	4630      	mov	r0, r6
 80076b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076b4:	4e2e      	ldr	r6, [pc, #184]	; (8007770 <_malloc_r+0xe4>)
 80076b6:	f000 f8f5 	bl	80078a4 <__malloc_lock>
 80076ba:	6833      	ldr	r3, [r6, #0]
 80076bc:	461c      	mov	r4, r3
 80076be:	bb34      	cbnz	r4, 800770e <_malloc_r+0x82>
 80076c0:	4629      	mov	r1, r5
 80076c2:	4638      	mov	r0, r7
 80076c4:	f7ff ffc2 	bl	800764c <sbrk_aligned>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	4604      	mov	r4, r0
 80076cc:	d14d      	bne.n	800776a <_malloc_r+0xde>
 80076ce:	6834      	ldr	r4, [r6, #0]
 80076d0:	4626      	mov	r6, r4
 80076d2:	2e00      	cmp	r6, #0
 80076d4:	d140      	bne.n	8007758 <_malloc_r+0xcc>
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	4631      	mov	r1, r6
 80076da:	4638      	mov	r0, r7
 80076dc:	eb04 0803 	add.w	r8, r4, r3
 80076e0:	f000 f848 	bl	8007774 <_sbrk_r>
 80076e4:	4580      	cmp	r8, r0
 80076e6:	d13a      	bne.n	800775e <_malloc_r+0xd2>
 80076e8:	6821      	ldr	r1, [r4, #0]
 80076ea:	3503      	adds	r5, #3
 80076ec:	1a6d      	subs	r5, r5, r1
 80076ee:	f025 0503 	bic.w	r5, r5, #3
 80076f2:	3508      	adds	r5, #8
 80076f4:	2d0c      	cmp	r5, #12
 80076f6:	bf38      	it	cc
 80076f8:	250c      	movcc	r5, #12
 80076fa:	4629      	mov	r1, r5
 80076fc:	4638      	mov	r0, r7
 80076fe:	f7ff ffa5 	bl	800764c <sbrk_aligned>
 8007702:	3001      	adds	r0, #1
 8007704:	d02b      	beq.n	800775e <_malloc_r+0xd2>
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	442b      	add	r3, r5
 800770a:	6023      	str	r3, [r4, #0]
 800770c:	e00e      	b.n	800772c <_malloc_r+0xa0>
 800770e:	6822      	ldr	r2, [r4, #0]
 8007710:	1b52      	subs	r2, r2, r5
 8007712:	d41e      	bmi.n	8007752 <_malloc_r+0xc6>
 8007714:	2a0b      	cmp	r2, #11
 8007716:	d916      	bls.n	8007746 <_malloc_r+0xba>
 8007718:	1961      	adds	r1, r4, r5
 800771a:	42a3      	cmp	r3, r4
 800771c:	6025      	str	r5, [r4, #0]
 800771e:	bf18      	it	ne
 8007720:	6059      	strne	r1, [r3, #4]
 8007722:	6863      	ldr	r3, [r4, #4]
 8007724:	bf08      	it	eq
 8007726:	6031      	streq	r1, [r6, #0]
 8007728:	5162      	str	r2, [r4, r5]
 800772a:	604b      	str	r3, [r1, #4]
 800772c:	4638      	mov	r0, r7
 800772e:	f104 060b 	add.w	r6, r4, #11
 8007732:	f000 f8bd 	bl	80078b0 <__malloc_unlock>
 8007736:	f026 0607 	bic.w	r6, r6, #7
 800773a:	1d23      	adds	r3, r4, #4
 800773c:	1af2      	subs	r2, r6, r3
 800773e:	d0b6      	beq.n	80076ae <_malloc_r+0x22>
 8007740:	1b9b      	subs	r3, r3, r6
 8007742:	50a3      	str	r3, [r4, r2]
 8007744:	e7b3      	b.n	80076ae <_malloc_r+0x22>
 8007746:	6862      	ldr	r2, [r4, #4]
 8007748:	42a3      	cmp	r3, r4
 800774a:	bf0c      	ite	eq
 800774c:	6032      	streq	r2, [r6, #0]
 800774e:	605a      	strne	r2, [r3, #4]
 8007750:	e7ec      	b.n	800772c <_malloc_r+0xa0>
 8007752:	4623      	mov	r3, r4
 8007754:	6864      	ldr	r4, [r4, #4]
 8007756:	e7b2      	b.n	80076be <_malloc_r+0x32>
 8007758:	4634      	mov	r4, r6
 800775a:	6876      	ldr	r6, [r6, #4]
 800775c:	e7b9      	b.n	80076d2 <_malloc_r+0x46>
 800775e:	230c      	movs	r3, #12
 8007760:	603b      	str	r3, [r7, #0]
 8007762:	4638      	mov	r0, r7
 8007764:	f000 f8a4 	bl	80078b0 <__malloc_unlock>
 8007768:	e7a1      	b.n	80076ae <_malloc_r+0x22>
 800776a:	6025      	str	r5, [r4, #0]
 800776c:	e7de      	b.n	800772c <_malloc_r+0xa0>
 800776e:	bf00      	nop
 8007770:	2001451c 	.word	0x2001451c

08007774 <_sbrk_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4d06      	ldr	r5, [pc, #24]	; (8007790 <_sbrk_r+0x1c>)
 8007778:	2300      	movs	r3, #0
 800777a:	4604      	mov	r4, r0
 800777c:	4608      	mov	r0, r1
 800777e:	602b      	str	r3, [r5, #0]
 8007780:	f7f9 fa54 	bl	8000c2c <_sbrk>
 8007784:	1c43      	adds	r3, r0, #1
 8007786:	d102      	bne.n	800778e <_sbrk_r+0x1a>
 8007788:	682b      	ldr	r3, [r5, #0]
 800778a:	b103      	cbz	r3, 800778e <_sbrk_r+0x1a>
 800778c:	6023      	str	r3, [r4, #0]
 800778e:	bd38      	pop	{r3, r4, r5, pc}
 8007790:	20014524 	.word	0x20014524

08007794 <__sread>:
 8007794:	b510      	push	{r4, lr}
 8007796:	460c      	mov	r4, r1
 8007798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800779c:	f000 f88e 	bl	80078bc <_read_r>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	bfab      	itete	ge
 80077a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077a6:	89a3      	ldrhlt	r3, [r4, #12]
 80077a8:	181b      	addge	r3, r3, r0
 80077aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077ae:	bfac      	ite	ge
 80077b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80077b2:	81a3      	strhlt	r3, [r4, #12]
 80077b4:	bd10      	pop	{r4, pc}

080077b6 <__swrite>:
 80077b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077ba:	461f      	mov	r7, r3
 80077bc:	898b      	ldrh	r3, [r1, #12]
 80077be:	05db      	lsls	r3, r3, #23
 80077c0:	4605      	mov	r5, r0
 80077c2:	460c      	mov	r4, r1
 80077c4:	4616      	mov	r6, r2
 80077c6:	d505      	bpl.n	80077d4 <__swrite+0x1e>
 80077c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077cc:	2302      	movs	r3, #2
 80077ce:	2200      	movs	r2, #0
 80077d0:	f000 f856 	bl	8007880 <_lseek_r>
 80077d4:	89a3      	ldrh	r3, [r4, #12]
 80077d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077de:	81a3      	strh	r3, [r4, #12]
 80077e0:	4632      	mov	r2, r6
 80077e2:	463b      	mov	r3, r7
 80077e4:	4628      	mov	r0, r5
 80077e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077ea:	f7ff bb2b 	b.w	8006e44 <_write_r>

080077ee <__sseek>:
 80077ee:	b510      	push	{r4, lr}
 80077f0:	460c      	mov	r4, r1
 80077f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f6:	f000 f843 	bl	8007880 <_lseek_r>
 80077fa:	1c43      	adds	r3, r0, #1
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	bf15      	itete	ne
 8007800:	6560      	strne	r0, [r4, #84]	; 0x54
 8007802:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007806:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800780a:	81a3      	strheq	r3, [r4, #12]
 800780c:	bf18      	it	ne
 800780e:	81a3      	strhne	r3, [r4, #12]
 8007810:	bd10      	pop	{r4, pc}

08007812 <__sclose>:
 8007812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007816:	f000 b801 	b.w	800781c <_close_r>
	...

0800781c <_close_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4d06      	ldr	r5, [pc, #24]	; (8007838 <_close_r+0x1c>)
 8007820:	2300      	movs	r3, #0
 8007822:	4604      	mov	r4, r0
 8007824:	4608      	mov	r0, r1
 8007826:	602b      	str	r3, [r5, #0]
 8007828:	f7f9 f9cb 	bl	8000bc2 <_close>
 800782c:	1c43      	adds	r3, r0, #1
 800782e:	d102      	bne.n	8007836 <_close_r+0x1a>
 8007830:	682b      	ldr	r3, [r5, #0]
 8007832:	b103      	cbz	r3, 8007836 <_close_r+0x1a>
 8007834:	6023      	str	r3, [r4, #0]
 8007836:	bd38      	pop	{r3, r4, r5, pc}
 8007838:	20014524 	.word	0x20014524

0800783c <_fstat_r>:
 800783c:	b538      	push	{r3, r4, r5, lr}
 800783e:	4d07      	ldr	r5, [pc, #28]	; (800785c <_fstat_r+0x20>)
 8007840:	2300      	movs	r3, #0
 8007842:	4604      	mov	r4, r0
 8007844:	4608      	mov	r0, r1
 8007846:	4611      	mov	r1, r2
 8007848:	602b      	str	r3, [r5, #0]
 800784a:	f7f9 f9c6 	bl	8000bda <_fstat>
 800784e:	1c43      	adds	r3, r0, #1
 8007850:	d102      	bne.n	8007858 <_fstat_r+0x1c>
 8007852:	682b      	ldr	r3, [r5, #0]
 8007854:	b103      	cbz	r3, 8007858 <_fstat_r+0x1c>
 8007856:	6023      	str	r3, [r4, #0]
 8007858:	bd38      	pop	{r3, r4, r5, pc}
 800785a:	bf00      	nop
 800785c:	20014524 	.word	0x20014524

08007860 <_isatty_r>:
 8007860:	b538      	push	{r3, r4, r5, lr}
 8007862:	4d06      	ldr	r5, [pc, #24]	; (800787c <_isatty_r+0x1c>)
 8007864:	2300      	movs	r3, #0
 8007866:	4604      	mov	r4, r0
 8007868:	4608      	mov	r0, r1
 800786a:	602b      	str	r3, [r5, #0]
 800786c:	f7f9 f9c5 	bl	8000bfa <_isatty>
 8007870:	1c43      	adds	r3, r0, #1
 8007872:	d102      	bne.n	800787a <_isatty_r+0x1a>
 8007874:	682b      	ldr	r3, [r5, #0]
 8007876:	b103      	cbz	r3, 800787a <_isatty_r+0x1a>
 8007878:	6023      	str	r3, [r4, #0]
 800787a:	bd38      	pop	{r3, r4, r5, pc}
 800787c:	20014524 	.word	0x20014524

08007880 <_lseek_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4d07      	ldr	r5, [pc, #28]	; (80078a0 <_lseek_r+0x20>)
 8007884:	4604      	mov	r4, r0
 8007886:	4608      	mov	r0, r1
 8007888:	4611      	mov	r1, r2
 800788a:	2200      	movs	r2, #0
 800788c:	602a      	str	r2, [r5, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	f7f9 f9be 	bl	8000c10 <_lseek>
 8007894:	1c43      	adds	r3, r0, #1
 8007896:	d102      	bne.n	800789e <_lseek_r+0x1e>
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	b103      	cbz	r3, 800789e <_lseek_r+0x1e>
 800789c:	6023      	str	r3, [r4, #0]
 800789e:	bd38      	pop	{r3, r4, r5, pc}
 80078a0:	20014524 	.word	0x20014524

080078a4 <__malloc_lock>:
 80078a4:	4801      	ldr	r0, [pc, #4]	; (80078ac <__malloc_lock+0x8>)
 80078a6:	f7ff be1d 	b.w	80074e4 <__retarget_lock_acquire_recursive>
 80078aa:	bf00      	nop
 80078ac:	20014517 	.word	0x20014517

080078b0 <__malloc_unlock>:
 80078b0:	4801      	ldr	r0, [pc, #4]	; (80078b8 <__malloc_unlock+0x8>)
 80078b2:	f7ff be18 	b.w	80074e6 <__retarget_lock_release_recursive>
 80078b6:	bf00      	nop
 80078b8:	20014517 	.word	0x20014517

080078bc <_read_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	4d07      	ldr	r5, [pc, #28]	; (80078dc <_read_r+0x20>)
 80078c0:	4604      	mov	r4, r0
 80078c2:	4608      	mov	r0, r1
 80078c4:	4611      	mov	r1, r2
 80078c6:	2200      	movs	r2, #0
 80078c8:	602a      	str	r2, [r5, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	f7f9 f95c 	bl	8000b88 <_read>
 80078d0:	1c43      	adds	r3, r0, #1
 80078d2:	d102      	bne.n	80078da <_read_r+0x1e>
 80078d4:	682b      	ldr	r3, [r5, #0]
 80078d6:	b103      	cbz	r3, 80078da <_read_r+0x1e>
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	bd38      	pop	{r3, r4, r5, pc}
 80078dc:	20014524 	.word	0x20014524

080078e0 <_init>:
 80078e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e2:	bf00      	nop
 80078e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078e6:	bc08      	pop	{r3}
 80078e8:	469e      	mov	lr, r3
 80078ea:	4770      	bx	lr

080078ec <_fini>:
 80078ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ee:	bf00      	nop
 80078f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078f2:	bc08      	pop	{r3}
 80078f4:	469e      	mov	lr, r3
 80078f6:	4770      	bx	lr
