
005Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bf8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08007df8  08007df8  00017df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fd4  08007fd4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007fd4  08007fd4  00017fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fdc  08007fdc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fdc  08007fdc  00017fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fe0  08007fe0  00017fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144a8  2000001c  08008000  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200144c4  08008000  000244c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017913  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e9  00000000  00000000  0003795d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  0003ad48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  0003c208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a9a  00000000  00000000  0003d520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174ac  00000000  00000000  00066fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104dcc  00000000  00000000  0007e466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00183232  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000565c  00000000  00000000  00183284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000001c 	.word	0x2000001c
 800021c:	00000000 	.word	0x00000000
 8000220:	08007de0 	.word	0x08007de0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000020 	.word	0x20000020
 800023c:	08007de0 	.word	0x08007de0

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	20012ef0 	.word	0x20012ef0

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b974 	b.w	80005d4 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	4604      	mov	r4, r0
 800030c:	468e      	mov	lr, r1
 800030e:	2b00      	cmp	r3, #0
 8000310:	d14d      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000312:	428a      	cmp	r2, r1
 8000314:	4694      	mov	ip, r2
 8000316:	d969      	bls.n	80003ec <__udivmoddi4+0xe8>
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	b152      	cbz	r2, 8000334 <__udivmoddi4+0x30>
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	f1c2 0120 	rsb	r1, r2, #32
 8000326:	fa20 f101 	lsr.w	r1, r0, r1
 800032a:	fa0c fc02 	lsl.w	ip, ip, r2
 800032e:	ea41 0e03 	orr.w	lr, r1, r3
 8000332:	4094      	lsls	r4, r2
 8000334:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000338:	0c21      	lsrs	r1, r4, #16
 800033a:	fbbe f6f8 	udiv	r6, lr, r8
 800033e:	fa1f f78c 	uxth.w	r7, ip
 8000342:	fb08 e316 	mls	r3, r8, r6, lr
 8000346:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034a:	fb06 f107 	mul.w	r1, r6, r7
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 811f 	bcs.w	800059c <__udivmoddi4+0x298>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 811c 	bls.w	800059c <__udivmoddi4+0x298>
 8000364:	3e02      	subs	r6, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 f707 	mul.w	r7, r0, r7
 800037c:	42a7      	cmp	r7, r4
 800037e:	d90a      	bls.n	8000396 <__udivmoddi4+0x92>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 33ff 	add.w	r3, r0, #4294967295
 8000388:	f080 810a 	bcs.w	80005a0 <__udivmoddi4+0x29c>
 800038c:	42a7      	cmp	r7, r4
 800038e:	f240 8107 	bls.w	80005a0 <__udivmoddi4+0x29c>
 8000392:	4464      	add	r4, ip
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039a:	1be4      	subs	r4, r4, r7
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa4>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xc2>
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	f000 80ef 	beq.w	8000596 <__udivmoddi4+0x292>
 80003b8:	2600      	movs	r6, #0
 80003ba:	e9c5 0100 	strd	r0, r1, [r5]
 80003be:	4630      	mov	r0, r6
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f683 	clz	r6, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d14a      	bne.n	8000464 <__udivmoddi4+0x160>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd4>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80f9 	bhi.w	80005ca <__udivmoddi4+0x2c6>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	469e      	mov	lr, r3
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa4>
 80003e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa4>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xec>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 8092 	bne.w	800051e <__udivmoddi4+0x21a>
 80003fa:	eba1 010c 	sub.w	r1, r1, ip
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	2601      	movs	r6, #1
 8000408:	0c20      	lsrs	r0, r4, #16
 800040a:	fbb1 f3f7 	udiv	r3, r1, r7
 800040e:	fb07 1113 	mls	r1, r7, r3, r1
 8000412:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000416:	fb0e f003 	mul.w	r0, lr, r3
 800041a:	4288      	cmp	r0, r1
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x12c>
 800041e:	eb1c 0101 	adds.w	r1, ip, r1
 8000422:	f103 38ff 	add.w	r8, r3, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x12a>
 8000428:	4288      	cmp	r0, r1
 800042a:	f200 80cb 	bhi.w	80005c4 <__udivmoddi4+0x2c0>
 800042e:	4643      	mov	r3, r8
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1110 	mls	r1, r7, r0, r1
 800043c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000440:	fb0e fe00 	mul.w	lr, lr, r0
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x156>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x154>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f200 80bb 	bhi.w	80005ce <__udivmoddi4+0x2ca>
 8000458:	4608      	mov	r0, r1
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000462:	e79c      	b.n	800039e <__udivmoddi4+0x9a>
 8000464:	f1c6 0720 	rsb	r7, r6, #32
 8000468:	40b3      	lsls	r3, r6
 800046a:	fa22 fc07 	lsr.w	ip, r2, r7
 800046e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000472:	fa20 f407 	lsr.w	r4, r0, r7
 8000476:	fa01 f306 	lsl.w	r3, r1, r6
 800047a:	431c      	orrs	r4, r3
 800047c:	40f9      	lsrs	r1, r7
 800047e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000482:	fa00 f306 	lsl.w	r3, r0, r6
 8000486:	fbb1 f8f9 	udiv	r8, r1, r9
 800048a:	0c20      	lsrs	r0, r4, #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fb09 1118 	mls	r1, r9, r8, r1
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	fb08 f00e 	mul.w	r0, r8, lr
 800049c:	4288      	cmp	r0, r1
 800049e:	fa02 f206 	lsl.w	r2, r2, r6
 80004a2:	d90b      	bls.n	80004bc <__udivmoddi4+0x1b8>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004ac:	f080 8088 	bcs.w	80005c0 <__udivmoddi4+0x2bc>
 80004b0:	4288      	cmp	r0, r1
 80004b2:	f240 8085 	bls.w	80005c0 <__udivmoddi4+0x2bc>
 80004b6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1a09      	subs	r1, r1, r0
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c4:	fb09 1110 	mls	r1, r9, r0, r1
 80004c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d0:	458e      	cmp	lr, r1
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x1e2>
 80004d4:	eb1c 0101 	adds.w	r1, ip, r1
 80004d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80004dc:	d26c      	bcs.n	80005b8 <__udivmoddi4+0x2b4>
 80004de:	458e      	cmp	lr, r1
 80004e0:	d96a      	bls.n	80005b8 <__udivmoddi4+0x2b4>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4461      	add	r1, ip
 80004e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ea:	fba0 9402 	umull	r9, r4, r0, r2
 80004ee:	eba1 010e 	sub.w	r1, r1, lr
 80004f2:	42a1      	cmp	r1, r4
 80004f4:	46c8      	mov	r8, r9
 80004f6:	46a6      	mov	lr, r4
 80004f8:	d356      	bcc.n	80005a8 <__udivmoddi4+0x2a4>
 80004fa:	d053      	beq.n	80005a4 <__udivmoddi4+0x2a0>
 80004fc:	b15d      	cbz	r5, 8000516 <__udivmoddi4+0x212>
 80004fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000502:	eb61 010e 	sbc.w	r1, r1, lr
 8000506:	fa01 f707 	lsl.w	r7, r1, r7
 800050a:	fa22 f306 	lsr.w	r3, r2, r6
 800050e:	40f1      	lsrs	r1, r6
 8000510:	431f      	orrs	r7, r3
 8000512:	e9c5 7100 	strd	r7, r1, [r5]
 8000516:	2600      	movs	r6, #0
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	f1c2 0320 	rsb	r3, r2, #32
 8000522:	40d8      	lsrs	r0, r3
 8000524:	fa0c fc02 	lsl.w	ip, ip, r2
 8000528:	fa21 f303 	lsr.w	r3, r1, r3
 800052c:	4091      	lsls	r1, r2
 800052e:	4301      	orrs	r1, r0
 8000530:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	fbb3 f0f7 	udiv	r0, r3, r7
 800053c:	fb07 3610 	mls	r6, r7, r0, r3
 8000540:	0c0b      	lsrs	r3, r1, #16
 8000542:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000546:	fb00 f60e 	mul.w	r6, r0, lr
 800054a:	429e      	cmp	r6, r3
 800054c:	fa04 f402 	lsl.w	r4, r4, r2
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x260>
 8000552:	eb1c 0303 	adds.w	r3, ip, r3
 8000556:	f100 38ff 	add.w	r8, r0, #4294967295
 800055a:	d22f      	bcs.n	80005bc <__udivmoddi4+0x2b8>
 800055c:	429e      	cmp	r6, r3
 800055e:	d92d      	bls.n	80005bc <__udivmoddi4+0x2b8>
 8000560:	3802      	subs	r0, #2
 8000562:	4463      	add	r3, ip
 8000564:	1b9b      	subs	r3, r3, r6
 8000566:	b289      	uxth	r1, r1
 8000568:	fbb3 f6f7 	udiv	r6, r3, r7
 800056c:	fb07 3316 	mls	r3, r7, r6, r3
 8000570:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000574:	fb06 f30e 	mul.w	r3, r6, lr
 8000578:	428b      	cmp	r3, r1
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x28a>
 800057c:	eb1c 0101 	adds.w	r1, ip, r1
 8000580:	f106 38ff 	add.w	r8, r6, #4294967295
 8000584:	d216      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000586:	428b      	cmp	r3, r1
 8000588:	d914      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000594:	e738      	b.n	8000408 <__udivmoddi4+0x104>
 8000596:	462e      	mov	r6, r5
 8000598:	4628      	mov	r0, r5
 800059a:	e705      	b.n	80003a8 <__udivmoddi4+0xa4>
 800059c:	4606      	mov	r6, r0
 800059e:	e6e3      	b.n	8000368 <__udivmoddi4+0x64>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6f8      	b.n	8000396 <__udivmoddi4+0x92>
 80005a4:	454b      	cmp	r3, r9
 80005a6:	d2a9      	bcs.n	80004fc <__udivmoddi4+0x1f8>
 80005a8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b0:	3801      	subs	r0, #1
 80005b2:	e7a3      	b.n	80004fc <__udivmoddi4+0x1f8>
 80005b4:	4646      	mov	r6, r8
 80005b6:	e7ea      	b.n	800058e <__udivmoddi4+0x28a>
 80005b8:	4620      	mov	r0, r4
 80005ba:	e794      	b.n	80004e6 <__udivmoddi4+0x1e2>
 80005bc:	4640      	mov	r0, r8
 80005be:	e7d1      	b.n	8000564 <__udivmoddi4+0x260>
 80005c0:	46d0      	mov	r8, sl
 80005c2:	e77b      	b.n	80004bc <__udivmoddi4+0x1b8>
 80005c4:	3b02      	subs	r3, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	e732      	b.n	8000430 <__udivmoddi4+0x12c>
 80005ca:	4630      	mov	r0, r6
 80005cc:	e709      	b.n	80003e2 <__udivmoddi4+0xde>
 80005ce:	4464      	add	r4, ip
 80005d0:	3802      	subs	r0, #2
 80005d2:	e742      	b.n	800045a <__udivmoddi4+0x156>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08c      	sub	sp, #48	; 0x30
 80005dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	4b7f      	ldr	r3, [pc, #508]	; (80007ec <MX_GPIO_Init+0x214>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a7e      	ldr	r2, [pc, #504]	; (80007ec <MX_GPIO_Init+0x214>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b7c      	ldr	r3, [pc, #496]	; (80007ec <MX_GPIO_Init+0x214>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0304 	and.w	r3, r3, #4
 8000602:	61bb      	str	r3, [r7, #24]
 8000604:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000606:	4b79      	ldr	r3, [pc, #484]	; (80007ec <MX_GPIO_Init+0x214>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a78      	ldr	r2, [pc, #480]	; (80007ec <MX_GPIO_Init+0x214>)
 800060c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b76      	ldr	r3, [pc, #472]	; (80007ec <MX_GPIO_Init+0x214>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b73      	ldr	r3, [pc, #460]	; (80007ec <MX_GPIO_Init+0x214>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a72      	ldr	r2, [pc, #456]	; (80007ec <MX_GPIO_Init+0x214>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b70      	ldr	r3, [pc, #448]	; (80007ec <MX_GPIO_Init+0x214>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	4b6d      	ldr	r3, [pc, #436]	; (80007ec <MX_GPIO_Init+0x214>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a6c      	ldr	r2, [pc, #432]	; (80007ec <MX_GPIO_Init+0x214>)
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b6a      	ldr	r3, [pc, #424]	; (80007ec <MX_GPIO_Init+0x214>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064e:	4b67      	ldr	r3, [pc, #412]	; (80007ec <MX_GPIO_Init+0x214>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a66      	ldr	r2, [pc, #408]	; (80007ec <MX_GPIO_Init+0x214>)
 8000654:	f043 0308 	orr.w	r3, r3, #8
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b64      	ldr	r3, [pc, #400]	; (80007ec <MX_GPIO_Init+0x214>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0308 	and.w	r3, r3, #8
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000666:	4b61      	ldr	r3, [pc, #388]	; (80007ec <MX_GPIO_Init+0x214>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a60      	ldr	r2, [pc, #384]	; (80007ec <MX_GPIO_Init+0x214>)
 800066c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b5e      	ldr	r3, [pc, #376]	; (80007ec <MX_GPIO_Init+0x214>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f244 0181 	movw	r1, #16513	; 0x4081
 8000684:	485a      	ldr	r0, [pc, #360]	; (80007f0 <MX_GPIO_Init+0x218>)
 8000686:	f000 fe7d 	bl	8001384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2140      	movs	r1, #64	; 0x40
 800068e:	4859      	ldr	r0, [pc, #356]	; (80007f4 <MX_GPIO_Init+0x21c>)
 8000690:	f000 fe78 	bl	8001384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800069a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800069e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4619      	mov	r1, r3
 80006aa:	4853      	ldr	r0, [pc, #332]	; (80007f8 <MX_GPIO_Init+0x220>)
 80006ac:	f000 fca6 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006b0:	2332      	movs	r3, #50	; 0x32
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c0:	230b      	movs	r3, #11
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	484b      	ldr	r0, [pc, #300]	; (80007f8 <MX_GPIO_Init+0x220>)
 80006cc:	f000 fc96 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006d0:	2386      	movs	r3, #134	; 0x86
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d4:	2302      	movs	r3, #2
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006e0:	230b      	movs	r3, #11
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	4844      	ldr	r0, [pc, #272]	; (80007fc <MX_GPIO_Init+0x224>)
 80006ec:	f000 fc86 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006f0:	f244 0381 	movw	r3, #16513	; 0x4081
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4619      	mov	r1, r3
 8000708:	4839      	ldr	r0, [pc, #228]	; (80007f0 <MX_GPIO_Init+0x218>)
 800070a:	f000 fc77 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800070e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000720:	230b      	movs	r3, #11
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4831      	ldr	r0, [pc, #196]	; (80007f0 <MX_GPIO_Init+0x218>)
 800072c:	f000 fc66 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000730:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	2302      	movs	r3, #2
 8000738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073e:	2303      	movs	r3, #3
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000742:	2307      	movs	r3, #7
 8000744:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	482c      	ldr	r0, [pc, #176]	; (8000800 <MX_GPIO_Init+0x228>)
 800074e:	f000 fc55 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000752:	2340      	movs	r3, #64	; 0x40
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4822      	ldr	r0, [pc, #136]	; (80007f4 <MX_GPIO_Init+0x21c>)
 800076a:	f000 fc47 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800076e:	2380      	movs	r3, #128	; 0x80
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_GPIO_Init+0x21c>)
 8000782:	f000 fc3b 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000786:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000794:	2303      	movs	r3, #3
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000798:	230a      	movs	r3, #10
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4816      	ldr	r0, [pc, #88]	; (80007fc <MX_GPIO_Init+0x224>)
 80007a4:	f000 fc2a 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80007a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	480f      	ldr	r0, [pc, #60]	; (80007fc <MX_GPIO_Init+0x224>)
 80007be:	f000 fc1d 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d4:	230b      	movs	r3, #11
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_GPIO_Init+0x21c>)
 80007e0:	f000 fc0c 	bl	8000ffc <HAL_GPIO_Init>

}
 80007e4:	bf00      	nop
 80007e6:	3730      	adds	r7, #48	; 0x30
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020400 	.word	0x40020400
 80007f4:	40021800 	.word	0x40021800
 80007f8:	40020800 	.word	0x40020800
 80007fc:	40020000 	.word	0x40020000
 8000800:	40020c00 	.word	0x40020c00

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080a:	f000 fae8 	bl	8000dde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080e:	f000 f897 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000812:	f7ff fee1 	bl	80005d8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 8000816:	4b3b      	ldr	r3, [pc, #236]	; (8000904 <main+0x100>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a3a      	ldr	r2, [pc, #232]	; (8000904 <main+0x100>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000822:	4839      	ldr	r0, [pc, #228]	; (8000908 <main+0x104>)
 8000824:	f004 ffb0 	bl	8005788 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000828:	f004 fd1c 	bl	8005264 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(vLED_Green_handler, "LED_green_task", 200, NULL, 3, &pvled_green_handle);
 800082c:	4b37      	ldr	r3, [pc, #220]	; (800090c <main+0x108>)
 800082e:	9301      	str	r3, [sp, #4]
 8000830:	2303      	movs	r3, #3
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2300      	movs	r3, #0
 8000836:	22c8      	movs	r2, #200	; 0xc8
 8000838:	4935      	ldr	r1, [pc, #212]	; (8000910 <main+0x10c>)
 800083a:	4836      	ldr	r0, [pc, #216]	; (8000914 <main+0x110>)
 800083c:	f002 fbf8 	bl	8003030 <xTaskCreate>
 8000840:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d00a      	beq.n	800085e <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800084c:	f383 8811 	msr	BASEPRI, r3
 8000850:	f3bf 8f6f 	isb	sy
 8000854:	f3bf 8f4f 	dsb	sy
 8000858:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800085a:	bf00      	nop
 800085c:	e7fe      	b.n	800085c <main+0x58>

  next_task_handle = pvled_green_handle;
 800085e:	4b2b      	ldr	r3, [pc, #172]	; (800090c <main+0x108>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a2d      	ldr	r2, [pc, #180]	; (8000918 <main+0x114>)
 8000864:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(vLED_Blue_handler, "LED_blue_task", 200, NULL, 2, &pvled_blue_handle);
 8000866:	4b2d      	ldr	r3, [pc, #180]	; (800091c <main+0x118>)
 8000868:	9301      	str	r3, [sp, #4]
 800086a:	2302      	movs	r3, #2
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2300      	movs	r3, #0
 8000870:	22c8      	movs	r2, #200	; 0xc8
 8000872:	492b      	ldr	r1, [pc, #172]	; (8000920 <main+0x11c>)
 8000874:	482b      	ldr	r0, [pc, #172]	; (8000924 <main+0x120>)
 8000876:	f002 fbdb 	bl	8003030 <xTaskCreate>
 800087a:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d00a      	beq.n	8000898 <main+0x94>
        __asm volatile
 8000882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000886:	f383 8811 	msr	BASEPRI, r3
 800088a:	f3bf 8f6f 	isb	sy
 800088e:	f3bf 8f4f 	dsb	sy
 8000892:	60fb      	str	r3, [r7, #12]
    }
 8000894:	bf00      	nop
 8000896:	e7fe      	b.n	8000896 <main+0x92>

  status = xTaskCreate(vLED_Red_handler, "LED_red_task", 200, NULL, 1, &pvled_red_handle);
 8000898:	4b23      	ldr	r3, [pc, #140]	; (8000928 <main+0x124>)
 800089a:	9301      	str	r3, [sp, #4]
 800089c:	2301      	movs	r3, #1
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2300      	movs	r3, #0
 80008a2:	22c8      	movs	r2, #200	; 0xc8
 80008a4:	4921      	ldr	r1, [pc, #132]	; (800092c <main+0x128>)
 80008a6:	4822      	ldr	r0, [pc, #136]	; (8000930 <main+0x12c>)
 80008a8:	f002 fbc2 	bl	8003030 <xTaskCreate>
 80008ac:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d00a      	beq.n	80008ca <main+0xc6>
        __asm volatile
 80008b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b8:	f383 8811 	msr	BASEPRI, r3
 80008bc:	f3bf 8f6f 	isb	sy
 80008c0:	f3bf 8f4f 	dsb	sy
 80008c4:	60bb      	str	r3, [r7, #8]
    }
 80008c6:	bf00      	nop
 80008c8:	e7fe      	b.n	80008c8 <main+0xc4>

  status = xTaskCreate(vButton_handler, "Button_task", 200, NULL, 4, &pvbutton_handle);
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <main+0x130>)
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	2304      	movs	r3, #4
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	2300      	movs	r3, #0
 80008d4:	22c8      	movs	r2, #200	; 0xc8
 80008d6:	4918      	ldr	r1, [pc, #96]	; (8000938 <main+0x134>)
 80008d8:	4818      	ldr	r0, [pc, #96]	; (800093c <main+0x138>)
 80008da:	f002 fba9 	bl	8003030 <xTaskCreate>
 80008de:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d00a      	beq.n	80008fc <main+0xf8>
        __asm volatile
 80008e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008ea:	f383 8811 	msr	BASEPRI, r3
 80008ee:	f3bf 8f6f 	isb	sy
 80008f2:	f3bf 8f4f 	dsb	sy
 80008f6:	607b      	str	r3, [r7, #4]
    }
 80008f8:	bf00      	nop
 80008fa:	e7fe      	b.n	80008fa <main+0xf6>

  //Start the FreeRTOS scheduler
  vTaskStartScheduler();
 80008fc:	f002 fdde 	bl	80034bc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000900:	e7fe      	b.n	8000900 <main+0xfc>
 8000902:	bf00      	nop
 8000904:	e0001000 	.word	0xe0001000
 8000908:	0007a120 	.word	0x0007a120
 800090c:	20000038 	.word	0x20000038
 8000910:	08007df8 	.word	0x08007df8
 8000914:	08000a1d 	.word	0x08000a1d
 8000918:	20000048 	.word	0x20000048
 800091c:	2000003c 	.word	0x2000003c
 8000920:	08007e08 	.word	0x08007e08
 8000924:	08000a89 	.word	0x08000a89
 8000928:	20000040 	.word	0x20000040
 800092c:	08007e18 	.word	0x08007e18
 8000930:	08000af5 	.word	0x08000af5
 8000934:	20000044 	.word	0x20000044
 8000938:	08007e28 	.word	0x08007e28
 800093c:	08000b6d 	.word	0x08000b6d

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b094      	sub	sp, #80	; 0x50
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	2234      	movs	r2, #52	; 0x34
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f007 fa3e 	bl	8007dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000964:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <SystemClock_Config+0xd4>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	4a2a      	ldr	r2, [pc, #168]	; (8000a14 <SystemClock_Config+0xd4>)
 800096a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096e:	6413      	str	r3, [r2, #64]	; 0x40
 8000970:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <SystemClock_Config+0xd4>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800097c:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <SystemClock_Config+0xd8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a25      	ldr	r2, [pc, #148]	; (8000a18 <SystemClock_Config+0xd8>)
 8000982:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <SystemClock_Config+0xd8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000994:	2302      	movs	r3, #2
 8000996:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000998:	2301      	movs	r3, #1
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800099c:	2310      	movs	r3, #16
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a0:	2302      	movs	r3, #2
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a4:	2300      	movs	r3, #0
 80009a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009a8:	2308      	movs	r3, #8
 80009aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80009ac:	23d8      	movs	r3, #216	; 0xd8
 80009ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fd63 	bl	800148c <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009cc:	f000 f908 	bl	8000be0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009d0:	f000 fd0c 	bl	80013ec <HAL_PWREx_EnableOverDrive>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009da:	f000 f901 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009de:	230f      	movs	r3, #15
 80009e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e2:	2302      	movs	r3, #2
 80009e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	2107      	movs	r1, #7
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 fff3 	bl	80019e8 <HAL_RCC_ClockConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a08:	f000 f8ea 	bl	8000be0 <Error_Handler>
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	3750      	adds	r7, #80	; 0x50
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40007000 	.word	0x40007000

08000a1c <vLED_Green_handler>:

/* USER CODE BEGIN 4 */
static void vLED_Green_handler( void * pvParameters )
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a24:	4813      	ldr	r0, [pc, #76]	; (8000a74 <vLED_Green_handler+0x58>)
 8000a26:	f007 f8f3 	bl	8007c10 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, GREEN_LED_PIN);
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4812      	ldr	r0, [pc, #72]	; (8000a78 <vLED_Green_handler+0x5c>)
 8000a2e:	f000 fcc2 	bl	80013b6 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f003 fa24 	bl	8003e8c <xTaskGenericNotifyWait>
 8000a44:	60f8      	str	r0, [r7, #12]

		if(status == pdPASS)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d1eb      	bne.n	8000a24 <vLED_Green_handler+0x8>
		{
			vTaskSuspendAll();
 8000a4c:	f002 fd98 	bl	8003580 <vTaskSuspendAll>
			next_task_handle = pvled_blue_handle;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <vLED_Green_handler+0x60>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <vLED_Green_handler+0x64>)
 8000a56:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a58:	f002 fda0 	bl	800359c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOB, GREEN_LED_PIN, GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2101      	movs	r1, #1
 8000a60:	4805      	ldr	r0, [pc, #20]	; (8000a78 <vLED_Green_handler+0x5c>)
 8000a62:	f000 fc8f 	bl	8001384 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green task");
 8000a66:	4807      	ldr	r0, [pc, #28]	; (8000a84 <vLED_Green_handler+0x68>)
 8000a68:	f007 f8d2 	bl	8007c10 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f002 fc43 	bl	80032f8 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a72:	e7d7      	b.n	8000a24 <vLED_Green_handler+0x8>
 8000a74:	08007e34 	.word	0x08007e34
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	2000003c 	.word	0x2000003c
 8000a80:	20000048 	.word	0x20000048
 8000a84:	08007e48 	.word	0x08007e48

08000a88 <vLED_Blue_handler>:
		}
	}
}
static void vLED_Blue_handler( void * pvParameters )
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af02      	add	r7, sp, #8
 8000a8e:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000a90:	4813      	ldr	r0, [pc, #76]	; (8000ae0 <vLED_Blue_handler+0x58>)
 8000a92:	f007 f8bd 	bl	8007c10 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, BLUE_LED_PIN);
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	4812      	ldr	r0, [pc, #72]	; (8000ae4 <vLED_Blue_handler+0x5c>)
 8000a9a:	f000 fc8c 	bl	80013b6 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000a9e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f003 f9ee 	bl	8003e8c <xTaskGenericNotifyWait>
 8000ab0:	60f8      	str	r0, [r7, #12]

		if(status == pdPASS)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d1eb      	bne.n	8000a90 <vLED_Blue_handler+0x8>
		{
			vTaskSuspendAll();
 8000ab8:	f002 fd62 	bl	8003580 <vTaskSuspendAll>
			next_task_handle = pvled_red_handle;
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <vLED_Blue_handler+0x60>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <vLED_Blue_handler+0x64>)
 8000ac2:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000ac4:	f002 fd6a 	bl	800359c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOB, BLUE_LED_PIN, GPIO_PIN_SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2180      	movs	r1, #128	; 0x80
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <vLED_Blue_handler+0x5c>)
 8000ace:	f000 fc59 	bl	8001384 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete blue task");
 8000ad2:	4807      	ldr	r0, [pc, #28]	; (8000af0 <vLED_Blue_handler+0x68>)
 8000ad4:	f007 f89c 	bl	8007c10 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f002 fc0d 	bl	80032f8 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000ade:	e7d7      	b.n	8000a90 <vLED_Blue_handler+0x8>
 8000ae0:	08007e5c 	.word	0x08007e5c
 8000ae4:	40020400 	.word	0x40020400
 8000ae8:	20000040 	.word	0x20000040
 8000aec:	20000048 	.word	0x20000048
 8000af0:	08007e70 	.word	0x08007e70

08000af4 <vLED_Red_handler>:
		}
	}
}
static void vLED_Red_handler( void * pvParameters )
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af02      	add	r7, sp, #8
 8000afa:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000afc:	4816      	ldr	r0, [pc, #88]	; (8000b58 <vLED_Red_handler+0x64>)
 8000afe:	f007 f887 	bl	8007c10 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB, RED_LED_PIN);
 8000b02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b06:	4815      	ldr	r0, [pc, #84]	; (8000b5c <vLED_Red_handler+0x68>)
 8000b08:	f000 fc55 	bl	80013b6 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000b0c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2300      	movs	r3, #0
 8000b14:	2200      	movs	r2, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f003 f9b7 	bl	8003e8c <xTaskGenericNotifyWait>
 8000b1e:	60f8      	str	r0, [r7, #12]

		if(status == pdPASS)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d1ea      	bne.n	8000afc <vLED_Red_handler+0x8>
		{
			vTaskSuspendAll();
 8000b26:	f002 fd2b 	bl	8003580 <vTaskSuspendAll>
			next_task_handle = NULL;
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <vLED_Red_handler+0x6c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8000b30:	f002 fd34 	bl	800359c <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOB, RED_LED_PIN, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b3a:	4808      	ldr	r0, [pc, #32]	; (8000b5c <vLED_Red_handler+0x68>)
 8000b3c:	f000 fc22 	bl	8001384 <HAL_GPIO_WritePin>
			vTaskDelete(pvbutton_handle);
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <vLED_Red_handler+0x70>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f002 fbd7 	bl	80032f8 <vTaskDelete>
			SEGGER_SYSVIEW_PrintfTarget("Delete red task");
 8000b4a:	4807      	ldr	r0, [pc, #28]	; (8000b68 <vLED_Red_handler+0x74>)
 8000b4c:	f007 f860 	bl	8007c10 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f002 fbd1 	bl	80032f8 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b56:	e7d1      	b.n	8000afc <vLED_Red_handler+0x8>
 8000b58:	08007e84 	.word	0x08007e84
 8000b5c:	40020400 	.word	0x40020400
 8000b60:	20000048 	.word	0x20000048
 8000b64:	20000044 	.word	0x20000044
 8000b68:	08007e98 	.word	0x08007e98

08000b6c <vButton_handler>:
		}
	}
}

static void vButton_handler( void * pvParameters )
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af02      	add	r7, sp, #8
 8000b72:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		btn_read = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000b7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <vButton_handler+0x48>)
 8000b82:	f000 fbe7 	bl	8001354 <HAL_GPIO_ReadPin>
 8000b86:	4603      	mov	r3, r0
 8000b88:	73bb      	strb	r3, [r7, #14]

		if(btn_read)
 8000b8a:	7bbb      	ldrb	r3, [r7, #14]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d00b      	beq.n	8000ba8 <vButton_handler+0x3c>
		{
			if(!prev_read)
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d108      	bne.n	8000ba8 <vButton_handler+0x3c>
				xTaskNotify(next_task_handle,0,eNoAction);
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <vButton_handler+0x4c>)
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	f003 f9fa 	bl	8003f9c <xTaskGenericNotify>
		}
		prev_read = btn_read;
 8000ba8:	7bbb      	ldrb	r3, [r7, #14]
 8000baa:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000bac:	200a      	movs	r0, #10
 8000bae:	f002 fc4d 	bl	800344c <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000bb2:	e7e3      	b.n	8000b7c <vButton_handler+0x10>
 8000bb4:	40020800 	.word	0x40020800
 8000bb8:	20000048 	.word	0x20000048

08000bbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d101      	bne.n	8000bd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bce:	f000 f913 	bl	8000df8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40001000 	.word	0x40001000

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <Error_Handler+0x8>
	...

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_MspInit+0x44>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <HAL_MspInit+0x44>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <HAL_MspInit+0x44>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_MspInit+0x44>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <HAL_MspInit+0x44>)
 8000c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c14:	6453      	str	r3, [r2, #68]	; 0x44
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_MspInit+0x44>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c22:	f003 ff69 	bl	8004af8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800

08000c34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08e      	sub	sp, #56	; 0x38
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c44:	4b33      	ldr	r3, [pc, #204]	; (8000d14 <HAL_InitTick+0xe0>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	4a32      	ldr	r2, [pc, #200]	; (8000d14 <HAL_InitTick+0xe0>)
 8000c4a:	f043 0310 	orr.w	r3, r3, #16
 8000c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c50:	4b30      	ldr	r3, [pc, #192]	; (8000d14 <HAL_InitTick+0xe0>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	f003 0310 	and.w	r3, r3, #16
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c5c:	f107 0210 	add.w	r2, r7, #16
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4611      	mov	r1, r2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 f8ce 	bl	8001e08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d103      	bne.n	8000c7e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c76:	f001 f8b3 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8000c7a:	6378      	str	r0, [r7, #52]	; 0x34
 8000c7c:	e004      	b.n	8000c88 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c7e:	f001 f8af 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8000c82:	4603      	mov	r3, r0
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c8a:	4a23      	ldr	r2, [pc, #140]	; (8000d18 <HAL_InitTick+0xe4>)
 8000c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c90:	0c9b      	lsrs	r3, r3, #18
 8000c92:	3b01      	subs	r3, #1
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <HAL_InitTick+0xe8>)
 8000c98:	4a21      	ldr	r2, [pc, #132]	; (8000d20 <HAL_InitTick+0xec>)
 8000c9a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <HAL_InitTick+0xe8>)
 8000c9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ca2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ca4:	4a1d      	ldr	r2, [pc, #116]	; (8000d1c <HAL_InitTick+0xe8>)
 8000ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <HAL_InitTick+0xe8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <HAL_InitTick+0xe8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <HAL_InitTick+0xe8>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cbc:	4817      	ldr	r0, [pc, #92]	; (8000d1c <HAL_InitTick+0xe8>)
 8000cbe:	f001 f8d5 	bl	8001e6c <HAL_TIM_Base_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000cc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d11b      	bne.n	8000d08 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cd0:	4812      	ldr	r0, [pc, #72]	; (8000d1c <HAL_InitTick+0xe8>)
 8000cd2:	f001 f92d 	bl	8001f30 <HAL_TIM_Base_Start_IT>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000cdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d111      	bne.n	8000d08 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ce4:	2036      	movs	r0, #54	; 0x36
 8000ce6:	f000 f97b 	bl	8000fe0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b0f      	cmp	r3, #15
 8000cee:	d808      	bhi.n	8000d02 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	2036      	movs	r0, #54	; 0x36
 8000cf6:	f000 f957 	bl	8000fa8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_InitTick+0xf0>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	e002      	b.n	8000d08 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3738      	adds	r7, #56	; 0x38
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40023800 	.word	0x40023800
 8000d18:	431bde83 	.word	0x431bde83
 8000d1c:	2000004c 	.word	0x2000004c
 8000d20:	40001000 	.word	0x40001000
 8000d24:	20000004 	.word	0x20000004

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler+0x4>

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <TIM6_DAC_IRQHandler+0x10>)
 8000d5a:	f001 f961 	bl	8002020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000004c 	.word	0x2000004c

08000d68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <SystemInit+0x20>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <SystemInit+0x20>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d90:	f7ff ffea 	bl	8000d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d96:	490d      	ldr	r1, [pc, #52]	; (8000dcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dac:	4c0a      	ldr	r4, [pc, #40]	; (8000dd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dba:	f006 ffc7 	bl	8007d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dbe:	f7ff fd21 	bl	8000804 <main>
  bx  lr    
 8000dc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dc4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000dd0:	08007fe4 	.word	0x08007fe4
  ldr r2, =_sbss
 8000dd4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000dd8:	200144c4 	.word	0x200144c4

08000ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC_IRQHandler>

08000dde <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de2:	2003      	movs	r0, #3
 8000de4:	f000 f8d5 	bl	8000f92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de8:	200f      	movs	r0, #15
 8000dea:	f7ff ff23 	bl	8000c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dee:	f7ff fefd 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x20>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x24>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <HAL_IncTick+0x24>)
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20000098 	.word	0x20000098

08000e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return uwTick;
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <HAL_GetTick+0x14>)
 8000e26:	681b      	ldr	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000098 	.word	0x20000098

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <__NVIC_SetPriorityGrouping+0x40>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	4313      	orrs	r3, r2
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <__NVIC_SetPriorityGrouping+0x40>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00
 8000e7c:	05fa0000 	.word	0x05fa0000

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	db0b      	blt.n	8000ec6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f003 021f 	and.w	r2, r3, #31
 8000eb4:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <__NVIC_EnableIRQ+0x38>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	095b      	lsrs	r3, r3, #5
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	; (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	; (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ff4c 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fba:	f7ff ff61 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8000fbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	68b9      	ldr	r1, [r7, #8]
 8000fc4:	6978      	ldr	r0, [r7, #20]
 8000fc6:	f7ff ffb1 	bl	8000f2c <NVIC_EncodePriority>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff80 	bl	8000ed8 <__NVIC_SetPriority>
}
 8000fd8:	bf00      	nop
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff54 	bl	8000e9c <__NVIC_EnableIRQ>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
 800101a:	e175      	b.n	8001308 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800101c:	2201      	movs	r2, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	429a      	cmp	r2, r3
 8001036:	f040 8164 	bne.w	8001302 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	2b01      	cmp	r3, #1
 8001044:	d005      	beq.n	8001052 <HAL_GPIO_Init+0x56>
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d130      	bne.n	80010b4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	2203      	movs	r2, #3
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	68da      	ldr	r2, [r3, #12]
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001088:	2201      	movs	r2, #1
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	091b      	lsrs	r3, r3, #4
 800109e:	f003 0201 	and.w	r2, r3, #1
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d017      	beq.n	80010f0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	2203      	movs	r2, #3
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d123      	bne.n	8001144 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	08da      	lsrs	r2, r3, #3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3208      	adds	r2, #8
 8001104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	220f      	movs	r2, #15
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	691a      	ldr	r2, [r3, #16]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	08da      	lsrs	r2, r3, #3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3208      	adds	r2, #8
 800113e:	69b9      	ldr	r1, [r7, #24]
 8001140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0203 	and.w	r2, r3, #3
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 80be 	beq.w	8001302 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001186:	4b66      	ldr	r3, [pc, #408]	; (8001320 <HAL_GPIO_Init+0x324>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	4a65      	ldr	r2, [pc, #404]	; (8001320 <HAL_GPIO_Init+0x324>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001190:	6453      	str	r3, [r2, #68]	; 0x44
 8001192:	4b63      	ldr	r3, [pc, #396]	; (8001320 <HAL_GPIO_Init+0x324>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800119e:	4a61      	ldr	r2, [pc, #388]	; (8001324 <HAL_GPIO_Init+0x328>)
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a58      	ldr	r2, [pc, #352]	; (8001328 <HAL_GPIO_Init+0x32c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d037      	beq.n	800123a <HAL_GPIO_Init+0x23e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a57      	ldr	r2, [pc, #348]	; (800132c <HAL_GPIO_Init+0x330>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d031      	beq.n	8001236 <HAL_GPIO_Init+0x23a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a56      	ldr	r2, [pc, #344]	; (8001330 <HAL_GPIO_Init+0x334>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d02b      	beq.n	8001232 <HAL_GPIO_Init+0x236>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a55      	ldr	r2, [pc, #340]	; (8001334 <HAL_GPIO_Init+0x338>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d025      	beq.n	800122e <HAL_GPIO_Init+0x232>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a54      	ldr	r2, [pc, #336]	; (8001338 <HAL_GPIO_Init+0x33c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d01f      	beq.n	800122a <HAL_GPIO_Init+0x22e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a53      	ldr	r2, [pc, #332]	; (800133c <HAL_GPIO_Init+0x340>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d019      	beq.n	8001226 <HAL_GPIO_Init+0x22a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a52      	ldr	r2, [pc, #328]	; (8001340 <HAL_GPIO_Init+0x344>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d013      	beq.n	8001222 <HAL_GPIO_Init+0x226>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a51      	ldr	r2, [pc, #324]	; (8001344 <HAL_GPIO_Init+0x348>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00d      	beq.n	800121e <HAL_GPIO_Init+0x222>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a50      	ldr	r2, [pc, #320]	; (8001348 <HAL_GPIO_Init+0x34c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d007      	beq.n	800121a <HAL_GPIO_Init+0x21e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4f      	ldr	r2, [pc, #316]	; (800134c <HAL_GPIO_Init+0x350>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d101      	bne.n	8001216 <HAL_GPIO_Init+0x21a>
 8001212:	2309      	movs	r3, #9
 8001214:	e012      	b.n	800123c <HAL_GPIO_Init+0x240>
 8001216:	230a      	movs	r3, #10
 8001218:	e010      	b.n	800123c <HAL_GPIO_Init+0x240>
 800121a:	2308      	movs	r3, #8
 800121c:	e00e      	b.n	800123c <HAL_GPIO_Init+0x240>
 800121e:	2307      	movs	r3, #7
 8001220:	e00c      	b.n	800123c <HAL_GPIO_Init+0x240>
 8001222:	2306      	movs	r3, #6
 8001224:	e00a      	b.n	800123c <HAL_GPIO_Init+0x240>
 8001226:	2305      	movs	r3, #5
 8001228:	e008      	b.n	800123c <HAL_GPIO_Init+0x240>
 800122a:	2304      	movs	r3, #4
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x240>
 800122e:	2303      	movs	r3, #3
 8001230:	e004      	b.n	800123c <HAL_GPIO_Init+0x240>
 8001232:	2302      	movs	r3, #2
 8001234:	e002      	b.n	800123c <HAL_GPIO_Init+0x240>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_GPIO_Init+0x240>
 800123a:	2300      	movs	r3, #0
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	f002 0203 	and.w	r2, r2, #3
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	4093      	lsls	r3, r2
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800124c:	4935      	ldr	r1, [pc, #212]	; (8001324 <HAL_GPIO_Init+0x328>)
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	089b      	lsrs	r3, r3, #2
 8001252:	3302      	adds	r3, #2
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800125a:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <HAL_GPIO_Init+0x354>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800127e:	4a34      	ldr	r2, [pc, #208]	; (8001350 <HAL_GPIO_Init+0x354>)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001284:	4b32      	ldr	r3, [pc, #200]	; (8001350 <HAL_GPIO_Init+0x354>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a8:	4a29      	ldr	r2, [pc, #164]	; (8001350 <HAL_GPIO_Init+0x354>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ae:	4b28      	ldr	r3, [pc, #160]	; (8001350 <HAL_GPIO_Init+0x354>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d2:	4a1f      	ldr	r2, [pc, #124]	; (8001350 <HAL_GPIO_Init+0x354>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <HAL_GPIO_Init+0x354>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012fc:	4a14      	ldr	r2, [pc, #80]	; (8001350 <HAL_GPIO_Init+0x354>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3301      	adds	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	2b0f      	cmp	r3, #15
 800130c:	f67f ae86 	bls.w	800101c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3724      	adds	r7, #36	; 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	40013800 	.word	0x40013800
 8001328:	40020000 	.word	0x40020000
 800132c:	40020400 	.word	0x40020400
 8001330:	40020800 	.word	0x40020800
 8001334:	40020c00 	.word	0x40020c00
 8001338:	40021000 	.word	0x40021000
 800133c:	40021400 	.word	0x40021400
 8001340:	40021800 	.word	0x40021800
 8001344:	40021c00 	.word	0x40021c00
 8001348:	40022000 	.word	0x40022000
 800134c:	40022400 	.word	0x40022400
 8001350:	40013c00 	.word	0x40013c00

08001354 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	887b      	ldrh	r3, [r7, #2]
 8001366:	4013      	ands	r3, r2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d002      	beq.n	8001372 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	e001      	b.n	8001376 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001372:	2300      	movs	r3, #0
 8001374:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001376:	7bfb      	ldrb	r3, [r7, #15]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
 8001390:	4613      	mov	r3, r2
 8001392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001394:	787b      	ldrb	r3, [r7, #1]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80013a0:	e003      	b.n	80013aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	041a      	lsls	r2, r3, #16
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	619a      	str	r2, [r3, #24]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013c8:	887a      	ldrh	r2, [r7, #2]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4013      	ands	r3, r2
 80013ce:	041a      	lsls	r2, r3, #16
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	43d9      	mvns	r1, r3
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	400b      	ands	r3, r1
 80013d8:	431a      	orrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	619a      	str	r2, [r3, #24]
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	4b23      	ldr	r3, [pc, #140]	; (8001484 <HAL_PWREx_EnableOverDrive+0x98>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a22      	ldr	r2, [pc, #136]	; (8001484 <HAL_PWREx_EnableOverDrive+0x98>)
 80013fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <HAL_PWREx_EnableOverDrive+0x98>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800140e:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a1d      	ldr	r2, [pc, #116]	; (8001488 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001418:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800141a:	f7ff fd01 	bl	8000e20 <HAL_GetTick>
 800141e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001420:	e009      	b.n	8001436 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001422:	f7ff fcfd 	bl	8000e20 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001430:	d901      	bls.n	8001436 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e022      	b.n	800147c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001442:	d1ee      	bne.n	8001422 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <HAL_PWREx_EnableOverDrive+0x9c>)
 800144a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001450:	f7ff fce6 	bl	8000e20 <HAL_GetTick>
 8001454:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001456:	e009      	b.n	800146c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001458:	f7ff fce2 	bl	8000e20 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001466:	d901      	bls.n	800146c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e007      	b.n	800147c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_PWREx_EnableOverDrive+0x9c>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001474:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001478:	d1ee      	bne.n	8001458 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40023800 	.word	0x40023800
 8001488:	40007000 	.word	0x40007000

0800148c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e29b      	b.n	80019da <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8087 	beq.w	80015be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014b0:	4b96      	ldr	r3, [pc, #600]	; (800170c <HAL_RCC_OscConfig+0x280>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 030c 	and.w	r3, r3, #12
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d00c      	beq.n	80014d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014bc:	4b93      	ldr	r3, [pc, #588]	; (800170c <HAL_RCC_OscConfig+0x280>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 030c 	and.w	r3, r3, #12
 80014c4:	2b08      	cmp	r3, #8
 80014c6:	d112      	bne.n	80014ee <HAL_RCC_OscConfig+0x62>
 80014c8:	4b90      	ldr	r3, [pc, #576]	; (800170c <HAL_RCC_OscConfig+0x280>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014d4:	d10b      	bne.n	80014ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d6:	4b8d      	ldr	r3, [pc, #564]	; (800170c <HAL_RCC_OscConfig+0x280>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d06c      	beq.n	80015bc <HAL_RCC_OscConfig+0x130>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d168      	bne.n	80015bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e275      	b.n	80019da <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f6:	d106      	bne.n	8001506 <HAL_RCC_OscConfig+0x7a>
 80014f8:	4b84      	ldr	r3, [pc, #528]	; (800170c <HAL_RCC_OscConfig+0x280>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a83      	ldr	r2, [pc, #524]	; (800170c <HAL_RCC_OscConfig+0x280>)
 80014fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	e02e      	b.n	8001564 <HAL_RCC_OscConfig+0xd8>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10c      	bne.n	8001528 <HAL_RCC_OscConfig+0x9c>
 800150e:	4b7f      	ldr	r3, [pc, #508]	; (800170c <HAL_RCC_OscConfig+0x280>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a7e      	ldr	r2, [pc, #504]	; (800170c <HAL_RCC_OscConfig+0x280>)
 8001514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b7c      	ldr	r3, [pc, #496]	; (800170c <HAL_RCC_OscConfig+0x280>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a7b      	ldr	r2, [pc, #492]	; (800170c <HAL_RCC_OscConfig+0x280>)
 8001520:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e01d      	b.n	8001564 <HAL_RCC_OscConfig+0xd8>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0xc0>
 8001532:	4b76      	ldr	r3, [pc, #472]	; (800170c <HAL_RCC_OscConfig+0x280>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a75      	ldr	r2, [pc, #468]	; (800170c <HAL_RCC_OscConfig+0x280>)
 8001538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b73      	ldr	r3, [pc, #460]	; (800170c <HAL_RCC_OscConfig+0x280>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a72      	ldr	r2, [pc, #456]	; (800170c <HAL_RCC_OscConfig+0x280>)
 8001544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e00b      	b.n	8001564 <HAL_RCC_OscConfig+0xd8>
 800154c:	4b6f      	ldr	r3, [pc, #444]	; (800170c <HAL_RCC_OscConfig+0x280>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a6e      	ldr	r2, [pc, #440]	; (800170c <HAL_RCC_OscConfig+0x280>)
 8001552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b6c      	ldr	r3, [pc, #432]	; (800170c <HAL_RCC_OscConfig+0x280>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a6b      	ldr	r2, [pc, #428]	; (800170c <HAL_RCC_OscConfig+0x280>)
 800155e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d013      	beq.n	8001594 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fc58 	bl	8000e20 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff fc54 	bl	8000e20 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e229      	b.n	80019da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	4b61      	ldr	r3, [pc, #388]	; (800170c <HAL_RCC_OscConfig+0x280>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0xe8>
 8001592:	e014      	b.n	80015be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001594:	f7ff fc44 	bl	8000e20 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff fc40 	bl	8000e20 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	; 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e215      	b.n	80019da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	4b57      	ldr	r3, [pc, #348]	; (800170c <HAL_RCC_OscConfig+0x280>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x110>
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d069      	beq.n	800169e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ca:	4b50      	ldr	r3, [pc, #320]	; (800170c <HAL_RCC_OscConfig+0x280>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00b      	beq.n	80015ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d6:	4b4d      	ldr	r3, [pc, #308]	; (800170c <HAL_RCC_OscConfig+0x280>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d11c      	bne.n	800161c <HAL_RCC_OscConfig+0x190>
 80015e2:	4b4a      	ldr	r3, [pc, #296]	; (800170c <HAL_RCC_OscConfig+0x280>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d116      	bne.n	800161c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ee:	4b47      	ldr	r3, [pc, #284]	; (800170c <HAL_RCC_OscConfig+0x280>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <HAL_RCC_OscConfig+0x17a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d001      	beq.n	8001606 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e1e9      	b.n	80019da <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001606:	4b41      	ldr	r3, [pc, #260]	; (800170c <HAL_RCC_OscConfig+0x280>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	493d      	ldr	r1, [pc, #244]	; (800170c <HAL_RCC_OscConfig+0x280>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161a:	e040      	b.n	800169e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d023      	beq.n	800166c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001624:	4b39      	ldr	r3, [pc, #228]	; (800170c <HAL_RCC_OscConfig+0x280>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a38      	ldr	r2, [pc, #224]	; (800170c <HAL_RCC_OscConfig+0x280>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff fbf6 	bl	8000e20 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001638:	f7ff fbf2 	bl	8000e20 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e1c7      	b.n	80019da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164a:	4b30      	ldr	r3, [pc, #192]	; (800170c <HAL_RCC_OscConfig+0x280>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001656:	4b2d      	ldr	r3, [pc, #180]	; (800170c <HAL_RCC_OscConfig+0x280>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	4929      	ldr	r1, [pc, #164]	; (800170c <HAL_RCC_OscConfig+0x280>)
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]
 800166a:	e018      	b.n	800169e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800166c:	4b27      	ldr	r3, [pc, #156]	; (800170c <HAL_RCC_OscConfig+0x280>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a26      	ldr	r2, [pc, #152]	; (800170c <HAL_RCC_OscConfig+0x280>)
 8001672:	f023 0301 	bic.w	r3, r3, #1
 8001676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff fbd2 	bl	8000e20 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001680:	f7ff fbce 	bl	8000e20 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e1a3      	b.n	80019da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001692:	4b1e      	ldr	r3, [pc, #120]	; (800170c <HAL_RCC_OscConfig+0x280>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d038      	beq.n	800171c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d019      	beq.n	80016e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b2:	4b16      	ldr	r3, [pc, #88]	; (800170c <HAL_RCC_OscConfig+0x280>)
 80016b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b6:	4a15      	ldr	r2, [pc, #84]	; (800170c <HAL_RCC_OscConfig+0x280>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016be:	f7ff fbaf 	bl	8000e20 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c6:	f7ff fbab 	bl	8000e20 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e180      	b.n	80019da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_RCC_OscConfig+0x280>)
 80016da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x23a>
 80016e4:	e01a      	b.n	800171c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_RCC_OscConfig+0x280>)
 80016e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ea:	4a08      	ldr	r2, [pc, #32]	; (800170c <HAL_RCC_OscConfig+0x280>)
 80016ec:	f023 0301 	bic.w	r3, r3, #1
 80016f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f2:	f7ff fb95 	bl	8000e20 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f8:	e00a      	b.n	8001710 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fa:	f7ff fb91 	bl	8000e20 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d903      	bls.n	8001710 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e166      	b.n	80019da <HAL_RCC_OscConfig+0x54e>
 800170c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001710:	4b92      	ldr	r3, [pc, #584]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 8001712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1ee      	bne.n	80016fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 80a4 	beq.w	8001872 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800172a:	4b8c      	ldr	r3, [pc, #560]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10d      	bne.n	8001752 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b89      	ldr	r3, [pc, #548]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a88      	ldr	r2, [pc, #544]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b86      	ldr	r3, [pc, #536]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174e:	2301      	movs	r3, #1
 8001750:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001752:	4b83      	ldr	r3, [pc, #524]	; (8001960 <HAL_RCC_OscConfig+0x4d4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175a:	2b00      	cmp	r3, #0
 800175c:	d118      	bne.n	8001790 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800175e:	4b80      	ldr	r3, [pc, #512]	; (8001960 <HAL_RCC_OscConfig+0x4d4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a7f      	ldr	r2, [pc, #508]	; (8001960 <HAL_RCC_OscConfig+0x4d4>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176a:	f7ff fb59 	bl	8000e20 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001772:	f7ff fb55 	bl	8000e20 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b64      	cmp	r3, #100	; 0x64
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e12a      	b.n	80019da <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001784:	4b76      	ldr	r3, [pc, #472]	; (8001960 <HAL_RCC_OscConfig+0x4d4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d106      	bne.n	80017a6 <HAL_RCC_OscConfig+0x31a>
 8001798:	4b70      	ldr	r3, [pc, #448]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 800179a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179c:	4a6f      	ldr	r2, [pc, #444]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6713      	str	r3, [r2, #112]	; 0x70
 80017a4:	e02d      	b.n	8001802 <HAL_RCC_OscConfig+0x376>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10c      	bne.n	80017c8 <HAL_RCC_OscConfig+0x33c>
 80017ae:	4b6b      	ldr	r3, [pc, #428]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 80017b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b2:	4a6a      	ldr	r2, [pc, #424]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 80017b4:	f023 0301 	bic.w	r3, r3, #1
 80017b8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ba:	4b68      	ldr	r3, [pc, #416]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017be:	4a67      	ldr	r2, [pc, #412]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 80017c0:	f023 0304 	bic.w	r3, r3, #4
 80017c4:	6713      	str	r3, [r2, #112]	; 0x70
 80017c6:	e01c      	b.n	8001802 <HAL_RCC_OscConfig+0x376>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	d10c      	bne.n	80017ea <HAL_RCC_OscConfig+0x35e>
 80017d0:	4b62      	ldr	r3, [pc, #392]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 80017d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d4:	4a61      	ldr	r2, [pc, #388]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 80017d6:	f043 0304 	orr.w	r3, r3, #4
 80017da:	6713      	str	r3, [r2, #112]	; 0x70
 80017dc:	4b5f      	ldr	r3, [pc, #380]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 80017de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e0:	4a5e      	ldr	r2, [pc, #376]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6713      	str	r3, [r2, #112]	; 0x70
 80017e8:	e00b      	b.n	8001802 <HAL_RCC_OscConfig+0x376>
 80017ea:	4b5c      	ldr	r3, [pc, #368]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ee:	4a5b      	ldr	r2, [pc, #364]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 80017f0:	f023 0301 	bic.w	r3, r3, #1
 80017f4:	6713      	str	r3, [r2, #112]	; 0x70
 80017f6:	4b59      	ldr	r3, [pc, #356]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 80017f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fa:	4a58      	ldr	r2, [pc, #352]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 80017fc:	f023 0304 	bic.w	r3, r3, #4
 8001800:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d015      	beq.n	8001836 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180a:	f7ff fb09 	bl	8000e20 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001810:	e00a      	b.n	8001828 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001812:	f7ff fb05 	bl	8000e20 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001820:	4293      	cmp	r3, r2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e0d8      	b.n	80019da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001828:	4b4c      	ldr	r3, [pc, #304]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 800182a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0ee      	beq.n	8001812 <HAL_RCC_OscConfig+0x386>
 8001834:	e014      	b.n	8001860 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001836:	f7ff faf3 	bl	8000e20 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183c:	e00a      	b.n	8001854 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183e:	f7ff faef 	bl	8000e20 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	f241 3288 	movw	r2, #5000	; 0x1388
 800184c:	4293      	cmp	r3, r2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e0c2      	b.n	80019da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001854:	4b41      	ldr	r3, [pc, #260]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 8001856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1ee      	bne.n	800183e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d105      	bne.n	8001872 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001866:	4b3d      	ldr	r3, [pc, #244]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a3c      	ldr	r2, [pc, #240]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 800186c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 80ae 	beq.w	80019d8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800187c:	4b37      	ldr	r3, [pc, #220]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b08      	cmp	r3, #8
 8001886:	d06d      	beq.n	8001964 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d14b      	bne.n	8001928 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001890:	4b32      	ldr	r3, [pc, #200]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a31      	ldr	r2, [pc, #196]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 8001896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800189a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff fac0 	bl	8000e20 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a4:	f7ff fabc 	bl	8000e20 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e091      	b.n	80019da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b6:	4b29      	ldr	r3, [pc, #164]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69da      	ldr	r2, [r3, #28]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	019b      	lsls	r3, r3, #6
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	085b      	lsrs	r3, r3, #1
 80018da:	3b01      	subs	r3, #1
 80018dc:	041b      	lsls	r3, r3, #16
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e4:	061b      	lsls	r3, r3, #24
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	071b      	lsls	r3, r3, #28
 80018ee:	491b      	ldr	r1, [pc, #108]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f4:	4b19      	ldr	r3, [pc, #100]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a18      	ldr	r2, [pc, #96]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 80018fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff fa8e 	bl	8000e20 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001908:	f7ff fa8a 	bl	8000e20 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e05f      	b.n	80019da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x47c>
 8001926:	e057      	b.n	80019d8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0b      	ldr	r2, [pc, #44]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 800192e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001934:	f7ff fa74 	bl	8000e20 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff fa70 	bl	8000e20 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e045      	b.n	80019da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194e:	4b03      	ldr	r3, [pc, #12]	; (800195c <HAL_RCC_OscConfig+0x4d0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x4b0>
 800195a:	e03d      	b.n	80019d8 <HAL_RCC_OscConfig+0x54c>
 800195c:	40023800 	.word	0x40023800
 8001960:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001964:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <HAL_RCC_OscConfig+0x558>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d030      	beq.n	80019d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d129      	bne.n	80019d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d122      	bne.n	80019d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001994:	4013      	ands	r3, r2
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800199a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800199c:	4293      	cmp	r3, r2
 800199e:	d119      	bne.n	80019d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019aa:	085b      	lsrs	r3, r3, #1
 80019ac:	3b01      	subs	r3, #1
 80019ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d10f      	bne.n	80019d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d107      	bne.n	80019d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e000      	b.n	80019da <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800

080019e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0d0      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a00:	4b6a      	ldr	r3, [pc, #424]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 030f 	and.w	r3, r3, #15
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d910      	bls.n	8001a30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0e:	4b67      	ldr	r3, [pc, #412]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f023 020f 	bic.w	r2, r3, #15
 8001a16:	4965      	ldr	r1, [pc, #404]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	4b63      	ldr	r3, [pc, #396]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0b8      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d020      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a48:	4b59      	ldr	r3, [pc, #356]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	4a58      	ldr	r2, [pc, #352]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a60:	4b53      	ldr	r3, [pc, #332]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4a52      	ldr	r2, [pc, #328]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a6c:	4b50      	ldr	r3, [pc, #320]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	494d      	ldr	r1, [pc, #308]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d040      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	4b47      	ldr	r3, [pc, #284]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d115      	bne.n	8001aca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e07f      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d107      	bne.n	8001aba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aaa:	4b41      	ldr	r3, [pc, #260]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d109      	bne.n	8001aca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e073      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aba:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e06b      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aca:	4b39      	ldr	r3, [pc, #228]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f023 0203 	bic.w	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	4936      	ldr	r1, [pc, #216]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001adc:	f7ff f9a0 	bl	8000e20 <HAL_GetTick>
 8001ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	e00a      	b.n	8001afa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae4:	f7ff f99c 	bl	8000e20 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e053      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afa:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 020c 	and.w	r2, r3, #12
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d1eb      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b0c:	4b27      	ldr	r3, [pc, #156]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 030f 	and.w	r3, r3, #15
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d210      	bcs.n	8001b3c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1a:	4b24      	ldr	r3, [pc, #144]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 020f 	bic.w	r2, r3, #15
 8001b22:	4922      	ldr	r1, [pc, #136]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2a:	4b20      	ldr	r3, [pc, #128]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e032      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d008      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b48:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	4916      	ldr	r1, [pc, #88]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d009      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	490e      	ldr	r1, [pc, #56]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b7a:	f000 f821 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	091b      	lsrs	r3, r3, #4
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	490a      	ldr	r1, [pc, #40]	; (8001bb4 <HAL_RCC_ClockConfig+0x1cc>)
 8001b8c:	5ccb      	ldrb	r3, [r1, r3]
 8001b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b92:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <HAL_RCC_ClockConfig+0x1d0>)
 8001b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_RCC_ClockConfig+0x1d4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff f84a 	bl	8000c34 <HAL_InitTick>

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023c00 	.word	0x40023c00
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	08007f80 	.word	0x08007f80
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	20000004 	.word	0x20000004

08001bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bc4:	b094      	sub	sp, #80	; 0x50
 8001bc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	647b      	str	r3, [r7, #68]	; 0x44
 8001bcc:	2300      	movs	r3, #0
 8001bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bd8:	4b79      	ldr	r3, [pc, #484]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 030c 	and.w	r3, r3, #12
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d00d      	beq.n	8001c00 <HAL_RCC_GetSysClockFreq+0x40>
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	f200 80e1 	bhi.w	8001dac <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d003      	beq.n	8001bfa <HAL_RCC_GetSysClockFreq+0x3a>
 8001bf2:	e0db      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bf4:	4b73      	ldr	r3, [pc, #460]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bf6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bf8:	e0db      	b.n	8001db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bfa:	4b72      	ldr	r3, [pc, #456]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bfe:	e0d8      	b.n	8001db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c00:	4b6f      	ldr	r3, [pc, #444]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c08:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c0a:	4b6d      	ldr	r3, [pc, #436]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d063      	beq.n	8001cde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c16:	4b6a      	ldr	r3, [pc, #424]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	099b      	lsrs	r3, r3, #6
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c28:	633b      	str	r3, [r7, #48]	; 0x30
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c32:	4622      	mov	r2, r4
 8001c34:	462b      	mov	r3, r5
 8001c36:	f04f 0000 	mov.w	r0, #0
 8001c3a:	f04f 0100 	mov.w	r1, #0
 8001c3e:	0159      	lsls	r1, r3, #5
 8001c40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c44:	0150      	lsls	r0, r2, #5
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4621      	mov	r1, r4
 8001c4c:	1a51      	subs	r1, r2, r1
 8001c4e:	6139      	str	r1, [r7, #16]
 8001c50:	4629      	mov	r1, r5
 8001c52:	eb63 0301 	sbc.w	r3, r3, r1
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c64:	4659      	mov	r1, fp
 8001c66:	018b      	lsls	r3, r1, #6
 8001c68:	4651      	mov	r1, sl
 8001c6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c6e:	4651      	mov	r1, sl
 8001c70:	018a      	lsls	r2, r1, #6
 8001c72:	4651      	mov	r1, sl
 8001c74:	ebb2 0801 	subs.w	r8, r2, r1
 8001c78:	4659      	mov	r1, fp
 8001c7a:	eb63 0901 	sbc.w	r9, r3, r1
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c92:	4690      	mov	r8, r2
 8001c94:	4699      	mov	r9, r3
 8001c96:	4623      	mov	r3, r4
 8001c98:	eb18 0303 	adds.w	r3, r8, r3
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	462b      	mov	r3, r5
 8001ca0:	eb49 0303 	adc.w	r3, r9, r3
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	028b      	lsls	r3, r1, #10
 8001cb6:	4621      	mov	r1, r4
 8001cb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cbc:	4621      	mov	r1, r4
 8001cbe:	028a      	lsls	r2, r1, #10
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ccc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cd0:	f7fe fb00 	bl	80002d4 <__aeabi_uldivmod>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4613      	mov	r3, r2
 8001cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cdc:	e058      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cde:	4b38      	ldr	r3, [pc, #224]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	099b      	lsrs	r3, r3, #6
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	4611      	mov	r1, r2
 8001cea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cee:	623b      	str	r3, [r7, #32]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cf8:	4642      	mov	r2, r8
 8001cfa:	464b      	mov	r3, r9
 8001cfc:	f04f 0000 	mov.w	r0, #0
 8001d00:	f04f 0100 	mov.w	r1, #0
 8001d04:	0159      	lsls	r1, r3, #5
 8001d06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d0a:	0150      	lsls	r0, r2, #5
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4641      	mov	r1, r8
 8001d12:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d16:	4649      	mov	r1, r9
 8001d18:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d30:	ebb2 040a 	subs.w	r4, r2, sl
 8001d34:	eb63 050b 	sbc.w	r5, r3, fp
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	00eb      	lsls	r3, r5, #3
 8001d42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d46:	00e2      	lsls	r2, r4, #3
 8001d48:	4614      	mov	r4, r2
 8001d4a:	461d      	mov	r5, r3
 8001d4c:	4643      	mov	r3, r8
 8001d4e:	18e3      	adds	r3, r4, r3
 8001d50:	603b      	str	r3, [r7, #0]
 8001d52:	464b      	mov	r3, r9
 8001d54:	eb45 0303 	adc.w	r3, r5, r3
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d66:	4629      	mov	r1, r5
 8001d68:	028b      	lsls	r3, r1, #10
 8001d6a:	4621      	mov	r1, r4
 8001d6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d70:	4621      	mov	r1, r4
 8001d72:	028a      	lsls	r2, r1, #10
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61bb      	str	r3, [r7, #24]
 8001d7e:	61fa      	str	r2, [r7, #28]
 8001d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d84:	f7fe faa6 	bl	80002d4 <__aeabi_uldivmod>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	0c1b      	lsrs	r3, r3, #16
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001da0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001daa:	e002      	b.n	8001db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3750      	adds	r7, #80	; 0x50
 8001db8:	46bd      	mov	sp, r7
 8001dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	00f42400 	.word	0x00f42400

08001dc8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000000 	.word	0x20000000

08001de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001de4:	f7ff fff0 	bl	8001dc8 <HAL_RCC_GetHCLKFreq>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	0a9b      	lsrs	r3, r3, #10
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	4903      	ldr	r1, [pc, #12]	; (8001e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001df6:	5ccb      	ldrb	r3, [r1, r3]
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40023800 	.word	0x40023800
 8001e04:	08007f90 	.word	0x08007f90

08001e08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	220f      	movs	r2, #15
 8001e16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_RCC_GetClockConfig+0x5c>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 0203 	and.w	r2, r3, #3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <HAL_RCC_GetClockConfig+0x5c>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <HAL_RCC_GetClockConfig+0x5c>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001e3c:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <HAL_RCC_GetClockConfig+0x5c>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	08db      	lsrs	r3, r3, #3
 8001e42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <HAL_RCC_GetClockConfig+0x60>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 020f 	and.w	r2, r3, #15
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	601a      	str	r2, [r3, #0]
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40023c00 	.word	0x40023c00

08001e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e049      	b.n	8001f12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d106      	bne.n	8001e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f841 	bl	8001f1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4610      	mov	r0, r2
 8001eac:	f000 f9e8 	bl	8002280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d001      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e054      	b.n	8001ff2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a26      	ldr	r2, [pc, #152]	; (8002000 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d022      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x80>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f72:	d01d      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x80>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a22      	ldr	r2, [pc, #136]	; (8002004 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d018      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x80>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a21      	ldr	r2, [pc, #132]	; (8002008 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d013      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x80>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1f      	ldr	r2, [pc, #124]	; (800200c <HAL_TIM_Base_Start_IT+0xdc>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00e      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x80>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1e      	ldr	r2, [pc, #120]	; (8002010 <HAL_TIM_Base_Start_IT+0xe0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d009      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x80>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1c      	ldr	r2, [pc, #112]	; (8002014 <HAL_TIM_Base_Start_IT+0xe4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d004      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x80>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <HAL_TIM_Base_Start_IT+0xe8>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d115      	bne.n	8001fdc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	4b19      	ldr	r3, [pc, #100]	; (800201c <HAL_TIM_Base_Start_IT+0xec>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b06      	cmp	r3, #6
 8001fc0:	d015      	beq.n	8001fee <HAL_TIM_Base_Start_IT+0xbe>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc8:	d011      	beq.n	8001fee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0201 	orr.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fda:	e008      	b.n	8001fee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	e000      	b.n	8001ff0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40010000 	.word	0x40010000
 8002004:	40000400 	.word	0x40000400
 8002008:	40000800 	.word	0x40000800
 800200c:	40000c00 	.word	0x40000c00
 8002010:	40010400 	.word	0x40010400
 8002014:	40014000 	.word	0x40014000
 8002018:	40001800 	.word	0x40001800
 800201c:	00010007 	.word	0x00010007

08002020 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d020      	beq.n	8002084 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01b      	beq.n	8002084 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0202 	mvn.w	r2, #2
 8002054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f8e9 	bl	8002242 <HAL_TIM_IC_CaptureCallback>
 8002070:	e005      	b.n	800207e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f8db 	bl	800222e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f8ec 	bl	8002256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b00      	cmp	r3, #0
 800208c:	d020      	beq.n	80020d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d01b      	beq.n	80020d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0204 	mvn.w	r2, #4
 80020a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2202      	movs	r2, #2
 80020a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f8c3 	bl	8002242 <HAL_TIM_IC_CaptureCallback>
 80020bc:	e005      	b.n	80020ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f8b5 	bl	800222e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f8c6 	bl	8002256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d020      	beq.n	800211c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01b      	beq.n	800211c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0208 	mvn.w	r2, #8
 80020ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2204      	movs	r2, #4
 80020f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f89d 	bl	8002242 <HAL_TIM_IC_CaptureCallback>
 8002108:	e005      	b.n	8002116 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f88f 	bl	800222e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f8a0 	bl	8002256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	2b00      	cmp	r3, #0
 8002124:	d020      	beq.n	8002168 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01b      	beq.n	8002168 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0210 	mvn.w	r2, #16
 8002138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2208      	movs	r2, #8
 800213e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f877 	bl	8002242 <HAL_TIM_IC_CaptureCallback>
 8002154:	e005      	b.n	8002162 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f869 	bl	800222e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f87a 	bl	8002256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00c      	beq.n	800218c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d007      	beq.n	800218c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0201 	mvn.w	r2, #1
 8002184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe fd18 	bl	8000bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002192:	2b00      	cmp	r3, #0
 8002194:	d104      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00c      	beq.n	80021ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d007      	beq.n	80021ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80021b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f919 	bl	80023ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00c      	beq.n	80021de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80021d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f911 	bl	8002400 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00c      	beq.n	8002202 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d007      	beq.n	8002202 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f834 	bl	800226a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00c      	beq.n	8002226 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f06f 0220 	mvn.w	r2, #32
 800221e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f8d9 	bl	80023d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a46      	ldr	r2, [pc, #280]	; (80023ac <TIM_Base_SetConfig+0x12c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d013      	beq.n	80022c0 <TIM_Base_SetConfig+0x40>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229e:	d00f      	beq.n	80022c0 <TIM_Base_SetConfig+0x40>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a43      	ldr	r2, [pc, #268]	; (80023b0 <TIM_Base_SetConfig+0x130>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d00b      	beq.n	80022c0 <TIM_Base_SetConfig+0x40>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a42      	ldr	r2, [pc, #264]	; (80023b4 <TIM_Base_SetConfig+0x134>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d007      	beq.n	80022c0 <TIM_Base_SetConfig+0x40>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a41      	ldr	r2, [pc, #260]	; (80023b8 <TIM_Base_SetConfig+0x138>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d003      	beq.n	80022c0 <TIM_Base_SetConfig+0x40>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a40      	ldr	r2, [pc, #256]	; (80023bc <TIM_Base_SetConfig+0x13c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d108      	bne.n	80022d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a35      	ldr	r2, [pc, #212]	; (80023ac <TIM_Base_SetConfig+0x12c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d02b      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e0:	d027      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a32      	ldr	r2, [pc, #200]	; (80023b0 <TIM_Base_SetConfig+0x130>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d023      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a31      	ldr	r2, [pc, #196]	; (80023b4 <TIM_Base_SetConfig+0x134>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d01f      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a30      	ldr	r2, [pc, #192]	; (80023b8 <TIM_Base_SetConfig+0x138>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d01b      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a2f      	ldr	r2, [pc, #188]	; (80023bc <TIM_Base_SetConfig+0x13c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d017      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a2e      	ldr	r2, [pc, #184]	; (80023c0 <TIM_Base_SetConfig+0x140>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d013      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a2d      	ldr	r2, [pc, #180]	; (80023c4 <TIM_Base_SetConfig+0x144>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00f      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a2c      	ldr	r2, [pc, #176]	; (80023c8 <TIM_Base_SetConfig+0x148>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d00b      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a2b      	ldr	r2, [pc, #172]	; (80023cc <TIM_Base_SetConfig+0x14c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d007      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a2a      	ldr	r2, [pc, #168]	; (80023d0 <TIM_Base_SetConfig+0x150>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d003      	beq.n	8002332 <TIM_Base_SetConfig+0xb2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a29      	ldr	r2, [pc, #164]	; (80023d4 <TIM_Base_SetConfig+0x154>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d108      	bne.n	8002344 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	4313      	orrs	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a10      	ldr	r2, [pc, #64]	; (80023ac <TIM_Base_SetConfig+0x12c>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d003      	beq.n	8002378 <TIM_Base_SetConfig+0xf8>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a12      	ldr	r2, [pc, #72]	; (80023bc <TIM_Base_SetConfig+0x13c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d103      	bne.n	8002380 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b01      	cmp	r3, #1
 8002390:	d105      	bne.n	800239e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f023 0201 	bic.w	r2, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	611a      	str	r2, [r3, #16]
  }
}
 800239e:	bf00      	nop
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40010000 	.word	0x40010000
 80023b0:	40000400 	.word	0x40000400
 80023b4:	40000800 	.word	0x40000800
 80023b8:	40000c00 	.word	0x40000c00
 80023bc:	40010400 	.word	0x40010400
 80023c0:	40014000 	.word	0x40014000
 80023c4:	40014400 	.word	0x40014400
 80023c8:	40014800 	.word	0x40014800
 80023cc:	40001800 	.word	0x40001800
 80023d0:	40001c00 	.word	0x40001c00
 80023d4:	40002000 	.word	0x40002000

080023d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f103 0208 	add.w	r2, r3, #8
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f04f 32ff 	mov.w	r2, #4294967295
 800242c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f103 0208 	add.w	r2, r3, #8
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f103 0208 	add.w	r2, r3, #8
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800246e:	b480      	push	{r7}
 8002470:	b085      	sub	sp, #20
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	601a      	str	r2, [r3, #0]
}
 80024aa:	bf00      	nop
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80024b6:	b480      	push	{r7}
 80024b8:	b085      	sub	sp, #20
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024cc:	d103      	bne.n	80024d6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	e00c      	b.n	80024f0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3308      	adds	r3, #8
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	e002      	b.n	80024e4 <vListInsert+0x2e>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d2f6      	bcs.n	80024de <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	601a      	str	r2, [r3, #0]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6892      	ldr	r2, [r2, #8]
 800253e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6852      	ldr	r2, [r2, #4]
 8002548:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	429a      	cmp	r2, r3
 8002552:	d103      	bne.n	800255c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	1e5a      	subs	r2, r3, #1
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10a      	bne.n	80025a6 <xQueueGenericReset+0x2a>
        __asm volatile
 8002590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002594:	f383 8811 	msr	BASEPRI, r3
 8002598:	f3bf 8f6f 	isb	sy
 800259c:	f3bf 8f4f 	dsb	sy
 80025a0:	60bb      	str	r3, [r7, #8]
    }
 80025a2:	bf00      	nop
 80025a4:	e7fe      	b.n	80025a4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80025a6:	f002 fb25 	bl	8004bf4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	68f9      	ldr	r1, [r7, #12]
 80025b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	441a      	add	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d6:	3b01      	subs	r3, #1
 80025d8:	68f9      	ldr	r1, [r7, #12]
 80025da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	441a      	add	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	22ff      	movs	r2, #255	; 0xff
 80025ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	22ff      	movs	r2, #255	; 0xff
 80025f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d114      	bne.n	8002626 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d01a      	beq.n	800263a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	3310      	adds	r3, #16
 8002608:	4618      	mov	r0, r3
 800260a:	f001 fa01 	bl	8003a10 <xTaskRemoveFromEventList>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d012      	beq.n	800263a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <xQueueGenericReset+0xcc>)
 8002616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	f3bf 8f6f 	isb	sy
 8002624:	e009      	b.n	800263a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	3310      	adds	r3, #16
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fef2 	bl	8002414 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	3324      	adds	r3, #36	; 0x24
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff feed 	bl	8002414 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800263a:	f002 fb0b 	bl	8004c54 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800263e:	2301      	movs	r3, #1
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	e000ed04 	.word	0xe000ed04

0800264c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800264c:	b580      	push	{r7, lr}
 800264e:	b08c      	sub	sp, #48	; 0x30
 8002650:	af02      	add	r7, sp, #8
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	4613      	mov	r3, r2
 8002658:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10a      	bne.n	8002676 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002664:	f383 8811 	msr	BASEPRI, r3
 8002668:	f3bf 8f6f 	isb	sy
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	61bb      	str	r3, [r7, #24]
    }
 8002672:	bf00      	nop
 8002674:	e7fe      	b.n	8002674 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	fb02 f303 	mul.w	r3, r2, r3
 800267e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d006      	beq.n	8002694 <xQueueGenericCreate+0x48>
 8002686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	fbb2 f3f3 	udiv	r3, r2, r3
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	429a      	cmp	r2, r3
 8002692:	d101      	bne.n	8002698 <xQueueGenericCreate+0x4c>
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <xQueueGenericCreate+0x4e>
 8002698:	2300      	movs	r3, #0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10a      	bne.n	80026b4 <xQueueGenericCreate+0x68>
        __asm volatile
 800269e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a2:	f383 8811 	msr	BASEPRI, r3
 80026a6:	f3bf 8f6f 	isb	sy
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	617b      	str	r3, [r7, #20]
    }
 80026b0:	bf00      	nop
 80026b2:	e7fe      	b.n	80026b2 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80026ba:	d90a      	bls.n	80026d2 <xQueueGenericCreate+0x86>
        __asm volatile
 80026bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c0:	f383 8811 	msr	BASEPRI, r3
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	613b      	str	r3, [r7, #16]
    }
 80026ce:	bf00      	nop
 80026d0:	e7fe      	b.n	80026d0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	3350      	adds	r3, #80	; 0x50
 80026d6:	4618      	mov	r0, r3
 80026d8:	f002 fbb8 	bl	8004e4c <pvPortMalloc>
 80026dc:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00d      	beq.n	8002700 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	3350      	adds	r3, #80	; 0x50
 80026ec:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026ee:	79fa      	ldrb	r2, [r7, #7]
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	4613      	mov	r3, r2
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 f805 	bl	800270a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002700:	6a3b      	ldr	r3, [r7, #32]
    }
 8002702:	4618      	mov	r0, r3
 8002704:	3728      	adds	r7, #40	; 0x28
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d103      	bne.n	8002726 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	e002      	b.n	800272c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002738:	2101      	movs	r1, #1
 800273a:	69b8      	ldr	r0, [r7, #24]
 800273c:	f7ff ff1e 	bl	800257c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	68f9      	ldr	r1, [r7, #12]
 800274e:	2073      	movs	r0, #115	; 0x73
 8002750:	f004 fbda 	bl	8006f08 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b090      	sub	sp, #64	; 0x40
 8002760:	af02      	add	r7, sp, #8
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800276a:	2300      	movs	r3, #0
 800276c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10a      	bne.n	800278e <xQueueGenericSend+0x32>
        __asm volatile
 8002778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277c:	f383 8811 	msr	BASEPRI, r3
 8002780:	f3bf 8f6f 	isb	sy
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800278a:	bf00      	nop
 800278c:	e7fe      	b.n	800278c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d103      	bne.n	800279c <xQueueGenericSend+0x40>
 8002794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <xQueueGenericSend+0x44>
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <xQueueGenericSend+0x46>
 80027a0:	2300      	movs	r3, #0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10a      	bne.n	80027bc <xQueueGenericSend+0x60>
        __asm volatile
 80027a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027aa:	f383 8811 	msr	BASEPRI, r3
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	f3bf 8f4f 	dsb	sy
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80027b8:	bf00      	nop
 80027ba:	e7fe      	b.n	80027ba <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d103      	bne.n	80027ca <xQueueGenericSend+0x6e>
 80027c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <xQueueGenericSend+0x72>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <xQueueGenericSend+0x74>
 80027ce:	2300      	movs	r3, #0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10a      	bne.n	80027ea <xQueueGenericSend+0x8e>
        __asm volatile
 80027d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	623b      	str	r3, [r7, #32]
    }
 80027e6:	bf00      	nop
 80027e8:	e7fe      	b.n	80027e8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027ea:	f001 fab1 	bl	8003d50 <xTaskGetSchedulerState>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d102      	bne.n	80027fa <xQueueGenericSend+0x9e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <xQueueGenericSend+0xa2>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <xQueueGenericSend+0xa4>
 80027fe:	2300      	movs	r3, #0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10a      	bne.n	800281a <xQueueGenericSend+0xbe>
        __asm volatile
 8002804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002808:	f383 8811 	msr	BASEPRI, r3
 800280c:	f3bf 8f6f 	isb	sy
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	61fb      	str	r3, [r7, #28]
    }
 8002816:	bf00      	nop
 8002818:	e7fe      	b.n	8002818 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800281a:	f002 f9eb 	bl	8004bf4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002826:	429a      	cmp	r2, r3
 8002828:	d302      	bcc.n	8002830 <xQueueGenericSend+0xd4>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d136      	bne.n	800289e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002832:	4618      	mov	r0, r3
 8002834:	f005 f8f6 	bl	8007a24 <SEGGER_SYSVIEW_ShrinkId>
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	460b      	mov	r3, r1
 8002842:	4601      	mov	r1, r0
 8002844:	205a      	movs	r0, #90	; 0x5a
 8002846:	f004 fbd5 	bl	8006ff4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002850:	f000 fa78 	bl	8002d44 <prvCopyDataToQueue>
 8002854:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	2b00      	cmp	r3, #0
 800285c:	d010      	beq.n	8002880 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800285e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002860:	3324      	adds	r3, #36	; 0x24
 8002862:	4618      	mov	r0, r3
 8002864:	f001 f8d4 	bl	8003a10 <xTaskRemoveFromEventList>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d013      	beq.n	8002896 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800286e:	4b4d      	ldr	r3, [pc, #308]	; (80029a4 <xQueueGenericSend+0x248>)
 8002870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	e00a      	b.n	8002896 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002886:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <xQueueGenericSend+0x248>)
 8002888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	f3bf 8f4f 	dsb	sy
 8002892:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002896:	f002 f9dd 	bl	8004c54 <vPortExitCritical>
                return pdPASS;
 800289a:	2301      	movs	r3, #1
 800289c:	e07d      	b.n	800299a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d110      	bne.n	80028c6 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80028a4:	f002 f9d6 	bl	8004c54 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80028a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028aa:	4618      	mov	r0, r3
 80028ac:	f005 f8ba 	bl	8007a24 <SEGGER_SYSVIEW_ShrinkId>
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	460b      	mov	r3, r1
 80028ba:	4601      	mov	r1, r0
 80028bc:	205a      	movs	r0, #90	; 0x5a
 80028be:	f004 fb99 	bl	8006ff4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e069      	b.n	800299a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80028c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d106      	bne.n	80028da <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	4618      	mov	r0, r3
 80028d2:	f001 f903 	bl	8003adc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80028d6:	2301      	movs	r3, #1
 80028d8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80028da:	f002 f9bb 	bl	8004c54 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80028de:	f000 fe4f 	bl	8003580 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80028e2:	f002 f987 	bl	8004bf4 <vPortEnterCritical>
 80028e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028ec:	b25b      	sxtb	r3, r3
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f2:	d103      	bne.n	80028fc <xQueueGenericSend+0x1a0>
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002902:	b25b      	sxtb	r3, r3
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002908:	d103      	bne.n	8002912 <xQueueGenericSend+0x1b6>
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002912:	f002 f99f 	bl	8004c54 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002916:	1d3a      	adds	r2, r7, #4
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	4611      	mov	r1, r2
 800291e:	4618      	mov	r0, r3
 8002920:	f001 f8f2 	bl	8003b08 <xTaskCheckForTimeOut>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d124      	bne.n	8002974 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800292a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800292c:	f000 fb02 	bl	8002f34 <prvIsQueueFull>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d018      	beq.n	8002968 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	3310      	adds	r3, #16
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	4611      	mov	r1, r2
 800293e:	4618      	mov	r0, r3
 8002940:	f001 f814 	bl	800396c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002946:	f000 fa8d 	bl	8002e64 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800294a:	f000 fe27 	bl	800359c <xTaskResumeAll>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	f47f af62 	bne.w	800281a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002956:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <xQueueGenericSend+0x248>)
 8002958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	f3bf 8f4f 	dsb	sy
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	e758      	b.n	800281a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800296a:	f000 fa7b 	bl	8002e64 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800296e:	f000 fe15 	bl	800359c <xTaskResumeAll>
 8002972:	e752      	b.n	800281a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002976:	f000 fa75 	bl	8002e64 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800297a:	f000 fe0f 	bl	800359c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002980:	4618      	mov	r0, r3
 8002982:	f005 f84f 	bl	8007a24 <SEGGER_SYSVIEW_ShrinkId>
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	460b      	mov	r3, r1
 8002990:	4601      	mov	r1, r0
 8002992:	205a      	movs	r0, #90	; 0x5a
 8002994:	f004 fb2e 	bl	8006ff4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002998:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800299a:	4618      	mov	r0, r3
 800299c:	3738      	adds	r7, #56	; 0x38
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	e000ed04 	.word	0xe000ed04

080029a8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b090      	sub	sp, #64	; 0x40
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80029ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10a      	bne.n	80029d6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80029c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80029d2:	bf00      	nop
 80029d4:	e7fe      	b.n	80029d4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d103      	bne.n	80029e4 <xQueueGenericSendFromISR+0x3c>
 80029dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <xQueueGenericSendFromISR+0x40>
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <xQueueGenericSendFromISR+0x42>
 80029e8:	2300      	movs	r3, #0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10a      	bne.n	8002a04 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80029ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002a00:	bf00      	nop
 8002a02:	e7fe      	b.n	8002a02 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d103      	bne.n	8002a12 <xQueueGenericSendFromISR+0x6a>
 8002a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <xQueueGenericSendFromISR+0x6e>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <xQueueGenericSendFromISR+0x70>
 8002a16:	2300      	movs	r3, #0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10a      	bne.n	8002a32 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a20:	f383 8811 	msr	BASEPRI, r3
 8002a24:	f3bf 8f6f 	isb	sy
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	623b      	str	r3, [r7, #32]
    }
 8002a2e:	bf00      	nop
 8002a30:	e7fe      	b.n	8002a30 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a32:	f002 f9cb 	bl	8004dcc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002a36:	f3ef 8211 	mrs	r2, BASEPRI
 8002a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	61fa      	str	r2, [r7, #28]
 8002a4c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a50:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d302      	bcc.n	8002a64 <xQueueGenericSendFromISR+0xbc>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d148      	bne.n	8002af6 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a76:	4618      	mov	r0, r3
 8002a78:	f004 ffd4 	bl	8007a24 <SEGGER_SYSVIEW_ShrinkId>
 8002a7c:	4601      	mov	r1, r0
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	461a      	mov	r2, r3
 8002a82:	2060      	movs	r0, #96	; 0x60
 8002a84:	f004 f9e6 	bl	8006e54 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a8e:	f000 f959 	bl	8002d44 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002a92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9a:	d112      	bne.n	8002ac2 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d025      	beq.n	8002af0 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa6:	3324      	adds	r3, #36	; 0x24
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 ffb1 	bl	8003a10 <xTaskRemoveFromEventList>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01d      	beq.n	8002af0 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d01a      	beq.n	8002af0 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	e016      	b.n	8002af0 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002ac2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ac8:	d10a      	bne.n	8002ae0 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ace:	f383 8811 	msr	BASEPRI, r3
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	617b      	str	r3, [r7, #20]
    }
 8002adc:	bf00      	nop
 8002ade:	e7fe      	b.n	8002ade <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ae0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	b25a      	sxtb	r2, r3
 8002aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002af0:	2301      	movs	r3, #1
 8002af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002af4:	e00b      	b.n	8002b0e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af8:	4618      	mov	r0, r3
 8002afa:	f004 ff93 	bl	8007a24 <SEGGER_SYSVIEW_ShrinkId>
 8002afe:	4601      	mov	r1, r0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	461a      	mov	r2, r3
 8002b04:	2060      	movs	r0, #96	; 0x60
 8002b06:	f004 f9a5 	bl	8006e54 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b10:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002b18:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3740      	adds	r7, #64	; 0x40
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002b24:	b590      	push	{r4, r7, lr}
 8002b26:	b08f      	sub	sp, #60	; 0x3c
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10a      	bne.n	8002b54 <xQueueReceive+0x30>
        __asm volatile
 8002b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b42:	f383 8811 	msr	BASEPRI, r3
 8002b46:	f3bf 8f6f 	isb	sy
 8002b4a:	f3bf 8f4f 	dsb	sy
 8002b4e:	623b      	str	r3, [r7, #32]
    }
 8002b50:	bf00      	nop
 8002b52:	e7fe      	b.n	8002b52 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d103      	bne.n	8002b62 <xQueueReceive+0x3e>
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <xQueueReceive+0x42>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <xQueueReceive+0x44>
 8002b66:	2300      	movs	r3, #0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10a      	bne.n	8002b82 <xQueueReceive+0x5e>
        __asm volatile
 8002b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b70:	f383 8811 	msr	BASEPRI, r3
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	61fb      	str	r3, [r7, #28]
    }
 8002b7e:	bf00      	nop
 8002b80:	e7fe      	b.n	8002b80 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b82:	f001 f8e5 	bl	8003d50 <xTaskGetSchedulerState>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d102      	bne.n	8002b92 <xQueueReceive+0x6e>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <xQueueReceive+0x72>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <xQueueReceive+0x74>
 8002b96:	2300      	movs	r3, #0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <xQueueReceive+0x8e>
        __asm volatile
 8002b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba0:	f383 8811 	msr	BASEPRI, r3
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	61bb      	str	r3, [r7, #24]
    }
 8002bae:	bf00      	nop
 8002bb0:	e7fe      	b.n	8002bb0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002bb2:	f002 f81f 	bl	8004bf4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d02f      	beq.n	8002c22 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bc2:	68b9      	ldr	r1, [r7, #8]
 8002bc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bc6:	f000 f927 	bl	8002e18 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f004 ff29 	bl	8007a24 <SEGGER_SYSVIEW_ShrinkId>
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f004 ff25 	bl	8007a24 <SEGGER_SYSVIEW_ShrinkId>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2101      	movs	r1, #1
 8002be0:	9100      	str	r1, [sp, #0]
 8002be2:	4621      	mov	r1, r4
 8002be4:	205c      	movs	r0, #92	; 0x5c
 8002be6:	f004 fa05 	bl	8006ff4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	1e5a      	subs	r2, r3, #1
 8002bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00f      	beq.n	8002c1a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfc:	3310      	adds	r3, #16
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 ff06 	bl	8003a10 <xTaskRemoveFromEventList>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d007      	beq.n	8002c1a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002c0a:	4b4d      	ldr	r3, [pc, #308]	; (8002d40 <xQueueReceive+0x21c>)
 8002c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c1a:	f002 f81b 	bl	8004c54 <vPortExitCritical>
                return pdPASS;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e08a      	b.n	8002d38 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d113      	bne.n	8002c50 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002c28:	f002 f814 	bl	8004c54 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f004 fef8 	bl	8007a24 <SEGGER_SYSVIEW_ShrinkId>
 8002c34:	4604      	mov	r4, r0
 8002c36:	2000      	movs	r0, #0
 8002c38:	f004 fef4 	bl	8007a24 <SEGGER_SYSVIEW_ShrinkId>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2101      	movs	r1, #1
 8002c42:	9100      	str	r1, [sp, #0]
 8002c44:	4621      	mov	r1, r4
 8002c46:	205c      	movs	r0, #92	; 0x5c
 8002c48:	f004 f9d4 	bl	8006ff4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	e073      	b.n	8002d38 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c56:	f107 0310 	add.w	r3, r7, #16
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 ff3e 	bl	8003adc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002c60:	2301      	movs	r3, #1
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002c64:	f001 fff6 	bl	8004c54 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002c68:	f000 fc8a 	bl	8003580 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002c6c:	f001 ffc2 	bl	8004bf4 <vPortEnterCritical>
 8002c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c76:	b25b      	sxtb	r3, r3
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7c:	d103      	bne.n	8002c86 <xQueueReceive+0x162>
 8002c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c8c:	b25b      	sxtb	r3, r3
 8002c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c92:	d103      	bne.n	8002c9c <xQueueReceive+0x178>
 8002c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c9c:	f001 ffda 	bl	8004c54 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ca0:	1d3a      	adds	r2, r7, #4
 8002ca2:	f107 0310 	add.w	r3, r7, #16
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 ff2d 	bl	8003b08 <xTaskCheckForTimeOut>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d124      	bne.n	8002cfe <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cb6:	f000 f927 	bl	8002f08 <prvIsQueueEmpty>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d018      	beq.n	8002cf2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc2:	3324      	adds	r3, #36	; 0x24
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 fe4f 	bl	800396c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cd0:	f000 f8c8 	bl	8002e64 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002cd4:	f000 fc62 	bl	800359c <xTaskResumeAll>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f47f af69 	bne.w	8002bb2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002ce0:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <xQueueReceive+0x21c>)
 8002ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	e75f      	b.n	8002bb2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cf4:	f000 f8b6 	bl	8002e64 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002cf8:	f000 fc50 	bl	800359c <xTaskResumeAll>
 8002cfc:	e759      	b.n	8002bb2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002cfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d00:	f000 f8b0 	bl	8002e64 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d04:	f000 fc4a 	bl	800359c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d0a:	f000 f8fd 	bl	8002f08 <prvIsQueueEmpty>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f43f af4e 	beq.w	8002bb2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f004 fe83 	bl	8007a24 <SEGGER_SYSVIEW_ShrinkId>
 8002d1e:	4604      	mov	r4, r0
 8002d20:	2000      	movs	r0, #0
 8002d22:	f004 fe7f 	bl	8007a24 <SEGGER_SYSVIEW_ShrinkId>
 8002d26:	4602      	mov	r2, r0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	9100      	str	r1, [sp, #0]
 8002d2e:	4621      	mov	r1, r4
 8002d30:	205c      	movs	r0, #92	; 0x5c
 8002d32:	f004 f95f 	bl	8006ff4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002d36:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3734      	adds	r7, #52	; 0x34
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd90      	pop	{r4, r7, pc}
 8002d40:	e000ed04 	.word	0xe000ed04

08002d44 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10d      	bne.n	8002d7e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d14d      	bne.n	8002e06 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f001 f80c 	bl	8003d8c <xTaskPriorityDisinherit>
 8002d74:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	e043      	b.n	8002e06 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d119      	bne.n	8002db8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6858      	ldr	r0, [r3, #4]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	68b9      	ldr	r1, [r7, #8]
 8002d90:	f005 f810 	bl	8007db4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	441a      	add	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d32b      	bcc.n	8002e06 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	e026      	b.n	8002e06 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	68d8      	ldr	r0, [r3, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	f004 fff6 	bl	8007db4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	425b      	negs	r3, r3
 8002dd2:	441a      	add	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d207      	bcs.n	8002df4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	425b      	negs	r3, r3
 8002dee:	441a      	add	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d105      	bne.n	8002e06 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002e0e:	697b      	ldr	r3, [r7, #20]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d018      	beq.n	8002e5c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	441a      	add	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d303      	bcc.n	8002e4c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68d9      	ldr	r1, [r3, #12]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	461a      	mov	r2, r3
 8002e56:	6838      	ldr	r0, [r7, #0]
 8002e58:	f004 ffac 	bl	8007db4 <memcpy>
    }
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002e6c:	f001 fec2 	bl	8004bf4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e76:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e78:	e011      	b.n	8002e9e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d012      	beq.n	8002ea8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3324      	adds	r3, #36	; 0x24
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fdc2 	bl	8003a10 <xTaskRemoveFromEventList>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002e92:	f000 fe9f 	bl	8003bd4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	dce9      	bgt.n	8002e7a <prvUnlockQueue+0x16>
 8002ea6:	e000      	b.n	8002eaa <prvUnlockQueue+0x46>
                        break;
 8002ea8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	22ff      	movs	r2, #255	; 0xff
 8002eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002eb2:	f001 fecf 	bl	8004c54 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002eb6:	f001 fe9d 	bl	8004bf4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ec0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ec2:	e011      	b.n	8002ee8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d012      	beq.n	8002ef2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3310      	adds	r3, #16
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fd9d 	bl	8003a10 <xTaskRemoveFromEventList>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002edc:	f000 fe7a 	bl	8003bd4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002ee0:	7bbb      	ldrb	r3, [r7, #14]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ee8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	dce9      	bgt.n	8002ec4 <prvUnlockQueue+0x60>
 8002ef0:	e000      	b.n	8002ef4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002ef2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	22ff      	movs	r2, #255	; 0xff
 8002ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002efc:	f001 feaa 	bl	8004c54 <vPortExitCritical>
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f10:	f001 fe70 	bl	8004bf4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d102      	bne.n	8002f22 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	e001      	b.n	8002f26 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f26:	f001 fe95 	bl	8004c54 <vPortExitCritical>

    return xReturn;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f3c:	f001 fe5a 	bl	8004bf4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d102      	bne.n	8002f52 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	e001      	b.n	8002f56 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f56:	f001 fe7d 	bl	8004c54 <vPortExitCritical>

    return xReturn;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	e01e      	b.n	8002fb2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f74:	4a13      	ldr	r2, [pc, #76]	; (8002fc4 <vQueueAddToRegistry+0x60>)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d115      	bne.n	8002fac <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f80:	4910      	ldr	r1, [pc, #64]	; (8002fc4 <vQueueAddToRegistry+0x60>)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002f8a:	4a0e      	ldr	r2, [pc, #56]	; (8002fc4 <vQueueAddToRegistry+0x60>)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4413      	add	r3, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f004 fd43 	bl	8007a24 <SEGGER_SYSVIEW_ShrinkId>
 8002f9e:	4601      	mov	r1, r0
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2071      	movs	r0, #113	; 0x71
 8002fa6:	f003 ff55 	bl	8006e54 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002faa:	e006      	b.n	8002fba <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2b07      	cmp	r3, #7
 8002fb6:	d9dd      	bls.n	8002f74 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	2000009c 	.word	0x2000009c

08002fc8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002fd8:	f001 fe0c 	bl	8004bf4 <vPortEnterCritical>
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fe2:	b25b      	sxtb	r3, r3
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d103      	bne.n	8002ff2 <vQueueWaitForMessageRestricted+0x2a>
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ff8:	b25b      	sxtb	r3, r3
 8002ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffe:	d103      	bne.n	8003008 <vQueueWaitForMessageRestricted+0x40>
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003008:	f001 fe24 	bl	8004c54 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	2b00      	cmp	r3, #0
 8003012:	d106      	bne.n	8003022 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	3324      	adds	r3, #36	; 0x24
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fcc9 	bl	80039b4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003022:	6978      	ldr	r0, [r7, #20]
 8003024:	f7ff ff1e 	bl	8002e64 <prvUnlockQueue>
    }
 8003028:	bf00      	nop
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003030:	b580      	push	{r7, lr}
 8003032:	b08c      	sub	sp, #48	; 0x30
 8003034:	af04      	add	r7, sp, #16
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003040:	88fb      	ldrh	r3, [r7, #6]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4618      	mov	r0, r3
 8003046:	f001 ff01 	bl	8004e4c <pvPortMalloc>
 800304a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00e      	beq.n	8003070 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003052:	2058      	movs	r0, #88	; 0x58
 8003054:	f001 fefa 	bl	8004e4c <pvPortMalloc>
 8003058:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
 8003066:	e005      	b.n	8003074 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003068:	6978      	ldr	r0, [r7, #20]
 800306a:	f001 ffcf 	bl	800500c <vPortFree>
 800306e:	e001      	b.n	8003074 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003070:	2300      	movs	r3, #0
 8003072:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d013      	beq.n	80030a2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800307a:	88fa      	ldrh	r2, [r7, #6]
 800307c:	2300      	movs	r3, #0
 800307e:	9303      	str	r3, [sp, #12]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	9302      	str	r3, [sp, #8]
 8003084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003086:	9301      	str	r3, [sp, #4]
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68b9      	ldr	r1, [r7, #8]
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f80e 	bl	80030b2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003096:	69f8      	ldr	r0, [r7, #28]
 8003098:	f000 f8a2 	bl	80031e0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800309c:	2301      	movs	r3, #1
 800309e:	61bb      	str	r3, [r7, #24]
 80030a0:	e002      	b.n	80030a8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030a2:	f04f 33ff 	mov.w	r3, #4294967295
 80030a6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80030a8:	69bb      	ldr	r3, [r7, #24]
    }
 80030aa:	4618      	mov	r0, r3
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b088      	sub	sp, #32
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80030c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	461a      	mov	r2, r3
 80030ca:	21a5      	movs	r1, #165	; 0xa5
 80030cc:	f004 fe80 	bl	8007dd0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80030da:	440b      	add	r3, r1
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	f023 0307 	bic.w	r3, r3, #7
 80030e8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <prvInitialiseNewTask+0x58>
        __asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	617b      	str	r3, [r7, #20]
    }
 8003106:	bf00      	nop
 8003108:	e7fe      	b.n	8003108 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01f      	beq.n	8003150 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003110:	2300      	movs	r3, #0
 8003112:	61fb      	str	r3, [r7, #28]
 8003114:	e012      	b.n	800313c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	4413      	add	r3, r2
 800311c:	7819      	ldrb	r1, [r3, #0]
 800311e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	4413      	add	r3, r2
 8003124:	3334      	adds	r3, #52	; 0x34
 8003126:	460a      	mov	r2, r1
 8003128:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	4413      	add	r3, r2
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d006      	beq.n	8003144 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3301      	adds	r3, #1
 800313a:	61fb      	str	r3, [r7, #28]
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	2b09      	cmp	r3, #9
 8003140:	d9e9      	bls.n	8003116 <prvInitialiseNewTask+0x64>
 8003142:	e000      	b.n	8003146 <prvInitialiseNewTask+0x94>
            {
                break;
 8003144:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800314e:	e003      	b.n	8003158 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315a:	2b04      	cmp	r3, #4
 800315c:	d901      	bls.n	8003162 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800315e:	2304      	movs	r3, #4
 8003160:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003166:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800316c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800316e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003170:	2200      	movs	r2, #0
 8003172:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	3304      	adds	r3, #4
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff f96b 	bl	8002454 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	3318      	adds	r3, #24
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff f966 	bl	8002454 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800318e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003190:	f1c3 0205 	rsb	r2, r3, #5
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800319c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800319e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a0:	3350      	adds	r3, #80	; 0x50
 80031a2:	2204      	movs	r2, #4
 80031a4:	2100      	movs	r1, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	f004 fe12 	bl	8007dd0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80031ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ae:	3354      	adds	r3, #84	; 0x54
 80031b0:	2201      	movs	r2, #1
 80031b2:	2100      	movs	r1, #0
 80031b4:	4618      	mov	r0, r3
 80031b6:	f004 fe0b 	bl	8007dd0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	68f9      	ldr	r1, [r7, #12]
 80031be:	69b8      	ldr	r0, [r7, #24]
 80031c0:	f001 fb68 	bl	8004894 <pxPortInitialiseStack>
 80031c4:	4602      	mov	r2, r0
 80031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80031ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031d4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80031d6:	bf00      	nop
 80031d8:	3720      	adds	r7, #32
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80031e0:	b5b0      	push	{r4, r5, r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80031e8:	f001 fd04 	bl	8004bf4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80031ec:	4b3b      	ldr	r3, [pc, #236]	; (80032dc <prvAddNewTaskToReadyList+0xfc>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3301      	adds	r3, #1
 80031f2:	4a3a      	ldr	r2, [pc, #232]	; (80032dc <prvAddNewTaskToReadyList+0xfc>)
 80031f4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80031f6:	4b3a      	ldr	r3, [pc, #232]	; (80032e0 <prvAddNewTaskToReadyList+0x100>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80031fe:	4a38      	ldr	r2, [pc, #224]	; (80032e0 <prvAddNewTaskToReadyList+0x100>)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003204:	4b35      	ldr	r3, [pc, #212]	; (80032dc <prvAddNewTaskToReadyList+0xfc>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d110      	bne.n	800322e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800320c:	f000 fd06 	bl	8003c1c <prvInitialiseTaskLists>
 8003210:	e00d      	b.n	800322e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003212:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <prvAddNewTaskToReadyList+0x104>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800321a:	4b31      	ldr	r3, [pc, #196]	; (80032e0 <prvAddNewTaskToReadyList+0x100>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	429a      	cmp	r2, r3
 8003226:	d802      	bhi.n	800322e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003228:	4a2d      	ldr	r2, [pc, #180]	; (80032e0 <prvAddNewTaskToReadyList+0x100>)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800322e:	4b2e      	ldr	r3, [pc, #184]	; (80032e8 <prvAddNewTaskToReadyList+0x108>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3301      	adds	r3, #1
 8003234:	4a2c      	ldr	r2, [pc, #176]	; (80032e8 <prvAddNewTaskToReadyList+0x108>)
 8003236:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003238:	4b2b      	ldr	r3, [pc, #172]	; (80032e8 <prvAddNewTaskToReadyList+0x108>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d016      	beq.n	8003274 <prvAddNewTaskToReadyList+0x94>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4618      	mov	r0, r3
 800324a:	f004 fac5 	bl	80077d8 <SEGGER_SYSVIEW_OnTaskCreate>
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	461d      	mov	r5, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	461c      	mov	r4, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	1ae3      	subs	r3, r4, r3
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	462b      	mov	r3, r5
 8003270:	f002 f89a 	bl	80053a8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4618      	mov	r0, r3
 8003278:	f004 fb32 	bl	80078e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	2201      	movs	r2, #1
 8003282:	409a      	lsls	r2, r3
 8003284:	4b19      	ldr	r3, [pc, #100]	; (80032ec <prvAddNewTaskToReadyList+0x10c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4313      	orrs	r3, r2
 800328a:	4a18      	ldr	r2, [pc, #96]	; (80032ec <prvAddNewTaskToReadyList+0x10c>)
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4a15      	ldr	r2, [pc, #84]	; (80032f0 <prvAddNewTaskToReadyList+0x110>)
 800329c:	441a      	add	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3304      	adds	r3, #4
 80032a2:	4619      	mov	r1, r3
 80032a4:	4610      	mov	r0, r2
 80032a6:	f7ff f8e2 	bl	800246e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80032aa:	f001 fcd3 	bl	8004c54 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80032ae:	4b0d      	ldr	r3, [pc, #52]	; (80032e4 <prvAddNewTaskToReadyList+0x104>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00e      	beq.n	80032d4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032b6:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <prvAddNewTaskToReadyList+0x100>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d207      	bcs.n	80032d4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <prvAddNewTaskToReadyList+0x114>)
 80032c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bdb0      	pop	{r4, r5, r7, pc}
 80032dc:	200001b4 	.word	0x200001b4
 80032e0:	200000dc 	.word	0x200000dc
 80032e4:	200001c0 	.word	0x200001c0
 80032e8:	200001d0 	.word	0x200001d0
 80032ec:	200001bc 	.word	0x200001bc
 80032f0:	200000e0 	.word	0x200000e0
 80032f4:	e000ed04 	.word	0xe000ed04

080032f8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003300:	f001 fc78 	bl	8004bf4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d102      	bne.n	8003310 <vTaskDelete+0x18>
 800330a:	4b46      	ldr	r3, [pc, #280]	; (8003424 <vTaskDelete+0x12c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	e000      	b.n	8003312 <vTaskDelete+0x1a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	3304      	adds	r3, #4
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff f905 	bl	8002528 <uxListRemove>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d115      	bne.n	8003350 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003328:	493f      	ldr	r1, [pc, #252]	; (8003428 <vTaskDelete+0x130>)
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10a      	bne.n	8003350 <vTaskDelete+0x58>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333e:	2201      	movs	r2, #1
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43da      	mvns	r2, r3
 8003346:	4b39      	ldr	r3, [pc, #228]	; (800342c <vTaskDelete+0x134>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4013      	ands	r3, r2
 800334c:	4a37      	ldr	r2, [pc, #220]	; (800342c <vTaskDelete+0x134>)
 800334e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	2b00      	cmp	r3, #0
 8003356:	d004      	beq.n	8003362 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3318      	adds	r3, #24
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff f8e3 	bl	8002528 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8003362:	4b33      	ldr	r3, [pc, #204]	; (8003430 <vTaskDelete+0x138>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3301      	adds	r3, #1
 8003368:	4a31      	ldr	r2, [pc, #196]	; (8003430 <vTaskDelete+0x138>)
 800336a:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 800336c:	4b2d      	ldr	r3, [pc, #180]	; (8003424 <vTaskDelete+0x12c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	429a      	cmp	r2, r3
 8003374:	d118      	bne.n	80033a8 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	3304      	adds	r3, #4
 800337a:	4619      	mov	r1, r3
 800337c:	482d      	ldr	r0, [pc, #180]	; (8003434 <vTaskDelete+0x13c>)
 800337e:	f7ff f876 	bl	800246e <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8003382:	4b2d      	ldr	r3, [pc, #180]	; (8003438 <vTaskDelete+0x140>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3301      	adds	r3, #1
 8003388:	4a2b      	ldr	r2, [pc, #172]	; (8003438 <vTaskDelete+0x140>)
 800338a:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4618      	mov	r0, r3
 8003390:	f004 fb48 	bl	8007a24 <SEGGER_SYSVIEW_ShrinkId>
 8003394:	4603      	mov	r3, r0
 8003396:	4619      	mov	r1, r3
 8003398:	2022      	movs	r0, #34	; 0x22
 800339a:	f003 fd1f 	bl	8006ddc <SEGGER_SYSVIEW_RecordU32>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f002 f869 	bl	8005478 <SYSVIEW_DeleteTask>
 80033a6:	e016      	b.n	80033d6 <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80033a8:	4b24      	ldr	r3, [pc, #144]	; (800343c <vTaskDelete+0x144>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	4a23      	ldr	r2, [pc, #140]	; (800343c <vTaskDelete+0x144>)
 80033b0:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f004 fb35 	bl	8007a24 <SEGGER_SYSVIEW_ShrinkId>
 80033ba:	4603      	mov	r3, r0
 80033bc:	4619      	mov	r1, r3
 80033be:	2022      	movs	r0, #34	; 0x22
 80033c0:	f003 fd0c 	bl	8006ddc <SEGGER_SYSVIEW_RecordU32>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f002 f856 	bl	8005478 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 fc93 	bl	8003cf8 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80033d2:	f000 fca1 	bl	8003d18 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80033d6:	f001 fc3d 	bl	8004c54 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80033da:	4b19      	ldr	r3, [pc, #100]	; (8003440 <vTaskDelete+0x148>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d01b      	beq.n	800341a <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <vTaskDelete+0x12c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d116      	bne.n	800341a <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80033ec:	4b15      	ldr	r3, [pc, #84]	; (8003444 <vTaskDelete+0x14c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <vTaskDelete+0x112>
        __asm volatile
 80033f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	60bb      	str	r3, [r7, #8]
    }
 8003406:	bf00      	nop
 8003408:	e7fe      	b.n	8003408 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 800340a:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <vTaskDelete+0x150>)
 800340c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	200000dc 	.word	0x200000dc
 8003428:	200000e0 	.word	0x200000e0
 800342c:	200001bc 	.word	0x200001bc
 8003430:	200001d0 	.word	0x200001d0
 8003434:	20000188 	.word	0x20000188
 8003438:	2000019c 	.word	0x2000019c
 800343c:	200001b4 	.word	0x200001b4
 8003440:	200001c0 	.word	0x200001c0
 8003444:	200001dc 	.word	0x200001dc
 8003448:	e000ed04 	.word	0xe000ed04

0800344c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d01b      	beq.n	8003496 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800345e:	4b15      	ldr	r3, [pc, #84]	; (80034b4 <vTaskDelay+0x68>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <vTaskDelay+0x30>
        __asm volatile
 8003466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	60bb      	str	r3, [r7, #8]
    }
 8003478:	bf00      	nop
 800347a:	e7fe      	b.n	800347a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800347c:	f000 f880 	bl	8003580 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	2023      	movs	r0, #35	; 0x23
 8003484:	f003 fcaa 	bl	8006ddc <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003488:	2100      	movs	r1, #0
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fe78 	bl	8004180 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003490:	f000 f884 	bl	800359c <xTaskResumeAll>
 8003494:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d107      	bne.n	80034ac <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800349c:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <vTaskDelay+0x6c>)
 800349e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80034ac:	bf00      	nop
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	200001dc 	.word	0x200001dc
 80034b8:	e000ed04 	.word	0xe000ed04

080034bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80034c2:	4b27      	ldr	r3, [pc, #156]	; (8003560 <vTaskStartScheduler+0xa4>)
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	2300      	movs	r3, #0
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	2300      	movs	r3, #0
 80034cc:	2282      	movs	r2, #130	; 0x82
 80034ce:	4925      	ldr	r1, [pc, #148]	; (8003564 <vTaskStartScheduler+0xa8>)
 80034d0:	4825      	ldr	r0, [pc, #148]	; (8003568 <vTaskStartScheduler+0xac>)
 80034d2:	f7ff fdad 	bl	8003030 <xTaskCreate>
 80034d6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d102      	bne.n	80034e4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80034de:	f000 fec7 	bl	8004270 <xTimerCreateTimerTask>
 80034e2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d124      	bne.n	8003534 <vTaskStartScheduler+0x78>
        __asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	60bb      	str	r3, [r7, #8]
    }
 80034fc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80034fe:	4b1b      	ldr	r3, [pc, #108]	; (800356c <vTaskStartScheduler+0xb0>)
 8003500:	f04f 32ff 	mov.w	r2, #4294967295
 8003504:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003506:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <vTaskStartScheduler+0xb4>)
 8003508:	2201      	movs	r2, #1
 800350a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800350c:	4b19      	ldr	r3, [pc, #100]	; (8003574 <vTaskStartScheduler+0xb8>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003512:	4b19      	ldr	r3, [pc, #100]	; (8003578 <vTaskStartScheduler+0xbc>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <vTaskStartScheduler+0xa4>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d102      	bne.n	8003524 <vTaskStartScheduler+0x68>
 800351e:	f004 f93f 	bl	80077a0 <SEGGER_SYSVIEW_OnIdle>
 8003522:	e004      	b.n	800352e <vTaskStartScheduler+0x72>
 8003524:	4b14      	ldr	r3, [pc, #80]	; (8003578 <vTaskStartScheduler+0xbc>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f004 f997 	bl	800785c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800352e:	f001 fa41 	bl	80049b4 <xPortStartScheduler>
 8003532:	e00e      	b.n	8003552 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353a:	d10a      	bne.n	8003552 <vTaskStartScheduler+0x96>
        __asm volatile
 800353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	607b      	str	r3, [r7, #4]
    }
 800354e:	bf00      	nop
 8003550:	e7fe      	b.n	8003550 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <vTaskStartScheduler+0xc0>)
 8003554:	681b      	ldr	r3, [r3, #0]
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	200001d8 	.word	0x200001d8
 8003564:	08007ea8 	.word	0x08007ea8
 8003568:	08003bed 	.word	0x08003bed
 800356c:	200001d4 	.word	0x200001d4
 8003570:	200001c0 	.word	0x200001c0
 8003574:	200001b8 	.word	0x200001b8
 8003578:	200000dc 	.word	0x200000dc
 800357c:	2000000c 	.word	0x2000000c

08003580 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003584:	4b04      	ldr	r3, [pc, #16]	; (8003598 <vTaskSuspendAll+0x18>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3301      	adds	r3, #1
 800358a:	4a03      	ldr	r2, [pc, #12]	; (8003598 <vTaskSuspendAll+0x18>)
 800358c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800358e:	bf00      	nop
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	200001dc 	.word	0x200001dc

0800359c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80035aa:	4b43      	ldr	r3, [pc, #268]	; (80036b8 <xTaskResumeAll+0x11c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <xTaskResumeAll+0x2c>
        __asm volatile
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	603b      	str	r3, [r7, #0]
    }
 80035c4:	bf00      	nop
 80035c6:	e7fe      	b.n	80035c6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80035c8:	f001 fb14 	bl	8004bf4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80035cc:	4b3a      	ldr	r3, [pc, #232]	; (80036b8 <xTaskResumeAll+0x11c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	4a39      	ldr	r2, [pc, #228]	; (80036b8 <xTaskResumeAll+0x11c>)
 80035d4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035d6:	4b38      	ldr	r3, [pc, #224]	; (80036b8 <xTaskResumeAll+0x11c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d165      	bne.n	80036aa <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035de:	4b37      	ldr	r3, [pc, #220]	; (80036bc <xTaskResumeAll+0x120>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d061      	beq.n	80036aa <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035e6:	e032      	b.n	800364e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035e8:	4b35      	ldr	r3, [pc, #212]	; (80036c0 <xTaskResumeAll+0x124>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	3318      	adds	r3, #24
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fe ff97 	bl	8002528 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	3304      	adds	r3, #4
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fe ff92 	bl	8002528 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4618      	mov	r0, r3
 8003608:	f004 f96a 	bl	80078e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	2201      	movs	r2, #1
 8003612:	409a      	lsls	r2, r3
 8003614:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <xTaskResumeAll+0x128>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4313      	orrs	r3, r2
 800361a:	4a2a      	ldr	r2, [pc, #168]	; (80036c4 <xTaskResumeAll+0x128>)
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4a27      	ldr	r2, [pc, #156]	; (80036c8 <xTaskResumeAll+0x12c>)
 800362c:	441a      	add	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	3304      	adds	r3, #4
 8003632:	4619      	mov	r1, r3
 8003634:	4610      	mov	r0, r2
 8003636:	f7fe ff1a 	bl	800246e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363e:	4b23      	ldr	r3, [pc, #140]	; (80036cc <xTaskResumeAll+0x130>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	429a      	cmp	r2, r3
 8003646:	d302      	bcc.n	800364e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003648:	4b21      	ldr	r3, [pc, #132]	; (80036d0 <xTaskResumeAll+0x134>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800364e:	4b1c      	ldr	r3, [pc, #112]	; (80036c0 <xTaskResumeAll+0x124>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1c8      	bne.n	80035e8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800365c:	f000 fb5c 	bl	8003d18 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003660:	4b1c      	ldr	r3, [pc, #112]	; (80036d4 <xTaskResumeAll+0x138>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d010      	beq.n	800368e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800366c:	f000 f858 	bl	8003720 <xTaskIncrementTick>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003676:	4b16      	ldr	r3, [pc, #88]	; (80036d0 <xTaskResumeAll+0x134>)
 8003678:	2201      	movs	r2, #1
 800367a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3b01      	subs	r3, #1
 8003680:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f1      	bne.n	800366c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <xTaskResumeAll+0x138>)
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800368e:	4b10      	ldr	r3, [pc, #64]	; (80036d0 <xTaskResumeAll+0x134>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d009      	beq.n	80036aa <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003696:	2301      	movs	r3, #1
 8003698:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800369a:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <xTaskResumeAll+0x13c>)
 800369c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80036aa:	f001 fad3 	bl	8004c54 <vPortExitCritical>

    return xAlreadyYielded;
 80036ae:	68bb      	ldr	r3, [r7, #8]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	200001dc 	.word	0x200001dc
 80036bc:	200001b4 	.word	0x200001b4
 80036c0:	20000174 	.word	0x20000174
 80036c4:	200001bc 	.word	0x200001bc
 80036c8:	200000e0 	.word	0x200000e0
 80036cc:	200000dc 	.word	0x200000dc
 80036d0:	200001c8 	.word	0x200001c8
 80036d4:	200001c4 	.word	0x200001c4
 80036d8:	e000ed04 	.word	0xe000ed04

080036dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80036e2:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <xTaskGetTickCount+0x1c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80036e8:	687b      	ldr	r3, [r7, #4]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	200001b8 	.word	0x200001b8

080036fc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003702:	f001 fb63 	bl	8004dcc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003706:	2300      	movs	r3, #0
 8003708:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800370a:	4b04      	ldr	r3, [pc, #16]	; (800371c <xTaskGetTickCountFromISR+0x20>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003710:	683b      	ldr	r3, [r7, #0]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	200001b8 	.word	0x200001b8

08003720 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800372a:	4b50      	ldr	r3, [pc, #320]	; (800386c <xTaskIncrementTick+0x14c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f040 8092 	bne.w	8003858 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003734:	4b4e      	ldr	r3, [pc, #312]	; (8003870 <xTaskIncrementTick+0x150>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3301      	adds	r3, #1
 800373a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800373c:	4a4c      	ldr	r2, [pc, #304]	; (8003870 <xTaskIncrementTick+0x150>)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d120      	bne.n	800378a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003748:	4b4a      	ldr	r3, [pc, #296]	; (8003874 <xTaskIncrementTick+0x154>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <xTaskIncrementTick+0x48>
        __asm volatile
 8003752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	603b      	str	r3, [r7, #0]
    }
 8003764:	bf00      	nop
 8003766:	e7fe      	b.n	8003766 <xTaskIncrementTick+0x46>
 8003768:	4b42      	ldr	r3, [pc, #264]	; (8003874 <xTaskIncrementTick+0x154>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	4b42      	ldr	r3, [pc, #264]	; (8003878 <xTaskIncrementTick+0x158>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a40      	ldr	r2, [pc, #256]	; (8003874 <xTaskIncrementTick+0x154>)
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	4a40      	ldr	r2, [pc, #256]	; (8003878 <xTaskIncrementTick+0x158>)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	4b3f      	ldr	r3, [pc, #252]	; (800387c <xTaskIncrementTick+0x15c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3301      	adds	r3, #1
 8003782:	4a3e      	ldr	r2, [pc, #248]	; (800387c <xTaskIncrementTick+0x15c>)
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	f000 fac7 	bl	8003d18 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800378a:	4b3d      	ldr	r3, [pc, #244]	; (8003880 <xTaskIncrementTick+0x160>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	429a      	cmp	r2, r3
 8003792:	d34c      	bcc.n	800382e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003794:	4b37      	ldr	r3, [pc, #220]	; (8003874 <xTaskIncrementTick+0x154>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d104      	bne.n	80037a8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800379e:	4b38      	ldr	r3, [pc, #224]	; (8003880 <xTaskIncrementTick+0x160>)
 80037a0:	f04f 32ff 	mov.w	r2, #4294967295
 80037a4:	601a      	str	r2, [r3, #0]
                    break;
 80037a6:	e042      	b.n	800382e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037a8:	4b32      	ldr	r3, [pc, #200]	; (8003874 <xTaskIncrementTick+0x154>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d203      	bcs.n	80037c8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80037c0:	4a2f      	ldr	r2, [pc, #188]	; (8003880 <xTaskIncrementTick+0x160>)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80037c6:	e032      	b.n	800382e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	3304      	adds	r3, #4
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fe feab 	bl	8002528 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d004      	beq.n	80037e4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	3318      	adds	r3, #24
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe fea2 	bl	8002528 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f004 f87a 	bl	80078e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	2201      	movs	r2, #1
 80037f2:	409a      	lsls	r2, r3
 80037f4:	4b23      	ldr	r3, [pc, #140]	; (8003884 <xTaskIncrementTick+0x164>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	4a22      	ldr	r2, [pc, #136]	; (8003884 <xTaskIncrementTick+0x164>)
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4a1f      	ldr	r2, [pc, #124]	; (8003888 <xTaskIncrementTick+0x168>)
 800380c:	441a      	add	r2, r3
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	3304      	adds	r3, #4
 8003812:	4619      	mov	r1, r3
 8003814:	4610      	mov	r0, r2
 8003816:	f7fe fe2a 	bl	800246e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381e:	4b1b      	ldr	r3, [pc, #108]	; (800388c <xTaskIncrementTick+0x16c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	429a      	cmp	r2, r3
 8003826:	d3b5      	bcc.n	8003794 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003828:	2301      	movs	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800382c:	e7b2      	b.n	8003794 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800382e:	4b17      	ldr	r3, [pc, #92]	; (800388c <xTaskIncrementTick+0x16c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003834:	4914      	ldr	r1, [pc, #80]	; (8003888 <xTaskIncrementTick+0x168>)
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d901      	bls.n	800384a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8003846:	2301      	movs	r3, #1
 8003848:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800384a:	4b11      	ldr	r3, [pc, #68]	; (8003890 <xTaskIncrementTick+0x170>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003852:	2301      	movs	r3, #1
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	e004      	b.n	8003862 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003858:	4b0e      	ldr	r3, [pc, #56]	; (8003894 <xTaskIncrementTick+0x174>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3301      	adds	r3, #1
 800385e:	4a0d      	ldr	r2, [pc, #52]	; (8003894 <xTaskIncrementTick+0x174>)
 8003860:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003862:	697b      	ldr	r3, [r7, #20]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	200001dc 	.word	0x200001dc
 8003870:	200001b8 	.word	0x200001b8
 8003874:	2000016c 	.word	0x2000016c
 8003878:	20000170 	.word	0x20000170
 800387c:	200001cc 	.word	0x200001cc
 8003880:	200001d4 	.word	0x200001d4
 8003884:	200001bc 	.word	0x200001bc
 8003888:	200000e0 	.word	0x200000e0
 800388c:	200000dc 	.word	0x200000dc
 8003890:	200001c8 	.word	0x200001c8
 8003894:	200001c4 	.word	0x200001c4

08003898 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800389e:	4b2d      	ldr	r3, [pc, #180]	; (8003954 <vTaskSwitchContext+0xbc>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80038a6:	4b2c      	ldr	r3, [pc, #176]	; (8003958 <vTaskSwitchContext+0xc0>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80038ac:	e04d      	b.n	800394a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80038ae:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <vTaskSwitchContext+0xc0>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038b4:	4b29      	ldr	r3, [pc, #164]	; (800395c <vTaskSwitchContext+0xc4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	fab3 f383 	clz	r3, r3
 80038c0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80038c2:	7afb      	ldrb	r3, [r7, #11]
 80038c4:	f1c3 031f 	rsb	r3, r3, #31
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	4925      	ldr	r1, [pc, #148]	; (8003960 <vTaskSwitchContext+0xc8>)
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10a      	bne.n	80038f4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	607b      	str	r3, [r7, #4]
    }
 80038f0:	bf00      	nop
 80038f2:	e7fe      	b.n	80038f2 <vTaskSwitchContext+0x5a>
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4a18      	ldr	r2, [pc, #96]	; (8003960 <vTaskSwitchContext+0xc8>)
 8003900:	4413      	add	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	3308      	adds	r3, #8
 8003916:	429a      	cmp	r2, r3
 8003918:	d104      	bne.n	8003924 <vTaskSwitchContext+0x8c>
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	605a      	str	r2, [r3, #4]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	4a0e      	ldr	r2, [pc, #56]	; (8003964 <vTaskSwitchContext+0xcc>)
 800392c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800392e:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <vTaskSwitchContext+0xcc>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4b0d      	ldr	r3, [pc, #52]	; (8003968 <vTaskSwitchContext+0xd0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d102      	bne.n	8003940 <vTaskSwitchContext+0xa8>
 800393a:	f003 ff31 	bl	80077a0 <SEGGER_SYSVIEW_OnIdle>
}
 800393e:	e004      	b.n	800394a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003940:	4b08      	ldr	r3, [pc, #32]	; (8003964 <vTaskSwitchContext+0xcc>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f003 ff89 	bl	800785c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800394a:	bf00      	nop
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	200001dc 	.word	0x200001dc
 8003958:	200001c8 	.word	0x200001c8
 800395c:	200001bc 	.word	0x200001bc
 8003960:	200000e0 	.word	0x200000e0
 8003964:	200000dc 	.word	0x200000dc
 8003968:	200001d8 	.word	0x200001d8

0800396c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	60fb      	str	r3, [r7, #12]
    }
 800398e:	bf00      	nop
 8003990:	e7fe      	b.n	8003990 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003992:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <vTaskPlaceOnEventList+0x44>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3318      	adds	r3, #24
 8003998:	4619      	mov	r1, r3
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fe fd8b 	bl	80024b6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039a0:	2101      	movs	r1, #1
 80039a2:	6838      	ldr	r0, [r7, #0]
 80039a4:	f000 fbec 	bl	8004180 <prvAddCurrentTaskToDelayedList>
}
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	200000dc 	.word	0x200000dc

080039b4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10a      	bne.n	80039dc <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80039c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	617b      	str	r3, [r7, #20]
    }
 80039d8:	bf00      	nop
 80039da:	e7fe      	b.n	80039da <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <vTaskPlaceOnEventListRestricted+0x58>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3318      	adds	r3, #24
 80039e2:	4619      	mov	r1, r3
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f7fe fd42 	bl	800246e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80039f0:	f04f 33ff 	mov.w	r3, #4294967295
 80039f4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80039f6:	2024      	movs	r0, #36	; 0x24
 80039f8:	f003 f9d2 	bl	8006da0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	68b8      	ldr	r0, [r7, #8]
 8003a00:	f000 fbbe 	bl	8004180 <prvAddCurrentTaskToDelayedList>
    }
 8003a04:	bf00      	nop
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	200000dc 	.word	0x200000dc

08003a10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	60fb      	str	r3, [r7, #12]
    }
 8003a38:	bf00      	nop
 8003a3a:	e7fe      	b.n	8003a3a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	3318      	adds	r3, #24
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe fd71 	bl	8002528 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a46:	4b1f      	ldr	r3, [pc, #124]	; (8003ac4 <xTaskRemoveFromEventList+0xb4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d120      	bne.n	8003a90 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	3304      	adds	r3, #4
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe fd68 	bl	8002528 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f003 ff40 	bl	80078e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	2201      	movs	r2, #1
 8003a66:	409a      	lsls	r2, r3
 8003a68:	4b17      	ldr	r3, [pc, #92]	; (8003ac8 <xTaskRemoveFromEventList+0xb8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	4a16      	ldr	r2, [pc, #88]	; (8003ac8 <xTaskRemoveFromEventList+0xb8>)
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4a13      	ldr	r2, [pc, #76]	; (8003acc <xTaskRemoveFromEventList+0xbc>)
 8003a80:	441a      	add	r2, r3
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	3304      	adds	r3, #4
 8003a86:	4619      	mov	r1, r3
 8003a88:	4610      	mov	r0, r2
 8003a8a:	f7fe fcf0 	bl	800246e <vListInsertEnd>
 8003a8e:	e005      	b.n	8003a9c <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	3318      	adds	r3, #24
 8003a94:	4619      	mov	r1, r3
 8003a96:	480e      	ldr	r0, [pc, #56]	; (8003ad0 <xTaskRemoveFromEventList+0xc0>)
 8003a98:	f7fe fce9 	bl	800246e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <xTaskRemoveFromEventList+0xc4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d905      	bls.n	8003ab6 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003aae:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <xTaskRemoveFromEventList+0xc8>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	e001      	b.n	8003aba <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003aba:	697b      	ldr	r3, [r7, #20]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	200001dc 	.word	0x200001dc
 8003ac8:	200001bc 	.word	0x200001bc
 8003acc:	200000e0 	.word	0x200000e0
 8003ad0:	20000174 	.word	0x20000174
 8003ad4:	200000dc 	.word	0x200000dc
 8003ad8:	200001c8 	.word	0x200001c8

08003adc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <vTaskInternalSetTimeOutState+0x24>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003aec:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <vTaskInternalSetTimeOutState+0x28>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	605a      	str	r2, [r3, #4]
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	200001cc 	.word	0x200001cc
 8003b04:	200001b8 	.word	0x200001b8

08003b08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10a      	bne.n	8003b2e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	613b      	str	r3, [r7, #16]
    }
 8003b2a:	bf00      	nop
 8003b2c:	e7fe      	b.n	8003b2c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10a      	bne.n	8003b4a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	60fb      	str	r3, [r7, #12]
    }
 8003b46:	bf00      	nop
 8003b48:	e7fe      	b.n	8003b48 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003b4a:	f001 f853 	bl	8004bf4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003b4e:	4b1f      	ldr	r3, [pc, #124]	; (8003bcc <xTaskCheckForTimeOut+0xc4>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d102      	bne.n	8003b6e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61fb      	str	r3, [r7, #28]
 8003b6c:	e026      	b.n	8003bbc <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	4b17      	ldr	r3, [pc, #92]	; (8003bd0 <xTaskCheckForTimeOut+0xc8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d00a      	beq.n	8003b90 <xTaskCheckForTimeOut+0x88>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d305      	bcc.n	8003b90 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003b84:	2301      	movs	r3, #1
 8003b86:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	e015      	b.n	8003bbc <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d20b      	bcs.n	8003bb2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	1ad2      	subs	r2, r2, r3
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7ff ff98 	bl	8003adc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61fb      	str	r3, [r7, #28]
 8003bb0:	e004      	b.n	8003bbc <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003bbc:	f001 f84a 	bl	8004c54 <vPortExitCritical>

    return xReturn;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3720      	adds	r7, #32
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	200001b8 	.word	0x200001b8
 8003bd0:	200001cc 	.word	0x200001cc

08003bd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003bd8:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <vTaskMissedYield+0x14>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]
}
 8003bde:	bf00      	nop
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	200001c8 	.word	0x200001c8

08003bec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003bf4:	f000 f852 	bl	8003c9c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <prvIdleTask+0x28>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d9f9      	bls.n	8003bf4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <prvIdleTask+0x2c>)
 8003c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003c10:	e7f0      	b.n	8003bf4 <prvIdleTask+0x8>
 8003c12:	bf00      	nop
 8003c14:	200000e0 	.word	0x200000e0
 8003c18:	e000ed04 	.word	0xe000ed04

08003c1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c22:	2300      	movs	r3, #0
 8003c24:	607b      	str	r3, [r7, #4]
 8003c26:	e00c      	b.n	8003c42 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4a12      	ldr	r2, [pc, #72]	; (8003c7c <prvInitialiseTaskLists+0x60>)
 8003c34:	4413      	add	r3, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fe fbec 	bl	8002414 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	607b      	str	r3, [r7, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d9ef      	bls.n	8003c28 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003c48:	480d      	ldr	r0, [pc, #52]	; (8003c80 <prvInitialiseTaskLists+0x64>)
 8003c4a:	f7fe fbe3 	bl	8002414 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003c4e:	480d      	ldr	r0, [pc, #52]	; (8003c84 <prvInitialiseTaskLists+0x68>)
 8003c50:	f7fe fbe0 	bl	8002414 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003c54:	480c      	ldr	r0, [pc, #48]	; (8003c88 <prvInitialiseTaskLists+0x6c>)
 8003c56:	f7fe fbdd 	bl	8002414 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003c5a:	480c      	ldr	r0, [pc, #48]	; (8003c8c <prvInitialiseTaskLists+0x70>)
 8003c5c:	f7fe fbda 	bl	8002414 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003c60:	480b      	ldr	r0, [pc, #44]	; (8003c90 <prvInitialiseTaskLists+0x74>)
 8003c62:	f7fe fbd7 	bl	8002414 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003c66:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <prvInitialiseTaskLists+0x78>)
 8003c68:	4a05      	ldr	r2, [pc, #20]	; (8003c80 <prvInitialiseTaskLists+0x64>)
 8003c6a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c6c:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <prvInitialiseTaskLists+0x7c>)
 8003c6e:	4a05      	ldr	r2, [pc, #20]	; (8003c84 <prvInitialiseTaskLists+0x68>)
 8003c70:	601a      	str	r2, [r3, #0]
}
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	200000e0 	.word	0x200000e0
 8003c80:	20000144 	.word	0x20000144
 8003c84:	20000158 	.word	0x20000158
 8003c88:	20000174 	.word	0x20000174
 8003c8c:	20000188 	.word	0x20000188
 8003c90:	200001a0 	.word	0x200001a0
 8003c94:	2000016c 	.word	0x2000016c
 8003c98:	20000170 	.word	0x20000170

08003c9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ca2:	e019      	b.n	8003cd8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003ca4:	f000 ffa6 	bl	8004bf4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ca8:	4b10      	ldr	r3, [pc, #64]	; (8003cec <prvCheckTasksWaitingTermination+0x50>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fe fc37 	bl	8002528 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003cba:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <prvCheckTasksWaitingTermination+0x54>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	4a0b      	ldr	r2, [pc, #44]	; (8003cf0 <prvCheckTasksWaitingTermination+0x54>)
 8003cc2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <prvCheckTasksWaitingTermination+0x58>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	4a0a      	ldr	r2, [pc, #40]	; (8003cf4 <prvCheckTasksWaitingTermination+0x58>)
 8003ccc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003cce:	f000 ffc1 	bl	8004c54 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f810 	bl	8003cf8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cd8:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <prvCheckTasksWaitingTermination+0x58>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e1      	bne.n	8003ca4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ce0:	bf00      	nop
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000188 	.word	0x20000188
 8003cf0:	200001b4 	.word	0x200001b4
 8003cf4:	2000019c 	.word	0x2000019c

08003cf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	4618      	mov	r0, r3
 8003d06:	f001 f981 	bl	800500c <vPortFree>
                vPortFree( pxTCB );
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f001 f97e 	bl	800500c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003d10:	bf00      	nop
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d1c:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <prvResetNextTaskUnblockTime+0x30>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d104      	bne.n	8003d30 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <prvResetNextTaskUnblockTime+0x34>)
 8003d28:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003d2e:	e005      	b.n	8003d3c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d30:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <prvResetNextTaskUnblockTime+0x30>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a04      	ldr	r2, [pc, #16]	; (8003d4c <prvResetNextTaskUnblockTime+0x34>)
 8003d3a:	6013      	str	r3, [r2, #0]
}
 8003d3c:	bf00      	nop
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	2000016c 	.word	0x2000016c
 8003d4c:	200001d4 	.word	0x200001d4

08003d50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003d56:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <xTaskGetSchedulerState+0x34>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d102      	bne.n	8003d64 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	e008      	b.n	8003d76 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d64:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <xTaskGetSchedulerState+0x38>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d102      	bne.n	8003d72 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	607b      	str	r3, [r7, #4]
 8003d70:	e001      	b.n	8003d76 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003d72:	2300      	movs	r3, #0
 8003d74:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003d76:	687b      	ldr	r3, [r7, #4]
    }
 8003d78:	4618      	mov	r0, r3
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	200001c0 	.word	0x200001c0
 8003d88:	200001dc 	.word	0x200001dc

08003d8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d068      	beq.n	8003e74 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003da2:	4b37      	ldr	r3, [pc, #220]	; (8003e80 <xTaskPriorityDisinherit+0xf4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d00a      	beq.n	8003dc2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	60fb      	str	r3, [r7, #12]
    }
 8003dbe:	bf00      	nop
 8003dc0:	e7fe      	b.n	8003dc0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10a      	bne.n	8003de0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	60bb      	str	r3, [r7, #8]
    }
 8003ddc:	bf00      	nop
 8003dde:	e7fe      	b.n	8003dde <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de4:	1e5a      	subs	r2, r3, #1
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d03e      	beq.n	8003e74 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d13a      	bne.n	8003e74 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	3304      	adds	r3, #4
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fe fb90 	bl	8002528 <uxListRemove>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	2201      	movs	r2, #1
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	43da      	mvns	r2, r3
 8003e1a:	4b1a      	ldr	r3, [pc, #104]	; (8003e84 <xTaskPriorityDisinherit+0xf8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	4a18      	ldr	r2, [pc, #96]	; (8003e84 <xTaskPriorityDisinherit+0xf8>)
 8003e22:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4619      	mov	r1, r3
 8003e28:	204a      	movs	r0, #74	; 0x4a
 8003e2a:	f002 ffd7 	bl	8006ddc <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	f1c3 0205 	rsb	r2, r3, #5
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	2201      	movs	r2, #1
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <xTaskPriorityDisinherit+0xf8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	4a0c      	ldr	r2, [pc, #48]	; (8003e84 <xTaskPriorityDisinherit+0xf8>)
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e58:	4613      	mov	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4a09      	ldr	r2, [pc, #36]	; (8003e88 <xTaskPriorityDisinherit+0xfc>)
 8003e62:	441a      	add	r2, r3
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	3304      	adds	r3, #4
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	f7fe faff 	bl	800246e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003e70:	2301      	movs	r3, #1
 8003e72:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003e74:	697b      	ldr	r3, [r7, #20]
    }
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	200000dc 	.word	0x200000dc
 8003e84:	200001bc 	.word	0x200001bc
 8003e88:	200000e0 	.word	0x200000e0

08003e8c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	613b      	str	r3, [r7, #16]
    }
 8003eb2:	bf00      	nop
 8003eb4:	e7fe      	b.n	8003eb4 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003eb6:	f000 fe9d 	bl	8004bf4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003eba:	4b36      	ldr	r3, [pc, #216]	; (8003f94 <xTaskGenericNotifyWait+0x108>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3354      	adds	r3, #84	; 0x54
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d022      	beq.n	8003f12 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003ecc:	4b31      	ldr	r3, [pc, #196]	; (8003f94 <xTaskGenericNotifyWait+0x108>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	3214      	adds	r2, #20
 8003ed4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	43d2      	mvns	r2, r2
 8003edc:	4011      	ands	r1, r2
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	3214      	adds	r2, #20
 8003ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003ee6:	4b2b      	ldr	r3, [pc, #172]	; (8003f94 <xTaskGenericNotifyWait+0x108>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4413      	add	r3, r2
 8003eee:	3354      	adds	r3, #84	; 0x54
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00b      	beq.n	8003f12 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003efa:	2101      	movs	r1, #1
 8003efc:	6a38      	ldr	r0, [r7, #32]
 8003efe:	f000 f93f 	bl	8004180 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003f02:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <xTaskGenericNotifyWait+0x10c>)
 8003f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003f12:	f000 fe9f 	bl	8004c54 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003f16:	f000 fe6d 	bl	8004bf4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	4613      	mov	r3, r2
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	68b9      	ldr	r1, [r7, #8]
 8003f26:	2040      	movs	r0, #64	; 0x40
 8003f28:	f003 f864 	bl	8006ff4 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d007      	beq.n	8003f42 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003f32:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <xTaskGenericNotifyWait+0x108>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	3214      	adds	r2, #20
 8003f3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003f42:	4b14      	ldr	r3, [pc, #80]	; (8003f94 <xTaskGenericNotifyWait+0x108>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4413      	add	r3, r2
 8003f4a:	3354      	adds	r3, #84	; 0x54
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d002      	beq.n	8003f5a <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	e00e      	b.n	8003f78 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003f5a:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <xTaskGenericNotifyWait+0x108>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	3214      	adds	r2, #20
 8003f62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	43d2      	mvns	r2, r2
 8003f6a:	4011      	ands	r1, r2
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	3214      	adds	r2, #20
 8003f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003f74:	2301      	movs	r3, #1
 8003f76:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003f78:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <xTaskGenericNotifyWait+0x108>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4413      	add	r3, r2
 8003f80:	3354      	adds	r3, #84	; 0x54
 8003f82:	2200      	movs	r2, #0
 8003f84:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003f86:	f000 fe65 	bl	8004c54 <vPortExitCritical>

        return xReturn;
 8003f8a:	697b      	ldr	r3, [r7, #20]
    }
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	200000dc 	.word	0x200000dc
 8003f98:	e000ed04 	.word	0xe000ed04

08003f9c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08e      	sub	sp, #56	; 0x38
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003faa:	2301      	movs	r3, #1
 8003fac:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <xTaskGenericNotify+0x2e>
        __asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	623b      	str	r3, [r7, #32]
    }
 8003fc6:	bf00      	nop
 8003fc8:	e7fe      	b.n	8003fc8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10a      	bne.n	8003fe6 <xTaskGenericNotify+0x4a>
        __asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	61fb      	str	r3, [r7, #28]
    }
 8003fe2:	bf00      	nop
 8003fe4:	e7fe      	b.n	8003fe4 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8003fea:	f000 fe03 	bl	8004bf4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d006      	beq.n	8004002 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	3214      	adds	r2, #20
 8003ffa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004000:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4413      	add	r3, r2
 8004008:	3354      	adds	r3, #84	; 0x54
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004010:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	4413      	add	r3, r2
 8004016:	3354      	adds	r3, #84	; 0x54
 8004018:	2202      	movs	r2, #2
 800401a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	2b04      	cmp	r3, #4
 8004020:	d83b      	bhi.n	800409a <xTaskGenericNotify+0xfe>
 8004022:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <xTaskGenericNotify+0x8c>)
 8004024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004028:	080040b9 	.word	0x080040b9
 800402c:	0800403d 	.word	0x0800403d
 8004030:	08004059 	.word	0x08004059
 8004034:	08004071 	.word	0x08004071
 8004038:	0800407f 	.word	0x0800407f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	3214      	adds	r2, #20
 8004042:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	ea42 0103 	orr.w	r1, r2, r3
 800404c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	3214      	adds	r2, #20
 8004052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004056:	e032      	b.n	80040be <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	3214      	adds	r2, #20
 800405e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004062:	1c59      	adds	r1, r3, #1
 8004064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	3214      	adds	r2, #20
 800406a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800406e:	e026      	b.n	80040be <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	3214      	adds	r2, #20
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800407c:	e01f      	b.n	80040be <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800407e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004082:	2b02      	cmp	r3, #2
 8004084:	d006      	beq.n	8004094 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	3214      	adds	r2, #20
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004092:	e014      	b.n	80040be <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8004094:	2300      	movs	r3, #0
 8004096:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8004098:	e011      	b.n	80040be <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800409a:	4b34      	ldr	r3, [pc, #208]	; (800416c <xTaskGenericNotify+0x1d0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00c      	beq.n	80040bc <xTaskGenericNotify+0x120>
        __asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	61bb      	str	r3, [r7, #24]
    }
 80040b4:	bf00      	nop
 80040b6:	e7fe      	b.n	80040b6 <xTaskGenericNotify+0x11a>
                    break;
 80040b8:	bf00      	nop
 80040ba:	e000      	b.n	80040be <xTaskGenericNotify+0x122>

                    break;
 80040bc:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	4618      	mov	r0, r3
 80040c2:	f003 fcaf 	bl	8007a24 <SEGGER_SYSVIEW_ShrinkId>
 80040c6:	4601      	mov	r1, r0
 80040c8:	78fa      	ldrb	r2, [r7, #3]
 80040ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	4613      	mov	r3, r2
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	203e      	movs	r0, #62	; 0x3e
 80040d4:	f002 ff8e 	bl	8006ff4 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80040d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d13d      	bne.n	800415c <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e2:	3304      	adds	r3, #4
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fe fa1f 	bl	8002528 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80040ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ec:	4618      	mov	r0, r3
 80040ee:	f003 fbf7 	bl	80078e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80040f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	2201      	movs	r2, #1
 80040f8:	409a      	lsls	r2, r3
 80040fa:	4b1d      	ldr	r3, [pc, #116]	; (8004170 <xTaskGenericNotify+0x1d4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4313      	orrs	r3, r2
 8004100:	4a1b      	ldr	r2, [pc, #108]	; (8004170 <xTaskGenericNotify+0x1d4>)
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4a18      	ldr	r2, [pc, #96]	; (8004174 <xTaskGenericNotify+0x1d8>)
 8004112:	441a      	add	r2, r3
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004116:	3304      	adds	r3, #4
 8004118:	4619      	mov	r1, r3
 800411a:	4610      	mov	r0, r2
 800411c:	f7fe f9a7 	bl	800246e <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <xTaskGenericNotify+0x1a2>
        __asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	617b      	str	r3, [r7, #20]
    }
 800413a:	bf00      	nop
 800413c:	e7fe      	b.n	800413c <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800413e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <xTaskGenericNotify+0x1dc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	429a      	cmp	r2, r3
 800414a:	d907      	bls.n	800415c <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800414c:	4b0b      	ldr	r3, [pc, #44]	; (800417c <xTaskGenericNotify+0x1e0>)
 800414e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800415c:	f000 fd7a 	bl	8004c54 <vPortExitCritical>

        return xReturn;
 8004160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8004162:	4618      	mov	r0, r3
 8004164:	3730      	adds	r7, #48	; 0x30
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	200001b8 	.word	0x200001b8
 8004170:	200001bc 	.word	0x200001bc
 8004174:	200000e0 	.word	0x200000e0
 8004178:	200000dc 	.word	0x200000dc
 800417c:	e000ed04 	.word	0xe000ed04

08004180 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800418a:	4b32      	ldr	r3, [pc, #200]	; (8004254 <prvAddCurrentTaskToDelayedList+0xd4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004190:	4b31      	ldr	r3, [pc, #196]	; (8004258 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3304      	adds	r3, #4
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe f9c6 	bl	8002528 <uxListRemove>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10b      	bne.n	80041ba <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80041a2:	4b2d      	ldr	r3, [pc, #180]	; (8004258 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	2201      	movs	r2, #1
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	43da      	mvns	r2, r3
 80041b0:	4b2a      	ldr	r3, [pc, #168]	; (800425c <prvAddCurrentTaskToDelayedList+0xdc>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4013      	ands	r3, r2
 80041b6:	4a29      	ldr	r2, [pc, #164]	; (800425c <prvAddCurrentTaskToDelayedList+0xdc>)
 80041b8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c0:	d110      	bne.n	80041e4 <prvAddCurrentTaskToDelayedList+0x64>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00d      	beq.n	80041e4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80041c8:	4b23      	ldr	r3, [pc, #140]	; (8004258 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	211b      	movs	r1, #27
 80041ce:	4618      	mov	r0, r3
 80041d0:	f003 fbc8 	bl	8007964 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041d4:	4b20      	ldr	r3, [pc, #128]	; (8004258 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3304      	adds	r3, #4
 80041da:	4619      	mov	r1, r3
 80041dc:	4820      	ldr	r0, [pc, #128]	; (8004260 <prvAddCurrentTaskToDelayedList+0xe0>)
 80041de:	f7fe f946 	bl	800246e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80041e2:	e032      	b.n	800424a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4413      	add	r3, r2
 80041ea:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041ec:	4b1a      	ldr	r3, [pc, #104]	; (8004258 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d20f      	bcs.n	800421c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80041fc:	4b16      	ldr	r3, [pc, #88]	; (8004258 <prvAddCurrentTaskToDelayedList+0xd8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2104      	movs	r1, #4
 8004202:	4618      	mov	r0, r3
 8004204:	f003 fbae 	bl	8007964 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004208:	4b16      	ldr	r3, [pc, #88]	; (8004264 <prvAddCurrentTaskToDelayedList+0xe4>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4b12      	ldr	r3, [pc, #72]	; (8004258 <prvAddCurrentTaskToDelayedList+0xd8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3304      	adds	r3, #4
 8004212:	4619      	mov	r1, r3
 8004214:	4610      	mov	r0, r2
 8004216:	f7fe f94e 	bl	80024b6 <vListInsert>
}
 800421a:	e016      	b.n	800424a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800421c:	4b0e      	ldr	r3, [pc, #56]	; (8004258 <prvAddCurrentTaskToDelayedList+0xd8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2104      	movs	r1, #4
 8004222:	4618      	mov	r0, r3
 8004224:	f003 fb9e 	bl	8007964 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004228:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <prvAddCurrentTaskToDelayedList+0xe8>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <prvAddCurrentTaskToDelayedList+0xd8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3304      	adds	r3, #4
 8004232:	4619      	mov	r1, r3
 8004234:	4610      	mov	r0, r2
 8004236:	f7fe f93e 	bl	80024b6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800423a:	4b0c      	ldr	r3, [pc, #48]	; (800426c <prvAddCurrentTaskToDelayedList+0xec>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	429a      	cmp	r2, r3
 8004242:	d202      	bcs.n	800424a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8004244:	4a09      	ldr	r2, [pc, #36]	; (800426c <prvAddCurrentTaskToDelayedList+0xec>)
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	6013      	str	r3, [r2, #0]
}
 800424a:	bf00      	nop
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	200001b8 	.word	0x200001b8
 8004258:	200000dc 	.word	0x200000dc
 800425c:	200001bc 	.word	0x200001bc
 8004260:	200001a0 	.word	0x200001a0
 8004264:	20000170 	.word	0x20000170
 8004268:	2000016c 	.word	0x2000016c
 800426c:	200001d4 	.word	0x200001d4

08004270 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004276:	2300      	movs	r3, #0
 8004278:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800427a:	f000 fad5 	bl	8004828 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800427e:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <xTimerCreateTimerTask+0x54>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00b      	beq.n	800429e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004286:	4b10      	ldr	r3, [pc, #64]	; (80042c8 <xTimerCreateTimerTask+0x58>)
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	2302      	movs	r3, #2
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	2300      	movs	r3, #0
 8004290:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004294:	490d      	ldr	r1, [pc, #52]	; (80042cc <xTimerCreateTimerTask+0x5c>)
 8004296:	480e      	ldr	r0, [pc, #56]	; (80042d0 <xTimerCreateTimerTask+0x60>)
 8004298:	f7fe feca 	bl	8003030 <xTaskCreate>
 800429c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10a      	bne.n	80042ba <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	603b      	str	r3, [r7, #0]
    }
 80042b6:	bf00      	nop
 80042b8:	e7fe      	b.n	80042b8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80042ba:	687b      	ldr	r3, [r7, #4]
    }
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20000210 	.word	0x20000210
 80042c8:	20000214 	.word	0x20000214
 80042cc:	08007eb0 	.word	0x08007eb0
 80042d0:	08004409 	.word	0x08004409

080042d4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	; 0x28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10a      	bne.n	8004302 <xTimerGenericCommand+0x2e>
        __asm volatile
 80042ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	623b      	str	r3, [r7, #32]
    }
 80042fe:	bf00      	nop
 8004300:	e7fe      	b.n	8004300 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004302:	4b1a      	ldr	r3, [pc, #104]	; (800436c <xTimerGenericCommand+0x98>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d02a      	beq.n	8004360 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b05      	cmp	r3, #5
 800431a:	dc18      	bgt.n	800434e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800431c:	f7ff fd18 	bl	8003d50 <xTaskGetSchedulerState>
 8004320:	4603      	mov	r3, r0
 8004322:	2b02      	cmp	r3, #2
 8004324:	d109      	bne.n	800433a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004326:	4b11      	ldr	r3, [pc, #68]	; (800436c <xTimerGenericCommand+0x98>)
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	f107 0114 	add.w	r1, r7, #20
 800432e:	2300      	movs	r3, #0
 8004330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004332:	f7fe fa13 	bl	800275c <xQueueGenericSend>
 8004336:	6278      	str	r0, [r7, #36]	; 0x24
 8004338:	e012      	b.n	8004360 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800433a:	4b0c      	ldr	r3, [pc, #48]	; (800436c <xTimerGenericCommand+0x98>)
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	f107 0114 	add.w	r1, r7, #20
 8004342:	2300      	movs	r3, #0
 8004344:	2200      	movs	r2, #0
 8004346:	f7fe fa09 	bl	800275c <xQueueGenericSend>
 800434a:	6278      	str	r0, [r7, #36]	; 0x24
 800434c:	e008      	b.n	8004360 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800434e:	4b07      	ldr	r3, [pc, #28]	; (800436c <xTimerGenericCommand+0x98>)
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	f107 0114 	add.w	r1, r7, #20
 8004356:	2300      	movs	r3, #0
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	f7fe fb25 	bl	80029a8 <xQueueGenericSendFromISR>
 800435e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004362:	4618      	mov	r0, r3
 8004364:	3728      	adds	r7, #40	; 0x28
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	20000210 	.word	0x20000210

08004370 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af02      	add	r7, sp, #8
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800437a:	4b22      	ldr	r3, [pc, #136]	; (8004404 <prvProcessExpiredTimer+0x94>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	3304      	adds	r3, #4
 8004388:	4618      	mov	r0, r3
 800438a:	f7fe f8cd 	bl	8002528 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d022      	beq.n	80043e2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	699a      	ldr	r2, [r3, #24]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	18d1      	adds	r1, r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	6978      	ldr	r0, [r7, #20]
 80043aa:	f000 f8d1 	bl	8004550 <prvInsertTimerInActiveList>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01f      	beq.n	80043f4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043b4:	2300      	movs	r3, #0
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	2300      	movs	r3, #0
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	2100      	movs	r1, #0
 80043be:	6978      	ldr	r0, [r7, #20]
 80043c0:	f7ff ff88 	bl	80042d4 <xTimerGenericCommand>
 80043c4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d113      	bne.n	80043f4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	60fb      	str	r3, [r7, #12]
    }
 80043de:	bf00      	nop
 80043e0:	e7fe      	b.n	80043e0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	6978      	ldr	r0, [r7, #20]
 80043fa:	4798      	blx	r3
    }
 80043fc:	bf00      	nop
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	20000208 	.word	0x20000208

08004408 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004410:	f107 0308 	add.w	r3, r7, #8
 8004414:	4618      	mov	r0, r3
 8004416:	f000 f857 	bl	80044c8 <prvGetNextExpireTime>
 800441a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4619      	mov	r1, r3
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f803 	bl	800442c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004426:	f000 f8d5 	bl	80045d4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800442a:	e7f1      	b.n	8004410 <prvTimerTask+0x8>

0800442c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004436:	f7ff f8a3 	bl	8003580 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800443a:	f107 0308 	add.w	r3, r7, #8
 800443e:	4618      	mov	r0, r3
 8004440:	f000 f866 	bl	8004510 <prvSampleTimeNow>
 8004444:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d130      	bne.n	80044ae <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <prvProcessTimerOrBlockTask+0x3c>
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	429a      	cmp	r2, r3
 8004458:	d806      	bhi.n	8004468 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800445a:	f7ff f89f 	bl	800359c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800445e:	68f9      	ldr	r1, [r7, #12]
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff ff85 	bl	8004370 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004466:	e024      	b.n	80044b2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d008      	beq.n	8004480 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800446e:	4b13      	ldr	r3, [pc, #76]	; (80044bc <prvProcessTimerOrBlockTask+0x90>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <prvProcessTimerOrBlockTask+0x50>
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <prvProcessTimerOrBlockTask+0x52>
 800447c:	2300      	movs	r3, #0
 800447e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004480:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <prvProcessTimerOrBlockTask+0x94>)
 8004482:	6818      	ldr	r0, [r3, #0]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	4619      	mov	r1, r3
 800448e:	f7fe fd9b 	bl	8002fc8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004492:	f7ff f883 	bl	800359c <xTaskResumeAll>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10a      	bne.n	80044b2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800449c:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <prvProcessTimerOrBlockTask+0x98>)
 800449e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	f3bf 8f6f 	isb	sy
    }
 80044ac:	e001      	b.n	80044b2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80044ae:	f7ff f875 	bl	800359c <xTaskResumeAll>
    }
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	2000020c 	.word	0x2000020c
 80044c0:	20000210 	.word	0x20000210
 80044c4:	e000ed04 	.word	0xe000ed04

080044c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80044d0:	4b0e      	ldr	r3, [pc, #56]	; (800450c <prvGetNextExpireTime+0x44>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <prvGetNextExpireTime+0x16>
 80044da:	2201      	movs	r2, #1
 80044dc:	e000      	b.n	80044e0 <prvGetNextExpireTime+0x18>
 80044de:	2200      	movs	r2, #0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d105      	bne.n	80044f8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044ec:	4b07      	ldr	r3, [pc, #28]	; (800450c <prvGetNextExpireTime+0x44>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	e001      	b.n	80044fc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80044fc:	68fb      	ldr	r3, [r7, #12]
    }
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	20000208 	.word	0x20000208

08004510 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004518:	f7ff f8e0 	bl	80036dc <xTaskGetTickCount>
 800451c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800451e:	4b0b      	ldr	r3, [pc, #44]	; (800454c <prvSampleTimeNow+0x3c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	429a      	cmp	r2, r3
 8004526:	d205      	bcs.n	8004534 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004528:	f000 f91a 	bl	8004760 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	e002      	b.n	800453a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800453a:	4a04      	ldr	r2, [pc, #16]	; (800454c <prvSampleTimeNow+0x3c>)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004540:	68fb      	ldr	r3, [r7, #12]
    }
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000218 	.word	0x20000218

08004550 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	429a      	cmp	r2, r3
 8004574:	d812      	bhi.n	800459c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	1ad2      	subs	r2, r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	429a      	cmp	r2, r3
 8004582:	d302      	bcc.n	800458a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004584:	2301      	movs	r3, #1
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	e01b      	b.n	80045c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800458a:	4b10      	ldr	r3, [pc, #64]	; (80045cc <prvInsertTimerInActiveList+0x7c>)
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3304      	adds	r3, #4
 8004592:	4619      	mov	r1, r3
 8004594:	4610      	mov	r0, r2
 8004596:	f7fd ff8e 	bl	80024b6 <vListInsert>
 800459a:	e012      	b.n	80045c2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d206      	bcs.n	80045b2 <prvInsertTimerInActiveList+0x62>
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d302      	bcc.n	80045b2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80045ac:	2301      	movs	r3, #1
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	e007      	b.n	80045c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045b2:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <prvInsertTimerInActiveList+0x80>)
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3304      	adds	r3, #4
 80045ba:	4619      	mov	r1, r3
 80045bc:	4610      	mov	r0, r2
 80045be:	f7fd ff7a 	bl	80024b6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80045c2:	697b      	ldr	r3, [r7, #20]
    }
 80045c4:	4618      	mov	r0, r3
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	2000020c 	.word	0x2000020c
 80045d0:	20000208 	.word	0x20000208

080045d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08c      	sub	sp, #48	; 0x30
 80045d8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045da:	e0ae      	b.n	800473a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f2c0 80aa 	blt.w	8004738 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d004      	beq.n	80045fa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	3304      	adds	r3, #4
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fd ff97 	bl	8002528 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045fa:	1d3b      	adds	r3, r7, #4
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff ff87 	bl	8004510 <prvSampleTimeNow>
 8004602:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b09      	cmp	r3, #9
 8004608:	f200 8097 	bhi.w	800473a <prvProcessReceivedCommands+0x166>
 800460c:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <prvProcessReceivedCommands+0x40>)
 800460e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004612:	bf00      	nop
 8004614:	0800463d 	.word	0x0800463d
 8004618:	0800463d 	.word	0x0800463d
 800461c:	0800463d 	.word	0x0800463d
 8004620:	080046b1 	.word	0x080046b1
 8004624:	080046c5 	.word	0x080046c5
 8004628:	0800470f 	.word	0x0800470f
 800462c:	0800463d 	.word	0x0800463d
 8004630:	0800463d 	.word	0x0800463d
 8004634:	080046b1 	.word	0x080046b1
 8004638:	080046c5 	.word	0x080046c5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	b2da      	uxtb	r2, r3
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	18d1      	adds	r1, r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a3a      	ldr	r2, [r7, #32]
 800465a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800465c:	f7ff ff78 	bl	8004550 <prvInsertTimerInActiveList>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d069      	beq.n	800473a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800466c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d05e      	beq.n	800473a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	441a      	add	r2, r3
 8004684:	2300      	movs	r3, #0
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	2300      	movs	r3, #0
 800468a:	2100      	movs	r1, #0
 800468c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800468e:	f7ff fe21 	bl	80042d4 <xTimerGenericCommand>
 8004692:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d14f      	bne.n	800473a <prvProcessReceivedCommands+0x166>
        __asm volatile
 800469a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	61bb      	str	r3, [r7, #24]
    }
 80046ac:	bf00      	nop
 80046ae:	e7fe      	b.n	80046ae <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046b6:	f023 0301 	bic.w	r3, r3, #1
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80046c2:	e03a      	b.n	800473a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10a      	bne.n	80046fa <prvProcessReceivedCommands+0x126>
        __asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	617b      	str	r3, [r7, #20]
    }
 80046f6:	bf00      	nop
 80046f8:	e7fe      	b.n	80046f8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	18d1      	adds	r1, r2, r3
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	6a3a      	ldr	r2, [r7, #32]
 8004706:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004708:	f7ff ff22 	bl	8004550 <prvInsertTimerInActiveList>
                        break;
 800470c:	e015      	b.n	800473a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d103      	bne.n	8004724 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800471c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800471e:	f000 fc75 	bl	800500c <vPortFree>
 8004722:	e00a      	b.n	800473a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800472a:	f023 0301 	bic.w	r3, r3, #1
 800472e:	b2da      	uxtb	r2, r3
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004736:	e000      	b.n	800473a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004738:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800473a:	4b08      	ldr	r3, [pc, #32]	; (800475c <prvProcessReceivedCommands+0x188>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f107 0108 	add.w	r1, r7, #8
 8004742:	2200      	movs	r2, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f7fe f9ed 	bl	8002b24 <xQueueReceive>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	f47f af45 	bne.w	80045dc <prvProcessReceivedCommands+0x8>
        }
    }
 8004752:	bf00      	nop
 8004754:	bf00      	nop
 8004756:	3728      	adds	r7, #40	; 0x28
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	20000210 	.word	0x20000210

08004760 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004760:	b580      	push	{r7, lr}
 8004762:	b088      	sub	sp, #32
 8004764:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004766:	e048      	b.n	80047fa <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004768:	4b2d      	ldr	r3, [pc, #180]	; (8004820 <prvSwitchTimerLists+0xc0>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004772:	4b2b      	ldr	r3, [pc, #172]	; (8004820 <prvSwitchTimerLists+0xc0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3304      	adds	r3, #4
 8004780:	4618      	mov	r0, r3
 8004782:	f7fd fed1 	bl	8002528 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d02e      	beq.n	80047fa <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4413      	add	r3, r2
 80047a4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d90e      	bls.n	80047cc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047ba:	4b19      	ldr	r3, [pc, #100]	; (8004820 <prvSwitchTimerLists+0xc0>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3304      	adds	r3, #4
 80047c2:	4619      	mov	r1, r3
 80047c4:	4610      	mov	r0, r2
 80047c6:	f7fd fe76 	bl	80024b6 <vListInsert>
 80047ca:	e016      	b.n	80047fa <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047cc:	2300      	movs	r3, #0
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	2300      	movs	r3, #0
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	2100      	movs	r1, #0
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f7ff fd7c 	bl	80042d4 <xTimerGenericCommand>
 80047dc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10a      	bne.n	80047fa <prvSwitchTimerLists+0x9a>
        __asm volatile
 80047e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	603b      	str	r3, [r7, #0]
    }
 80047f6:	bf00      	nop
 80047f8:	e7fe      	b.n	80047f8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047fa:	4b09      	ldr	r3, [pc, #36]	; (8004820 <prvSwitchTimerLists+0xc0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1b1      	bne.n	8004768 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004804:	4b06      	ldr	r3, [pc, #24]	; (8004820 <prvSwitchTimerLists+0xc0>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800480a:	4b06      	ldr	r3, [pc, #24]	; (8004824 <prvSwitchTimerLists+0xc4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a04      	ldr	r2, [pc, #16]	; (8004820 <prvSwitchTimerLists+0xc0>)
 8004810:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004812:	4a04      	ldr	r2, [pc, #16]	; (8004824 <prvSwitchTimerLists+0xc4>)
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	6013      	str	r3, [r2, #0]
    }
 8004818:	bf00      	nop
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20000208 	.word	0x20000208
 8004824:	2000020c 	.word	0x2000020c

08004828 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800482c:	f000 f9e2 	bl	8004bf4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004830:	4b12      	ldr	r3, [pc, #72]	; (800487c <prvCheckForValidListAndQueue+0x54>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d11d      	bne.n	8004874 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004838:	4811      	ldr	r0, [pc, #68]	; (8004880 <prvCheckForValidListAndQueue+0x58>)
 800483a:	f7fd fdeb 	bl	8002414 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800483e:	4811      	ldr	r0, [pc, #68]	; (8004884 <prvCheckForValidListAndQueue+0x5c>)
 8004840:	f7fd fde8 	bl	8002414 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004844:	4b10      	ldr	r3, [pc, #64]	; (8004888 <prvCheckForValidListAndQueue+0x60>)
 8004846:	4a0e      	ldr	r2, [pc, #56]	; (8004880 <prvCheckForValidListAndQueue+0x58>)
 8004848:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800484a:	4b10      	ldr	r3, [pc, #64]	; (800488c <prvCheckForValidListAndQueue+0x64>)
 800484c:	4a0d      	ldr	r2, [pc, #52]	; (8004884 <prvCheckForValidListAndQueue+0x5c>)
 800484e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004850:	2200      	movs	r2, #0
 8004852:	210c      	movs	r1, #12
 8004854:	200a      	movs	r0, #10
 8004856:	f7fd fef9 	bl	800264c <xQueueGenericCreate>
 800485a:	4603      	mov	r3, r0
 800485c:	4a07      	ldr	r2, [pc, #28]	; (800487c <prvCheckForValidListAndQueue+0x54>)
 800485e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004860:	4b06      	ldr	r3, [pc, #24]	; (800487c <prvCheckForValidListAndQueue+0x54>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004868:	4b04      	ldr	r3, [pc, #16]	; (800487c <prvCheckForValidListAndQueue+0x54>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4908      	ldr	r1, [pc, #32]	; (8004890 <prvCheckForValidListAndQueue+0x68>)
 800486e:	4618      	mov	r0, r3
 8004870:	f7fe fb78 	bl	8002f64 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004874:	f000 f9ee 	bl	8004c54 <vPortExitCritical>
    }
 8004878:	bf00      	nop
 800487a:	bd80      	pop	{r7, pc}
 800487c:	20000210 	.word	0x20000210
 8004880:	200001e0 	.word	0x200001e0
 8004884:	200001f4 	.word	0x200001f4
 8004888:	20000208 	.word	0x20000208
 800488c:	2000020c 	.word	0x2000020c
 8004890:	08007eb8 	.word	0x08007eb8

08004894 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3b04      	subs	r3, #4
 80048a4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3b04      	subs	r3, #4
 80048b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f023 0201 	bic.w	r2, r3, #1
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3b04      	subs	r3, #4
 80048c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80048c4:	4a0c      	ldr	r2, [pc, #48]	; (80048f8 <pxPortInitialiseStack+0x64>)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3b14      	subs	r3, #20
 80048ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3b04      	subs	r3, #4
 80048da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f06f 0202 	mvn.w	r2, #2
 80048e2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3b20      	subs	r3, #32
 80048e8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80048ea:	68fb      	ldr	r3, [r7, #12]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	080048fd 	.word	0x080048fd

080048fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004902:	2300      	movs	r3, #0
 8004904:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004906:	4b12      	ldr	r3, [pc, #72]	; (8004950 <prvTaskExitError+0x54>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490e:	d00a      	beq.n	8004926 <prvTaskExitError+0x2a>
        __asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	60fb      	str	r3, [r7, #12]
    }
 8004922:	bf00      	nop
 8004924:	e7fe      	b.n	8004924 <prvTaskExitError+0x28>
        __asm volatile
 8004926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	60bb      	str	r3, [r7, #8]
    }
 8004938:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800493a:	bf00      	nop
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0fc      	beq.n	800493c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004942:	bf00      	nop
 8004944:	bf00      	nop
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	20000010 	.word	0x20000010
	...

08004960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004960:	4b07      	ldr	r3, [pc, #28]	; (8004980 <pxCurrentTCBConst2>)
 8004962:	6819      	ldr	r1, [r3, #0]
 8004964:	6808      	ldr	r0, [r1, #0]
 8004966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496a:	f380 8809 	msr	PSP, r0
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f04f 0000 	mov.w	r0, #0
 8004976:	f380 8811 	msr	BASEPRI, r0
 800497a:	4770      	bx	lr
 800497c:	f3af 8000 	nop.w

08004980 <pxCurrentTCBConst2>:
 8004980:	200000dc 	.word	0x200000dc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop

08004988 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004988:	4808      	ldr	r0, [pc, #32]	; (80049ac <prvPortStartFirstTask+0x24>)
 800498a:	6800      	ldr	r0, [r0, #0]
 800498c:	6800      	ldr	r0, [r0, #0]
 800498e:	f380 8808 	msr	MSP, r0
 8004992:	f04f 0000 	mov.w	r0, #0
 8004996:	f380 8814 	msr	CONTROL, r0
 800499a:	b662      	cpsie	i
 800499c:	b661      	cpsie	f
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	df00      	svc	0
 80049a8:	bf00      	nop
 80049aa:	0000      	.short	0x0000
 80049ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80049b0:	bf00      	nop
 80049b2:	bf00      	nop

080049b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049ba:	4b46      	ldr	r3, [pc, #280]	; (8004ad4 <xPortStartScheduler+0x120>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a46      	ldr	r2, [pc, #280]	; (8004ad8 <xPortStartScheduler+0x124>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d10a      	bne.n	80049da <xPortStartScheduler+0x26>
        __asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	613b      	str	r3, [r7, #16]
    }
 80049d6:	bf00      	nop
 80049d8:	e7fe      	b.n	80049d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049da:	4b3e      	ldr	r3, [pc, #248]	; (8004ad4 <xPortStartScheduler+0x120>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a3f      	ldr	r2, [pc, #252]	; (8004adc <xPortStartScheduler+0x128>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d10a      	bne.n	80049fa <xPortStartScheduler+0x46>
        __asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	60fb      	str	r3, [r7, #12]
    }
 80049f6:	bf00      	nop
 80049f8:	e7fe      	b.n	80049f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049fa:	4b39      	ldr	r3, [pc, #228]	; (8004ae0 <xPortStartScheduler+0x12c>)
 80049fc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	22ff      	movs	r2, #255	; 0xff
 8004a0a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	4b31      	ldr	r3, [pc, #196]	; (8004ae4 <xPortStartScheduler+0x130>)
 8004a20:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a22:	4b31      	ldr	r3, [pc, #196]	; (8004ae8 <xPortStartScheduler+0x134>)
 8004a24:	2207      	movs	r2, #7
 8004a26:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a28:	e009      	b.n	8004a3e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004a2a:	4b2f      	ldr	r3, [pc, #188]	; (8004ae8 <xPortStartScheduler+0x134>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	4a2d      	ldr	r2, [pc, #180]	; (8004ae8 <xPortStartScheduler+0x134>)
 8004a32:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a3e:	78fb      	ldrb	r3, [r7, #3]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a46:	2b80      	cmp	r3, #128	; 0x80
 8004a48:	d0ef      	beq.n	8004a2a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a4a:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <xPortStartScheduler+0x134>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f1c3 0307 	rsb	r3, r3, #7
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d00a      	beq.n	8004a6c <xPortStartScheduler+0xb8>
        __asm volatile
 8004a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	60bb      	str	r3, [r7, #8]
    }
 8004a68:	bf00      	nop
 8004a6a:	e7fe      	b.n	8004a6a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a6c:	4b1e      	ldr	r3, [pc, #120]	; (8004ae8 <xPortStartScheduler+0x134>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	021b      	lsls	r3, r3, #8
 8004a72:	4a1d      	ldr	r2, [pc, #116]	; (8004ae8 <xPortStartScheduler+0x134>)
 8004a74:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a76:	4b1c      	ldr	r3, [pc, #112]	; (8004ae8 <xPortStartScheduler+0x134>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ae8 <xPortStartScheduler+0x134>)
 8004a80:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004a8a:	4b18      	ldr	r3, [pc, #96]	; (8004aec <xPortStartScheduler+0x138>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a17      	ldr	r2, [pc, #92]	; (8004aec <xPortStartScheduler+0x138>)
 8004a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a94:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004a96:	4b15      	ldr	r3, [pc, #84]	; (8004aec <xPortStartScheduler+0x138>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a14      	ldr	r2, [pc, #80]	; (8004aec <xPortStartScheduler+0x138>)
 8004a9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004aa0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004aa2:	f000 f963 	bl	8004d6c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004aa6:	4b12      	ldr	r3, [pc, #72]	; (8004af0 <xPortStartScheduler+0x13c>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004aac:	f000 f982 	bl	8004db4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ab0:	4b10      	ldr	r3, [pc, #64]	; (8004af4 <xPortStartScheduler+0x140>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a0f      	ldr	r2, [pc, #60]	; (8004af4 <xPortStartScheduler+0x140>)
 8004ab6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004aba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004abc:	f7ff ff64 	bl	8004988 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004ac0:	f7fe feea 	bl	8003898 <vTaskSwitchContext>
    prvTaskExitError();
 8004ac4:	f7ff ff1a 	bl	80048fc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	e000ed00 	.word	0xe000ed00
 8004ad8:	410fc271 	.word	0x410fc271
 8004adc:	410fc270 	.word	0x410fc270
 8004ae0:	e000e400 	.word	0xe000e400
 8004ae4:	2000021c 	.word	0x2000021c
 8004ae8:	20000220 	.word	0x20000220
 8004aec:	e000ed20 	.word	0xe000ed20
 8004af0:	20000010 	.word	0x20000010
 8004af4:	e000ef34 	.word	0xe000ef34

08004af8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004afe:	4b37      	ldr	r3, [pc, #220]	; (8004bdc <vInitPrioGroupValue+0xe4>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a37      	ldr	r2, [pc, #220]	; (8004be0 <vInitPrioGroupValue+0xe8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d10a      	bne.n	8004b1e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	613b      	str	r3, [r7, #16]
    }
 8004b1a:	bf00      	nop
 8004b1c:	e7fe      	b.n	8004b1c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b1e:	4b2f      	ldr	r3, [pc, #188]	; (8004bdc <vInitPrioGroupValue+0xe4>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a30      	ldr	r2, [pc, #192]	; (8004be4 <vInitPrioGroupValue+0xec>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d10a      	bne.n	8004b3e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	60fb      	str	r3, [r7, #12]
    }
 8004b3a:	bf00      	nop
 8004b3c:	e7fe      	b.n	8004b3c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b3e:	4b2a      	ldr	r3, [pc, #168]	; (8004be8 <vInitPrioGroupValue+0xf0>)
 8004b40:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	22ff      	movs	r2, #255	; 0xff
 8004b4e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	4b22      	ldr	r3, [pc, #136]	; (8004bec <vInitPrioGroupValue+0xf4>)
 8004b64:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b66:	4b22      	ldr	r3, [pc, #136]	; (8004bf0 <vInitPrioGroupValue+0xf8>)
 8004b68:	2207      	movs	r2, #7
 8004b6a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b6c:	e009      	b.n	8004b82 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004b6e:	4b20      	ldr	r3, [pc, #128]	; (8004bf0 <vInitPrioGroupValue+0xf8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	4a1e      	ldr	r2, [pc, #120]	; (8004bf0 <vInitPrioGroupValue+0xf8>)
 8004b76:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8a:	2b80      	cmp	r3, #128	; 0x80
 8004b8c:	d0ef      	beq.n	8004b6e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b8e:	4b18      	ldr	r3, [pc, #96]	; (8004bf0 <vInitPrioGroupValue+0xf8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f1c3 0307 	rsb	r3, r3, #7
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d00a      	beq.n	8004bb0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8004b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	60bb      	str	r3, [r7, #8]
    }
 8004bac:	bf00      	nop
 8004bae:	e7fe      	b.n	8004bae <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004bb0:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <vInitPrioGroupValue+0xf8>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	021b      	lsls	r3, r3, #8
 8004bb6:	4a0e      	ldr	r2, [pc, #56]	; (8004bf0 <vInitPrioGroupValue+0xf8>)
 8004bb8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004bba:	4b0d      	ldr	r3, [pc, #52]	; (8004bf0 <vInitPrioGroupValue+0xf8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bc2:	4a0b      	ldr	r2, [pc, #44]	; (8004bf0 <vInitPrioGroupValue+0xf8>)
 8004bc4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004bce:	bf00      	nop
 8004bd0:	371c      	adds	r7, #28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	e000ed00 	.word	0xe000ed00
 8004be0:	410fc271 	.word	0x410fc271
 8004be4:	410fc270 	.word	0x410fc270
 8004be8:	e000e400 	.word	0xe000e400
 8004bec:	2000021c 	.word	0x2000021c
 8004bf0:	20000220 	.word	0x20000220

08004bf4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
        __asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	607b      	str	r3, [r7, #4]
    }
 8004c0c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004c0e:	4b0f      	ldr	r3, [pc, #60]	; (8004c4c <vPortEnterCritical+0x58>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3301      	adds	r3, #1
 8004c14:	4a0d      	ldr	r2, [pc, #52]	; (8004c4c <vPortEnterCritical+0x58>)
 8004c16:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004c18:	4b0c      	ldr	r3, [pc, #48]	; (8004c4c <vPortEnterCritical+0x58>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d10f      	bne.n	8004c40 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c20:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <vPortEnterCritical+0x5c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00a      	beq.n	8004c40 <vPortEnterCritical+0x4c>
        __asm volatile
 8004c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	603b      	str	r3, [r7, #0]
    }
 8004c3c:	bf00      	nop
 8004c3e:	e7fe      	b.n	8004c3e <vPortEnterCritical+0x4a>
    }
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	20000010 	.word	0x20000010
 8004c50:	e000ed04 	.word	0xe000ed04

08004c54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004c5a:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <vPortExitCritical+0x50>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10a      	bne.n	8004c78 <vPortExitCritical+0x24>
        __asm volatile
 8004c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	607b      	str	r3, [r7, #4]
    }
 8004c74:	bf00      	nop
 8004c76:	e7fe      	b.n	8004c76 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004c78:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <vPortExitCritical+0x50>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	4a09      	ldr	r2, [pc, #36]	; (8004ca4 <vPortExitCritical+0x50>)
 8004c80:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004c82:	4b08      	ldr	r3, [pc, #32]	; (8004ca4 <vPortExitCritical+0x50>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d105      	bne.n	8004c96 <vPortExitCritical+0x42>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	f383 8811 	msr	BASEPRI, r3
    }
 8004c94:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	20000010 	.word	0x20000010
	...

08004cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004cb0:	f3ef 8009 	mrs	r0, PSP
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	4b15      	ldr	r3, [pc, #84]	; (8004d10 <pxCurrentTCBConst>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	f01e 0f10 	tst.w	lr, #16
 8004cc0:	bf08      	it	eq
 8004cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cca:	6010      	str	r0, [r2, #0]
 8004ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004cd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004cd4:	f380 8811 	msr	BASEPRI, r0
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f7fe fdda 	bl	8003898 <vTaskSwitchContext>
 8004ce4:	f04f 0000 	mov.w	r0, #0
 8004ce8:	f380 8811 	msr	BASEPRI, r0
 8004cec:	bc09      	pop	{r0, r3}
 8004cee:	6819      	ldr	r1, [r3, #0]
 8004cf0:	6808      	ldr	r0, [r1, #0]
 8004cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf6:	f01e 0f10 	tst.w	lr, #16
 8004cfa:	bf08      	it	eq
 8004cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d00:	f380 8809 	msr	PSP, r0
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	f3af 8000 	nop.w

08004d10 <pxCurrentTCBConst>:
 8004d10:	200000dc 	.word	0x200000dc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop

08004d18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
        __asm volatile
 8004d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	607b      	str	r3, [r7, #4]
    }
 8004d30:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004d32:	f002 fcbb 	bl	80076ac <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004d36:	f7fe fcf3 	bl	8003720 <xTaskIncrementTick>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d006      	beq.n	8004d4e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004d40:	f002 fd12 	bl	8007768 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d44:	4b08      	ldr	r3, [pc, #32]	; (8004d68 <SysTick_Handler+0x50>)
 8004d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	e001      	b.n	8004d52 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004d4e:	f002 fcef 	bl	8007730 <SEGGER_SYSVIEW_RecordExitISR>
 8004d52:	2300      	movs	r3, #0
 8004d54:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	f383 8811 	msr	BASEPRI, r3
    }
 8004d5c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004d5e:	bf00      	nop
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	e000ed04 	.word	0xe000ed04

08004d6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d70:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <vPortSetupTimerInterrupt+0x34>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d76:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <vPortSetupTimerInterrupt+0x38>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d7c:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <vPortSetupTimerInterrupt+0x3c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a0a      	ldr	r2, [pc, #40]	; (8004dac <vPortSetupTimerInterrupt+0x40>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	099b      	lsrs	r3, r3, #6
 8004d88:	4a09      	ldr	r2, [pc, #36]	; (8004db0 <vPortSetupTimerInterrupt+0x44>)
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d8e:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <vPortSetupTimerInterrupt+0x34>)
 8004d90:	2207      	movs	r2, #7
 8004d92:	601a      	str	r2, [r3, #0]
}
 8004d94:	bf00      	nop
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	e000e010 	.word	0xe000e010
 8004da4:	e000e018 	.word	0xe000e018
 8004da8:	20000000 	.word	0x20000000
 8004dac:	10624dd3 	.word	0x10624dd3
 8004db0:	e000e014 	.word	0xe000e014

08004db4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004db4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004dc4 <vPortEnableVFP+0x10>
 8004db8:	6801      	ldr	r1, [r0, #0]
 8004dba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004dbe:	6001      	str	r1, [r0, #0]
 8004dc0:	4770      	bx	lr
 8004dc2:	0000      	.short	0x0000
 8004dc4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004dc8:	bf00      	nop
 8004dca:	bf00      	nop

08004dcc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004dd2:	f3ef 8305 	mrs	r3, IPSR
 8004dd6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b0f      	cmp	r3, #15
 8004ddc:	d914      	bls.n	8004e08 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004dde:	4a17      	ldr	r2, [pc, #92]	; (8004e3c <vPortValidateInterruptPriority+0x70>)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4413      	add	r3, r2
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004de8:	4b15      	ldr	r3, [pc, #84]	; (8004e40 <vPortValidateInterruptPriority+0x74>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	7afa      	ldrb	r2, [r7, #11]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d20a      	bcs.n	8004e08 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	607b      	str	r3, [r7, #4]
    }
 8004e04:	bf00      	nop
 8004e06:	e7fe      	b.n	8004e06 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e08:	4b0e      	ldr	r3, [pc, #56]	; (8004e44 <vPortValidateInterruptPriority+0x78>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e10:	4b0d      	ldr	r3, [pc, #52]	; (8004e48 <vPortValidateInterruptPriority+0x7c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d90a      	bls.n	8004e2e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	603b      	str	r3, [r7, #0]
    }
 8004e2a:	bf00      	nop
 8004e2c:	e7fe      	b.n	8004e2c <vPortValidateInterruptPriority+0x60>
    }
 8004e2e:	bf00      	nop
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	e000e3f0 	.word	0xe000e3f0
 8004e40:	2000021c 	.word	0x2000021c
 8004e44:	e000ed0c 	.word	0xe000ed0c
 8004e48:	20000220 	.word	0x20000220

08004e4c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	; 0x28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004e54:	2300      	movs	r3, #0
 8004e56:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004e58:	f7fe fb92 	bl	8003580 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004e5c:	4b65      	ldr	r3, [pc, #404]	; (8004ff4 <pvPortMalloc+0x1a8>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004e64:	f000 f934 	bl	80050d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e68:	4b63      	ldr	r3, [pc, #396]	; (8004ff8 <pvPortMalloc+0x1ac>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f040 80a7 	bne.w	8004fc4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d02d      	beq.n	8004ed8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004e7c:	2208      	movs	r2, #8
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d227      	bcs.n	8004ed8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004e88:	2208      	movs	r2, #8
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d021      	beq.n	8004ede <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f023 0307 	bic.w	r3, r3, #7
 8004ea0:	3308      	adds	r3, #8
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d214      	bcs.n	8004ed2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f023 0307 	bic.w	r3, r3, #7
 8004eae:	3308      	adds	r3, #8
 8004eb0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d010      	beq.n	8004ede <pvPortMalloc+0x92>
        __asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	617b      	str	r3, [r7, #20]
    }
 8004ece:	bf00      	nop
 8004ed0:	e7fe      	b.n	8004ed0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ed6:	e002      	b.n	8004ede <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	607b      	str	r3, [r7, #4]
 8004edc:	e000      	b.n	8004ee0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ede:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d06e      	beq.n	8004fc4 <pvPortMalloc+0x178>
 8004ee6:	4b45      	ldr	r3, [pc, #276]	; (8004ffc <pvPortMalloc+0x1b0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d869      	bhi.n	8004fc4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004ef0:	4b43      	ldr	r3, [pc, #268]	; (8005000 <pvPortMalloc+0x1b4>)
 8004ef2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004ef4:	4b42      	ldr	r3, [pc, #264]	; (8005000 <pvPortMalloc+0x1b4>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004efa:	e004      	b.n	8004f06 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d903      	bls.n	8004f18 <pvPortMalloc+0xcc>
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1f1      	bne.n	8004efc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004f18:	4b36      	ldr	r3, [pc, #216]	; (8004ff4 <pvPortMalloc+0x1a8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d050      	beq.n	8004fc4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2208      	movs	r2, #8
 8004f28:	4413      	add	r3, r2
 8004f2a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	1ad2      	subs	r2, r2, r3
 8004f3c:	2308      	movs	r3, #8
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d91f      	bls.n	8004f84 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4413      	add	r3, r2
 8004f4a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <pvPortMalloc+0x120>
        __asm volatile
 8004f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5a:	f383 8811 	msr	BASEPRI, r3
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	613b      	str	r3, [r7, #16]
    }
 8004f68:	bf00      	nop
 8004f6a:	e7fe      	b.n	8004f6a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	1ad2      	subs	r2, r2, r3
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f7e:	69b8      	ldr	r0, [r7, #24]
 8004f80:	f000 f908 	bl	8005194 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f84:	4b1d      	ldr	r3, [pc, #116]	; (8004ffc <pvPortMalloc+0x1b0>)
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	4a1b      	ldr	r2, [pc, #108]	; (8004ffc <pvPortMalloc+0x1b0>)
 8004f90:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f92:	4b1a      	ldr	r3, [pc, #104]	; (8004ffc <pvPortMalloc+0x1b0>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4b1b      	ldr	r3, [pc, #108]	; (8005004 <pvPortMalloc+0x1b8>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d203      	bcs.n	8004fa6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f9e:	4b17      	ldr	r3, [pc, #92]	; (8004ffc <pvPortMalloc+0x1b0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a18      	ldr	r2, [pc, #96]	; (8005004 <pvPortMalloc+0x1b8>)
 8004fa4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	4b13      	ldr	r3, [pc, #76]	; (8004ff8 <pvPortMalloc+0x1ac>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004fba:	4b13      	ldr	r3, [pc, #76]	; (8005008 <pvPortMalloc+0x1bc>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	4a11      	ldr	r2, [pc, #68]	; (8005008 <pvPortMalloc+0x1bc>)
 8004fc2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004fc4:	f7fe faea 	bl	800359c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <pvPortMalloc+0x19c>
        __asm volatile
 8004fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	60fb      	str	r3, [r7, #12]
    }
 8004fe4:	bf00      	nop
 8004fe6:	e7fe      	b.n	8004fe6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004fe8:	69fb      	ldr	r3, [r7, #28]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3728      	adds	r7, #40	; 0x28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20012e2c 	.word	0x20012e2c
 8004ff8:	20012e40 	.word	0x20012e40
 8004ffc:	20012e30 	.word	0x20012e30
 8005000:	20012e24 	.word	0x20012e24
 8005004:	20012e34 	.word	0x20012e34
 8005008:	20012e38 	.word	0x20012e38

0800500c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d04d      	beq.n	80050ba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800501e:	2308      	movs	r3, #8
 8005020:	425b      	negs	r3, r3
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4413      	add	r3, r2
 8005026:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	4b24      	ldr	r3, [pc, #144]	; (80050c4 <vPortFree+0xb8>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4013      	ands	r3, r2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10a      	bne.n	8005050 <vPortFree+0x44>
        __asm volatile
 800503a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	60fb      	str	r3, [r7, #12]
    }
 800504c:	bf00      	nop
 800504e:	e7fe      	b.n	800504e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <vPortFree+0x62>
        __asm volatile
 8005058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	60bb      	str	r3, [r7, #8]
    }
 800506a:	bf00      	nop
 800506c:	e7fe      	b.n	800506c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	4b14      	ldr	r3, [pc, #80]	; (80050c4 <vPortFree+0xb8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4013      	ands	r3, r2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01e      	beq.n	80050ba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d11a      	bne.n	80050ba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	4b0e      	ldr	r3, [pc, #56]	; (80050c4 <vPortFree+0xb8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	43db      	mvns	r3, r3
 800508e:	401a      	ands	r2, r3
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005094:	f7fe fa74 	bl	8003580 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <vPortFree+0xbc>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4413      	add	r3, r2
 80050a2:	4a09      	ldr	r2, [pc, #36]	; (80050c8 <vPortFree+0xbc>)
 80050a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050a6:	6938      	ldr	r0, [r7, #16]
 80050a8:	f000 f874 	bl	8005194 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80050ac:	4b07      	ldr	r3, [pc, #28]	; (80050cc <vPortFree+0xc0>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3301      	adds	r3, #1
 80050b2:	4a06      	ldr	r2, [pc, #24]	; (80050cc <vPortFree+0xc0>)
 80050b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80050b6:	f7fe fa71 	bl	800359c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80050ba:	bf00      	nop
 80050bc:	3718      	adds	r7, #24
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	20012e40 	.word	0x20012e40
 80050c8:	20012e30 	.word	0x20012e30
 80050cc:	20012e3c 	.word	0x20012e3c

080050d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050d6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80050da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80050dc:	4b27      	ldr	r3, [pc, #156]	; (800517c <prvHeapInit+0xac>)
 80050de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00c      	beq.n	8005104 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3307      	adds	r3, #7
 80050ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0307 	bic.w	r3, r3, #7
 80050f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	4a1f      	ldr	r2, [pc, #124]	; (800517c <prvHeapInit+0xac>)
 8005100:	4413      	add	r3, r2
 8005102:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005108:	4a1d      	ldr	r2, [pc, #116]	; (8005180 <prvHeapInit+0xb0>)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800510e:	4b1c      	ldr	r3, [pc, #112]	; (8005180 <prvHeapInit+0xb0>)
 8005110:	2200      	movs	r2, #0
 8005112:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	4413      	add	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800511c:	2208      	movs	r2, #8
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	1a9b      	subs	r3, r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0307 	bic.w	r3, r3, #7
 800512a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4a15      	ldr	r2, [pc, #84]	; (8005184 <prvHeapInit+0xb4>)
 8005130:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005132:	4b14      	ldr	r3, [pc, #80]	; (8005184 <prvHeapInit+0xb4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2200      	movs	r2, #0
 8005138:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800513a:	4b12      	ldr	r3, [pc, #72]	; (8005184 <prvHeapInit+0xb4>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	1ad2      	subs	r2, r2, r3
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005150:	4b0c      	ldr	r3, [pc, #48]	; (8005184 <prvHeapInit+0xb4>)
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	4a0a      	ldr	r2, [pc, #40]	; (8005188 <prvHeapInit+0xb8>)
 800515e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	4a09      	ldr	r2, [pc, #36]	; (800518c <prvHeapInit+0xbc>)
 8005166:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005168:	4b09      	ldr	r3, [pc, #36]	; (8005190 <prvHeapInit+0xc0>)
 800516a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800516e:	601a      	str	r2, [r3, #0]
}
 8005170:	bf00      	nop
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	20000224 	.word	0x20000224
 8005180:	20012e24 	.word	0x20012e24
 8005184:	20012e2c 	.word	0x20012e2c
 8005188:	20012e34 	.word	0x20012e34
 800518c:	20012e30 	.word	0x20012e30
 8005190:	20012e40 	.word	0x20012e40

08005194 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800519c:	4b28      	ldr	r3, [pc, #160]	; (8005240 <prvInsertBlockIntoFreeList+0xac>)
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	e002      	b.n	80051a8 <prvInsertBlockIntoFreeList+0x14>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d8f7      	bhi.n	80051a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	4413      	add	r3, r2
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d108      	bne.n	80051d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	441a      	add	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	441a      	add	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d118      	bne.n	800521c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	4b15      	ldr	r3, [pc, #84]	; (8005244 <prvInsertBlockIntoFreeList+0xb0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d00d      	beq.n	8005212 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	441a      	add	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	e008      	b.n	8005224 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005212:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <prvInsertBlockIntoFreeList+0xb0>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	e003      	b.n	8005224 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	429a      	cmp	r2, r3
 800522a:	d002      	beq.n	8005232 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005232:	bf00      	nop
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	20012e24 	.word	0x20012e24
 8005244:	20012e2c 	.word	0x20012e2c

08005248 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800524c:	4803      	ldr	r0, [pc, #12]	; (800525c <_cbSendSystemDesc+0x14>)
 800524e:	f002 f9d7 	bl	8007600 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005252:	4803      	ldr	r0, [pc, #12]	; (8005260 <_cbSendSystemDesc+0x18>)
 8005254:	f002 f9d4 	bl	8007600 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005258:	bf00      	nop
 800525a:	bd80      	pop	{r7, pc}
 800525c:	08007ec0 	.word	0x08007ec0
 8005260:	08007efc 	.word	0x08007efc

08005264 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005268:	4b06      	ldr	r3, [pc, #24]	; (8005284 <SEGGER_SYSVIEW_Conf+0x20>)
 800526a:	6818      	ldr	r0, [r3, #0]
 800526c:	4b05      	ldr	r3, [pc, #20]	; (8005284 <SEGGER_SYSVIEW_Conf+0x20>)
 800526e:	6819      	ldr	r1, [r3, #0]
 8005270:	4b05      	ldr	r3, [pc, #20]	; (8005288 <SEGGER_SYSVIEW_Conf+0x24>)
 8005272:	4a06      	ldr	r2, [pc, #24]	; (800528c <SEGGER_SYSVIEW_Conf+0x28>)
 8005274:	f001 fd40 	bl	8006cf8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005278:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800527c:	f001 fd80 	bl	8006d80 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005280:	bf00      	nop
 8005282:	bd80      	pop	{r7, pc}
 8005284:	20000000 	.word	0x20000000
 8005288:	08005249 	.word	0x08005249
 800528c:	08007f98 	.word	0x08007f98

08005290 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005292:	b085      	sub	sp, #20
 8005294:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005296:	2300      	movs	r3, #0
 8005298:	607b      	str	r3, [r7, #4]
 800529a:	e033      	b.n	8005304 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800529c:	491e      	ldr	r1, [pc, #120]	; (8005318 <_cbSendTaskList+0x88>)
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	6818      	ldr	r0, [r3, #0]
 80052ac:	491a      	ldr	r1, [pc, #104]	; (8005318 <_cbSendTaskList+0x88>)
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	440b      	add	r3, r1
 80052ba:	3304      	adds	r3, #4
 80052bc:	6819      	ldr	r1, [r3, #0]
 80052be:	4c16      	ldr	r4, [pc, #88]	; (8005318 <_cbSendTaskList+0x88>)
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4423      	add	r3, r4
 80052cc:	3308      	adds	r3, #8
 80052ce:	681c      	ldr	r4, [r3, #0]
 80052d0:	4d11      	ldr	r5, [pc, #68]	; (8005318 <_cbSendTaskList+0x88>)
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	4613      	mov	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	442b      	add	r3, r5
 80052de:	330c      	adds	r3, #12
 80052e0:	681d      	ldr	r5, [r3, #0]
 80052e2:	4e0d      	ldr	r6, [pc, #52]	; (8005318 <_cbSendTaskList+0x88>)
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4433      	add	r3, r6
 80052f0:	3310      	adds	r3, #16
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	462b      	mov	r3, r5
 80052f8:	4622      	mov	r2, r4
 80052fa:	f000 f979 	bl	80055f0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3301      	adds	r3, #1
 8005302:	607b      	str	r3, [r7, #4]
 8005304:	4b05      	ldr	r3, [pc, #20]	; (800531c <_cbSendTaskList+0x8c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	429a      	cmp	r2, r3
 800530c:	d3c6      	bcc.n	800529c <_cbSendTaskList+0xc>
  }
}
 800530e:	bf00      	nop
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005318:	20012e44 	.word	0x20012e44
 800531c:	20012ee4 	.word	0x20012ee4

08005320 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005324:	b082      	sub	sp, #8
 8005326:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005328:	f7fe f9e8 	bl	80036fc <xTaskGetTickCountFromISR>
 800532c:	4603      	mov	r3, r0
 800532e:	2200      	movs	r2, #0
 8005330:	469a      	mov	sl, r3
 8005332:	4693      	mov	fp, r2
 8005334:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005338:	e9d7 0100 	ldrd	r0, r1, [r7]
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	f04f 0a00 	mov.w	sl, #0
 8005344:	f04f 0b00 	mov.w	fp, #0
 8005348:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800534c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8005350:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005354:	4652      	mov	r2, sl
 8005356:	465b      	mov	r3, fp
 8005358:	1a14      	subs	r4, r2, r0
 800535a:	eb63 0501 	sbc.w	r5, r3, r1
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	00ab      	lsls	r3, r5, #2
 8005368:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800536c:	00a2      	lsls	r2, r4, #2
 800536e:	4614      	mov	r4, r2
 8005370:	461d      	mov	r5, r3
 8005372:	eb14 0800 	adds.w	r8, r4, r0
 8005376:	eb45 0901 	adc.w	r9, r5, r1
 800537a:	f04f 0200 	mov.w	r2, #0
 800537e:	f04f 0300 	mov.w	r3, #0
 8005382:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005386:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800538a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800538e:	4690      	mov	r8, r2
 8005390:	4699      	mov	r9, r3
 8005392:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005396:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800539a:	4610      	mov	r0, r2
 800539c:	4619      	mov	r1, r3
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080053a8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80053b6:	2205      	movs	r2, #5
 80053b8:	492b      	ldr	r1, [pc, #172]	; (8005468 <SYSVIEW_AddTask+0xc0>)
 80053ba:	68b8      	ldr	r0, [r7, #8]
 80053bc:	f002 fcea 	bl	8007d94 <memcmp>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d04b      	beq.n	800545e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80053c6:	4b29      	ldr	r3, [pc, #164]	; (800546c <SYSVIEW_AddTask+0xc4>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b07      	cmp	r3, #7
 80053cc:	d903      	bls.n	80053d6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80053ce:	4828      	ldr	r0, [pc, #160]	; (8005470 <SYSVIEW_AddTask+0xc8>)
 80053d0:	f002 fc32 	bl	8007c38 <SEGGER_SYSVIEW_Warn>
    return;
 80053d4:	e044      	b.n	8005460 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80053d6:	4b25      	ldr	r3, [pc, #148]	; (800546c <SYSVIEW_AddTask+0xc4>)
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4926      	ldr	r1, [pc, #152]	; (8005474 <SYSVIEW_AddTask+0xcc>)
 80053dc:	4613      	mov	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80053ea:	4b20      	ldr	r3, [pc, #128]	; (800546c <SYSVIEW_AddTask+0xc4>)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	4921      	ldr	r1, [pc, #132]	; (8005474 <SYSVIEW_AddTask+0xcc>)
 80053f0:	4613      	mov	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	3304      	adds	r3, #4
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005400:	4b1a      	ldr	r3, [pc, #104]	; (800546c <SYSVIEW_AddTask+0xc4>)
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	491b      	ldr	r1, [pc, #108]	; (8005474 <SYSVIEW_AddTask+0xcc>)
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	440b      	add	r3, r1
 8005410:	3308      	adds	r3, #8
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005416:	4b15      	ldr	r3, [pc, #84]	; (800546c <SYSVIEW_AddTask+0xc4>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	4916      	ldr	r1, [pc, #88]	; (8005474 <SYSVIEW_AddTask+0xcc>)
 800541c:	4613      	mov	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	440b      	add	r3, r1
 8005426:	330c      	adds	r3, #12
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800542c:	4b0f      	ldr	r3, [pc, #60]	; (800546c <SYSVIEW_AddTask+0xc4>)
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	4910      	ldr	r1, [pc, #64]	; (8005474 <SYSVIEW_AddTask+0xcc>)
 8005432:	4613      	mov	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	3310      	adds	r3, #16
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005442:	4b0a      	ldr	r3, [pc, #40]	; (800546c <SYSVIEW_AddTask+0xc4>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3301      	adds	r3, #1
 8005448:	4a08      	ldr	r2, [pc, #32]	; (800546c <SYSVIEW_AddTask+0xc4>)
 800544a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 f8ca 	bl	80055f0 <SYSVIEW_SendTaskInfo>
 800545c:	e000      	b.n	8005460 <SYSVIEW_AddTask+0xb8>
    return;
 800545e:	bf00      	nop

}
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	08007f0c 	.word	0x08007f0c
 800546c:	20012ee4 	.word	0x20012ee4
 8005470:	08007f14 	.word	0x08007f14
 8005474:	20012e44 	.word	0x20012e44

08005478 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8005480:	4b59      	ldr	r3, [pc, #356]	; (80055e8 <SYSVIEW_DeleteTask+0x170>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 80ab 	beq.w	80055e0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	e00d      	b.n	80054ac <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8005490:	4956      	ldr	r1, [pc, #344]	; (80055ec <SYSVIEW_DeleteTask+0x174>)
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4613      	mov	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	440b      	add	r3, r1
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d008      	beq.n	80054b8 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	3301      	adds	r3, #1
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	4b4e      	ldr	r3, [pc, #312]	; (80055e8 <SYSVIEW_DeleteTask+0x170>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d3ec      	bcc.n	8005490 <SYSVIEW_DeleteTask+0x18>
 80054b6:	e000      	b.n	80054ba <SYSVIEW_DeleteTask+0x42>
      break;
 80054b8:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80054ba:	4b4b      	ldr	r3, [pc, #300]	; (80055e8 <SYSVIEW_DeleteTask+0x170>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3b01      	subs	r3, #1
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d111      	bne.n	80054ea <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4613      	mov	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4a46      	ldr	r2, [pc, #280]	; (80055ec <SYSVIEW_DeleteTask+0x174>)
 80054d2:	4413      	add	r3, r2
 80054d4:	2214      	movs	r2, #20
 80054d6:	2100      	movs	r1, #0
 80054d8:	4618      	mov	r0, r3
 80054da:	f002 fc79 	bl	8007dd0 <memset>
    _NumTasks--;
 80054de:	4b42      	ldr	r3, [pc, #264]	; (80055e8 <SYSVIEW_DeleteTask+0x170>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	4a40      	ldr	r2, [pc, #256]	; (80055e8 <SYSVIEW_DeleteTask+0x170>)
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	e07b      	b.n	80055e2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80054ea:	4b3f      	ldr	r3, [pc, #252]	; (80055e8 <SYSVIEW_DeleteTask+0x170>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d276      	bcs.n	80055e2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80054f4:	4b3c      	ldr	r3, [pc, #240]	; (80055e8 <SYSVIEW_DeleteTask+0x170>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	1e5a      	subs	r2, r3, #1
 80054fa:	493c      	ldr	r1, [pc, #240]	; (80055ec <SYSVIEW_DeleteTask+0x174>)
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	440b      	add	r3, r1
 8005506:	6819      	ldr	r1, [r3, #0]
 8005508:	4838      	ldr	r0, [pc, #224]	; (80055ec <SYSVIEW_DeleteTask+0x174>)
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4613      	mov	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4403      	add	r3, r0
 8005516:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005518:	4b33      	ldr	r3, [pc, #204]	; (80055e8 <SYSVIEW_DeleteTask+0x170>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	1e5a      	subs	r2, r3, #1
 800551e:	4933      	ldr	r1, [pc, #204]	; (80055ec <SYSVIEW_DeleteTask+0x174>)
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	3304      	adds	r3, #4
 800552c:	6819      	ldr	r1, [r3, #0]
 800552e:	482f      	ldr	r0, [pc, #188]	; (80055ec <SYSVIEW_DeleteTask+0x174>)
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4613      	mov	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4403      	add	r3, r0
 800553c:	3304      	adds	r3, #4
 800553e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8005540:	4b29      	ldr	r3, [pc, #164]	; (80055e8 <SYSVIEW_DeleteTask+0x170>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	1e5a      	subs	r2, r3, #1
 8005546:	4929      	ldr	r1, [pc, #164]	; (80055ec <SYSVIEW_DeleteTask+0x174>)
 8005548:	4613      	mov	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	440b      	add	r3, r1
 8005552:	3308      	adds	r3, #8
 8005554:	6819      	ldr	r1, [r3, #0]
 8005556:	4825      	ldr	r0, [pc, #148]	; (80055ec <SYSVIEW_DeleteTask+0x174>)
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4613      	mov	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4403      	add	r3, r0
 8005564:	3308      	adds	r3, #8
 8005566:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8005568:	4b1f      	ldr	r3, [pc, #124]	; (80055e8 <SYSVIEW_DeleteTask+0x170>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	1e5a      	subs	r2, r3, #1
 800556e:	491f      	ldr	r1, [pc, #124]	; (80055ec <SYSVIEW_DeleteTask+0x174>)
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	330c      	adds	r3, #12
 800557c:	6819      	ldr	r1, [r3, #0]
 800557e:	481b      	ldr	r0, [pc, #108]	; (80055ec <SYSVIEW_DeleteTask+0x174>)
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4403      	add	r3, r0
 800558c:	330c      	adds	r3, #12
 800558e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8005590:	4b15      	ldr	r3, [pc, #84]	; (80055e8 <SYSVIEW_DeleteTask+0x170>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	1e5a      	subs	r2, r3, #1
 8005596:	4915      	ldr	r1, [pc, #84]	; (80055ec <SYSVIEW_DeleteTask+0x174>)
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	3310      	adds	r3, #16
 80055a4:	6819      	ldr	r1, [r3, #0]
 80055a6:	4811      	ldr	r0, [pc, #68]	; (80055ec <SYSVIEW_DeleteTask+0x174>)
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4403      	add	r3, r0
 80055b4:	3310      	adds	r3, #16
 80055b6:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80055b8:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <SYSVIEW_DeleteTask+0x170>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	1e5a      	subs	r2, r3, #1
 80055be:	4613      	mov	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4a09      	ldr	r2, [pc, #36]	; (80055ec <SYSVIEW_DeleteTask+0x174>)
 80055c8:	4413      	add	r3, r2
 80055ca:	2214      	movs	r2, #20
 80055cc:	2100      	movs	r1, #0
 80055ce:	4618      	mov	r0, r3
 80055d0:	f002 fbfe 	bl	8007dd0 <memset>
    _NumTasks--;
 80055d4:	4b04      	ldr	r3, [pc, #16]	; (80055e8 <SYSVIEW_DeleteTask+0x170>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3b01      	subs	r3, #1
 80055da:	4a03      	ldr	r2, [pc, #12]	; (80055e8 <SYSVIEW_DeleteTask+0x170>)
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	e000      	b.n	80055e2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80055e0:	bf00      	nop
  }
}
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	20012ee4 	.word	0x20012ee4
 80055ec:	20012e44 	.word	0x20012e44

080055f0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08a      	sub	sp, #40	; 0x28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
 80055fc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80055fe:	f107 0310 	add.w	r3, r7, #16
 8005602:	2218      	movs	r2, #24
 8005604:	2100      	movs	r1, #0
 8005606:	4618      	mov	r0, r3
 8005608:	f002 fbe2 	bl	8007dd0 <memset>
  TaskInfo.TaskID     = TaskID;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561e:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005620:	f107 0310 	add.w	r3, r7, #16
 8005624:	4618      	mov	r0, r3
 8005626:	f001 fef3 	bl	8007410 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800562a:	bf00      	nop
 800562c:	3728      	adds	r7, #40	; 0x28
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <__NVIC_EnableIRQ>:
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	4603      	mov	r3, r0
 800563c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800563e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005642:	2b00      	cmp	r3, #0
 8005644:	db0b      	blt.n	800565e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005646:	79fb      	ldrb	r3, [r7, #7]
 8005648:	f003 021f 	and.w	r2, r3, #31
 800564c:	4907      	ldr	r1, [pc, #28]	; (800566c <__NVIC_EnableIRQ+0x38>)
 800564e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	2001      	movs	r0, #1
 8005656:	fa00 f202 	lsl.w	r2, r0, r2
 800565a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	e000e100 	.word	0xe000e100

08005670 <__NVIC_SetPriority>:
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	6039      	str	r1, [r7, #0]
 800567a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800567c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005680:	2b00      	cmp	r3, #0
 8005682:	db0a      	blt.n	800569a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	b2da      	uxtb	r2, r3
 8005688:	490c      	ldr	r1, [pc, #48]	; (80056bc <__NVIC_SetPriority+0x4c>)
 800568a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800568e:	0112      	lsls	r2, r2, #4
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	440b      	add	r3, r1
 8005694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005698:	e00a      	b.n	80056b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	b2da      	uxtb	r2, r3
 800569e:	4908      	ldr	r1, [pc, #32]	; (80056c0 <__NVIC_SetPriority+0x50>)
 80056a0:	79fb      	ldrb	r3, [r7, #7]
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	3b04      	subs	r3, #4
 80056a8:	0112      	lsls	r2, r2, #4
 80056aa:	b2d2      	uxtb	r2, r2
 80056ac:	440b      	add	r3, r1
 80056ae:	761a      	strb	r2, [r3, #24]
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	e000e100 	.word	0xe000e100
 80056c0:	e000ed00 	.word	0xe000ed00

080056c4 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80056ca:	f002 fb11 	bl	8007cf0 <SEGGER_SYSVIEW_IsStarted>
 80056ce:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80056d6:	f001 fd1f 	bl	8007118 <SEGGER_SYSVIEW_Start>
  }
}
 80056da:	bf00      	nop
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	4603      	mov	r3, r0
 80056ec:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80056ee:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <_cbOnUARTRx+0x3c>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b03      	cmp	r3, #3
 80056f4:	d806      	bhi.n	8005704 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80056f6:	4b0a      	ldr	r3, [pc, #40]	; (8005720 <_cbOnUARTRx+0x3c>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	3301      	adds	r3, #1
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	4b08      	ldr	r3, [pc, #32]	; (8005720 <_cbOnUARTRx+0x3c>)
 8005700:	701a      	strb	r2, [r3, #0]
    goto Done;
 8005702:	e009      	b.n	8005718 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005704:	f7ff ffde 	bl	80056c4 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005708:	4b05      	ldr	r3, [pc, #20]	; (8005720 <_cbOnUARTRx+0x3c>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	4618      	mov	r0, r3
 800570e:	1dfb      	adds	r3, r7, #7
 8005710:	2201      	movs	r2, #1
 8005712:	4619      	mov	r1, r3
 8005714:	f000 fb9e 	bl	8005e54 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005718:	bf00      	nop
}
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	20000014 	.word	0x20000014

08005724 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 800572c:	4b14      	ldr	r3, [pc, #80]	; (8005780 <_cbOnUARTTx+0x5c>)
 800572e:	785b      	ldrb	r3, [r3, #1]
 8005730:	2b03      	cmp	r3, #3
 8005732:	d80f      	bhi.n	8005754 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005734:	4b12      	ldr	r3, [pc, #72]	; (8005780 <_cbOnUARTTx+0x5c>)
 8005736:	785b      	ldrb	r3, [r3, #1]
 8005738:	461a      	mov	r2, r3
 800573a:	4b12      	ldr	r3, [pc, #72]	; (8005784 <_cbOnUARTTx+0x60>)
 800573c:	5c9a      	ldrb	r2, [r3, r2]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8005742:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <_cbOnUARTTx+0x5c>)
 8005744:	785b      	ldrb	r3, [r3, #1]
 8005746:	3301      	adds	r3, #1
 8005748:	b2da      	uxtb	r2, r3
 800574a:	4b0d      	ldr	r3, [pc, #52]	; (8005780 <_cbOnUARTTx+0x5c>)
 800574c:	705a      	strb	r2, [r3, #1]
    r = 1;
 800574e:	2301      	movs	r3, #1
 8005750:	60fb      	str	r3, [r7, #12]
    goto Done;
 8005752:	e00f      	b.n	8005774 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005754:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <_cbOnUARTTx+0x5c>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fa1d 	bl	8005b9c <SEGGER_RTT_ReadUpBufferNoLock>
 8005762:	4603      	mov	r3, r0
 8005764:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	da02      	bge.n	8005772 <_cbOnUARTTx+0x4e>
    r = 0;
 800576c:	2300      	movs	r3, #0
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	e000      	b.n	8005774 <_cbOnUARTTx+0x50>
  }
Done:
 8005772:	bf00      	nop
  return r;
 8005774:	68fb      	ldr	r3, [r7, #12]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20000014 	.word	0x20000014
 8005784:	08007fa0 	.word	0x08007fa0

08005788 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005790:	4a04      	ldr	r2, [pc, #16]	; (80057a4 <SEGGER_UART_init+0x1c>)
 8005792:	4905      	ldr	r1, [pc, #20]	; (80057a8 <SEGGER_UART_init+0x20>)
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f865 	bl	8005864 <HIF_UART_Init>
}
 800579a:	bf00      	nop
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	080056e5 	.word	0x080056e5
 80057a8:	08005725 	.word	0x08005725

080057ac <USART3_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART3_IRQHandler(void);
void USART3_IRQHandler(void) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80057b2:	4b1e      	ldr	r3, [pc, #120]	; (800582c <USART3_IRQHandler+0x80>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d011      	beq.n	80057e6 <USART3_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 80057c2:	4b1b      	ldr	r3, [pc, #108]	; (8005830 <USART3_IRQHandler+0x84>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f003 030b 	and.w	r3, r3, #11
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d108      	bne.n	80057e6 <USART3_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80057d4:	4b17      	ldr	r3, [pc, #92]	; (8005834 <USART3_IRQHandler+0x88>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d004      	beq.n	80057e6 <USART3_IRQHandler+0x3a>
        _cbOnRx(v);
 80057dc:	4b15      	ldr	r3, [pc, #84]	; (8005834 <USART3_IRQHandler+0x88>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	79fa      	ldrb	r2, [r7, #7]
 80057e2:	4610      	mov	r0, r2
 80057e4:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d01a      	beq.n	8005826 <USART3_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80057f0:	4b11      	ldr	r3, [pc, #68]	; (8005838 <USART3_IRQHandler+0x8c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d015      	beq.n	8005824 <USART3_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80057f8:	4b0f      	ldr	r3, [pc, #60]	; (8005838 <USART3_IRQHandler+0x8c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	1dfa      	adds	r2, r7, #7
 80057fe:	4610      	mov	r0, r2
 8005800:	4798      	blx	r3
 8005802:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <USART3_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800580a:	4b0c      	ldr	r3, [pc, #48]	; (800583c <USART3_IRQHandler+0x90>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a0b      	ldr	r2, [pc, #44]	; (800583c <USART3_IRQHandler+0x90>)
 8005810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	e006      	b.n	8005826 <USART3_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005818:	4b04      	ldr	r3, [pc, #16]	; (800582c <USART3_IRQHandler+0x80>)
 800581a:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 800581c:	79fa      	ldrb	r2, [r7, #7]
 800581e:	4b08      	ldr	r3, [pc, #32]	; (8005840 <USART3_IRQHandler+0x94>)
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	e000      	b.n	8005826 <USART3_IRQHandler+0x7a>
      return;
 8005824:	bf00      	nop
    }
  }
}
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	4000481c 	.word	0x4000481c
 8005830:	40004824 	.word	0x40004824
 8005834:	20012ee8 	.word	0x20012ee8
 8005838:	20012eec 	.word	0x20012eec
 800583c:	40004800 	.word	0x40004800
 8005840:	40004828 	.word	0x40004828

08005844 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005848:	4b05      	ldr	r3, [pc, #20]	; (8005860 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a04      	ldr	r2, [pc, #16]	; (8005860 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800584e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005852:	6013      	str	r3, [r2, #0]
}
 8005854:	bf00      	nop
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	40004800 	.word	0x40004800

08005864 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  // Habilitar reloj de USART3 y puerto D
  RCC_APB1ENR |= (1 << 18);       // Habilitar reloj USART3 (APB1)
 8005870:	4b2e      	ldr	r3, [pc, #184]	; (800592c <HIF_UART_Init+0xc8>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a2d      	ldr	r2, [pc, #180]	; (800592c <HIF_UART_Init+0xc8>)
 8005876:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800587a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 << 3);        // Habilitar reloj GPIO D
 800587c:	4b2c      	ldr	r3, [pc, #176]	; (8005930 <HIF_UART_Init+0xcc>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a2b      	ldr	r2, [pc, #172]	; (8005930 <HIF_UART_Init+0xcc>)
 8005882:	f043 0308 	orr.w	r3, r3, #8
 8005886:	6013      	str	r3, [r2, #0]

  // Configurar los pines PD8 y PD9 para función alternativa AF7 (USART3)
  v  = GPIO_AFRH;
 8005888:	4b2a      	ldr	r3, [pc, #168]	; (8005934 <HIF_UART_Init+0xd0>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (15UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005894:	613b      	str	r3, [r7, #16]
  v |=  ((7UL << ((GPIO_UART_TX_BIT - 8) * 4)) | (7UL << ((GPIO_UART_RX_BIT - 8) * 4)));
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800589c:	613b      	str	r3, [r7, #16]
  GPIO_AFRH = v;
 800589e:	4a25      	ldr	r2, [pc, #148]	; (8005934 <HIF_UART_Init+0xd0>)
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	6013      	str	r3, [r2, #0]

  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80058a4:	4b24      	ldr	r3, [pc, #144]	; (8005938 <HIF_UART_Init+0xd4>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80058b0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80058b8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80058ba:	4a1f      	ldr	r2, [pc, #124]	; (8005938 <HIF_UART_Init+0xd4>)
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	6013      	str	r3, [r2, #0]

  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80058c6:	4a1d      	ldr	r2, [pc, #116]	; (800593c <HIF_UART_Init+0xd8>)
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ce:	3301      	adds	r3, #1
 80058d0:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	085b      	lsrs	r3, r3, #1
 80058d6:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058de:	d302      	bcc.n	80058e6 <HIF_UART_Init+0x82>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80058e0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80058e4:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d004      	beq.n	80058f6 <HIF_UART_Init+0x92>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	4a13      	ldr	r2, [pc, #76]	; (8005940 <HIF_UART_Init+0xdc>)
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	6013      	str	r3, [r2, #0]
  }

  //
  // Initialize USART
  //
  USART_CR1 = 0
 80058f6:	4b13      	ldr	r3, [pc, #76]	; (8005944 <HIF_UART_Init+0xe0>)
 80058f8:	f248 022d 	movw	r2, #32813	; 0x802d
 80058fc:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80058fe:	4b12      	ldr	r3, [pc, #72]	; (8005948 <HIF_UART_Init+0xe4>)
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005904:	4b11      	ldr	r3, [pc, #68]	; (800594c <HIF_UART_Init+0xe8>)
 8005906:	2280      	movs	r2, #128	; 0x80
 8005908:	601a      	str	r2, [r3, #0]
            ;

  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800590a:	4a11      	ldr	r2, [pc, #68]	; (8005950 <HIF_UART_Init+0xec>)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005910:	4a10      	ldr	r2, [pc, #64]	; (8005954 <HIF_UART_Init+0xf0>)
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005916:	2106      	movs	r1, #6
 8005918:	2027      	movs	r0, #39	; 0x27
 800591a:	f7ff fea9 	bl	8005670 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800591e:	2027      	movs	r0, #39	; 0x27
 8005920:	f7ff fe88 	bl	8005634 <__NVIC_EnableIRQ>
}
 8005924:	bf00      	nop
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40023840 	.word	0x40023840
 8005930:	40023830 	.word	0x40023830
 8005934:	40020c24 	.word	0x40020c24
 8005938:	40020c00 	.word	0x40020c00
 800593c:	066ff300 	.word	0x066ff300
 8005940:	4000480c 	.word	0x4000480c
 8005944:	40004800 	.word	0x40004800
 8005948:	40004804 	.word	0x40004804
 800594c:	40004808 	.word	0x40004808
 8005950:	20012ee8 	.word	0x20012ee8
 8005954:	20012eec 	.word	0x20012eec

08005958 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800595e:	4b26      	ldr	r3, [pc, #152]	; (80059f8 <_DoInit+0xa0>)
 8005960:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005962:	22a8      	movs	r2, #168	; 0xa8
 8005964:	2100      	movs	r1, #0
 8005966:	6838      	ldr	r0, [r7, #0]
 8005968:	f002 fa32 	bl	8007dd0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2203      	movs	r2, #3
 8005970:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2203      	movs	r2, #3
 8005976:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	4a20      	ldr	r2, [pc, #128]	; (80059fc <_DoInit+0xa4>)
 800597c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	4a1f      	ldr	r2, [pc, #124]	; (8005a00 <_DoInit+0xa8>)
 8005982:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800598a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2200      	movs	r2, #0
 8005990:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2200      	movs	r2, #0
 8005996:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2200      	movs	r2, #0
 800599c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	4a16      	ldr	r2, [pc, #88]	; (80059fc <_DoInit+0xa4>)
 80059a2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	4a17      	ldr	r2, [pc, #92]	; (8005a04 <_DoInit+0xac>)
 80059a8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2210      	movs	r2, #16
 80059ae:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2200      	movs	r2, #0
 80059b4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2200      	movs	r2, #0
 80059ba:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2200      	movs	r2, #0
 80059c0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80059c2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80059c6:	2300      	movs	r3, #0
 80059c8:	607b      	str	r3, [r7, #4]
 80059ca:	e00c      	b.n	80059e6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f1c3 030f 	rsb	r3, r3, #15
 80059d2:	4a0d      	ldr	r2, [pc, #52]	; (8005a08 <_DoInit+0xb0>)
 80059d4:	5cd1      	ldrb	r1, [r2, r3]
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4413      	add	r3, r2
 80059dc:	460a      	mov	r2, r1
 80059de:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3301      	adds	r3, #1
 80059e4:	607b      	str	r3, [r7, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b0f      	cmp	r3, #15
 80059ea:	d9ef      	bls.n	80059cc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80059ec:	f3bf 8f5f 	dmb	sy
}
 80059f0:	bf00      	nop
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	20012ef0 	.word	0x20012ef0
 80059fc:	08007f64 	.word	0x08007f64
 8005a00:	20012f98 	.word	0x20012f98
 8005a04:	20013398 	.word	0x20013398
 8005a08:	08007fa4 	.word	0x08007fa4

08005a0c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08a      	sub	sp, #40	; 0x28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d905      	bls.n	8005a3c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	3b01      	subs	r3, #1
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
 8005a3a:	e007      	b.n	8005a4c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	69b9      	ldr	r1, [r7, #24]
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	1acb      	subs	r3, r1, r3
 8005a46:	4413      	add	r3, r2
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a56:	4293      	cmp	r3, r2
 8005a58:	bf28      	it	cs
 8005a5a:	4613      	movcs	r3, r2
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4293      	cmp	r3, r2
 8005a64:	bf28      	it	cs
 8005a66:	4613      	movcs	r3, r2
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	4413      	add	r3, r2
 8005a72:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a76:	68b9      	ldr	r1, [r7, #8]
 8005a78:	6978      	ldr	r0, [r7, #20]
 8005a7a:	f002 f99b 	bl	8007db4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005a7e:	6a3a      	ldr	r2, [r7, #32]
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	4413      	add	r3, r2
 8005a84:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	4413      	add	r3, r2
 8005a8c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005a96:	69fa      	ldr	r2, [r7, #28]
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	4413      	add	r3, r2
 8005a9c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	69fa      	ldr	r2, [r7, #28]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d101      	bne.n	8005aac <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005aac:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1b2      	bne.n	8005a22 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005abc:	6a3b      	ldr	r3, [r7, #32]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3728      	adds	r7, #40	; 0x28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b088      	sub	sp, #32
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d911      	bls.n	8005b0e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	4413      	add	r3, r2
 8005af2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	6938      	ldr	r0, [r7, #16]
 8005afa:	f002 f95b 	bl	8007db4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005afe:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005b02:	69fa      	ldr	r2, [r7, #28]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	441a      	add	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005b0c:	e01f      	b.n	8005b4e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	4413      	add	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	68b9      	ldr	r1, [r7, #8]
 8005b20:	6938      	ldr	r0, [r7, #16]
 8005b22:	f002 f947 	bl	8007db4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	4413      	add	r3, r2
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	6938      	ldr	r0, [r7, #16]
 8005b40:	f002 f938 	bl	8007db4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b44:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	60da      	str	r2, [r3, #12]
}
 8005b4e:	bf00      	nop
 8005b50:	3720      	adds	r7, #32
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005b56:	b480      	push	{r7}
 8005b58:	b087      	sub	sp, #28
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d808      	bhi.n	8005b84 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689a      	ldr	r2, [r3, #8]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	1ad2      	subs	r2, r2, r3
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	617b      	str	r3, [r7, #20]
 8005b82:	e004      	b.n	8005b8e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005b8e:	697b      	ldr	r3, [r7, #20]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08c      	sub	sp, #48	; 0x30
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005ba8:	4b3e      	ldr	r3, [pc, #248]	; (8005ca4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005baa:	623b      	str	r3, [r7, #32]
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b53      	cmp	r3, #83	; 0x53
 8005bb4:	d001      	beq.n	8005bba <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005bb6:	f7ff fecf 	bl	8005958 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	4413      	add	r3, r2
 8005bc4:	00db      	lsls	r3, r3, #3
 8005bc6:	4a37      	ldr	r2, [pc, #220]	; (8005ca4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005bc8:	4413      	add	r3, r2
 8005bca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d92b      	bls.n	8005c40 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	bf28      	it	cs
 8005bfa:	4613      	movcs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c04:	4413      	add	r3, r2
 8005c06:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	6939      	ldr	r1, [r7, #16]
 8005c0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c0e:	f002 f8d1 	bl	8007db4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4413      	add	r3, r2
 8005c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	4413      	add	r3, r2
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005c2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	4413      	add	r3, r2
 8005c30:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d101      	bne.n	8005c40 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	bf28      	it	cs
 8005c50:	4613      	movcs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d019      	beq.n	8005c8e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c60:	4413      	add	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	6939      	ldr	r1, [r7, #16]
 8005c68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c6a:	f002 f8a3 	bl	8007db4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	4413      	add	r3, r2
 8005c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c98:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3730      	adds	r7, #48	; 0x30
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	20012ef0 	.word	0x20012ef0

08005ca8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08c      	sub	sp, #48	; 0x30
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005cb4:	4b3e      	ldr	r3, [pc, #248]	; (8005db0 <SEGGER_RTT_ReadNoLock+0x108>)
 8005cb6:	623b      	str	r3, [r7, #32]
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b53      	cmp	r3, #83	; 0x53
 8005cc0:	d001      	beq.n	8005cc6 <SEGGER_RTT_ReadNoLock+0x1e>
 8005cc2:	f7ff fe49 	bl	8005958 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	4413      	add	r3, r2
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	3360      	adds	r3, #96	; 0x60
 8005cd2:	4a37      	ldr	r2, [pc, #220]	; (8005db0 <SEGGER_RTT_ReadNoLock+0x108>)
 8005cd4:	4413      	add	r3, r2
 8005cd6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d92b      	bls.n	8005d4c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4293      	cmp	r3, r2
 8005d04:	bf28      	it	cs
 8005d06:	4613      	movcs	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d10:	4413      	add	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	6939      	ldr	r1, [r7, #16]
 8005d18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d1a:	f002 f84b 	bl	8007db4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	4413      	add	r3, r2
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d101      	bne.n	8005d4c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	bf28      	it	cs
 8005d5c:	4613      	movcs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d019      	beq.n	8005d9a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	4413      	add	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	6939      	ldr	r1, [r7, #16]
 8005d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d76:	f002 f81d 	bl	8007db4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	4413      	add	r3, r2
 8005d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	4413      	add	r3, r2
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	4413      	add	r3, r2
 8005d98:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005da4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3730      	adds	r7, #48	; 0x30
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20012ef0 	.word	0x20012ef0

08005db4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b088      	sub	sp, #32
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	4413      	add	r3, r2
 8005dcc:	00db      	lsls	r3, r3, #3
 8005dce:	3360      	adds	r3, #96	; 0x60
 8005dd0:	4a1f      	ldr	r2, [pc, #124]	; (8005e50 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005dd2:	4413      	add	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d029      	beq.n	8005e32 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d82e      	bhi.n	8005e40 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d013      	beq.n	8005e12 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005dea:	e029      	b.n	8005e40 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005dec:	6978      	ldr	r0, [r7, #20]
 8005dee:	f7ff feb2 	bl	8005b56 <_GetAvailWriteSpace>
 8005df2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d202      	bcs.n	8005e02 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005e00:	e021      	b.n	8005e46 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	69b9      	ldr	r1, [r7, #24]
 8005e0a:	6978      	ldr	r0, [r7, #20]
 8005e0c:	f7ff fe5b 	bl	8005ac6 <_WriteNoCheck>
    break;
 8005e10:	e019      	b.n	8005e46 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005e12:	6978      	ldr	r0, [r7, #20]
 8005e14:	f7ff fe9f 	bl	8005b56 <_GetAvailWriteSpace>
 8005e18:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	bf28      	it	cs
 8005e22:	4613      	movcs	r3, r2
 8005e24:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005e26:	69fa      	ldr	r2, [r7, #28]
 8005e28:	69b9      	ldr	r1, [r7, #24]
 8005e2a:	6978      	ldr	r0, [r7, #20]
 8005e2c:	f7ff fe4b 	bl	8005ac6 <_WriteNoCheck>
    break;
 8005e30:	e009      	b.n	8005e46 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	69b9      	ldr	r1, [r7, #24]
 8005e36:	6978      	ldr	r0, [r7, #20]
 8005e38:	f7ff fde8 	bl	8005a0c <_WriteBlocking>
 8005e3c:	61f8      	str	r0, [r7, #28]
    break;
 8005e3e:	e002      	b.n	8005e46 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005e40:	2300      	movs	r3, #0
 8005e42:	61fb      	str	r3, [r7, #28]
    break;
 8005e44:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005e46:	69fb      	ldr	r3, [r7, #28]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3720      	adds	r7, #32
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	20012ef0 	.word	0x20012ef0

08005e54 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005e60:	4b0e      	ldr	r3, [pc, #56]	; (8005e9c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005e62:	61fb      	str	r3, [r7, #28]
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b53      	cmp	r3, #83	; 0x53
 8005e6c:	d001      	beq.n	8005e72 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005e6e:	f7ff fd73 	bl	8005958 <_DoInit>
  SEGGER_RTT_LOCK();
 8005e72:	f3ef 8311 	mrs	r3, BASEPRI
 8005e76:	f04f 0120 	mov.w	r1, #32
 8005e7a:	f381 8811 	msr	BASEPRI, r1
 8005e7e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f7ff ff95 	bl	8005db4 <SEGGER_RTT_WriteDownBufferNoLock>
 8005e8a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005e92:	697b      	ldr	r3, [r7, #20]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3720      	adds	r7, #32
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	20012ef0 	.word	0x20012ef0

08005ea0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
 8005eac:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005eae:	4b3d      	ldr	r3, [pc, #244]	; (8005fa4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005eb0:	61bb      	str	r3, [r7, #24]
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b53      	cmp	r3, #83	; 0x53
 8005eba:	d001      	beq.n	8005ec0 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005ebc:	f7ff fd4c 	bl	8005958 <_DoInit>
  SEGGER_RTT_LOCK();
 8005ec0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ec4:	f04f 0120 	mov.w	r1, #32
 8005ec8:	f381 8811 	msr	BASEPRI, r1
 8005ecc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ece:	4b35      	ldr	r3, [pc, #212]	; (8005fa4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005ed0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005ed6:	6939      	ldr	r1, [r7, #16]
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	4613      	mov	r3, r2
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	4413      	add	r3, r2
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	440b      	add	r3, r1
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d008      	beq.n	8005f00 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	69fa      	ldr	r2, [r7, #28]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	dbeb      	blt.n	8005ed6 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005efe:	e000      	b.n	8005f02 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005f00:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	69fa      	ldr	r2, [r7, #28]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	da3f      	bge.n	8005f8c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005f0c:	6939      	ldr	r1, [r7, #16]
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	4613      	mov	r3, r2
 8005f14:	005b      	lsls	r3, r3, #1
 8005f16:	4413      	add	r3, r2
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	440b      	add	r3, r1
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005f20:	6939      	ldr	r1, [r7, #16]
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	4613      	mov	r3, r2
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	4413      	add	r3, r2
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	440b      	add	r3, r1
 8005f30:	3304      	adds	r3, #4
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005f36:	6939      	ldr	r1, [r7, #16]
 8005f38:	69fa      	ldr	r2, [r7, #28]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	4413      	add	r3, r2
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	440b      	add	r3, r1
 8005f44:	3320      	adds	r3, #32
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005f4a:	6939      	ldr	r1, [r7, #16]
 8005f4c:	69fa      	ldr	r2, [r7, #28]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	4413      	add	r3, r2
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	440b      	add	r3, r1
 8005f58:	3328      	adds	r3, #40	; 0x28
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005f5e:	6939      	ldr	r1, [r7, #16]
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	4613      	mov	r3, r2
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	4413      	add	r3, r2
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	440b      	add	r3, r1
 8005f6c:	3324      	adds	r3, #36	; 0x24
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005f72:	6939      	ldr	r1, [r7, #16]
 8005f74:	69fa      	ldr	r2, [r7, #28]
 8005f76:	4613      	mov	r3, r2
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	4413      	add	r3, r2
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	440b      	add	r3, r1
 8005f80:	332c      	adds	r3, #44	; 0x2c
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005f86:	f3bf 8f5f 	dmb	sy
 8005f8a:	e002      	b.n	8005f92 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f90:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005f98:	69fb      	ldr	r3, [r7, #28]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3720      	adds	r7, #32
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20012ef0 	.word	0x20012ef0

08005fa8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08a      	sub	sp, #40	; 0x28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
 8005fb4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005fb6:	4b21      	ldr	r3, [pc, #132]	; (800603c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005fb8:	623b      	str	r3, [r7, #32]
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b53      	cmp	r3, #83	; 0x53
 8005fc2:	d001      	beq.n	8005fc8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005fc4:	f7ff fcc8 	bl	8005958 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005fc8:	4b1c      	ldr	r3, [pc, #112]	; (800603c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005fca:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d82c      	bhi.n	800602c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005fd2:	f3ef 8311 	mrs	r3, BASEPRI
 8005fd6:	f04f 0120 	mov.w	r1, #32
 8005fda:	f381 8811 	msr	BASEPRI, r1
 8005fde:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	4413      	add	r3, r2
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	3360      	adds	r3, #96	; 0x60
 8005fec:	69fa      	ldr	r2, [r7, #28]
 8005fee:	4413      	add	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00e      	beq.n	8006016 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2200      	movs	r2, #0
 800600e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2200      	movs	r2, #0
 8006014:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800601a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800601c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006026:	2300      	movs	r3, #0
 8006028:	627b      	str	r3, [r7, #36]	; 0x24
 800602a:	e002      	b.n	8006032 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800602c:	f04f 33ff 	mov.w	r3, #4294967295
 8006030:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006034:	4618      	mov	r0, r3
 8006036:	3728      	adds	r7, #40	; 0x28
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	20012ef0 	.word	0x20012ef0

08006040 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d105      	bne.n	800605e <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	60fa      	str	r2, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	e022      	b.n	80060a4 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	60fa      	str	r2, [r7, #12]
 8006068:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b80      	cmp	r3, #128	; 0x80
 800606e:	d90a      	bls.n	8006086 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8006070:	2380      	movs	r3, #128	; 0x80
 8006072:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8006074:	e007      	b.n	8006086 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	1c53      	adds	r3, r2, #1
 800607a:	60bb      	str	r3, [r7, #8]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	1c59      	adds	r1, r3, #1
 8006080:	60f9      	str	r1, [r7, #12]
 8006082:	7812      	ldrb	r2, [r2, #0]
 8006084:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	1e5a      	subs	r2, r3, #1
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <_EncodeStr+0x58>
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1ee      	bne.n	8006076 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 80060a4:	68fb      	ldr	r3, [r7, #12]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	3307      	adds	r3, #7
}
 80060be:	4618      	mov	r0, r3
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
	...

080060cc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80060d2:	4b35      	ldr	r3, [pc, #212]	; (80061a8 <_HandleIncomingPacket+0xdc>)
 80060d4:	7e1b      	ldrb	r3, [r3, #24]
 80060d6:	4618      	mov	r0, r3
 80060d8:	1cfb      	adds	r3, r7, #3
 80060da:	2201      	movs	r2, #1
 80060dc:	4619      	mov	r1, r3
 80060de:	f7ff fde3 	bl	8005ca8 <SEGGER_RTT_ReadNoLock>
 80060e2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d052      	beq.n	8006190 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80060ea:	78fb      	ldrb	r3, [r7, #3]
 80060ec:	2b80      	cmp	r3, #128	; 0x80
 80060ee:	d031      	beq.n	8006154 <_HandleIncomingPacket+0x88>
 80060f0:	2b80      	cmp	r3, #128	; 0x80
 80060f2:	dc40      	bgt.n	8006176 <_HandleIncomingPacket+0xaa>
 80060f4:	2b07      	cmp	r3, #7
 80060f6:	dc15      	bgt.n	8006124 <_HandleIncomingPacket+0x58>
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	dd3c      	ble.n	8006176 <_HandleIncomingPacket+0xaa>
 80060fc:	3b01      	subs	r3, #1
 80060fe:	2b06      	cmp	r3, #6
 8006100:	d839      	bhi.n	8006176 <_HandleIncomingPacket+0xaa>
 8006102:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <_HandleIncomingPacket+0x3c>)
 8006104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006108:	0800612b 	.word	0x0800612b
 800610c:	08006131 	.word	0x08006131
 8006110:	08006137 	.word	0x08006137
 8006114:	0800613d 	.word	0x0800613d
 8006118:	08006143 	.word	0x08006143
 800611c:	08006149 	.word	0x08006149
 8006120:	0800614f 	.word	0x0800614f
 8006124:	2b7f      	cmp	r3, #127	; 0x7f
 8006126:	d035      	beq.n	8006194 <_HandleIncomingPacket+0xc8>
 8006128:	e025      	b.n	8006176 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800612a:	f000 fff5 	bl	8007118 <SEGGER_SYSVIEW_Start>
      break;
 800612e:	e036      	b.n	800619e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006130:	f001 f8ae 	bl	8007290 <SEGGER_SYSVIEW_Stop>
      break;
 8006134:	e033      	b.n	800619e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006136:	f001 fa87 	bl	8007648 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800613a:	e030      	b.n	800619e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800613c:	f001 fa4c 	bl	80075d8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006140:	e02d      	b.n	800619e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006142:	f001 f8cb 	bl	80072dc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006146:	e02a      	b.n	800619e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006148:	f001 fd24 	bl	8007b94 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800614c:	e027      	b.n	800619e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800614e:	f001 fd03 	bl	8007b58 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006152:	e024      	b.n	800619e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006154:	4b14      	ldr	r3, [pc, #80]	; (80061a8 <_HandleIncomingPacket+0xdc>)
 8006156:	7e1b      	ldrb	r3, [r3, #24]
 8006158:	4618      	mov	r0, r3
 800615a:	1cfb      	adds	r3, r7, #3
 800615c:	2201      	movs	r2, #1
 800615e:	4619      	mov	r1, r3
 8006160:	f7ff fda2 	bl	8005ca8 <SEGGER_RTT_ReadNoLock>
 8006164:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d015      	beq.n	8006198 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	4618      	mov	r0, r3
 8006170:	f001 fc68 	bl	8007a44 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006174:	e010      	b.n	8006198 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006176:	78fb      	ldrb	r3, [r7, #3]
 8006178:	b25b      	sxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	da0e      	bge.n	800619c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800617e:	4b0a      	ldr	r3, [pc, #40]	; (80061a8 <_HandleIncomingPacket+0xdc>)
 8006180:	7e1b      	ldrb	r3, [r3, #24]
 8006182:	4618      	mov	r0, r3
 8006184:	1cfb      	adds	r3, r7, #3
 8006186:	2201      	movs	r2, #1
 8006188:	4619      	mov	r1, r3
 800618a:	f7ff fd8d 	bl	8005ca8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800618e:	e005      	b.n	800619c <_HandleIncomingPacket+0xd0>
    }
  }
 8006190:	bf00      	nop
 8006192:	e004      	b.n	800619e <_HandleIncomingPacket+0xd2>
      break;
 8006194:	bf00      	nop
 8006196:	e002      	b.n	800619e <_HandleIncomingPacket+0xd2>
      break;
 8006198:	bf00      	nop
 800619a:	e000      	b.n	800619e <_HandleIncomingPacket+0xd2>
      break;
 800619c:	bf00      	nop
}
 800619e:	bf00      	nop
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	200143b0 	.word	0x200143b0

080061ac <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08c      	sub	sp, #48	; 0x30
 80061b0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80061b2:	2301      	movs	r3, #1
 80061b4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80061b6:	1d3b      	adds	r3, r7, #4
 80061b8:	3301      	adds	r3, #1
 80061ba:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061c0:	4b32      	ldr	r3, [pc, #200]	; (800628c <_TrySendOverflowPacket+0xe0>)
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061c6:	e00b      	b.n	80061e0 <_TrySendOverflowPacket+0x34>
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ce:	1c59      	adds	r1, r3, #1
 80061d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	701a      	strb	r2, [r3, #0]
 80061da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061dc:	09db      	lsrs	r3, r3, #7
 80061de:	62bb      	str	r3, [r7, #40]	; 0x28
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	2b7f      	cmp	r3, #127	; 0x7f
 80061e4:	d8f0      	bhi.n	80061c8 <_TrySendOverflowPacket+0x1c>
 80061e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e8:	1c5a      	adds	r2, r3, #1
 80061ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	701a      	strb	r2, [r3, #0]
 80061f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80061f6:	4b26      	ldr	r3, [pc, #152]	; (8006290 <_TrySendOverflowPacket+0xe4>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 80061fc:	4b23      	ldr	r3, [pc, #140]	; (800628c <_TrySendOverflowPacket+0xe0>)
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	627b      	str	r3, [r7, #36]	; 0x24
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	623b      	str	r3, [r7, #32]
 800620e:	e00b      	b.n	8006228 <_TrySendOverflowPacket+0x7c>
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	b2da      	uxtb	r2, r3
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	1c59      	adds	r1, r3, #1
 8006218:	6279      	str	r1, [r7, #36]	; 0x24
 800621a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	09db      	lsrs	r3, r3, #7
 8006226:	623b      	str	r3, [r7, #32]
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	2b7f      	cmp	r3, #127	; 0x7f
 800622c:	d8f0      	bhi.n	8006210 <_TrySendOverflowPacket+0x64>
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	627a      	str	r2, [r7, #36]	; 0x24
 8006234:	6a3a      	ldr	r2, [r7, #32]
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800623e:	4b13      	ldr	r3, [pc, #76]	; (800628c <_TrySendOverflowPacket+0xe0>)
 8006240:	785b      	ldrb	r3, [r3, #1]
 8006242:	4618      	mov	r0, r3
 8006244:	1d3b      	adds	r3, r7, #4
 8006246:	69fa      	ldr	r2, [r7, #28]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	461a      	mov	r2, r3
 800624c:	1d3b      	adds	r3, r7, #4
 800624e:	4619      	mov	r1, r3
 8006250:	f7f9 fff6 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006254:	4603      	mov	r3, r0
 8006256:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8006258:	f7ff faf4 	bl	8005844 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d009      	beq.n	8006276 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006262:	4a0a      	ldr	r2, [pc, #40]	; (800628c <_TrySendOverflowPacket+0xe0>)
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006268:	4b08      	ldr	r3, [pc, #32]	; (800628c <_TrySendOverflowPacket+0xe0>)
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	3b01      	subs	r3, #1
 800626e:	b2da      	uxtb	r2, r3
 8006270:	4b06      	ldr	r3, [pc, #24]	; (800628c <_TrySendOverflowPacket+0xe0>)
 8006272:	701a      	strb	r2, [r3, #0]
 8006274:	e004      	b.n	8006280 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006276:	4b05      	ldr	r3, [pc, #20]	; (800628c <_TrySendOverflowPacket+0xe0>)
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	3301      	adds	r3, #1
 800627c:	4a03      	ldr	r2, [pc, #12]	; (800628c <_TrySendOverflowPacket+0xe0>)
 800627e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006280:	693b      	ldr	r3, [r7, #16]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3730      	adds	r7, #48	; 0x30
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	200143b0 	.word	0x200143b0
 8006290:	e0001004 	.word	0xe0001004

08006294 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006294:	b580      	push	{r7, lr}
 8006296:	b08a      	sub	sp, #40	; 0x28
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80062a0:	4b96      	ldr	r3, [pc, #600]	; (80064fc <_SendPacket+0x268>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d010      	beq.n	80062ca <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80062a8:	4b94      	ldr	r3, [pc, #592]	; (80064fc <_SendPacket+0x268>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8130 	beq.w	8006512 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80062b2:	4b92      	ldr	r3, [pc, #584]	; (80064fc <_SendPacket+0x268>)
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d109      	bne.n	80062ce <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80062ba:	f7ff ff77 	bl	80061ac <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80062be:	4b8f      	ldr	r3, [pc, #572]	; (80064fc <_SendPacket+0x268>)
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	f040 8127 	bne.w	8006516 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80062c8:	e001      	b.n	80062ce <_SendPacket+0x3a>
    goto Send;
 80062ca:	bf00      	nop
 80062cc:	e000      	b.n	80062d0 <_SendPacket+0x3c>
Send:
 80062ce:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b1f      	cmp	r3, #31
 80062d4:	d809      	bhi.n	80062ea <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80062d6:	4b89      	ldr	r3, [pc, #548]	; (80064fc <_SendPacket+0x268>)
 80062d8:	69da      	ldr	r2, [r3, #28]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	fa22 f303 	lsr.w	r3, r2, r3
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f040 8118 	bne.w	800651a <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b17      	cmp	r3, #23
 80062ee:	d807      	bhi.n	8006300 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	3b01      	subs	r3, #1
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	701a      	strb	r2, [r3, #0]
 80062fe:	e0c4      	b.n	800648a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	2b7f      	cmp	r3, #127	; 0x7f
 800630c:	d912      	bls.n	8006334 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	09da      	lsrs	r2, r3, #7
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3b01      	subs	r3, #1
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	b2db      	uxtb	r3, r3
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	3a01      	subs	r2, #1
 8006326:	60fa      	str	r2, [r7, #12]
 8006328:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800632c:	b2da      	uxtb	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	701a      	strb	r2, [r3, #0]
 8006332:	e006      	b.n	8006342 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	3b01      	subs	r3, #1
 8006338:	60fb      	str	r3, [r7, #12]
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	b2da      	uxtb	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b7e      	cmp	r3, #126	; 0x7e
 8006346:	d807      	bhi.n	8006358 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	3b01      	subs	r3, #1
 800634c:	60fb      	str	r3, [r7, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	b2da      	uxtb	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	e098      	b.n	800648a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800635e:	d212      	bcs.n	8006386 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	09da      	lsrs	r2, r3, #7
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3b01      	subs	r3, #1
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	b2d2      	uxtb	r2, r2
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	b2db      	uxtb	r3, r3
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	3a01      	subs	r2, #1
 8006378:	60fa      	str	r2, [r7, #12]
 800637a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800637e:	b2da      	uxtb	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	e081      	b.n	800648a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800638c:	d21d      	bcs.n	80063ca <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	0b9a      	lsrs	r2, r3, #14
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3b01      	subs	r3, #1
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	09db      	lsrs	r3, r3, #7
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	3a01      	subs	r2, #1
 80063a8:	60fa      	str	r2, [r7, #12]
 80063aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	3a01      	subs	r2, #1
 80063bc:	60fa      	str	r2, [r7, #12]
 80063be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	e05f      	b.n	800648a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063d0:	d228      	bcs.n	8006424 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	0d5a      	lsrs	r2, r3, #21
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3b01      	subs	r3, #1
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	b2d2      	uxtb	r2, r2
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	0b9b      	lsrs	r3, r3, #14
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	3a01      	subs	r2, #1
 80063ec:	60fa      	str	r2, [r7, #12]
 80063ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	09db      	lsrs	r3, r3, #7
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	3a01      	subs	r2, #1
 8006402:	60fa      	str	r2, [r7, #12]
 8006404:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006408:	b2da      	uxtb	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	b2db      	uxtb	r3, r3
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	3a01      	subs	r2, #1
 8006416:	60fa      	str	r2, [r7, #12]
 8006418:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800641c:	b2da      	uxtb	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	701a      	strb	r2, [r3, #0]
 8006422:	e032      	b.n	800648a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	0f1a      	lsrs	r2, r3, #28
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	3b01      	subs	r3, #1
 800642c:	60fb      	str	r3, [r7, #12]
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	0d5b      	lsrs	r3, r3, #21
 8006438:	b2db      	uxtb	r3, r3
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	3a01      	subs	r2, #1
 800643e:	60fa      	str	r2, [r7, #12]
 8006440:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006444:	b2da      	uxtb	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	0b9b      	lsrs	r3, r3, #14
 800644e:	b2db      	uxtb	r3, r3
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	3a01      	subs	r2, #1
 8006454:	60fa      	str	r2, [r7, #12]
 8006456:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800645a:	b2da      	uxtb	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	09db      	lsrs	r3, r3, #7
 8006464:	b2db      	uxtb	r3, r3
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	3a01      	subs	r2, #1
 800646a:	60fa      	str	r2, [r7, #12]
 800646c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006470:	b2da      	uxtb	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	b2db      	uxtb	r3, r3
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	3a01      	subs	r2, #1
 800647e:	60fa      	str	r2, [r7, #12]
 8006480:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006484:	b2da      	uxtb	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800648a:	4b1d      	ldr	r3, [pc, #116]	; (8006500 <_SendPacket+0x26c>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006490:	4b1a      	ldr	r3, [pc, #104]	; (80064fc <_SendPacket+0x268>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	623b      	str	r3, [r7, #32]
 80064a2:	e00b      	b.n	80064bc <_SendPacket+0x228>
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	1c59      	adds	r1, r3, #1
 80064ac:	6279      	str	r1, [r7, #36]	; 0x24
 80064ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	09db      	lsrs	r3, r3, #7
 80064ba:	623b      	str	r3, [r7, #32]
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	2b7f      	cmp	r3, #127	; 0x7f
 80064c0:	d8f0      	bhi.n	80064a4 <_SendPacket+0x210>
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	627a      	str	r2, [r7, #36]	; 0x24
 80064c8:	6a3a      	ldr	r2, [r7, #32]
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80064d2:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <_SendPacket+0x268>)
 80064d4:	785b      	ldrb	r3, [r3, #1]
 80064d6:	4618      	mov	r0, r3
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	461a      	mov	r2, r3
 80064e0:	68f9      	ldr	r1, [r7, #12]
 80064e2:	f7f9 fead 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80064e6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80064e8:	f7ff f9ac 	bl	8005844 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d008      	beq.n	8006504 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80064f2:	4a02      	ldr	r2, [pc, #8]	; (80064fc <_SendPacket+0x268>)
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	60d3      	str	r3, [r2, #12]
 80064f8:	e010      	b.n	800651c <_SendPacket+0x288>
 80064fa:	bf00      	nop
 80064fc:	200143b0 	.word	0x200143b0
 8006500:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006504:	4b19      	ldr	r3, [pc, #100]	; (800656c <_SendPacket+0x2d8>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	3301      	adds	r3, #1
 800650a:	b2da      	uxtb	r2, r3
 800650c:	4b17      	ldr	r3, [pc, #92]	; (800656c <_SendPacket+0x2d8>)
 800650e:	701a      	strb	r2, [r3, #0]
 8006510:	e004      	b.n	800651c <_SendPacket+0x288>
    goto SendDone;
 8006512:	bf00      	nop
 8006514:	e002      	b.n	800651c <_SendPacket+0x288>
      goto SendDone;
 8006516:	bf00      	nop
 8006518:	e000      	b.n	800651c <_SendPacket+0x288>
      goto SendDone;
 800651a:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800651c:	4b13      	ldr	r3, [pc, #76]	; (800656c <_SendPacket+0x2d8>)
 800651e:	7e1b      	ldrb	r3, [r3, #24]
 8006520:	4619      	mov	r1, r3
 8006522:	4a13      	ldr	r2, [pc, #76]	; (8006570 <_SendPacket+0x2dc>)
 8006524:	460b      	mov	r3, r1
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	440b      	add	r3, r1
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	4413      	add	r3, r2
 800652e:	336c      	adds	r3, #108	; 0x6c
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4b0e      	ldr	r3, [pc, #56]	; (800656c <_SendPacket+0x2d8>)
 8006534:	7e1b      	ldrb	r3, [r3, #24]
 8006536:	4618      	mov	r0, r3
 8006538:	490d      	ldr	r1, [pc, #52]	; (8006570 <_SendPacket+0x2dc>)
 800653a:	4603      	mov	r3, r0
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	4403      	add	r3, r0
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	440b      	add	r3, r1
 8006544:	3370      	adds	r3, #112	; 0x70
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d00b      	beq.n	8006564 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800654c:	4b07      	ldr	r3, [pc, #28]	; (800656c <_SendPacket+0x2d8>)
 800654e:	789b      	ldrb	r3, [r3, #2]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d107      	bne.n	8006564 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006554:	4b05      	ldr	r3, [pc, #20]	; (800656c <_SendPacket+0x2d8>)
 8006556:	2201      	movs	r2, #1
 8006558:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800655a:	f7ff fdb7 	bl	80060cc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800655e:	4b03      	ldr	r3, [pc, #12]	; (800656c <_SendPacket+0x2d8>)
 8006560:	2200      	movs	r2, #0
 8006562:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006564:	bf00      	nop
 8006566:	3728      	adds	r7, #40	; 0x28
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	200143b0 	.word	0x200143b0
 8006570:	20012ef0 	.word	0x20012ef0

08006574 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8006574:	b580      	push	{r7, lr}
 8006576:	b08a      	sub	sp, #40	; 0x28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	460b      	mov	r3, r1
 800657e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	3301      	adds	r3, #1
 800658a:	2b80      	cmp	r3, #128	; 0x80
 800658c:	d80a      	bhi.n	80065a4 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	1c59      	adds	r1, r3, #1
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6051      	str	r1, [r2, #4]
 8006598:	78fa      	ldrb	r2, [r7, #3]
 800659a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	1c5a      	adds	r2, r3, #1
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	2b80      	cmp	r3, #128	; 0x80
 80065aa:	d15a      	bne.n	8006662 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	691a      	ldr	r2, [r3, #16]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	627b      	str	r3, [r7, #36]	; 0x24
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	623b      	str	r3, [r7, #32]
 80065cc:	e00b      	b.n	80065e6 <_StoreChar+0x72>
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	1c59      	adds	r1, r3, #1
 80065d6:	6279      	str	r1, [r7, #36]	; 0x24
 80065d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065dc:	b2d2      	uxtb	r2, r2
 80065de:	701a      	strb	r2, [r3, #0]
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	09db      	lsrs	r3, r3, #7
 80065e4:	623b      	str	r3, [r7, #32]
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	2b7f      	cmp	r3, #127	; 0x7f
 80065ea:	d8f0      	bhi.n	80065ce <_StoreChar+0x5a>
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	627a      	str	r2, [r7, #36]	; 0x24
 80065f2:	6a3a      	ldr	r2, [r7, #32]
 80065f4:	b2d2      	uxtb	r2, r2
 80065f6:	701a      	strb	r2, [r3, #0]
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	61fb      	str	r3, [r7, #28]
 8006600:	2300      	movs	r3, #0
 8006602:	61bb      	str	r3, [r7, #24]
 8006604:	e00b      	b.n	800661e <_StoreChar+0xaa>
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	b2da      	uxtb	r2, r3
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	1c59      	adds	r1, r3, #1
 800660e:	61f9      	str	r1, [r7, #28]
 8006610:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006614:	b2d2      	uxtb	r2, r2
 8006616:	701a      	strb	r2, [r3, #0]
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	09db      	lsrs	r3, r3, #7
 800661c:	61bb      	str	r3, [r7, #24]
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	2b7f      	cmp	r3, #127	; 0x7f
 8006622:	d8f0      	bhi.n	8006606 <_StoreChar+0x92>
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	61fa      	str	r2, [r7, #28]
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	b2d2      	uxtb	r2, r2
 800662e:	701a      	strb	r2, [r3, #0]
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	221a      	movs	r2, #26
 800663a:	6939      	ldr	r1, [r7, #16]
 800663c:	4618      	mov	r0, r3
 800663e:	f7ff fe29 	bl	8006294 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4618      	mov	r0, r3
 8006648:	f7ff fd33 	bl	80060b2 <_PreparePacket>
 800664c:	4602      	mov	r2, r0
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	611a      	str	r2, [r3, #16]
  }
}
 8006662:	bf00      	nop
 8006664:	3728      	adds	r7, #40	; 0x28
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
	...

0800666c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800666c:	b580      	push	{r7, lr}
 800666e:	b08a      	sub	sp, #40	; 0x28
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800667e:	2301      	movs	r3, #1
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8006682:	2301      	movs	r3, #1
 8006684:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006686:	e007      	b.n	8006698 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8006688:	6a3a      	ldr	r2, [r7, #32]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006690:	623b      	str	r3, [r7, #32]
    Width++;
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	3301      	adds	r3, #1
 8006696:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006698:	6a3a      	ldr	r2, [r7, #32]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	429a      	cmp	r2, r3
 800669e:	d2f3      	bcs.n	8006688 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d901      	bls.n	80066ac <_PrintUnsigned+0x40>
    Width = NumDigits;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80066ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d11f      	bne.n	80066f6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80066b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d01c      	beq.n	80066f6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80066bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d005      	beq.n	80066d2 <_PrintUnsigned+0x66>
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d102      	bne.n	80066d2 <_PrintUnsigned+0x66>
        c = '0';
 80066cc:	2330      	movs	r3, #48	; 0x30
 80066ce:	76fb      	strb	r3, [r7, #27]
 80066d0:	e001      	b.n	80066d6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80066d2:	2320      	movs	r3, #32
 80066d4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80066d6:	e007      	b.n	80066e8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80066d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066da:	3b01      	subs	r3, #1
 80066dc:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80066de:	7efb      	ldrb	r3, [r7, #27]
 80066e0:	4619      	mov	r1, r3
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f7ff ff46 	bl	8006574 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <_PrintUnsigned+0x8a>
 80066ee:	69fa      	ldr	r2, [r7, #28]
 80066f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d3f0      	bcc.n	80066d8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d903      	bls.n	8006704 <_PrintUnsigned+0x98>
      NumDigits--;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	3b01      	subs	r3, #1
 8006700:	603b      	str	r3, [r7, #0]
 8006702:	e009      	b.n	8006718 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	fbb2 f3f3 	udiv	r3, r2, r3
 800670c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	429a      	cmp	r2, r3
 8006714:	d200      	bcs.n	8006718 <_PrintUnsigned+0xac>
        break;
 8006716:	e005      	b.n	8006724 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	fb02 f303 	mul.w	r3, r2, r3
 8006720:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006722:	e7e8      	b.n	80066f6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	fbb2 f3f3 	udiv	r3, r2, r3
 800672c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006732:	fb02 f303 	mul.w	r3, r2, r3
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800673c:	4a15      	ldr	r2, [pc, #84]	; (8006794 <_PrintUnsigned+0x128>)
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	4413      	add	r3, r2
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	4619      	mov	r1, r3
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f7ff ff14 	bl	8006574 <_StoreChar>
    Digit /= Base;
 800674c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	fbb2 f3f3 	udiv	r3, r2, r3
 8006754:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e3      	bne.n	8006724 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800675c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b00      	cmp	r3, #0
 8006764:	d011      	beq.n	800678a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00e      	beq.n	800678a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800676c:	e006      	b.n	800677c <_PrintUnsigned+0x110>
        FieldWidth--;
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	3b01      	subs	r3, #1
 8006772:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8006774:	2120      	movs	r1, #32
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f7ff fefc 	bl	8006574 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <_PrintUnsigned+0x11e>
 8006782:	69fa      	ldr	r2, [r7, #28]
 8006784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006786:	429a      	cmp	r2, r3
 8006788:	d3f1      	bcc.n	800676e <_PrintUnsigned+0x102>
      }
    }
  }
}
 800678a:	bf00      	nop
 800678c:	3728      	adds	r7, #40	; 0x28
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	08007fc4 	.word	0x08007fc4

08006798 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006798:	b580      	push	{r7, lr}
 800679a:	b088      	sub	sp, #32
 800679c:	af02      	add	r7, sp, #8
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	bfb8      	it	lt
 80067ac:	425b      	neglt	r3, r3
 80067ae:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80067b0:	2301      	movs	r3, #1
 80067b2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80067b4:	e007      	b.n	80067c6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80067be:	613b      	str	r3, [r7, #16]
    Width++;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	3301      	adds	r3, #1
 80067c4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	daf3      	bge.n	80067b6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d901      	bls.n	80067da <_PrintInt+0x42>
    Width = NumDigits;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00a      	beq.n	80067f6 <_PrintInt+0x5e>
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	db04      	blt.n	80067f0 <_PrintInt+0x58>
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <_PrintInt+0x5e>
    FieldWidth--;
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	f003 0302 	and.w	r3, r3, #2
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <_PrintInt+0x6e>
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d016      	beq.n	8006834 <_PrintInt+0x9c>
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	d111      	bne.n	8006834 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00e      	beq.n	8006834 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006816:	e006      	b.n	8006826 <_PrintInt+0x8e>
        FieldWidth--;
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	3b01      	subs	r3, #1
 800681c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800681e:	2120      	movs	r1, #32
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f7ff fea7 	bl	8006574 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <_PrintInt+0x9c>
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	429a      	cmp	r2, r3
 8006832:	d3f1      	bcc.n	8006818 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2b00      	cmp	r3, #0
 8006838:	da07      	bge.n	800684a <_PrintInt+0xb2>
    v = -v;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	425b      	negs	r3, r3
 800683e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006840:	212d      	movs	r1, #45	; 0x2d
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f7ff fe96 	bl	8006574 <_StoreChar>
 8006848:	e008      	b.n	800685c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	d003      	beq.n	800685c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006854:	212b      	movs	r1, #43	; 0x2b
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f7ff fe8c 	bl	8006574 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d019      	beq.n	800689a <_PrintInt+0x102>
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d114      	bne.n	800689a <_PrintInt+0x102>
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d111      	bne.n	800689a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00e      	beq.n	800689a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800687c:	e006      	b.n	800688c <_PrintInt+0xf4>
        FieldWidth--;
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	3b01      	subs	r3, #1
 8006882:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006884:	2130      	movs	r1, #48	; 0x30
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f7ff fe74 	bl	8006574 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <_PrintInt+0x102>
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	429a      	cmp	r2, r3
 8006898:	d3f1      	bcc.n	800687e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800689a:	68b9      	ldr	r1, [r7, #8]
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	9301      	str	r3, [sp, #4]
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f7ff fedf 	bl	800666c <_PrintUnsigned>
}
 80068ae:	bf00      	nop
 80068b0:	3718      	adds	r7, #24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
	...

080068b8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b098      	sub	sp, #96	; 0x60
 80068bc:	af02      	add	r7, sp, #8
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80068c4:	f3ef 8311 	mrs	r3, BASEPRI
 80068c8:	f04f 0120 	mov.w	r1, #32
 80068cc:	f381 8811 	msr	BASEPRI, r1
 80068d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068d2:	48b7      	ldr	r0, [pc, #732]	; (8006bb0 <_VPrintTarget+0x2f8>)
 80068d4:	f7ff fbed 	bl	80060b2 <_PreparePacket>
 80068d8:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80068da:	4bb5      	ldr	r3, [pc, #724]	; (8006bb0 <_VPrintTarget+0x2f8>)
 80068dc:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 80068de:	2300      	movs	r3, #0
 80068e0:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	3301      	adds	r3, #1
 80068ea:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3301      	adds	r3, #1
 80068fc:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80068fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 81a8 	beq.w	8006c58 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8006908:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800690c:	2b25      	cmp	r3, #37	; 0x25
 800690e:	f040 8195 	bne.w	8006c3c <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006912:	2300      	movs	r3, #0
 8006914:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8006916:	2301      	movs	r3, #1
 8006918:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8006922:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006926:	3b23      	subs	r3, #35	; 0x23
 8006928:	2b0d      	cmp	r3, #13
 800692a:	d83f      	bhi.n	80069ac <_VPrintTarget+0xf4>
 800692c:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <_VPrintTarget+0x7c>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	0800699d 	.word	0x0800699d
 8006938:	080069ad 	.word	0x080069ad
 800693c:	080069ad 	.word	0x080069ad
 8006940:	080069ad 	.word	0x080069ad
 8006944:	080069ad 	.word	0x080069ad
 8006948:	080069ad 	.word	0x080069ad
 800694c:	080069ad 	.word	0x080069ad
 8006950:	080069ad 	.word	0x080069ad
 8006954:	0800698d 	.word	0x0800698d
 8006958:	080069ad 	.word	0x080069ad
 800695c:	0800696d 	.word	0x0800696d
 8006960:	080069ad 	.word	0x080069ad
 8006964:	080069ad 	.word	0x080069ad
 8006968:	0800697d 	.word	0x0800697d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800696c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800696e:	f043 0301 	orr.w	r3, r3, #1
 8006972:	64bb      	str	r3, [r7, #72]	; 0x48
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	3301      	adds	r3, #1
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	e01a      	b.n	80069b2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800697c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800697e:	f043 0302 	orr.w	r3, r3, #2
 8006982:	64bb      	str	r3, [r7, #72]	; 0x48
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	3301      	adds	r3, #1
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	e012      	b.n	80069b2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800698c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800698e:	f043 0304 	orr.w	r3, r3, #4
 8006992:	64bb      	str	r3, [r7, #72]	; 0x48
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	3301      	adds	r3, #1
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	e00a      	b.n	80069b2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800699c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800699e:	f043 0308 	orr.w	r3, r3, #8
 80069a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	3301      	adds	r3, #1
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	e002      	b.n	80069b2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80069ac:	2300      	movs	r3, #0
 80069ae:	653b      	str	r3, [r7, #80]	; 0x50
 80069b0:	bf00      	nop
        }
      } while (v);
 80069b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1b0      	bne.n	800691a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80069b8:	2300      	movs	r3, #0
 80069ba:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80069c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069c8:	2b2f      	cmp	r3, #47	; 0x2f
 80069ca:	d912      	bls.n	80069f2 <_VPrintTarget+0x13a>
 80069cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069d0:	2b39      	cmp	r3, #57	; 0x39
 80069d2:	d80e      	bhi.n	80069f2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3301      	adds	r3, #1
 80069d8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80069da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069dc:	4613      	mov	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	461a      	mov	r2, r3
 80069e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069ea:	4413      	add	r3, r2
 80069ec:	3b30      	subs	r3, #48	; 0x30
 80069ee:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80069f0:	e7e4      	b.n	80069bc <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80069f2:	2300      	movs	r3, #0
 80069f4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80069fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a02:	2b2e      	cmp	r3, #46	; 0x2e
 8006a04:	d11d      	bne.n	8006a42 <_VPrintTarget+0x18a>
        sFormat++;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006a14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a18:	2b2f      	cmp	r3, #47	; 0x2f
 8006a1a:	d912      	bls.n	8006a42 <_VPrintTarget+0x18a>
 8006a1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a20:	2b39      	cmp	r3, #57	; 0x39
 8006a22:	d80e      	bhi.n	8006a42 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	3301      	adds	r3, #1
 8006a28:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006a2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	461a      	mov	r2, r3
 8006a36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a3a:	4413      	add	r3, r2
 8006a3c:	3b30      	subs	r3, #48	; 0x30
 8006a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8006a40:	e7e4      	b.n	8006a0c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006a4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a4e:	2b6c      	cmp	r3, #108	; 0x6c
 8006a50:	d003      	beq.n	8006a5a <_VPrintTarget+0x1a2>
 8006a52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a56:	2b68      	cmp	r3, #104	; 0x68
 8006a58:	d107      	bne.n	8006a6a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	3301      	adds	r3, #1
 8006a66:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006a68:	e7ef      	b.n	8006a4a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006a6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a6e:	2b25      	cmp	r3, #37	; 0x25
 8006a70:	f000 80d8 	beq.w	8006c24 <_VPrintTarget+0x36c>
 8006a74:	2b25      	cmp	r3, #37	; 0x25
 8006a76:	f2c0 80dc 	blt.w	8006c32 <_VPrintTarget+0x37a>
 8006a7a:	2b78      	cmp	r3, #120	; 0x78
 8006a7c:	f300 80d9 	bgt.w	8006c32 <_VPrintTarget+0x37a>
 8006a80:	2b58      	cmp	r3, #88	; 0x58
 8006a82:	f2c0 80d6 	blt.w	8006c32 <_VPrintTarget+0x37a>
 8006a86:	3b58      	subs	r3, #88	; 0x58
 8006a88:	2b20      	cmp	r3, #32
 8006a8a:	f200 80d2 	bhi.w	8006c32 <_VPrintTarget+0x37a>
 8006a8e:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <_VPrintTarget+0x1dc>)
 8006a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a94:	08006b8b 	.word	0x08006b8b
 8006a98:	08006c33 	.word	0x08006c33
 8006a9c:	08006c33 	.word	0x08006c33
 8006aa0:	08006c33 	.word	0x08006c33
 8006aa4:	08006c33 	.word	0x08006c33
 8006aa8:	08006c33 	.word	0x08006c33
 8006aac:	08006c33 	.word	0x08006c33
 8006ab0:	08006c33 	.word	0x08006c33
 8006ab4:	08006c33 	.word	0x08006c33
 8006ab8:	08006c33 	.word	0x08006c33
 8006abc:	08006c33 	.word	0x08006c33
 8006ac0:	08006b19 	.word	0x08006b19
 8006ac4:	08006b3f 	.word	0x08006b3f
 8006ac8:	08006c33 	.word	0x08006c33
 8006acc:	08006c33 	.word	0x08006c33
 8006ad0:	08006c33 	.word	0x08006c33
 8006ad4:	08006c33 	.word	0x08006c33
 8006ad8:	08006c33 	.word	0x08006c33
 8006adc:	08006c33 	.word	0x08006c33
 8006ae0:	08006c33 	.word	0x08006c33
 8006ae4:	08006c33 	.word	0x08006c33
 8006ae8:	08006c33 	.word	0x08006c33
 8006aec:	08006c33 	.word	0x08006c33
 8006af0:	08006c33 	.word	0x08006c33
 8006af4:	08006bff 	.word	0x08006bff
 8006af8:	08006c33 	.word	0x08006c33
 8006afc:	08006c33 	.word	0x08006c33
 8006b00:	08006bb5 	.word	0x08006bb5
 8006b04:	08006c33 	.word	0x08006c33
 8006b08:	08006b65 	.word	0x08006b65
 8006b0c:	08006c33 	.word	0x08006c33
 8006b10:	08006c33 	.word	0x08006c33
 8006b14:	08006b8b 	.word	0x08006b8b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	1d19      	adds	r1, r3, #4
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6011      	str	r1, [r2, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8006b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8006b2c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006b30:	f107 0310 	add.w	r3, r7, #16
 8006b34:	4611      	mov	r1, r2
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7ff fd1c 	bl	8006574 <_StoreChar>
        break;
 8006b3c:	e07a      	b.n	8006c34 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	1d19      	adds	r1, r3, #4
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6011      	str	r1, [r2, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006b4c:	f107 0010 	add.w	r0, r7, #16
 8006b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b52:	9301      	str	r3, [sp, #4]
 8006b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b5a:	220a      	movs	r2, #10
 8006b5c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b5e:	f7ff fe1b 	bl	8006798 <_PrintInt>
        break;
 8006b62:	e067      	b.n	8006c34 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	1d19      	adds	r1, r3, #4
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	6011      	str	r1, [r2, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006b72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b74:	f107 0010 	add.w	r0, r7, #16
 8006b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b82:	220a      	movs	r2, #10
 8006b84:	f7ff fd72 	bl	800666c <_PrintUnsigned>
        break;
 8006b88:	e054      	b.n	8006c34 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	1d19      	adds	r1, r3, #4
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6011      	str	r1, [r2, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006b98:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b9a:	f107 0010 	add.w	r0, r7, #16
 8006b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ba0:	9301      	str	r3, [sp, #4]
 8006ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba8:	2210      	movs	r2, #16
 8006baa:	f7ff fd5f 	bl	800666c <_PrintUnsigned>
        break;
 8006bae:	e041      	b.n	8006c34 <_VPrintTarget+0x37c>
 8006bb0:	200143e0 	.word	0x200143e0
      case 's':
        s = va_arg(*pParamList, const char*);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	1d19      	adds	r1, r3, #4
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6011      	str	r1, [r2, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8006bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <_VPrintTarget+0x314>
          s = "(null)";
 8006bc8:	4b4a      	ldr	r3, [pc, #296]	; (8006cf4 <_VPrintTarget+0x43c>)
 8006bca:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8006bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8006bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8006bda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00b      	beq.n	8006bfa <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8006be2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006be6:	f107 0310 	add.w	r3, r7, #16
 8006bea:	4611      	mov	r1, r2
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7ff fcc1 	bl	8006574 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	2b7f      	cmp	r3, #127	; 0x7f
 8006bf6:	d9e9      	bls.n	8006bcc <_VPrintTarget+0x314>
        break;
 8006bf8:	e01c      	b.n	8006c34 <_VPrintTarget+0x37c>
            break;
 8006bfa:	bf00      	nop
        break;
 8006bfc:	e01a      	b.n	8006c34 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	1d19      	adds	r1, r3, #4
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	6011      	str	r1, [r2, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006c0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c0e:	f107 0010 	add.w	r0, r7, #16
 8006c12:	2300      	movs	r3, #0
 8006c14:	9301      	str	r3, [sp, #4]
 8006c16:	2308      	movs	r3, #8
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	2308      	movs	r3, #8
 8006c1c:	2210      	movs	r2, #16
 8006c1e:	f7ff fd25 	bl	800666c <_PrintUnsigned>
        break;
 8006c22:	e007      	b.n	8006c34 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006c24:	f107 0310 	add.w	r3, r7, #16
 8006c28:	2125      	movs	r1, #37	; 0x25
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7ff fca2 	bl	8006574 <_StoreChar>
        break;
 8006c30:	e000      	b.n	8006c34 <_VPrintTarget+0x37c>
      default:
        break;
 8006c32:	bf00      	nop
      }
      sFormat++;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	3301      	adds	r3, #1
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	e007      	b.n	8006c4c <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8006c3c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006c40:	f107 0310 	add.w	r3, r7, #16
 8006c44:	4611      	mov	r1, r2
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7ff fc94 	bl	8006574 <_StoreChar>
    }
  } while (*sFormat);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f47f ae4d 	bne.w	80068f0 <_VPrintTarget+0x38>
 8006c56:	e000      	b.n	8006c5a <_VPrintTarget+0x3a2>
      break;
 8006c58:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d041      	beq.n	8006ce4 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006c60:	6a3a      	ldr	r2, [r7, #32]
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	b2d2      	uxtb	r2, r2
 8006c66:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c70:	e00b      	b.n	8006c8a <_VPrintTarget+0x3d2>
 8006c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c78:	1c59      	adds	r1, r3, #1
 8006c7a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006c7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c80:	b2d2      	uxtb	r2, r2
 8006c82:	701a      	strb	r2, [r3, #0]
 8006c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c86:	09db      	lsrs	r3, r3, #7
 8006c88:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c8e:	d8f0      	bhi.n	8006c72 <_VPrintTarget+0x3ba>
 8006c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c92:	1c5a      	adds	r2, r3, #1
 8006c94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c98:	b2d2      	uxtb	r2, r2
 8006c9a:	701a      	strb	r2, [r3, #0]
 8006c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c9e:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ca8:	e00b      	b.n	8006cc2 <_VPrintTarget+0x40a>
 8006caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb0:	1c59      	adds	r1, r3, #1
 8006cb2:	6379      	str	r1, [r7, #52]	; 0x34
 8006cb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cb8:	b2d2      	uxtb	r2, r2
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbe:	09db      	lsrs	r3, r3, #7
 8006cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc6:	d8f0      	bhi.n	8006caa <_VPrintTarget+0x3f2>
 8006cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	637a      	str	r2, [r7, #52]	; 0x34
 8006cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd0:	b2d2      	uxtb	r2, r2
 8006cd2:	701a      	strb	r2, [r3, #0]
 8006cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd6:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	6979      	ldr	r1, [r7, #20]
 8006cdc:	221a      	movs	r2, #26
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7ff fad8 	bl	8006294 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce6:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006cea:	bf00      	nop
 8006cec:	3758      	adds	r7, #88	; 0x58
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	08007f70 	.word	0x08007f70

08006cf8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af02      	add	r7, sp, #8
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
 8006d04:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006d06:	2300      	movs	r3, #0
 8006d08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d0c:	4917      	ldr	r1, [pc, #92]	; (8006d6c <SEGGER_SYSVIEW_Init+0x74>)
 8006d0e:	4818      	ldr	r0, [pc, #96]	; (8006d70 <SEGGER_SYSVIEW_Init+0x78>)
 8006d10:	f7ff f8c6 	bl	8005ea0 <SEGGER_RTT_AllocUpBuffer>
 8006d14:	4603      	mov	r3, r0
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	4b16      	ldr	r3, [pc, #88]	; (8006d74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d1a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006d1c:	4b15      	ldr	r3, [pc, #84]	; (8006d74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d1e:	785a      	ldrb	r2, [r3, #1]
 8006d20:	4b14      	ldr	r3, [pc, #80]	; (8006d74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d22:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006d24:	4b13      	ldr	r3, [pc, #76]	; (8006d74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d26:	7e1b      	ldrb	r3, [r3, #24]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	2308      	movs	r3, #8
 8006d30:	4a11      	ldr	r2, [pc, #68]	; (8006d78 <SEGGER_SYSVIEW_Init+0x80>)
 8006d32:	490f      	ldr	r1, [pc, #60]	; (8006d70 <SEGGER_SYSVIEW_Init+0x78>)
 8006d34:	f7ff f938 	bl	8005fa8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006d38:	4b0e      	ldr	r3, [pc, #56]	; (8006d74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006d3e:	4b0f      	ldr	r3, [pc, #60]	; (8006d7c <SEGGER_SYSVIEW_Init+0x84>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a0c      	ldr	r2, [pc, #48]	; (8006d74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d44:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006d46:	4a0b      	ldr	r2, [pc, #44]	; (8006d74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006d4c:	4a09      	ldr	r2, [pc, #36]	; (8006d74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006d52:	4a08      	ldr	r2, [pc, #32]	; (8006d74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006d58:	4a06      	ldr	r2, [pc, #24]	; (8006d74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006d5e:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006d64:	bf00      	nop
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	200133a8 	.word	0x200133a8
 8006d70:	08007f78 	.word	0x08007f78
 8006d74:	200143b0 	.word	0x200143b0
 8006d78:	200143a8 	.word	0x200143a8
 8006d7c:	e0001004 	.word	0xe0001004

08006d80 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006d88:	4a04      	ldr	r2, [pc, #16]	; (8006d9c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6113      	str	r3, [r2, #16]
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	200143b0 	.word	0x200143b0

08006da0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006da8:	f3ef 8311 	mrs	r3, BASEPRI
 8006dac:	f04f 0120 	mov.w	r1, #32
 8006db0:	f381 8811 	msr	BASEPRI, r1
 8006db4:	60fb      	str	r3, [r7, #12]
 8006db6:	4808      	ldr	r0, [pc, #32]	; (8006dd8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006db8:	f7ff f97b 	bl	80060b2 <_PreparePacket>
 8006dbc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	68b9      	ldr	r1, [r7, #8]
 8006dc2:	68b8      	ldr	r0, [r7, #8]
 8006dc4:	f7ff fa66 	bl	8006294 <_SendPacket>
  RECORD_END();
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f383 8811 	msr	BASEPRI, r3
}
 8006dce:	bf00      	nop
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	200143e0 	.word	0x200143e0

08006ddc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b088      	sub	sp, #32
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006de6:	f3ef 8311 	mrs	r3, BASEPRI
 8006dea:	f04f 0120 	mov.w	r1, #32
 8006dee:	f381 8811 	msr	BASEPRI, r1
 8006df2:	617b      	str	r3, [r7, #20]
 8006df4:	4816      	ldr	r0, [pc, #88]	; (8006e50 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006df6:	f7ff f95c 	bl	80060b2 <_PreparePacket>
 8006dfa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	61fb      	str	r3, [r7, #28]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	61bb      	str	r3, [r7, #24]
 8006e08:	e00b      	b.n	8006e22 <SEGGER_SYSVIEW_RecordU32+0x46>
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	1c59      	adds	r1, r3, #1
 8006e12:	61f9      	str	r1, [r7, #28]
 8006e14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e18:	b2d2      	uxtb	r2, r2
 8006e1a:	701a      	strb	r2, [r3, #0]
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	09db      	lsrs	r3, r3, #7
 8006e20:	61bb      	str	r3, [r7, #24]
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	2b7f      	cmp	r3, #127	; 0x7f
 8006e26:	d8f0      	bhi.n	8006e0a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	61fa      	str	r2, [r7, #28]
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	b2d2      	uxtb	r2, r2
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	68f9      	ldr	r1, [r7, #12]
 8006e3c:	6938      	ldr	r0, [r7, #16]
 8006e3e:	f7ff fa29 	bl	8006294 <_SendPacket>
  RECORD_END();
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f383 8811 	msr	BASEPRI, r3
}
 8006e48:	bf00      	nop
 8006e4a:	3720      	adds	r7, #32
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	200143e0 	.word	0x200143e0

08006e54 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b08c      	sub	sp, #48	; 0x30
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e60:	f3ef 8311 	mrs	r3, BASEPRI
 8006e64:	f04f 0120 	mov.w	r1, #32
 8006e68:	f381 8811 	msr	BASEPRI, r1
 8006e6c:	61fb      	str	r3, [r7, #28]
 8006e6e:	4825      	ldr	r0, [pc, #148]	; (8006f04 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006e70:	f7ff f91f 	bl	80060b2 <_PreparePacket>
 8006e74:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e82:	e00b      	b.n	8006e9c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8a:	1c59      	adds	r1, r3, #1
 8006e8c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006e8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e92:	b2d2      	uxtb	r2, r2
 8006e94:	701a      	strb	r2, [r3, #0]
 8006e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e98:	09db      	lsrs	r3, r3, #7
 8006e9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9e:	2b7f      	cmp	r3, #127	; 0x7f
 8006ea0:	d8f0      	bhi.n	8006e84 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	701a      	strb	r2, [r3, #0]
 8006eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	623b      	str	r3, [r7, #32]
 8006eba:	e00b      	b.n	8006ed4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	1c59      	adds	r1, r3, #1
 8006ec4:	6279      	str	r1, [r7, #36]	; 0x24
 8006ec6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eca:	b2d2      	uxtb	r2, r2
 8006ecc:	701a      	strb	r2, [r3, #0]
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	09db      	lsrs	r3, r3, #7
 8006ed2:	623b      	str	r3, [r7, #32]
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ed8:	d8f0      	bhi.n	8006ebc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	627a      	str	r2, [r7, #36]	; 0x24
 8006ee0:	6a3a      	ldr	r2, [r7, #32]
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	6979      	ldr	r1, [r7, #20]
 8006eee:	69b8      	ldr	r0, [r7, #24]
 8006ef0:	f7ff f9d0 	bl	8006294 <_SendPacket>
  RECORD_END();
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	f383 8811 	msr	BASEPRI, r3
}
 8006efa:	bf00      	nop
 8006efc:	3730      	adds	r7, #48	; 0x30
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	200143e0 	.word	0x200143e0

08006f08 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08e      	sub	sp, #56	; 0x38
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f16:	f3ef 8311 	mrs	r3, BASEPRI
 8006f1a:	f04f 0120 	mov.w	r1, #32
 8006f1e:	f381 8811 	msr	BASEPRI, r1
 8006f22:	61fb      	str	r3, [r7, #28]
 8006f24:	4832      	ldr	r0, [pc, #200]	; (8006ff0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006f26:	f7ff f8c4 	bl	80060b2 <_PreparePacket>
 8006f2a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	637b      	str	r3, [r7, #52]	; 0x34
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	633b      	str	r3, [r7, #48]	; 0x30
 8006f38:	e00b      	b.n	8006f52 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	b2da      	uxtb	r2, r3
 8006f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f40:	1c59      	adds	r1, r3, #1
 8006f42:	6379      	str	r1, [r7, #52]	; 0x34
 8006f44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f48:	b2d2      	uxtb	r2, r2
 8006f4a:	701a      	strb	r2, [r3, #0]
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4e:	09db      	lsrs	r3, r3, #7
 8006f50:	633b      	str	r3, [r7, #48]	; 0x30
 8006f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f54:	2b7f      	cmp	r3, #127	; 0x7f
 8006f56:	d8f0      	bhi.n	8006f3a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5a:	1c5a      	adds	r2, r3, #1
 8006f5c:	637a      	str	r2, [r7, #52]	; 0x34
 8006f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f60:	b2d2      	uxtb	r2, r2
 8006f62:	701a      	strb	r2, [r3, #0]
 8006f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f70:	e00b      	b.n	8006f8a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f78:	1c59      	adds	r1, r3, #1
 8006f7a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006f7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	701a      	strb	r2, [r3, #0]
 8006f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f86:	09db      	lsrs	r3, r3, #7
 8006f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8c:	2b7f      	cmp	r3, #127	; 0x7f
 8006f8e:	d8f0      	bhi.n	8006f72 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f98:	b2d2      	uxtb	r2, r2
 8006f9a:	701a      	strb	r2, [r3, #0]
 8006f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	623b      	str	r3, [r7, #32]
 8006fa8:	e00b      	b.n	8006fc2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006faa:	6a3b      	ldr	r3, [r7, #32]
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	1c59      	adds	r1, r3, #1
 8006fb2:	6279      	str	r1, [r7, #36]	; 0x24
 8006fb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fb8:	b2d2      	uxtb	r2, r2
 8006fba:	701a      	strb	r2, [r3, #0]
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	09db      	lsrs	r3, r3, #7
 8006fc0:	623b      	str	r3, [r7, #32]
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	2b7f      	cmp	r3, #127	; 0x7f
 8006fc6:	d8f0      	bhi.n	8006faa <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	627a      	str	r2, [r7, #36]	; 0x24
 8006fce:	6a3a      	ldr	r2, [r7, #32]
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	701a      	strb	r2, [r3, #0]
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	6979      	ldr	r1, [r7, #20]
 8006fdc:	69b8      	ldr	r0, [r7, #24]
 8006fde:	f7ff f959 	bl	8006294 <_SendPacket>
  RECORD_END();
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	f383 8811 	msr	BASEPRI, r3
}
 8006fe8:	bf00      	nop
 8006fea:	3738      	adds	r7, #56	; 0x38
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	200143e0 	.word	0x200143e0

08006ff4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b090      	sub	sp, #64	; 0x40
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007002:	f3ef 8311 	mrs	r3, BASEPRI
 8007006:	f04f 0120 	mov.w	r1, #32
 800700a:	f381 8811 	msr	BASEPRI, r1
 800700e:	61fb      	str	r3, [r7, #28]
 8007010:	4840      	ldr	r0, [pc, #256]	; (8007114 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007012:	f7ff f84e 	bl	80060b2 <_PreparePacket>
 8007016:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	63bb      	str	r3, [r7, #56]	; 0x38
 8007024:	e00b      	b.n	800703e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8007026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007028:	b2da      	uxtb	r2, r3
 800702a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800702c:	1c59      	adds	r1, r3, #1
 800702e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007030:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007034:	b2d2      	uxtb	r2, r2
 8007036:	701a      	strb	r2, [r3, #0]
 8007038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703a:	09db      	lsrs	r3, r3, #7
 800703c:	63bb      	str	r3, [r7, #56]	; 0x38
 800703e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007040:	2b7f      	cmp	r3, #127	; 0x7f
 8007042:	d8f0      	bhi.n	8007026 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8007044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	63fa      	str	r2, [r7, #60]	; 0x3c
 800704a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800704c:	b2d2      	uxtb	r2, r2
 800704e:	701a      	strb	r2, [r3, #0]
 8007050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007052:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	637b      	str	r3, [r7, #52]	; 0x34
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	633b      	str	r3, [r7, #48]	; 0x30
 800705c:	e00b      	b.n	8007076 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800705e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007060:	b2da      	uxtb	r2, r3
 8007062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007064:	1c59      	adds	r1, r3, #1
 8007066:	6379      	str	r1, [r7, #52]	; 0x34
 8007068:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800706c:	b2d2      	uxtb	r2, r2
 800706e:	701a      	strb	r2, [r3, #0]
 8007070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007072:	09db      	lsrs	r3, r3, #7
 8007074:	633b      	str	r3, [r7, #48]	; 0x30
 8007076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007078:	2b7f      	cmp	r3, #127	; 0x7f
 800707a:	d8f0      	bhi.n	800705e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800707c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	637a      	str	r2, [r7, #52]	; 0x34
 8007082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007084:	b2d2      	uxtb	r2, r2
 8007086:	701a      	strb	r2, [r3, #0]
 8007088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800708a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	62bb      	str	r3, [r7, #40]	; 0x28
 8007094:	e00b      	b.n	80070ae <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8007096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007098:	b2da      	uxtb	r2, r3
 800709a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709c:	1c59      	adds	r1, r3, #1
 800709e:	62f9      	str	r1, [r7, #44]	; 0x2c
 80070a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070a4:	b2d2      	uxtb	r2, r2
 80070a6:	701a      	strb	r2, [r3, #0]
 80070a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070aa:	09db      	lsrs	r3, r3, #7
 80070ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80070ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b0:	2b7f      	cmp	r3, #127	; 0x7f
 80070b2:	d8f0      	bhi.n	8007096 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80070b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b6:	1c5a      	adds	r2, r3, #1
 80070b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070bc:	b2d2      	uxtb	r2, r2
 80070be:	701a      	strb	r2, [r3, #0]
 80070c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	627b      	str	r3, [r7, #36]	; 0x24
 80070c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070ca:	623b      	str	r3, [r7, #32]
 80070cc:	e00b      	b.n	80070e6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	1c59      	adds	r1, r3, #1
 80070d6:	6279      	str	r1, [r7, #36]	; 0x24
 80070d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070dc:	b2d2      	uxtb	r2, r2
 80070de:	701a      	strb	r2, [r3, #0]
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	09db      	lsrs	r3, r3, #7
 80070e4:	623b      	str	r3, [r7, #32]
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	2b7f      	cmp	r3, #127	; 0x7f
 80070ea:	d8f0      	bhi.n	80070ce <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	627a      	str	r2, [r7, #36]	; 0x24
 80070f2:	6a3a      	ldr	r2, [r7, #32]
 80070f4:	b2d2      	uxtb	r2, r2
 80070f6:	701a      	strb	r2, [r3, #0]
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	6979      	ldr	r1, [r7, #20]
 8007100:	69b8      	ldr	r0, [r7, #24]
 8007102:	f7ff f8c7 	bl	8006294 <_SendPacket>
  RECORD_END();
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	f383 8811 	msr	BASEPRI, r3
}
 800710c:	bf00      	nop
 800710e:	3740      	adds	r7, #64	; 0x40
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	200143e0 	.word	0x200143e0

08007118 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007118:	b580      	push	{r7, lr}
 800711a:	b08c      	sub	sp, #48	; 0x30
 800711c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800711e:	4b59      	ldr	r3, [pc, #356]	; (8007284 <SEGGER_SYSVIEW_Start+0x16c>)
 8007120:	2201      	movs	r2, #1
 8007122:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007124:	f3ef 8311 	mrs	r3, BASEPRI
 8007128:	f04f 0120 	mov.w	r1, #32
 800712c:	f381 8811 	msr	BASEPRI, r1
 8007130:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007132:	4b54      	ldr	r3, [pc, #336]	; (8007284 <SEGGER_SYSVIEW_Start+0x16c>)
 8007134:	785b      	ldrb	r3, [r3, #1]
 8007136:	220a      	movs	r2, #10
 8007138:	4953      	ldr	r1, [pc, #332]	; (8007288 <SEGGER_SYSVIEW_Start+0x170>)
 800713a:	4618      	mov	r0, r3
 800713c:	f7f9 f880 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8007146:	f7fe fb7d 	bl	8005844 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800714a:	200a      	movs	r0, #10
 800714c:	f7ff fe28 	bl	8006da0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007150:	f3ef 8311 	mrs	r3, BASEPRI
 8007154:	f04f 0120 	mov.w	r1, #32
 8007158:	f381 8811 	msr	BASEPRI, r1
 800715c:	60bb      	str	r3, [r7, #8]
 800715e:	484b      	ldr	r0, [pc, #300]	; (800728c <SEGGER_SYSVIEW_Start+0x174>)
 8007160:	f7fe ffa7 	bl	80060b2 <_PreparePacket>
 8007164:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800716e:	4b45      	ldr	r3, [pc, #276]	; (8007284 <SEGGER_SYSVIEW_Start+0x16c>)
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	62bb      	str	r3, [r7, #40]	; 0x28
 8007174:	e00b      	b.n	800718e <SEGGER_SYSVIEW_Start+0x76>
 8007176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007178:	b2da      	uxtb	r2, r3
 800717a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717c:	1c59      	adds	r1, r3, #1
 800717e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007180:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007184:	b2d2      	uxtb	r2, r2
 8007186:	701a      	strb	r2, [r3, #0]
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	09db      	lsrs	r3, r3, #7
 800718c:	62bb      	str	r3, [r7, #40]	; 0x28
 800718e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007190:	2b7f      	cmp	r3, #127	; 0x7f
 8007192:	d8f0      	bhi.n	8007176 <SEGGER_SYSVIEW_Start+0x5e>
 8007194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007196:	1c5a      	adds	r2, r3, #1
 8007198:	62fa      	str	r2, [r7, #44]	; 0x2c
 800719a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800719c:	b2d2      	uxtb	r2, r2
 800719e:	701a      	strb	r2, [r3, #0]
 80071a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	627b      	str	r3, [r7, #36]	; 0x24
 80071a8:	4b36      	ldr	r3, [pc, #216]	; (8007284 <SEGGER_SYSVIEW_Start+0x16c>)
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	623b      	str	r3, [r7, #32]
 80071ae:	e00b      	b.n	80071c8 <SEGGER_SYSVIEW_Start+0xb0>
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	1c59      	adds	r1, r3, #1
 80071b8:	6279      	str	r1, [r7, #36]	; 0x24
 80071ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071be:	b2d2      	uxtb	r2, r2
 80071c0:	701a      	strb	r2, [r3, #0]
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	09db      	lsrs	r3, r3, #7
 80071c6:	623b      	str	r3, [r7, #32]
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	2b7f      	cmp	r3, #127	; 0x7f
 80071cc:	d8f0      	bhi.n	80071b0 <SEGGER_SYSVIEW_Start+0x98>
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	1c5a      	adds	r2, r3, #1
 80071d2:	627a      	str	r2, [r7, #36]	; 0x24
 80071d4:	6a3a      	ldr	r2, [r7, #32]
 80071d6:	b2d2      	uxtb	r2, r2
 80071d8:	701a      	strb	r2, [r3, #0]
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	61fb      	str	r3, [r7, #28]
 80071e2:	4b28      	ldr	r3, [pc, #160]	; (8007284 <SEGGER_SYSVIEW_Start+0x16c>)
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	61bb      	str	r3, [r7, #24]
 80071e8:	e00b      	b.n	8007202 <SEGGER_SYSVIEW_Start+0xea>
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	1c59      	adds	r1, r3, #1
 80071f2:	61f9      	str	r1, [r7, #28]
 80071f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	701a      	strb	r2, [r3, #0]
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	09db      	lsrs	r3, r3, #7
 8007200:	61bb      	str	r3, [r7, #24]
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	2b7f      	cmp	r3, #127	; 0x7f
 8007206:	d8f0      	bhi.n	80071ea <SEGGER_SYSVIEW_Start+0xd2>
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	61fa      	str	r2, [r7, #28]
 800720e:	69ba      	ldr	r2, [r7, #24]
 8007210:	b2d2      	uxtb	r2, r2
 8007212:	701a      	strb	r2, [r3, #0]
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	2300      	movs	r3, #0
 800721e:	613b      	str	r3, [r7, #16]
 8007220:	e00b      	b.n	800723a <SEGGER_SYSVIEW_Start+0x122>
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	b2da      	uxtb	r2, r3
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	1c59      	adds	r1, r3, #1
 800722a:	6179      	str	r1, [r7, #20]
 800722c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007230:	b2d2      	uxtb	r2, r2
 8007232:	701a      	strb	r2, [r3, #0]
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	09db      	lsrs	r3, r3, #7
 8007238:	613b      	str	r3, [r7, #16]
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	2b7f      	cmp	r3, #127	; 0x7f
 800723e:	d8f0      	bhi.n	8007222 <SEGGER_SYSVIEW_Start+0x10a>
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	617a      	str	r2, [r7, #20]
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	b2d2      	uxtb	r2, r2
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007250:	2218      	movs	r2, #24
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7ff f81d 	bl	8006294 <_SendPacket>
      RECORD_END();
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007260:	4b08      	ldr	r3, [pc, #32]	; (8007284 <SEGGER_SYSVIEW_Start+0x16c>)
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007268:	4b06      	ldr	r3, [pc, #24]	; (8007284 <SEGGER_SYSVIEW_Start+0x16c>)
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800726e:	f000 f9eb 	bl	8007648 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007272:	f000 f9b1 	bl	80075d8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007276:	f000 fc8d 	bl	8007b94 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800727a:	bf00      	nop
 800727c:	3730      	adds	r7, #48	; 0x30
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	200143b0 	.word	0x200143b0
 8007288:	08007fb8 	.word	0x08007fb8
 800728c:	200143e0 	.word	0x200143e0

08007290 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007296:	f3ef 8311 	mrs	r3, BASEPRI
 800729a:	f04f 0120 	mov.w	r1, #32
 800729e:	f381 8811 	msr	BASEPRI, r1
 80072a2:	607b      	str	r3, [r7, #4]
 80072a4:	480b      	ldr	r0, [pc, #44]	; (80072d4 <SEGGER_SYSVIEW_Stop+0x44>)
 80072a6:	f7fe ff04 	bl	80060b2 <_PreparePacket>
 80072aa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80072ac:	4b0a      	ldr	r3, [pc, #40]	; (80072d8 <SEGGER_SYSVIEW_Stop+0x48>)
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d007      	beq.n	80072c4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80072b4:	220b      	movs	r2, #11
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6838      	ldr	r0, [r7, #0]
 80072ba:	f7fe ffeb 	bl	8006294 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80072be:	4b06      	ldr	r3, [pc, #24]	; (80072d8 <SEGGER_SYSVIEW_Stop+0x48>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f383 8811 	msr	BASEPRI, r3
}
 80072ca:	bf00      	nop
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	200143e0 	.word	0x200143e0
 80072d8:	200143b0 	.word	0x200143b0

080072dc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08c      	sub	sp, #48	; 0x30
 80072e0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80072e2:	f3ef 8311 	mrs	r3, BASEPRI
 80072e6:	f04f 0120 	mov.w	r1, #32
 80072ea:	f381 8811 	msr	BASEPRI, r1
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	4845      	ldr	r0, [pc, #276]	; (8007408 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80072f2:	f7fe fede 	bl	80060b2 <_PreparePacket>
 80072f6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007300:	4b42      	ldr	r3, [pc, #264]	; (800740c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	62bb      	str	r3, [r7, #40]	; 0x28
 8007306:	e00b      	b.n	8007320 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	b2da      	uxtb	r2, r3
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	1c59      	adds	r1, r3, #1
 8007310:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007312:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007316:	b2d2      	uxtb	r2, r2
 8007318:	701a      	strb	r2, [r3, #0]
 800731a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731c:	09db      	lsrs	r3, r3, #7
 800731e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007322:	2b7f      	cmp	r3, #127	; 0x7f
 8007324:	d8f0      	bhi.n	8007308 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800732c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800732e:	b2d2      	uxtb	r2, r2
 8007330:	701a      	strb	r2, [r3, #0]
 8007332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007334:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	627b      	str	r3, [r7, #36]	; 0x24
 800733a:	4b34      	ldr	r3, [pc, #208]	; (800740c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	623b      	str	r3, [r7, #32]
 8007340:	e00b      	b.n	800735a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	b2da      	uxtb	r2, r3
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	1c59      	adds	r1, r3, #1
 800734a:	6279      	str	r1, [r7, #36]	; 0x24
 800734c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007350:	b2d2      	uxtb	r2, r2
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	09db      	lsrs	r3, r3, #7
 8007358:	623b      	str	r3, [r7, #32]
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	2b7f      	cmp	r3, #127	; 0x7f
 800735e:	d8f0      	bhi.n	8007342 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	627a      	str	r2, [r7, #36]	; 0x24
 8007366:	6a3a      	ldr	r2, [r7, #32]
 8007368:	b2d2      	uxtb	r2, r2
 800736a:	701a      	strb	r2, [r3, #0]
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	61fb      	str	r3, [r7, #28]
 8007374:	4b25      	ldr	r3, [pc, #148]	; (800740c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	61bb      	str	r3, [r7, #24]
 800737a:	e00b      	b.n	8007394 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	b2da      	uxtb	r2, r3
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	1c59      	adds	r1, r3, #1
 8007384:	61f9      	str	r1, [r7, #28]
 8007386:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800738a:	b2d2      	uxtb	r2, r2
 800738c:	701a      	strb	r2, [r3, #0]
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	09db      	lsrs	r3, r3, #7
 8007392:	61bb      	str	r3, [r7, #24]
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	2b7f      	cmp	r3, #127	; 0x7f
 8007398:	d8f0      	bhi.n	800737c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	61fa      	str	r2, [r7, #28]
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	701a      	strb	r2, [r3, #0]
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	617b      	str	r3, [r7, #20]
 80073ae:	2300      	movs	r3, #0
 80073b0:	613b      	str	r3, [r7, #16]
 80073b2:	e00b      	b.n	80073cc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	1c59      	adds	r1, r3, #1
 80073bc:	6179      	str	r1, [r7, #20]
 80073be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073c2:	b2d2      	uxtb	r2, r2
 80073c4:	701a      	strb	r2, [r3, #0]
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	09db      	lsrs	r3, r3, #7
 80073ca:	613b      	str	r3, [r7, #16]
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	2b7f      	cmp	r3, #127	; 0x7f
 80073d0:	d8f0      	bhi.n	80073b4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	617a      	str	r2, [r7, #20]
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	b2d2      	uxtb	r2, r2
 80073dc:	701a      	strb	r2, [r3, #0]
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80073e2:	2218      	movs	r2, #24
 80073e4:	6879      	ldr	r1, [r7, #4]
 80073e6:	68b8      	ldr	r0, [r7, #8]
 80073e8:	f7fe ff54 	bl	8006294 <_SendPacket>
  RECORD_END();
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80073f2:	4b06      	ldr	r3, [pc, #24]	; (800740c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d002      	beq.n	8007400 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80073fa:	4b04      	ldr	r3, [pc, #16]	; (800740c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	4798      	blx	r3
  }
}
 8007400:	bf00      	nop
 8007402:	3730      	adds	r7, #48	; 0x30
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	200143e0 	.word	0x200143e0
 800740c:	200143b0 	.word	0x200143b0

08007410 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007410:	b580      	push	{r7, lr}
 8007412:	b092      	sub	sp, #72	; 0x48
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007418:	f3ef 8311 	mrs	r3, BASEPRI
 800741c:	f04f 0120 	mov.w	r1, #32
 8007420:	f381 8811 	msr	BASEPRI, r1
 8007424:	617b      	str	r3, [r7, #20]
 8007426:	486a      	ldr	r0, [pc, #424]	; (80075d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007428:	f7fe fe43 	bl	80060b2 <_PreparePacket>
 800742c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	647b      	str	r3, [r7, #68]	; 0x44
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	4b66      	ldr	r3, [pc, #408]	; (80075d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	643b      	str	r3, [r7, #64]	; 0x40
 8007442:	e00b      	b.n	800745c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007446:	b2da      	uxtb	r2, r3
 8007448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800744a:	1c59      	adds	r1, r3, #1
 800744c:	6479      	str	r1, [r7, #68]	; 0x44
 800744e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007452:	b2d2      	uxtb	r2, r2
 8007454:	701a      	strb	r2, [r3, #0]
 8007456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007458:	09db      	lsrs	r3, r3, #7
 800745a:	643b      	str	r3, [r7, #64]	; 0x40
 800745c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800745e:	2b7f      	cmp	r3, #127	; 0x7f
 8007460:	d8f0      	bhi.n	8007444 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007464:	1c5a      	adds	r2, r3, #1
 8007466:	647a      	str	r2, [r7, #68]	; 0x44
 8007468:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800746a:	b2d2      	uxtb	r2, r2
 800746c:	701a      	strb	r2, [r3, #0]
 800746e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007470:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	63bb      	str	r3, [r7, #56]	; 0x38
 800747c:	e00b      	b.n	8007496 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	b2da      	uxtb	r2, r3
 8007482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007484:	1c59      	adds	r1, r3, #1
 8007486:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007488:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800748c:	b2d2      	uxtb	r2, r2
 800748e:	701a      	strb	r2, [r3, #0]
 8007490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007492:	09db      	lsrs	r3, r3, #7
 8007494:	63bb      	str	r3, [r7, #56]	; 0x38
 8007496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007498:	2b7f      	cmp	r3, #127	; 0x7f
 800749a:	d8f0      	bhi.n	800747e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800749c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80074a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074a4:	b2d2      	uxtb	r2, r2
 80074a6:	701a      	strb	r2, [r3, #0]
 80074a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074aa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	2220      	movs	r2, #32
 80074b2:	4619      	mov	r1, r3
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f7fe fdc3 	bl	8006040 <_EncodeStr>
 80074ba:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80074bc:	2209      	movs	r2, #9
 80074be:	68f9      	ldr	r1, [r7, #12]
 80074c0:	6938      	ldr	r0, [r7, #16]
 80074c2:	f7fe fee7 	bl	8006294 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	637b      	str	r3, [r7, #52]	; 0x34
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	4b40      	ldr	r3, [pc, #256]	; (80075d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	633b      	str	r3, [r7, #48]	; 0x30
 80074da:	e00b      	b.n	80074f4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	b2da      	uxtb	r2, r3
 80074e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e2:	1c59      	adds	r1, r3, #1
 80074e4:	6379      	str	r1, [r7, #52]	; 0x34
 80074e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	701a      	strb	r2, [r3, #0]
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	09db      	lsrs	r3, r3, #7
 80074f2:	633b      	str	r3, [r7, #48]	; 0x30
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	2b7f      	cmp	r3, #127	; 0x7f
 80074f8:	d8f0      	bhi.n	80074dc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80074fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074fc:	1c5a      	adds	r2, r3, #1
 80074fe:	637a      	str	r2, [r7, #52]	; 0x34
 8007500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007502:	b2d2      	uxtb	r2, r2
 8007504:	701a      	strb	r2, [r3, #0]
 8007506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007508:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	62bb      	str	r3, [r7, #40]	; 0x28
 8007514:	e00b      	b.n	800752e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007518:	b2da      	uxtb	r2, r3
 800751a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751c:	1c59      	adds	r1, r3, #1
 800751e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007520:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007524:	b2d2      	uxtb	r2, r2
 8007526:	701a      	strb	r2, [r3, #0]
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	09db      	lsrs	r3, r3, #7
 800752c:	62bb      	str	r3, [r7, #40]	; 0x28
 800752e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007530:	2b7f      	cmp	r3, #127	; 0x7f
 8007532:	d8f0      	bhi.n	8007516 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007536:	1c5a      	adds	r2, r3, #1
 8007538:	62fa      	str	r2, [r7, #44]	; 0x2c
 800753a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800753c:	b2d2      	uxtb	r2, r2
 800753e:	701a      	strb	r2, [r3, #0]
 8007540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007542:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	627b      	str	r3, [r7, #36]	; 0x24
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	623b      	str	r3, [r7, #32]
 800754e:	e00b      	b.n	8007568 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	b2da      	uxtb	r2, r3
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	1c59      	adds	r1, r3, #1
 8007558:	6279      	str	r1, [r7, #36]	; 0x24
 800755a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800755e:	b2d2      	uxtb	r2, r2
 8007560:	701a      	strb	r2, [r3, #0]
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	09db      	lsrs	r3, r3, #7
 8007566:	623b      	str	r3, [r7, #32]
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	2b7f      	cmp	r3, #127	; 0x7f
 800756c:	d8f0      	bhi.n	8007550 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	627a      	str	r2, [r7, #36]	; 0x24
 8007574:	6a3a      	ldr	r2, [r7, #32]
 8007576:	b2d2      	uxtb	r2, r2
 8007578:	701a      	strb	r2, [r3, #0]
 800757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	61fb      	str	r3, [r7, #28]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	61bb      	str	r3, [r7, #24]
 8007588:	e00b      	b.n	80075a2 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	b2da      	uxtb	r2, r3
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	1c59      	adds	r1, r3, #1
 8007592:	61f9      	str	r1, [r7, #28]
 8007594:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007598:	b2d2      	uxtb	r2, r2
 800759a:	701a      	strb	r2, [r3, #0]
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	09db      	lsrs	r3, r3, #7
 80075a0:	61bb      	str	r3, [r7, #24]
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	2b7f      	cmp	r3, #127	; 0x7f
 80075a6:	d8f0      	bhi.n	800758a <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	61fa      	str	r2, [r7, #28]
 80075ae:	69ba      	ldr	r2, [r7, #24]
 80075b0:	b2d2      	uxtb	r2, r2
 80075b2:	701a      	strb	r2, [r3, #0]
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80075b8:	2215      	movs	r2, #21
 80075ba:	68f9      	ldr	r1, [r7, #12]
 80075bc:	6938      	ldr	r0, [r7, #16]
 80075be:	f7fe fe69 	bl	8006294 <_SendPacket>
  RECORD_END();
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f383 8811 	msr	BASEPRI, r3
}
 80075c8:	bf00      	nop
 80075ca:	3748      	adds	r7, #72	; 0x48
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	200143e0 	.word	0x200143e0
 80075d4:	200143b0 	.word	0x200143b0

080075d8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80075dc:	4b07      	ldr	r3, [pc, #28]	; (80075fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80075de:	6a1b      	ldr	r3, [r3, #32]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d008      	beq.n	80075f6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80075e4:	4b05      	ldr	r3, [pc, #20]	; (80075fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80075e6:	6a1b      	ldr	r3, [r3, #32]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80075ee:	4b03      	ldr	r3, [pc, #12]	; (80075fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	4798      	blx	r3
  }
}
 80075f6:	bf00      	nop
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	200143b0 	.word	0x200143b0

08007600 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007608:	f3ef 8311 	mrs	r3, BASEPRI
 800760c:	f04f 0120 	mov.w	r1, #32
 8007610:	f381 8811 	msr	BASEPRI, r1
 8007614:	617b      	str	r3, [r7, #20]
 8007616:	480b      	ldr	r0, [pc, #44]	; (8007644 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007618:	f7fe fd4b 	bl	80060b2 <_PreparePacket>
 800761c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800761e:	2280      	movs	r2, #128	; 0x80
 8007620:	6879      	ldr	r1, [r7, #4]
 8007622:	6938      	ldr	r0, [r7, #16]
 8007624:	f7fe fd0c 	bl	8006040 <_EncodeStr>
 8007628:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800762a:	220e      	movs	r2, #14
 800762c:	68f9      	ldr	r1, [r7, #12]
 800762e:	6938      	ldr	r0, [r7, #16]
 8007630:	f7fe fe30 	bl	8006294 <_SendPacket>
  RECORD_END();
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f383 8811 	msr	BASEPRI, r3
}
 800763a:	bf00      	nop
 800763c:	3718      	adds	r7, #24
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	200143e0 	.word	0x200143e0

08007648 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007648:	b590      	push	{r4, r7, lr}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800764e:	4b15      	ldr	r3, [pc, #84]	; (80076a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d01a      	beq.n	800768c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007656:	4b13      	ldr	r3, [pc, #76]	; (80076a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d015      	beq.n	800768c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007660:	4b10      	ldr	r3, [pc, #64]	; (80076a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007662:	6a1b      	ldr	r3, [r3, #32]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4798      	blx	r3
 8007668:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800766c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800766e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007672:	f04f 0200 	mov.w	r2, #0
 8007676:	f04f 0300 	mov.w	r3, #0
 800767a:	000a      	movs	r2, r1
 800767c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800767e:	4613      	mov	r3, r2
 8007680:	461a      	mov	r2, r3
 8007682:	4621      	mov	r1, r4
 8007684:	200d      	movs	r0, #13
 8007686:	f7ff fbe5 	bl	8006e54 <SEGGER_SYSVIEW_RecordU32x2>
 800768a:	e006      	b.n	800769a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800768c:	4b06      	ldr	r3, [pc, #24]	; (80076a8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4619      	mov	r1, r3
 8007692:	200c      	movs	r0, #12
 8007694:	f7ff fba2 	bl	8006ddc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007698:	bf00      	nop
 800769a:	bf00      	nop
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd90      	pop	{r4, r7, pc}
 80076a2:	bf00      	nop
 80076a4:	200143b0 	.word	0x200143b0
 80076a8:	e0001004 	.word	0xe0001004

080076ac <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80076b2:	f3ef 8311 	mrs	r3, BASEPRI
 80076b6:	f04f 0120 	mov.w	r1, #32
 80076ba:	f381 8811 	msr	BASEPRI, r1
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	4819      	ldr	r0, [pc, #100]	; (8007728 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80076c2:	f7fe fcf6 	bl	80060b2 <_PreparePacket>
 80076c6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80076cc:	4b17      	ldr	r3, [pc, #92]	; (800772c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	617b      	str	r3, [r7, #20]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	613b      	str	r3, [r7, #16]
 80076de:	e00b      	b.n	80076f8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	b2da      	uxtb	r2, r3
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	1c59      	adds	r1, r3, #1
 80076e8:	6179      	str	r1, [r7, #20]
 80076ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	09db      	lsrs	r3, r3, #7
 80076f6:	613b      	str	r3, [r7, #16]
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	2b7f      	cmp	r3, #127	; 0x7f
 80076fc:	d8f0      	bhi.n	80076e0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	617a      	str	r2, [r7, #20]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	b2d2      	uxtb	r2, r2
 8007708:	701a      	strb	r2, [r3, #0]
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800770e:	2202      	movs	r2, #2
 8007710:	6879      	ldr	r1, [r7, #4]
 8007712:	68b8      	ldr	r0, [r7, #8]
 8007714:	f7fe fdbe 	bl	8006294 <_SendPacket>
  RECORD_END();
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f383 8811 	msr	BASEPRI, r3
}
 800771e:	bf00      	nop
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	200143e0 	.word	0x200143e0
 800772c:	e000ed04 	.word	0xe000ed04

08007730 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007736:	f3ef 8311 	mrs	r3, BASEPRI
 800773a:	f04f 0120 	mov.w	r1, #32
 800773e:	f381 8811 	msr	BASEPRI, r1
 8007742:	607b      	str	r3, [r7, #4]
 8007744:	4807      	ldr	r0, [pc, #28]	; (8007764 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007746:	f7fe fcb4 	bl	80060b2 <_PreparePacket>
 800774a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800774c:	2203      	movs	r2, #3
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6838      	ldr	r0, [r7, #0]
 8007752:	f7fe fd9f 	bl	8006294 <_SendPacket>
  RECORD_END();
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f383 8811 	msr	BASEPRI, r3
}
 800775c:	bf00      	nop
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	200143e0 	.word	0x200143e0

08007768 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800776e:	f3ef 8311 	mrs	r3, BASEPRI
 8007772:	f04f 0120 	mov.w	r1, #32
 8007776:	f381 8811 	msr	BASEPRI, r1
 800777a:	607b      	str	r3, [r7, #4]
 800777c:	4807      	ldr	r0, [pc, #28]	; (800779c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800777e:	f7fe fc98 	bl	80060b2 <_PreparePacket>
 8007782:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007784:	2212      	movs	r2, #18
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6838      	ldr	r0, [r7, #0]
 800778a:	f7fe fd83 	bl	8006294 <_SendPacket>
  RECORD_END();
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f383 8811 	msr	BASEPRI, r3
}
 8007794:	bf00      	nop
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	200143e0 	.word	0x200143e0

080077a0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80077a6:	f3ef 8311 	mrs	r3, BASEPRI
 80077aa:	f04f 0120 	mov.w	r1, #32
 80077ae:	f381 8811 	msr	BASEPRI, r1
 80077b2:	607b      	str	r3, [r7, #4]
 80077b4:	4807      	ldr	r0, [pc, #28]	; (80077d4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80077b6:	f7fe fc7c 	bl	80060b2 <_PreparePacket>
 80077ba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80077bc:	2211      	movs	r2, #17
 80077be:	6839      	ldr	r1, [r7, #0]
 80077c0:	6838      	ldr	r0, [r7, #0]
 80077c2:	f7fe fd67 	bl	8006294 <_SendPacket>
  RECORD_END();
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f383 8811 	msr	BASEPRI, r3
}
 80077cc:	bf00      	nop
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	200143e0 	.word	0x200143e0

080077d8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80077d8:	b580      	push	{r7, lr}
 80077da:	b088      	sub	sp, #32
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80077e0:	f3ef 8311 	mrs	r3, BASEPRI
 80077e4:	f04f 0120 	mov.w	r1, #32
 80077e8:	f381 8811 	msr	BASEPRI, r1
 80077ec:	617b      	str	r3, [r7, #20]
 80077ee:	4819      	ldr	r0, [pc, #100]	; (8007854 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80077f0:	f7fe fc5f 	bl	80060b2 <_PreparePacket>
 80077f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80077fa:	4b17      	ldr	r3, [pc, #92]	; (8007858 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	61fb      	str	r3, [r7, #28]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	61bb      	str	r3, [r7, #24]
 800780c:	e00b      	b.n	8007826 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	b2da      	uxtb	r2, r3
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	1c59      	adds	r1, r3, #1
 8007816:	61f9      	str	r1, [r7, #28]
 8007818:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800781c:	b2d2      	uxtb	r2, r2
 800781e:	701a      	strb	r2, [r3, #0]
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	09db      	lsrs	r3, r3, #7
 8007824:	61bb      	str	r3, [r7, #24]
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	2b7f      	cmp	r3, #127	; 0x7f
 800782a:	d8f0      	bhi.n	800780e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	1c5a      	adds	r2, r3, #1
 8007830:	61fa      	str	r2, [r7, #28]
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	b2d2      	uxtb	r2, r2
 8007836:	701a      	strb	r2, [r3, #0]
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800783c:	2208      	movs	r2, #8
 800783e:	68f9      	ldr	r1, [r7, #12]
 8007840:	6938      	ldr	r0, [r7, #16]
 8007842:	f7fe fd27 	bl	8006294 <_SendPacket>
  RECORD_END();
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f383 8811 	msr	BASEPRI, r3
}
 800784c:	bf00      	nop
 800784e:	3720      	adds	r7, #32
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	200143e0 	.word	0x200143e0
 8007858:	200143b0 	.word	0x200143b0

0800785c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800785c:	b580      	push	{r7, lr}
 800785e:	b088      	sub	sp, #32
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007864:	f3ef 8311 	mrs	r3, BASEPRI
 8007868:	f04f 0120 	mov.w	r1, #32
 800786c:	f381 8811 	msr	BASEPRI, r1
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	4819      	ldr	r0, [pc, #100]	; (80078d8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007874:	f7fe fc1d 	bl	80060b2 <_PreparePacket>
 8007878:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800787e:	4b17      	ldr	r3, [pc, #92]	; (80078dc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	61fb      	str	r3, [r7, #28]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	61bb      	str	r3, [r7, #24]
 8007890:	e00b      	b.n	80078aa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	b2da      	uxtb	r2, r3
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	1c59      	adds	r1, r3, #1
 800789a:	61f9      	str	r1, [r7, #28]
 800789c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078a0:	b2d2      	uxtb	r2, r2
 80078a2:	701a      	strb	r2, [r3, #0]
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	09db      	lsrs	r3, r3, #7
 80078a8:	61bb      	str	r3, [r7, #24]
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	2b7f      	cmp	r3, #127	; 0x7f
 80078ae:	d8f0      	bhi.n	8007892 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	1c5a      	adds	r2, r3, #1
 80078b4:	61fa      	str	r2, [r7, #28]
 80078b6:	69ba      	ldr	r2, [r7, #24]
 80078b8:	b2d2      	uxtb	r2, r2
 80078ba:	701a      	strb	r2, [r3, #0]
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80078c0:	2204      	movs	r2, #4
 80078c2:	68f9      	ldr	r1, [r7, #12]
 80078c4:	6938      	ldr	r0, [r7, #16]
 80078c6:	f7fe fce5 	bl	8006294 <_SendPacket>
  RECORD_END();
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f383 8811 	msr	BASEPRI, r3
}
 80078d0:	bf00      	nop
 80078d2:	3720      	adds	r7, #32
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	200143e0 	.word	0x200143e0
 80078dc:	200143b0 	.word	0x200143b0

080078e0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b088      	sub	sp, #32
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80078e8:	f3ef 8311 	mrs	r3, BASEPRI
 80078ec:	f04f 0120 	mov.w	r1, #32
 80078f0:	f381 8811 	msr	BASEPRI, r1
 80078f4:	617b      	str	r3, [r7, #20]
 80078f6:	4819      	ldr	r0, [pc, #100]	; (800795c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80078f8:	f7fe fbdb 	bl	80060b2 <_PreparePacket>
 80078fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007902:	4b17      	ldr	r3, [pc, #92]	; (8007960 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	61fb      	str	r3, [r7, #28]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	61bb      	str	r3, [r7, #24]
 8007914:	e00b      	b.n	800792e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	b2da      	uxtb	r2, r3
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	1c59      	adds	r1, r3, #1
 800791e:	61f9      	str	r1, [r7, #28]
 8007920:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007924:	b2d2      	uxtb	r2, r2
 8007926:	701a      	strb	r2, [r3, #0]
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	09db      	lsrs	r3, r3, #7
 800792c:	61bb      	str	r3, [r7, #24]
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	2b7f      	cmp	r3, #127	; 0x7f
 8007932:	d8f0      	bhi.n	8007916 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	1c5a      	adds	r2, r3, #1
 8007938:	61fa      	str	r2, [r7, #28]
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	b2d2      	uxtb	r2, r2
 800793e:	701a      	strb	r2, [r3, #0]
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007944:	2206      	movs	r2, #6
 8007946:	68f9      	ldr	r1, [r7, #12]
 8007948:	6938      	ldr	r0, [r7, #16]
 800794a:	f7fe fca3 	bl	8006294 <_SendPacket>
  RECORD_END();
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f383 8811 	msr	BASEPRI, r3
}
 8007954:	bf00      	nop
 8007956:	3720      	adds	r7, #32
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	200143e0 	.word	0x200143e0
 8007960:	200143b0 	.word	0x200143b0

08007964 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007964:	b580      	push	{r7, lr}
 8007966:	b08a      	sub	sp, #40	; 0x28
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800796e:	f3ef 8311 	mrs	r3, BASEPRI
 8007972:	f04f 0120 	mov.w	r1, #32
 8007976:	f381 8811 	msr	BASEPRI, r1
 800797a:	617b      	str	r3, [r7, #20]
 800797c:	4827      	ldr	r0, [pc, #156]	; (8007a1c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800797e:	f7fe fb98 	bl	80060b2 <_PreparePacket>
 8007982:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007988:	4b25      	ldr	r3, [pc, #148]	; (8007a20 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	627b      	str	r3, [r7, #36]	; 0x24
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	623b      	str	r3, [r7, #32]
 800799a:	e00b      	b.n	80079b4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800799c:	6a3b      	ldr	r3, [r7, #32]
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	1c59      	adds	r1, r3, #1
 80079a4:	6279      	str	r1, [r7, #36]	; 0x24
 80079a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079aa:	b2d2      	uxtb	r2, r2
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	09db      	lsrs	r3, r3, #7
 80079b2:	623b      	str	r3, [r7, #32]
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	2b7f      	cmp	r3, #127	; 0x7f
 80079b8:	d8f0      	bhi.n	800799c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	627a      	str	r2, [r7, #36]	; 0x24
 80079c0:	6a3a      	ldr	r2, [r7, #32]
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	701a      	strb	r2, [r3, #0]
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	61fb      	str	r3, [r7, #28]
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	61bb      	str	r3, [r7, #24]
 80079d2:	e00b      	b.n	80079ec <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	1c59      	adds	r1, r3, #1
 80079dc:	61f9      	str	r1, [r7, #28]
 80079de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079e2:	b2d2      	uxtb	r2, r2
 80079e4:	701a      	strb	r2, [r3, #0]
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	09db      	lsrs	r3, r3, #7
 80079ea:	61bb      	str	r3, [r7, #24]
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	2b7f      	cmp	r3, #127	; 0x7f
 80079f0:	d8f0      	bhi.n	80079d4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	1c5a      	adds	r2, r3, #1
 80079f6:	61fa      	str	r2, [r7, #28]
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	b2d2      	uxtb	r2, r2
 80079fc:	701a      	strb	r2, [r3, #0]
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007a02:	2207      	movs	r2, #7
 8007a04:	68f9      	ldr	r1, [r7, #12]
 8007a06:	6938      	ldr	r0, [r7, #16]
 8007a08:	f7fe fc44 	bl	8006294 <_SendPacket>
  RECORD_END();
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	f383 8811 	msr	BASEPRI, r3
}
 8007a12:	bf00      	nop
 8007a14:	3728      	adds	r7, #40	; 0x28
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	200143e0 	.word	0x200143e0
 8007a20:	200143b0 	.word	0x200143b0

08007a24 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007a2c:	4b04      	ldr	r3, [pc, #16]	; (8007a40 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	1ad3      	subs	r3, r2, r3
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	200143b0 	.word	0x200143b0

08007a44 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b08c      	sub	sp, #48	; 0x30
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007a4e:	4b40      	ldr	r3, [pc, #256]	; (8007b50 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d077      	beq.n	8007b46 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8007a56:	4b3e      	ldr	r3, [pc, #248]	; (8007b50 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a60:	e008      	b.n	8007a74 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d007      	beq.n	8007a7e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a70:	3301      	adds	r3, #1
 8007a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a74:	79fb      	ldrb	r3, [r7, #7]
 8007a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d3f2      	bcc.n	8007a62 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007a7c:	e000      	b.n	8007a80 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007a7e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d055      	beq.n	8007b32 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a86:	f3ef 8311 	mrs	r3, BASEPRI
 8007a8a:	f04f 0120 	mov.w	r1, #32
 8007a8e:	f381 8811 	msr	BASEPRI, r1
 8007a92:	617b      	str	r3, [r7, #20]
 8007a94:	482f      	ldr	r0, [pc, #188]	; (8007b54 <SEGGER_SYSVIEW_SendModule+0x110>)
 8007a96:	f7fe fb0c 	bl	80060b2 <_PreparePacket>
 8007a9a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8007aa4:	79fb      	ldrb	r3, [r7, #7]
 8007aa6:	623b      	str	r3, [r7, #32]
 8007aa8:	e00b      	b.n	8007ac2 <SEGGER_SYSVIEW_SendModule+0x7e>
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab0:	1c59      	adds	r1, r3, #1
 8007ab2:	6279      	str	r1, [r7, #36]	; 0x24
 8007ab4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ab8:	b2d2      	uxtb	r2, r2
 8007aba:	701a      	strb	r2, [r3, #0]
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	09db      	lsrs	r3, r3, #7
 8007ac0:	623b      	str	r3, [r7, #32]
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	2b7f      	cmp	r3, #127	; 0x7f
 8007ac6:	d8f0      	bhi.n	8007aaa <SEGGER_SYSVIEW_SendModule+0x66>
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	1c5a      	adds	r2, r3, #1
 8007acc:	627a      	str	r2, [r7, #36]	; 0x24
 8007ace:	6a3a      	ldr	r2, [r7, #32]
 8007ad0:	b2d2      	uxtb	r2, r2
 8007ad2:	701a      	strb	r2, [r3, #0]
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	61fb      	str	r3, [r7, #28]
 8007adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	61bb      	str	r3, [r7, #24]
 8007ae2:	e00b      	b.n	8007afc <SEGGER_SYSVIEW_SendModule+0xb8>
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	1c59      	adds	r1, r3, #1
 8007aec:	61f9      	str	r1, [r7, #28]
 8007aee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007af2:	b2d2      	uxtb	r2, r2
 8007af4:	701a      	strb	r2, [r3, #0]
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	09db      	lsrs	r3, r3, #7
 8007afa:	61bb      	str	r3, [r7, #24]
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	2b7f      	cmp	r3, #127	; 0x7f
 8007b00:	d8f0      	bhi.n	8007ae4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	1c5a      	adds	r2, r3, #1
 8007b06:	61fa      	str	r2, [r7, #28]
 8007b08:	69ba      	ldr	r2, [r7, #24]
 8007b0a:	b2d2      	uxtb	r2, r2
 8007b0c:	701a      	strb	r2, [r3, #0]
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2280      	movs	r2, #128	; 0x80
 8007b18:	4619      	mov	r1, r3
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f7fe fa90 	bl	8006040 <_EncodeStr>
 8007b20:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007b22:	2216      	movs	r2, #22
 8007b24:	68f9      	ldr	r1, [r7, #12]
 8007b26:	6938      	ldr	r0, [r7, #16]
 8007b28:	f7fe fbb4 	bl	8006294 <_SendPacket>
      RECORD_END();
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8007b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d006      	beq.n	8007b46 <SEGGER_SYSVIEW_SendModule+0x102>
 8007b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d002      	beq.n	8007b46 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	4798      	blx	r3
    }
  }
}
 8007b46:	bf00      	nop
 8007b48:	3730      	adds	r7, #48	; 0x30
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	200143d8 	.word	0x200143d8
 8007b54:	200143e0 	.word	0x200143e0

08007b58 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007b5e:	4b0c      	ldr	r3, [pc, #48]	; (8007b90 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00f      	beq.n	8007b86 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007b66:	4b0a      	ldr	r3, [pc, #40]	; (8007b90 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d002      	beq.n	8007b7a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1f2      	bne.n	8007b6c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007b86:	bf00      	nop
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	200143d8 	.word	0x200143d8

08007b94 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007b9a:	f3ef 8311 	mrs	r3, BASEPRI
 8007b9e:	f04f 0120 	mov.w	r1, #32
 8007ba2:	f381 8811 	msr	BASEPRI, r1
 8007ba6:	60fb      	str	r3, [r7, #12]
 8007ba8:	4817      	ldr	r0, [pc, #92]	; (8007c08 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007baa:	f7fe fa82 	bl	80060b2 <_PreparePacket>
 8007bae:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	4b14      	ldr	r3, [pc, #80]	; (8007c0c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	613b      	str	r3, [r7, #16]
 8007bbe:	e00b      	b.n	8007bd8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	b2da      	uxtb	r2, r3
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	1c59      	adds	r1, r3, #1
 8007bc8:	6179      	str	r1, [r7, #20]
 8007bca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007bce:	b2d2      	uxtb	r2, r2
 8007bd0:	701a      	strb	r2, [r3, #0]
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	09db      	lsrs	r3, r3, #7
 8007bd6:	613b      	str	r3, [r7, #16]
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	2b7f      	cmp	r3, #127	; 0x7f
 8007bdc:	d8f0      	bhi.n	8007bc0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	1c5a      	adds	r2, r3, #1
 8007be2:	617a      	str	r2, [r7, #20]
 8007be4:	693a      	ldr	r2, [r7, #16]
 8007be6:	b2d2      	uxtb	r2, r2
 8007be8:	701a      	strb	r2, [r3, #0]
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007bee:	221b      	movs	r2, #27
 8007bf0:	6879      	ldr	r1, [r7, #4]
 8007bf2:	68b8      	ldr	r0, [r7, #8]
 8007bf4:	f7fe fb4e 	bl	8006294 <_SendPacket>
  RECORD_END();
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f383 8811 	msr	BASEPRI, r3
}
 8007bfe:	bf00      	nop
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	200143e0 	.word	0x200143e0
 8007c0c:	200143dc 	.word	0x200143dc

08007c10 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007c10:	b40f      	push	{r0, r1, r2, r3}
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b082      	sub	sp, #8
 8007c16:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007c18:	f107 0314 	add.w	r3, r7, #20
 8007c1c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007c1e:	1d3b      	adds	r3, r7, #4
 8007c20:	461a      	mov	r2, r3
 8007c22:	2100      	movs	r1, #0
 8007c24:	6938      	ldr	r0, [r7, #16]
 8007c26:	f7fe fe47 	bl	80068b8 <_VPrintTarget>
  va_end(ParamList);
}
 8007c2a:	bf00      	nop
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c34:	b004      	add	sp, #16
 8007c36:	4770      	bx	lr

08007c38 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08a      	sub	sp, #40	; 0x28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007c40:	f3ef 8311 	mrs	r3, BASEPRI
 8007c44:	f04f 0120 	mov.w	r1, #32
 8007c48:	f381 8811 	msr	BASEPRI, r1
 8007c4c:	617b      	str	r3, [r7, #20]
 8007c4e:	4827      	ldr	r0, [pc, #156]	; (8007cec <SEGGER_SYSVIEW_Warn+0xb4>)
 8007c50:	f7fe fa2f 	bl	80060b2 <_PreparePacket>
 8007c54:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007c56:	2280      	movs	r2, #128	; 0x80
 8007c58:	6879      	ldr	r1, [r7, #4]
 8007c5a:	6938      	ldr	r0, [r7, #16]
 8007c5c:	f7fe f9f0 	bl	8006040 <_EncodeStr>
 8007c60:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	627b      	str	r3, [r7, #36]	; 0x24
 8007c66:	2301      	movs	r3, #1
 8007c68:	623b      	str	r3, [r7, #32]
 8007c6a:	e00b      	b.n	8007c84 <SEGGER_SYSVIEW_Warn+0x4c>
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
 8007c6e:	b2da      	uxtb	r2, r3
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	1c59      	adds	r1, r3, #1
 8007c74:	6279      	str	r1, [r7, #36]	; 0x24
 8007c76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c7a:	b2d2      	uxtb	r2, r2
 8007c7c:	701a      	strb	r2, [r3, #0]
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	09db      	lsrs	r3, r3, #7
 8007c82:	623b      	str	r3, [r7, #32]
 8007c84:	6a3b      	ldr	r3, [r7, #32]
 8007c86:	2b7f      	cmp	r3, #127	; 0x7f
 8007c88:	d8f0      	bhi.n	8007c6c <SEGGER_SYSVIEW_Warn+0x34>
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	1c5a      	adds	r2, r3, #1
 8007c8e:	627a      	str	r2, [r7, #36]	; 0x24
 8007c90:	6a3a      	ldr	r2, [r7, #32]
 8007c92:	b2d2      	uxtb	r2, r2
 8007c94:	701a      	strb	r2, [r3, #0]
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	61fb      	str	r3, [r7, #28]
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	61bb      	str	r3, [r7, #24]
 8007ca2:	e00b      	b.n	8007cbc <SEGGER_SYSVIEW_Warn+0x84>
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	1c59      	adds	r1, r3, #1
 8007cac:	61f9      	str	r1, [r7, #28]
 8007cae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	701a      	strb	r2, [r3, #0]
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	09db      	lsrs	r3, r3, #7
 8007cba:	61bb      	str	r3, [r7, #24]
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	2b7f      	cmp	r3, #127	; 0x7f
 8007cc0:	d8f0      	bhi.n	8007ca4 <SEGGER_SYSVIEW_Warn+0x6c>
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	1c5a      	adds	r2, r3, #1
 8007cc6:	61fa      	str	r2, [r7, #28]
 8007cc8:	69ba      	ldr	r2, [r7, #24]
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	701a      	strb	r2, [r3, #0]
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007cd2:	221a      	movs	r2, #26
 8007cd4:	68f9      	ldr	r1, [r7, #12]
 8007cd6:	6938      	ldr	r0, [r7, #16]
 8007cd8:	f7fe fadc 	bl	8006294 <_SendPacket>
  RECORD_END();
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f383 8811 	msr	BASEPRI, r3
}
 8007ce2:	bf00      	nop
 8007ce4:	3728      	adds	r7, #40	; 0x28
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	200143e0 	.word	0x200143e0

08007cf0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007cf4:	4b13      	ldr	r3, [pc, #76]	; (8007d44 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007cf6:	7e1b      	ldrb	r3, [r3, #24]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4a13      	ldr	r2, [pc, #76]	; (8007d48 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	005b      	lsls	r3, r3, #1
 8007d00:	440b      	add	r3, r1
 8007d02:	00db      	lsls	r3, r3, #3
 8007d04:	4413      	add	r3, r2
 8007d06:	336c      	adds	r3, #108	; 0x6c
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	4b0e      	ldr	r3, [pc, #56]	; (8007d44 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007d0c:	7e1b      	ldrb	r3, [r3, #24]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	490d      	ldr	r1, [pc, #52]	; (8007d48 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007d12:	4603      	mov	r3, r0
 8007d14:	005b      	lsls	r3, r3, #1
 8007d16:	4403      	add	r3, r0
 8007d18:	00db      	lsls	r3, r3, #3
 8007d1a:	440b      	add	r3, r1
 8007d1c:	3370      	adds	r3, #112	; 0x70
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d00b      	beq.n	8007d3c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007d24:	4b07      	ldr	r3, [pc, #28]	; (8007d44 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007d26:	789b      	ldrb	r3, [r3, #2]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d107      	bne.n	8007d3c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007d2c:	4b05      	ldr	r3, [pc, #20]	; (8007d44 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007d2e:	2201      	movs	r2, #1
 8007d30:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007d32:	f7fe f9cb 	bl	80060cc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007d36:	4b03      	ldr	r3, [pc, #12]	; (8007d44 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007d3c:	4b01      	ldr	r3, [pc, #4]	; (8007d44 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	200143b0 	.word	0x200143b0
 8007d48:	20012ef0 	.word	0x20012ef0

08007d4c <__libc_init_array>:
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	4d0d      	ldr	r5, [pc, #52]	; (8007d84 <__libc_init_array+0x38>)
 8007d50:	4c0d      	ldr	r4, [pc, #52]	; (8007d88 <__libc_init_array+0x3c>)
 8007d52:	1b64      	subs	r4, r4, r5
 8007d54:	10a4      	asrs	r4, r4, #2
 8007d56:	2600      	movs	r6, #0
 8007d58:	42a6      	cmp	r6, r4
 8007d5a:	d109      	bne.n	8007d70 <__libc_init_array+0x24>
 8007d5c:	4d0b      	ldr	r5, [pc, #44]	; (8007d8c <__libc_init_array+0x40>)
 8007d5e:	4c0c      	ldr	r4, [pc, #48]	; (8007d90 <__libc_init_array+0x44>)
 8007d60:	f000 f83e 	bl	8007de0 <_init>
 8007d64:	1b64      	subs	r4, r4, r5
 8007d66:	10a4      	asrs	r4, r4, #2
 8007d68:	2600      	movs	r6, #0
 8007d6a:	42a6      	cmp	r6, r4
 8007d6c:	d105      	bne.n	8007d7a <__libc_init_array+0x2e>
 8007d6e:	bd70      	pop	{r4, r5, r6, pc}
 8007d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d74:	4798      	blx	r3
 8007d76:	3601      	adds	r6, #1
 8007d78:	e7ee      	b.n	8007d58 <__libc_init_array+0xc>
 8007d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d7e:	4798      	blx	r3
 8007d80:	3601      	adds	r6, #1
 8007d82:	e7f2      	b.n	8007d6a <__libc_init_array+0x1e>
 8007d84:	08007fdc 	.word	0x08007fdc
 8007d88:	08007fdc 	.word	0x08007fdc
 8007d8c:	08007fdc 	.word	0x08007fdc
 8007d90:	08007fe0 	.word	0x08007fe0

08007d94 <memcmp>:
 8007d94:	b510      	push	{r4, lr}
 8007d96:	3901      	subs	r1, #1
 8007d98:	4402      	add	r2, r0
 8007d9a:	4290      	cmp	r0, r2
 8007d9c:	d101      	bne.n	8007da2 <memcmp+0xe>
 8007d9e:	2000      	movs	r0, #0
 8007da0:	e005      	b.n	8007dae <memcmp+0x1a>
 8007da2:	7803      	ldrb	r3, [r0, #0]
 8007da4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007da8:	42a3      	cmp	r3, r4
 8007daa:	d001      	beq.n	8007db0 <memcmp+0x1c>
 8007dac:	1b18      	subs	r0, r3, r4
 8007dae:	bd10      	pop	{r4, pc}
 8007db0:	3001      	adds	r0, #1
 8007db2:	e7f2      	b.n	8007d9a <memcmp+0x6>

08007db4 <memcpy>:
 8007db4:	440a      	add	r2, r1
 8007db6:	4291      	cmp	r1, r2
 8007db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dbc:	d100      	bne.n	8007dc0 <memcpy+0xc>
 8007dbe:	4770      	bx	lr
 8007dc0:	b510      	push	{r4, lr}
 8007dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dca:	4291      	cmp	r1, r2
 8007dcc:	d1f9      	bne.n	8007dc2 <memcpy+0xe>
 8007dce:	bd10      	pop	{r4, pc}

08007dd0 <memset>:
 8007dd0:	4402      	add	r2, r0
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d100      	bne.n	8007dda <memset+0xa>
 8007dd8:	4770      	bx	lr
 8007dda:	f803 1b01 	strb.w	r1, [r3], #1
 8007dde:	e7f9      	b.n	8007dd4 <memset+0x4>

08007de0 <_init>:
 8007de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de2:	bf00      	nop
 8007de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de6:	bc08      	pop	{r3}
 8007de8:	469e      	mov	lr, r3
 8007dea:	4770      	bx	lr

08007dec <_fini>:
 8007dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dee:	bf00      	nop
 8007df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007df2:	bc08      	pop	{r3}
 8007df4:	469e      	mov	lr, r3
 8007df6:	4770      	bx	lr
